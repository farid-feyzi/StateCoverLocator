id	line	column	filename	methodname	varname	vartype	else	return	right
3638	24	4	AVLTree.java	insert	element	T	0	DEF	$ != null
3639	25	6	AVLTree.java	insert	THIS	AVLTree	1	DEF	$.top == null
3640	39	4	AVLTree.java	delete	element	T	0	RET	$ != null
6469	40	6	AVLTree.java	delete	node	Node	0	NIL-FOR	$ != null
3641	41	8	AVLTree.java	delete	THIS	AVLTree	1	RET	node.$.element == element
3641	41	8	AVLTree.java	delete	node	Node	1	RET	$.element == element
3641	41	8	AVLTree.java	delete	element	T	1	RET	node.element == $
3642	46	10	AVLTree.java	delete	THIS	AVLTree	0	RET	node.$.element.compareTo(element) > 0
3642	46	10	AVLTree.java	delete	node	Node	0	RET	$.element.compareTo(element) > 0
3642	46	10	AVLTree.java	delete	element	T	0	RET	node.element.compareTo($) > 0
6470	104	4	AVLTree.java	getNotSmaller	node	Node	0	NIL-FOR	$ != null
3643	105	6	AVLTree.java	getNotSmaller	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) < 0
3643	105	6	AVLTree.java	getNotSmaller	node	Node	1	RET	$.element.compareTo(reference) < 0
3643	105	6	AVLTree.java	getNotSmaller	reference	T	1	RET	node.element.compareTo($) < 0
3644	106	8	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.right == null
3644	106	8	AVLTree.java	getNotSmaller	node	Node	0	RET	$.right == null
3645	113	8	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.left == null
3645	113	8	AVLTree.java	getNotSmaller	node	Node	0	RET	$.left == null
6471	133	4	AVLTree.java	getNotLarger	node	Node	0	NIL-FOR	$ != null
3646	134	6	AVLTree.java	getNotLarger	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) > 0
3646	134	6	AVLTree.java	getNotLarger	node	Node	1	RET	$.element.compareTo(reference) > 0
3646	134	6	AVLTree.java	getNotLarger	reference	T	1	RET	node.element.compareTo($) > 0
3647	135	8	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.left == null
3647	135	8	AVLTree.java	getNotLarger	node	Node	0	RET	$.left == null
3648	142	8	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.right == null
3648	142	8	AVLTree.java	getNotLarger	node	Node	0	RET	$.right == null
1112	46	4	AbstractFieldMatrix.java	AbstractFieldMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ <= 0
1113	49	4	AbstractFieldMatrix.java	AbstractFieldMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ <= 0
1114	63	4	AbstractFieldMatrix.java	extractField	d	T[][]	0	NullArgumentException	$ == null
1115	66	4	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1115	66	4	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$.length == 0
1116	69	4	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d[0].length == 0
1116	69	4	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$[0].length == 0
1117	82	4	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1117	82	4	AbstractFieldMatrix.java	extractField	d	T[]	0	NoDataException	$.length == 0
4672	132	4	AbstractFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
4672	132	4	AbstractFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
4673	133	6	AbstractFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
4673	133	6	AbstractFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
4674	147	4	AbstractFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
4674	147	4	AbstractFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
4675	148	6	AbstractFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
4675	148	6	AbstractFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
4676	161	4	AbstractFieldMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
4676	161	4	AbstractFieldMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
4677	162	6	AbstractFieldMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
4677	162	6	AbstractFieldMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
4678	175	4	AbstractFieldMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
4678	175	4	AbstractFieldMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
4679	176	6	AbstractFieldMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
4679	176	6	AbstractFieldMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
4680	191	4	AbstractFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
4680	191	4	AbstractFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
4681	192	6	AbstractFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
4681	192	6	AbstractFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
4682	194	8	AbstractFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
4682	194	8	AbstractFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1118	212	4	AbstractFieldMatrix.java	power	p	int	0	NotPositiveException	$ < 0
1119	215	4	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NonSquareMatrixException	$.isSquare()
1120	218	4	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 0
1121	221	4	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 1
4683	227	4	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
4683	227	4	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
4683	227	4	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1122	228	6	AbstractFieldMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1122	228	6	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
4684	235	4	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
4684	235	4	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
4684	235	4	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
4685	251	4	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	i < data.$.length
4685	251	4	AbstractFieldMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
4685	251	4	AbstractFieldMatrix.java	getData	data	T[][]	0	NIL-FOR	i < $.length
4686	253	6	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	j < dataI.$.length
4686	253	6	AbstractFieldMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
4686	253	6	AbstractFieldMatrix.java	getData	dataI	T[]	0	NIL-FOR	j < $.length
4687	265	4	AbstractFieldMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
4687	265	4	AbstractFieldMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
4688	266	6	AbstractFieldMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
4688	266	6	AbstractFieldMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1123	296	4	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1123	296	4	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1123	296	4	AbstractFieldMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1123	296	4	AbstractFieldMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1123	296	4	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1123	296	4	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1124	329	4	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
1124	329	4	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1124	329	4	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1124	329	4	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
1124	329	4	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
1124	329	4	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
4689	332	4	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	i < selectedRows.$.length
4689	332	4	AbstractFieldMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
4689	332	4	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
4690	334	6	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	j < selectedColumns.$.length
4690	334	6	AbstractFieldMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
4690	334	6	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1125	343	4	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	NullArgumentException	$ == null
1126	347	4	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1127	351	4	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
4691	354	4	AbstractFieldMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
4691	354	4	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1128	355	6	AbstractFieldMatrix.java	setSubMatrix	THIS	AbstractFieldMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1128	355	6	AbstractFieldMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1128	355	6	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1128	355	6	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[r].length != nCols
4692	363	4	AbstractFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
4692	363	4	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
4693	364	6	AbstractFieldMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
4693	364	6	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
4694	376	4	AbstractFieldMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
4694	376	4	AbstractFieldMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1129	387	4	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1129	387	4	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1129	387	4	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
4695	390	4	AbstractFieldMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
4695	390	4	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
4696	401	4	AbstractFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
4696	401	4	AbstractFieldMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1130	412	4	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1130	412	4	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1130	412	4	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
4697	415	4	AbstractFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
4697	415	4	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1131	431	4	AbstractFieldMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1131	431	4	AbstractFieldMatrix.java	setRowVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nCols
4698	434	4	AbstractFieldMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
4698	434	4	AbstractFieldMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1132	450	4	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1132	450	4	AbstractFieldMatrix.java	setColumnVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nRows
4699	453	4	AbstractFieldMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
4699	453	4	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
4700	464	4	AbstractFieldMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
4700	464	4	AbstractFieldMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1133	475	4	AbstractFieldMatrix.java	setRow	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1133	475	4	AbstractFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1133	475	4	AbstractFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
4701	478	4	AbstractFieldMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
4701	478	4	AbstractFieldMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
4702	489	4	AbstractFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
4702	489	4	AbstractFieldMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1134	500	4	AbstractFieldMatrix.java	setColumn	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1134	500	4	AbstractFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1134	500	4	AbstractFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
4703	503	4	AbstractFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
4703	503	4	AbstractFieldMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1135	561	4	AbstractFieldMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1135	561	4	AbstractFieldMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
4704	565	4	AbstractFieldMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
4704	565	4	AbstractFieldMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1136	576	4	AbstractFieldMatrix.java	operate	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1136	576	4	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1136	576	4	AbstractFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
4705	580	4	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
4705	580	4	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
4706	582	6	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
4706	582	6	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1137	599	6	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1137	599	6	AbstractFieldMatrix.java	operate	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nCols
4707	603	6	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
4707	603	6	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
4708	605	8	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
4708	605	8	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1138	619	4	AbstractFieldMatrix.java	preMultiply	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1138	619	4	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1138	619	4	AbstractFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
4709	623	4	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
4709	623	4	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
4710	625	6	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
4710	625	6	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1139	642	6	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1139	642	6	AbstractFieldMatrix.java	preMultiply	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nRows
4711	646	6	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
4711	646	6	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
4712	648	8	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
4712	648	8	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
4713	663	4	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
4713	663	4	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
4714	664	6	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
4714	664	6	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
4715	679	4	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
4715	679	4	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
4716	680	6	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
4716	680	6	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
4717	692	4	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
4717	692	4	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
4718	693	6	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
4718	693	6	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
4719	707	4	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
4719	707	4	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
4720	708	6	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
4720	708	6	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
4721	721	4	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
4721	721	4	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
4722	722	6	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
4722	722	6	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
4723	737	4	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
4723	737	4	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
4724	738	6	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
4724	738	6	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
4725	750	4	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
4725	750	4	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
4726	751	6	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
4726	751	6	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
4727	765	4	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
4727	765	4	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
4728	766	6	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
4728	766	6	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
4729	807	4	AbstractFieldMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
4729	807	4	AbstractFieldMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
1140	808	6	AbstractFieldMatrix.java	toString	i	int	0	DEF	$ > 0
4730	812	6	AbstractFieldMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
4730	812	6	AbstractFieldMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
1141	813	8	AbstractFieldMatrix.java	toString	j	int	0	DEF	$ > 0
1142	829	4	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	object == $
1142	829	4	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ == this
1143	832	4	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ instanceof FieldMatrix<?> == false
1144	838	4	AbstractFieldMatrix.java	equals	m	FieldMatrix	0	RET	$.getColumnDimension() != nCols
1144	838	4	AbstractFieldMatrix.java	equals	m	FieldMatrix	0	RET	$.getRowDimension() != nRows
1144	838	4	AbstractFieldMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1144	838	4	AbstractFieldMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
4731	841	4	AbstractFieldMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
4731	841	4	AbstractFieldMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
4732	842	6	AbstractFieldMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
4732	842	6	AbstractFieldMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1145	843	8	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	$.getEntry(row,col).equals(m.getEntry(row,col))
1145	843	8	AbstractFieldMatrix.java	equals	col	int	0	RET	getEntry(row,$).equals(m.getEntry(row,$))
1145	843	8	AbstractFieldMatrix.java	equals	row	int	0	RET	getEntry($,col).equals(m.getEntry($,col))
1145	843	8	AbstractFieldMatrix.java	equals	m	FieldMatrix	0	RET	getEntry(row,col).equals($.getEntry(row,col))
4733	860	4	AbstractFieldMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
4733	860	4	AbstractFieldMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
4734	861	6	AbstractFieldMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
4734	861	6	AbstractFieldMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
1146	873	4	AbstractFieldMatrix.java	checkRowIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1146	873	4	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1146	873	4	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= getRowDimension()
1147	883	4	AbstractFieldMatrix.java	checkColumnIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1147	883	4	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= getColumnDimension()
1147	883	4	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1148	899	4	AbstractFieldMatrix.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1148	899	4	AbstractFieldMatrix.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1149	904	4	AbstractFieldMatrix.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1149	904	4	AbstractFieldMatrix.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1150	917	4	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1150	917	4	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1151	920	4	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedRows.$.length == 0
1151	920	4	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedColumns.$.length == 0
1151	920	4	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1151	920	4	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1152	936	4	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1152	936	4	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1152	936	4	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1152	936	4	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1153	946	4	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1153	946	4	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1153	946	4	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1153	946	4	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1154	956	4	AbstractFieldMatrix.java	checkMultiplicationCompatible	THIS	AbstractFieldMatrix	0	DimensionMismatchException	$.getColumnDimension() != m.getRowDimension()
1154	956	4	AbstractFieldMatrix.java	checkMultiplicationCompatible	m	FieldMatrix<T>	0	DimensionMismatchException	getColumnDimension() != $.getRowDimension()
3432	87	4	AbstractFormat.java	setDenominatorFormat	format	NumberFormat	0	NullArgumentException	$ == null
3433	98	4	AbstractFormat.java	setNumeratorFormat	format	NumberFormat	0	NullArgumentException	$ == null
3434	122	4	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
3434	122	4	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
6454	124	6	AbstractFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
6454	124	6	AbstractFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
6454	124	6	AbstractFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
3435	129	6	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
3435	129	6	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
1775	47	4	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	NumberIsTooLargeException	x1 < $
1775	47	4	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	NumberIsTooLargeException	$ < x0
1776	56	4	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1776	56	4	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1777	60	4	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
1778	63	4	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	1	RET	$ == Integer.MIN_VALUE
1779	64	6	AbstractIntegerDistribution.java	inverseCumulativeProbability	THIS	AbstractIntegerDistribution	0	RET	$.checkedCumulativeProbability(lower) >= p
1779	64	6	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	RET	checkedCumulativeProbability($) >= p
1779	64	6	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	checkedCumulativeProbability(lower) >= $
1780	72	4	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
1781	78	4	AbstractIntegerDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	0	DEF	$
1782	81	6	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ > lower
1782	81	6	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	DEF	tmp > $
1783	86	6	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ < upper
1783	86	6	AbstractIntegerDistribution.java	inverseCumulativeProbability	upper	int	0	DEF	tmp < $
5528	100	4	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	NIL-WHILE	$ + 1 < upper
5528	100	4	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	NIL-WHILE	lower + 1 < $
1784	102	6	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ < lower
1784	102	6	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ > upper
1784	102	6	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	DEF	xm < $
1784	102	6	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	DEF	xm > $
1785	106	6	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	pm	double	1	DEF	$ >= p
1785	106	6	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	p	double	1	DEF	pm >= $
1786	132	4	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
5529	136	4	AbstractIntegerDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
5529	136	4	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1787	150	4	AbstractIntegerDistribution.java	checkedCumulativeProbability	result	double	0	MathInternalError	Double.isNaN($)
2296	217	4	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y0.$.length != equations.getDimension()
2296	217	4	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y0.length != $.getDimension()
2296	217	4	AbstractIntegrator.java	integrate	y0	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
2297	220	4	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y.$.length != equations.getDimension()
2297	220	4	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y.length != $.getDimension()
2297	220	4	AbstractIntegrator.java	integrate	y	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
2298	275	4	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.statesInitialized
2299	292	6	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.state.evaluateStep(interpolator)
2299	292	6	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	state.evaluateStep($)
5665	296	4	AbstractIntegrator.java	acceptStep	occuringEvents	SortedSet<EventState>	0	NIL-WHILE	$.isEmpty()
2300	317	6	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	RET	$.isLastStep
2301	325	6	AbstractIntegrator.java	acceptStep	needReset	boolean	0	RET	$
2302	335	6	AbstractIntegrator.java	acceptStep	currentEvent	EventState	0	DEF	$.evaluateStep(interpolator)
2302	335	6	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	currentEvent.evaluateStep($)
2303	366	4	AbstractIntegrator.java	sanityChecks	threshold	double	0	NumberIsTooSmallException	dt <= $
2303	366	4	AbstractIntegrator.java	sanityChecks	dt	double	0	NumberIsTooSmallException	$ <= threshold
6228	108	4	AbstractLeastSquaresOptimizer.java	computeSigma	i	int	0	NIL-FOR	$ < nC
6228	108	4	AbstractLeastSquaresOptimizer.java	computeSigma	nC	int	0	NIL-FOR	i < $
3101	131	4	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	objectiveValue.$.length != target.$.length
3101	131	4	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	DimensionMismatchException	objectiveValue.length != $.length
3101	131	4	AbstractLeastSquaresOptimizer.java	computeResiduals	objectiveValue	double[]	0	DimensionMismatchException	$.length != target.length
6229	135	4	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < target.$.length
6229	135	4	AbstractLeastSquaresOptimizer.java	computeResiduals	i	int	0	NIL-FOR	$ < target.length
6229	135	4	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	NIL-FOR	i < $.length
3102	147	6	AbstractLeastSquaresOptimizer.java	parseOptimizationData	THIS	AbstractLeastSquaresOptimizer	0	DEF	$.data instanceof Weight
3103	159	4	AbstractLeastSquaresOptimizer.java	squareRoot	m	RealMatrix	1	RET	$ instanceof DiagonalMatrix
6230	162	6	AbstractLeastSquaresOptimizer.java	squareRoot	i	int	0	NIL-FOR	$ < dim
6230	162	6	AbstractLeastSquaresOptimizer.java	squareRoot	dim	int	0	NIL-FOR	i < $
6110	122	4	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	i	int	0	NIL-FOR	$ < nC
6110	122	4	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nC	int	0	NIL-FOR	i < $
2886	127	4	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	dsValue.$.length != nR
2886	127	4	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	dsValue	DerivativeStructure[]	0	DimensionMismatchException	$.length != nR
2886	127	4	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nR	int	0	DimensionMismatchException	dsValue.length != $
6111	131	4	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	i	int	0	NIL-FOR	$ < nR
6111	131	4	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nR	int	0	NIL-FOR	i < $
6112	133	6	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	j	int	0	NIL-FOR	$ < nC
6112	133	6	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nC	int	0	NIL-FOR	j < $
2887	237	4	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NumberIsTooSmallException	$.rows <= $.cols
6113	243	4	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < errors.$.length
6113	243	4	AbstractLeastSquaresOptimizer.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
6113	243	4	AbstractLeastSquaresOptimizer.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
6114	260	4	AbstractLeastSquaresOptimizer.java	computeSigma	i	int	0	NIL-FOR	$ < nC
6114	260	4	AbstractLeastSquaresOptimizer.java	computeSigma	nC	int	0	NIL-FOR	i < $
2888	324	4	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	objectiveValue.$.length != target.$.length
2888	324	4	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	DimensionMismatchException	objectiveValue.length != $.length
2888	324	4	AbstractLeastSquaresOptimizer.java	computeResiduals	objectiveValue	double[]	0	DimensionMismatchException	$.length != target.length
6115	328	4	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < target.$.length
6115	328	4	AbstractLeastSquaresOptimizer.java	computeResiduals	i	int	0	NIL-FOR	$ < target.length
6115	328	4	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	NIL-FOR	i < $.length
2889	339	4	AbstractLeastSquaresOptimizer.java	squareRoot	m	RealMatrix	1	RET	$ instanceof DiagonalMatrix
6116	342	6	AbstractLeastSquaresOptimizer.java	squareRoot	i	int	0	NIL-FOR	$ < dim
6116	342	6	AbstractLeastSquaresOptimizer.java	squareRoot	dim	int	0	NIL-FOR	i < $
2786	100	4	AbstractLinearOptimizer.java	incrementIterationsCounter	THIS	AbstractLinearOptimizer	0	MaxCountExceededException	++$.iterations > $.maxIterations
158	69	4	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	NullArgumentException	$ == null
159	72	4	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	data.$.length != nobs * (nvars + 1)
159	72	4	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	DimensionMismatchException	$.length != nobs * (nvars + 1)
159	72	4	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	DimensionMismatchException	data.length != $ * (nvars + 1)
159	72	4	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	DimensionMismatchException	data.length != nobs * ($ + 1)
160	75	4	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NumberIsTooSmallException	$ <= nvars
160	75	4	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	NumberIsTooSmallException	nobs <= $
4375	82	4	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
4375	82	4	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
161	84	6	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	$.noIntercept
4376	87	6	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < cols
4376	87	6	AbstractMultipleLinearRegression.java	newSampleData	cols	int	0	NIL-FOR	j < $
162	101	4	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NullArgumentException	$ == null
163	104	4	AbstractMultipleLinearRegression.java	newYSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	y.$.length == 0
163	104	4	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NoDataException	$.length == 0
164	117	4	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NullArgumentException	$ == null
165	120	4	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
165	120	4	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NoDataException	$.length == 0
166	123	4	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	1	DEF	$.noIntercept
4377	129	6	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NIL-FOR	i < x.$.length
4377	129	6	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	NIL-FOR	$ < x.length
4377	129	6	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NIL-FOR	i < $.length
167	130	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x[i].length != nVars
167	130	8	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	DimensionMismatchException	x[$].length != nVars
167	130	8	AbstractMultipleLinearRegression.java	newXSampleData	nVars	int	0	DimensionMismatchException	x[i].length != $
167	130	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	DimensionMismatchException	$[i].length != nVars
168	149	4	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NullArgumentException	$ == null
168	149	4	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	NullArgumentException	$ == null
169	152	4	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != y.$.length
169	152	4	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DimensionMismatchException	$.length != y.length
169	152	4	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	DimensionMismatchException	x.length != $.length
170	155	4	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
170	155	4	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NoDataException	$.length == 0
171	158	4	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	MathIllegalArgumentException	x[0].length + 1 > x.$.length
171	158	4	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	MathIllegalArgumentException	$[0].length + 1 > $.length
172	170	4	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != covariance.$.length
172	170	4	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	DimensionMismatchException	$.length != covariance.length
172	170	4	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DimensionMismatchException	x.length != $.length
173	173	4	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length != covariance[0].length
173	173	4	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length > 0
173	173	4	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length != $[0].length
173	173	4	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length > 0
4378	206	4	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
4378	206	4	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
1880	47	4	AbstractMultivariateRealDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
5560	51	4	AbstractMultivariateRealDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
5560	51	4	AbstractMultivariateRealDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
2331	43	6	AbstractParameterizable.java	isSupported	THIS	AbstractParameterizable	0	RET	$.supportedName.equals(name)
2331	43	6	AbstractParameterizable.java	isSupported	name	String	0	RET	supportedName.equals($)
2332	56	4	AbstractParameterizable.java	complainIfNotSupported	THIS	AbstractParameterizable	0	UnknownParameterException	$.isSupported(name)
2332	56	4	AbstractParameterizable.java	complainIfNotSupported	name	String	0	UnknownParameterException	isSupported($)
4516	54	4	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
4516	54	4	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
4516	54	4	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
4517	56	6	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
479	57	8	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
480	61	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
480	61	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
480	61	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
481	81	4	AbstractRandomGenerator.java	nextInt	n	int	0	NotStrictlyPositiveException	$ <= 0
482	118	4	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
4518	126	4	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >= 1
483	131	4	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
1728	69	4	AbstractRealDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1728	69	4	AbstractRealDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
1729	78	4	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1729	78	4	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1730	82	4	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
1731	86	4	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
1732	93	4	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	DEF	$ == Double.NEGATIVE_INFINITY
1733	94	6	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
5524	99	8	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(lowerBound) >= p
5524	99	8	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	cumulativeProbability($) >= p
5524	99	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(lowerBound) >= $
1734	104	4	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	DEF	$ == Double.POSITIVE_INFINITY
1735	105	6	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
5525	110	8	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(upperBound) < p
5525	110	8	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	cumulativeProbability($) < p
5525	110	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(upperBound) < $
1736	122	4	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.isSupportConnected()
1737	124	6	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	x - dx >= $.getSupportLowerBound()
1737	124	6	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	x - $ >= getSupportLowerBound()
1737	124	6	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	$ - dx >= getSupportLowerBound()
1738	126	8	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.cumulativeProbability(x - dx) == px
1738	126	8	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	0	RET	cumulativeProbability(x - dx) == $
1738	126	8	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	cumulativeProbability(x - $) == px
1738	126	8	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	cumulativeProbability($ - dx) == px
5526	128	10	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	NIL-WHILE	upperBound - lowerBound > $
5526	128	10	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	upperBound - $ > dx
5526	128	10	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	$ - lowerBound > dx
1739	130	12	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	1	DEF	$.cumulativeProbability(midPoint) < px
1739	130	12	AbstractRealDistribution.java	inverseCumulativeProbability	midPoint	double	1	DEF	cumulativeProbability($) < px
1739	130	12	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	1	DEF	cumulativeProbability(midPoint) < $
1740	167	4	AbstractRealDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
5527	171	4	AbstractRealDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
5527	171	4	AbstractRealDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1325	39	4	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ < 1
1326	42	4	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ < 1
4947	54	4	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
4947	54	4	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
4948	55	6	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
4948	55	6	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
4949	69	4	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
4949	69	4	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
4950	70	6	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
4950	70	6	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
4951	83	4	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
4951	83	4	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
4952	84	6	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
4952	84	6	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
4953	97	4	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
4953	97	4	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
4954	98	6	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
4954	98	6	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
4955	113	4	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
4955	113	4	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
4956	114	6	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
4956	114	6	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
4957	116	8	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
4957	116	8	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1327	134	4	AbstractRealMatrix.java	power	p	int	0	NotPositiveException	$ < 0
1328	137	4	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NonSquareMatrixException	$.isSquare()
1329	140	4	AbstractRealMatrix.java	power	p	int	0	RET	$ == 0
1330	143	4	AbstractRealMatrix.java	power	p	int	0	RET	$ == 1
4958	150	4	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
4958	150	4	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
4958	150	4	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1331	151	6	AbstractRealMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1331	151	6	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
1332	154	8	AbstractRealMatrix.java	power	maxI	int	0	DEF	$ == -1
4959	161	4	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ <= maxI
4959	161	4	AbstractRealMatrix.java	power	maxI	int	0	NIL-FOR	i <= $
4960	175	4	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
4960	175	4	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
4960	175	4	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
4961	177	6	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
4961	177	6	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
4961	177	6	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
4962	263	4	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
4962	263	4	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
4963	264	6	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
4963	264	6	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1333	294	4	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1333	294	4	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1333	294	4	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1333	294	4	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1333	294	4	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1333	294	4	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
4964	297	4	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < rowsCount
4964	297	4	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	NIL-FOR	i < $
1334	298	6	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[i].length < columnsCount
1334	298	6	AbstractRealMatrix.java	copySubMatrix	i	int	0	MatrixDimensionMismatchException	destination[$].length < columnsCount
1334	298	6	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[i].length < $
1334	298	6	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[i].length < columnsCount
1335	333	4	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < nCols
1335	333	4	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1335	333	4	AbstractRealMatrix.java	copySubMatrix	nCols	int	0	MatrixDimensionMismatchException	destination[0].length < $
1335	333	4	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1335	333	4	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < nCols
1335	333	4	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
4965	336	4	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
4965	336	4	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
4965	336	4	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
1336	338	6	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destinationI.$.length < nCols
1336	338	6	AbstractRealMatrix.java	copySubMatrix	destinationI	double[]	0	MatrixDimensionMismatchException	$.length < nCols
1336	338	6	AbstractRealMatrix.java	copySubMatrix	nCols	int	0	MatrixDimensionMismatchException	destinationI.length < $
4966	341	6	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
4966	341	6	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
4966	341	6	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1337	352	4	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1338	356	4	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
4967	359	4	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
4967	359	4	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1339	360	6	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1339	360	6	AbstractRealMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1339	360	6	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1339	360	6	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[r].length != nCols
4968	368	4	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
4968	368	4	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
4969	369	6	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
4969	369	6	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
4970	381	4	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
4970	381	4	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1340	392	4	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1340	392	4	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1340	392	4	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
4971	395	4	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
4971	395	4	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
4972	406	4	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
4972	406	4	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1341	417	4	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1341	417	4	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1341	417	4	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
4973	420	4	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
4973	420	4	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1342	436	4	AbstractRealMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1342	436	4	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nCols
4974	439	4	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
4974	439	4	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1343	455	4	AbstractRealMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1343	455	4	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nRows
4975	458	4	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
4975	458	4	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
4976	469	4	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
4976	469	4	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1344	480	4	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1344	480	4	AbstractRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1344	480	4	AbstractRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
4977	483	4	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
4977	483	4	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
4978	494	4	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
4978	494	4	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1345	505	4	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1345	505	4	AbstractRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1345	505	4	AbstractRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
4979	508	4	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
4979	508	4	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1346	566	4	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1346	566	4	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
4980	570	4	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
4980	570	4	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1347	581	4	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1347	581	4	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1347	581	4	AbstractRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
4981	585	4	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
4981	585	4	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
4982	587	6	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
4982	587	6	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1348	604	6	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1348	604	6	AbstractRealMatrix.java	operate	v	RealVector	0	DimensionMismatchException	$.getDimension() != nCols
4983	608	6	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
4983	608	6	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
4984	610	8	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
4984	610	8	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1349	624	4	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1349	624	4	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1349	624	4	AbstractRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
4985	628	4	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
4985	628	4	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
4986	630	6	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
4986	630	6	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1350	647	6	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1350	647	6	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DimensionMismatchException	$.getDimension() != nRows
4987	651	6	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
4987	651	6	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
4988	653	8	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
4988	653	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
4989	668	4	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
4989	668	4	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
4990	669	6	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
4990	669	6	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
4991	684	4	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
4991	684	4	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
4992	685	6	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
4992	685	6	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
4993	697	4	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
4993	697	4	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
4994	698	6	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
4994	698	6	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
4995	712	4	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
4995	712	4	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
4996	713	6	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
4996	713	6	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
4997	726	4	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
4997	726	4	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
4998	727	6	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
4998	727	6	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
4999	742	4	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
4999	742	4	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
5000	743	6	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
5000	743	6	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
5001	755	4	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
5001	755	4	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
5002	756	6	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
5002	756	6	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
5003	770	4	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
5003	770	4	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
5004	771	6	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
5004	771	6	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
1351	819	4	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
1351	819	4	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
1352	822	4	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
1353	828	4	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
1353	828	4	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
1353	828	4	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1353	828	4	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
5005	831	4	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
5005	831	4	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
5006	832	6	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
5006	832	6	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1354	833	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row,col) != m.getEntry(row,col)
1354	833	8	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row,$) != m.getEntry(row,$)
1354	833	8	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($,col) != m.getEntry($,col)
1354	833	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row,col) != $.getEntry(row,col)
5007	850	4	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
5007	850	4	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
5008	851	6	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
5008	851	6	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
3601	49	4	AbstractRegion.java	AbstractRegion	boundary	Collection<SubHyperplane<S>>	1	DEF	$.size() == 0
3602	91	4	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	1	DEF	hyperplanes.$.length == 0
3602	91	4	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$.length == 0
3602	91	4	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$ == null
3603	99	8	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	0	DEF	node.insertCut($.hyperplane)
3603	99	8	AbstractRegion.java	AbstractRegion	node	BSPTree	0	DEF	$.insertCut(hyperplane)
6467	120	4	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane>	0	NIL-WHILE	$.hasNext()
6467	120	4	AbstractRegion.java	insertCuts	inserted	Hyperplane	0	NIL-WHILE	$ == null
3604	122	6	AbstractRegion.java	insertCuts	inserted	Hyperplane	0	DEF	node.insertCut($.copySelf())
3604	122	6	AbstractRegion.java	insertCuts	node	BSPTree<S>	0	DEF	$.insertCut(inserted.copySelf())
3605	126	4	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane>	0	RET	$.hasNext()
6468	131	4	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane>	0	NIL-WHILE	$.hasNext()
3606	167	0	AbstractRegion.java	isEmpty	node	BSPTree<S>	0	RET	$.getCut() == null
3607	192	0	AbstractRegion.java	checkPoint	cell	BSPTree	0	RET	$.getCut() == null
3608	203	0	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getCut() != null
3608	203	0	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getAttribute() == null
3608	203	0	AbstractRegion.java	getTree	includeBoundaryAttributes	boolean	0	DEF	$
3609	305	0	AbstractRegion.java	getSize	THIS	AbstractRegion	0	DEF	$.barycenter == null
3610	321	0	AbstractRegion.java	getBarycenter	THIS	AbstractRegion	0	DEF	$.barycenter == null
3611	352	0	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	RET	$.getCut() == null
3612	353	0	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean)$.getAttribute()
3613	362	0	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
3613	362	0	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
3613	362	0	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
3614	363	0	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
3614	363	0	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
3615	368	0	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
3615	368	0	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
3616	372	0	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
3616	372	0	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
3617	377	0	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
3617	377	0	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
3617	377	0	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
3618	378	0	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
3618	378	0	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
3619	383	0	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
3619	383	0	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
3620	387	0	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
3620	387	0	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
3621	394	0	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
3621	394	0	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
3622	399	0	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().getHyperplane().sameOrientationAs(sub.getHyperplane())
3622	399	0	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().getHyperplane().sameOrientationAs($.getHyperplane())
3623	400	0	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
3623	400	0	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean)$.getPlus().getAttribute()
3624	403	0	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
3624	403	0	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean)$.getMinus().getAttribute()
3625	408	0	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean)$.getPlus().getAttribute()
3625	408	0	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
3626	411	0	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean)$.getMinus().getAttribute()
3626	411	0	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
3627	476	0	AbstractRegion.java	recurseIntersection	node	BSPTree<S>	0	RET	$.getCut() == null
3628	489	0	AbstractRegion.java	recurseIntersection	plus	SubHyperplane	1	RET	$ == null
3629	493	0	AbstractRegion.java	recurseIntersection	minus	SubHyperplane	1	RET	$ == null
3630	519	0	AbstractRegion.java	recurseTransform	node	BSPTree<S>	0	RET	$.getCut() == null
3631	525	0	AbstractRegion.java	recurseTransform	attribute	BoundaryAttribute	0	DEF	$ != null
3109	55	4	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	NullArgumentException	$ == null
3110	58	4	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	ZeroException	steps.$.length == 0
3110	58	4	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$.length == 0
6232	63	4	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
6232	63	4	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < dimension
6233	65	6	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i + 1
6233	65	6	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $ + 1
3111	66	8	AbstractSimplex.java	AbstractSimplex	j	int	0	ZeroException	steps[$] == 0
3111	66	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$[j] == 0
3112	81	4	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NotStrictlyPositiveException	referenceSimplex.$.length <= 0
3112	81	4	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NotStrictlyPositiveException	$.length <= 0
6234	87	4	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < referenceSimplex.$.length
6234	87	4	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < referenceSimplex.length
6234	87	4	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NIL-FOR	i < $.length
3113	89	6	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	DimensionMismatchException	refI.$.length != $.dimension
3113	89	6	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DimensionMismatchException	$.length != dimension
6235	92	6	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i
6235	92	6	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $
6236	95	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
6236	95	8	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
3114	96	10	AbstractSimplex.java	AbstractSimplex	k	int	0	DEF	refI[$] != refJ[$]
3114	96	10	AbstractSimplex.java	AbstractSimplex	refJ	double[]	0	DEF	refI[k] != $[k]
3114	96	10	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DEF	$[k] != refJ[k]
3115	101	8	AbstractSimplex.java	AbstractSimplex	allEquals	boolean	0	MathIllegalArgumentException	$
3116	105	6	AbstractSimplex.java	AbstractSimplex	i	int	0	DEF	$ > 0
6237	107	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
6237	107	8	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
3117	140	4	AbstractSimplex.java	build	THIS	AbstractSimplex	0	DimensionMismatchException	$.dimension != startPoint.$.length
3117	140	4	AbstractSimplex.java	build	startPoint	double[]	0	DimensionMismatchException	dimension != $.length
6238	145	4	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
6238	145	4	AbstractSimplex.java	build	i	int	0	NIL-FOR	$ < dimension
6239	148	6	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
6239	148	6	AbstractSimplex.java	build	k	int	0	NIL-FOR	$ < dimension
6240	161	4	AbstractSimplex.java	evaluate	THIS	AbstractSimplex	0	NIL-FOR	i < $.simplex.$.length
6240	161	4	AbstractSimplex.java	evaluate	i	int	0	NIL-FOR	$ < simplex.length
3118	164	6	AbstractSimplex.java	evaluate	vertex	PointValuePair	0	DEF	Double.isNaN($.getValue())
6241	176	4	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
6241	176	4	AbstractSimplex.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < dimension
3119	177	6	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	DEF	comparator.compare($.simplex[i],pointValuePair) > 0
3119	177	6	AbstractSimplex.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$],pointValuePair) > 0
3119	177	6	AbstractSimplex.java	replaceWorstPoint	pointValuePair	PointValuePair	0	DEF	comparator.compare(simplex[i],$) > 0
3119	177	6	AbstractSimplex.java	replaceWorstPoint	comparator	Comparator<PointValuePair>	0	DEF	$.compare(simplex[i],pointValuePair) > 0
3120	200	4	AbstractSimplex.java	getPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
3120	200	4	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ >= simplex.length
3120	200	4	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ < 0
3121	211	4	AbstractSimplex.java	setPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
3121	211	4	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ >= simplex.length
3121	211	4	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ < 0
3122	221	4	AbstractSimplex.java	setPoints	THIS	AbstractSimplex	0	DimensionMismatchException	points.$.length != $.simplex.$.length
3122	221	4	AbstractSimplex.java	setPoints	points	PointValuePair[]	0	DimensionMismatchException	$.length != simplex.length
6242	234	4	AbstractSimplex.java	createHypercubeSteps	i	int	0	NIL-FOR	$ < n
6242	234	4	AbstractSimplex.java	createHypercubeSteps	n	int	0	NIL-FOR	i < $
2486	56	4	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	NullArgumentException	$ == null
2487	59	4	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	ZeroException	steps.$.length == 0
2487	59	4	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$.length == 0
5809	64	4	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
5809	64	4	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < dimension
5810	66	6	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i + 1
5810	66	6	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $ + 1
2488	67	8	AbstractSimplex.java	AbstractSimplex	j	int	0	ZeroException	steps[$] == 0
2488	67	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$[j] == 0
2489	82	4	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NotStrictlyPositiveException	referenceSimplex.$.length <= 0
2489	82	4	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NotStrictlyPositiveException	$.length <= 0
5811	88	4	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < referenceSimplex.$.length
5811	88	4	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < referenceSimplex.length
5811	88	4	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NIL-FOR	i < $.length
2490	90	6	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	DimensionMismatchException	refI.$.length != $.dimension
2490	90	6	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DimensionMismatchException	$.length != dimension
5812	93	6	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i
5812	93	6	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $
5813	96	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
5813	96	8	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
2491	97	10	AbstractSimplex.java	AbstractSimplex	k	int	0	DEF	refI[$] != refJ[$]
2491	97	10	AbstractSimplex.java	AbstractSimplex	refJ	double[]	0	DEF	refI[k] != $[k]
2491	97	10	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DEF	$[k] != refJ[k]
2492	102	8	AbstractSimplex.java	AbstractSimplex	allEquals	boolean	0	MathIllegalArgumentException	$
2493	106	6	AbstractSimplex.java	AbstractSimplex	i	int	0	DEF	$ > 0
5814	108	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
5814	108	8	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
2494	141	4	AbstractSimplex.java	build	THIS	AbstractSimplex	0	DimensionMismatchException	$.dimension != startPoint.$.length
2494	141	4	AbstractSimplex.java	build	startPoint	double[]	0	DimensionMismatchException	dimension != $.length
5815	146	4	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
5815	146	4	AbstractSimplex.java	build	i	int	0	NIL-FOR	$ < dimension
5816	149	6	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
5816	149	6	AbstractSimplex.java	build	k	int	0	NIL-FOR	$ < dimension
5817	162	4	AbstractSimplex.java	evaluate	THIS	AbstractSimplex	0	NIL-FOR	i < $.simplex.$.length
5817	162	4	AbstractSimplex.java	evaluate	i	int	0	NIL-FOR	$ < simplex.length
2495	165	6	AbstractSimplex.java	evaluate	vertex	PointValuePair	0	DEF	Double.isNaN($.getValue())
5818	177	4	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
5818	177	4	AbstractSimplex.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < dimension
2496	178	6	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	DEF	comparator.compare($.simplex[i],pointValuePair) > 0
2496	178	6	AbstractSimplex.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$],pointValuePair) > 0
2496	178	6	AbstractSimplex.java	replaceWorstPoint	pointValuePair	PointValuePair	0	DEF	comparator.compare(simplex[i],$) > 0
2496	178	6	AbstractSimplex.java	replaceWorstPoint	comparator	Comparator<PointValuePair>	0	DEF	$.compare(simplex[i],pointValuePair) > 0
2497	201	4	AbstractSimplex.java	getPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
2497	201	4	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ < 0
2497	201	4	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ >= simplex.length
2498	212	4	AbstractSimplex.java	setPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
2498	212	4	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ >= simplex.length
2498	212	4	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ < 0
2499	222	4	AbstractSimplex.java	setPoints	THIS	AbstractSimplex	0	DimensionMismatchException	points.$.length != $.simplex.$.length
2499	222	4	AbstractSimplex.java	setPoints	points	PointValuePair[]	0	DimensionMismatchException	$.length != simplex.length
5819	235	4	AbstractSimplex.java	createHypercubeSteps	i	int	0	NIL-FOR	$ < n
5819	235	4	AbstractSimplex.java	createHypercubeSteps	n	int	0	NIL-FOR	i < $
2335	139	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState == null
2335	139	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState == null
5670	153	6	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.interpolatedSecondaryState.$.length
5670	153	6	AbstractStepInterpolator.java	AbstractStepInterpolator	i	int	0	NIL-FOR	$ < interpolatedSecondaryState.length
2336	169	4	AbstractStepInterpolator.java	allocateInterpolatedArrays	dimension	int	1	DEF	$ < 0
2337	182	6	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	1	DEF	$.secondaryMappers == null
5671	189	8	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
5671	189	8	AbstractStepInterpolator.java	allocateInterpolatedArrays	i	int	0	NIL-FOR	$ < secondaryMappers.length
2338	326	4	AbstractStepInterpolator.java	evaluateCompleteInterpolatedState	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
2339	370	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
2340	395	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	1	DEF	$.currentState == null
2341	412	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	DEF	$.currentState != null
5672	413	6	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
5672	413	6	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
5673	444	4	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
5673	444	4	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < secondaryMappers.length
2342	448	4	AbstractStepInterpolator.java	readBaseExternal	dimension	int	1	DEF	$ < 0
5674	453	6	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
5674	453	6	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
288	20	4	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	NullArgumentException	$ == null
289	35	4	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values,begin,length)
289	35	4	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($,begin,length)
289	35	4	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values,$,length)
289	35	4	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values,begin,$)
290	64	4	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	NullArgumentException	$ == null
291	78	4	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values,begin,length)
291	78	4	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($,begin,length)
291	78	4	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values,$,length)
291	78	4	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values,begin,$)
4408	80	6	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
4408	80	6	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
292	91	4	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
292	91	4	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
293	94	4	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
3599	86	4	AbstractSubHyperplane.java	recurseTransform	node	BSPTree<T>	0	RET	$.getCut() == null
3600	90	4	AbstractSubHyperplane.java	recurseTransform	attribute	BoundaryAttribute	0	DEF	$ != null
294	48	4	AbstractUnivariateStatistic.java	setData	values	double[]	0	NullArgumentException	$ == null
295	51	4	AbstractUnivariateStatistic.java	setData	begin	int	0	NotPositiveException	$ < 0
296	54	4	AbstractUnivariateStatistic.java	setData	length	int	0	NotPositiveException	$ < 0
297	57	4	AbstractUnivariateStatistic.java	setData	THIS	AbstractUnivariateStatistic	0	NumberIsTooLargeException	begin + length > values.$.length
297	57	4	AbstractUnivariateStatistic.java	setData	values	double[]	0	NumberIsTooLargeException	begin + length > $.length
297	57	4	AbstractUnivariateStatistic.java	setData	begin	int	0	NumberIsTooLargeException	$ + length > values.length
297	57	4	AbstractUnivariateStatistic.java	setData	length	int	0	NumberIsTooLargeException	begin + $ > values.length
298	108	4	AbstractUnivariateStatistic.java	test	values	double[]	0	NullArgumentException	$ == null
299	111	4	AbstractUnivariateStatistic.java	test	begin	int	0	NotPositiveException	$ < 0
300	114	4	AbstractUnivariateStatistic.java	test	length	int	0	NotPositiveException	$ < 0
301	117	4	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	NumberIsTooLargeException	begin + length > values.$.length
301	117	4	AbstractUnivariateStatistic.java	test	values	double[]	0	NumberIsTooLargeException	begin + length > $.length
301	117	4	AbstractUnivariateStatistic.java	test	begin	int	0	NumberIsTooLargeException	$ + length > values.length
301	117	4	AbstractUnivariateStatistic.java	test	length	int	0	NumberIsTooLargeException	begin + $ > values.length
302	120	4	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
302	120	4	AbstractUnivariateStatistic.java	test	allowEmpty	boolean	0	RET	$
303	151	4	AbstractUnivariateStatistic.java	test	values	double[]	0	NullArgumentException	$ == null
303	151	4	AbstractUnivariateStatistic.java	test	weights	double[]	0	NullArgumentException	$ == null
304	154	4	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DimensionMismatchException	weights.$.length != values.$.length
304	154	4	AbstractUnivariateStatistic.java	test	values	double[]	0	DimensionMismatchException	weights.length != $.length
304	154	4	AbstractUnivariateStatistic.java	test	weights	double[]	0	DimensionMismatchException	$.length != values.length
4409	158	4	AbstractUnivariateStatistic.java	test	i	int	0	NIL-FOR	$ < begin + length
4409	158	4	AbstractUnivariateStatistic.java	test	begin	int	0	NIL-FOR	i < $ + length
4409	158	4	AbstractUnivariateStatistic.java	test	length	int	0	NIL-FOR	i < begin + $
305	159	6	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isNaN(weights[$])
305	159	6	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isNaN($[i])
306	162	6	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isInfinite(weights[$])
306	162	6	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
307	165	6	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	weights[$] < 0
307	165	6	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	$[i] < 0
308	168	6	AbstractUnivariateStatistic.java	test	i	int	0	DEF	weights[$] > 0.0
308	168	6	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	DEF	$
308	168	6	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$[i] > 0.0
309	172	4	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	MathIllegalArgumentException	$
4495	81	4	AbstractWell.java	AbstractWell	j	int	0	NIL-FOR	$ < r
4495	81	4	AbstractWell.java	AbstractWell	r	int	0	NIL-FOR	j < $
447	113	4	AbstractWell.java	setSeed	seed	int[]	0	RET	$ == null
448	118	4	AbstractWell.java	setSeed	THIS	AbstractWell	0	DEF	seed.$.length < $.v.$.length
448	118	4	AbstractWell.java	setSeed	seed	int[]	0	DEF	$.length < v.length
4496	119	6	AbstractWell.java	setSeed	THIS	AbstractWell	0	NIL-FOR	i < $.v.$.length
4496	119	6	AbstractWell.java	setSeed	i	int	0	NIL-FOR	$ < v.length
5684	65	4	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-DOWHILE	$.isLastStep
5685	67	6	AdamsBashforthIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
5686	70	8	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < $.mainSetDimension
5686	70	8	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < mainSetDimension
2357	77	8	AdamsBashforthIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
5687	96	6	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
5687	96	6	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
5687	96	6	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2358	107	6	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.isLastStep
2359	109	8	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.resetOccurred
2360	120	8	AdamsBashforthIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
5780	69	4	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-DOWHILE	$.isLastStep
5781	71	6	AdamsMoultonIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
5782	84	8	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
5782	84	8	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
5782	84	8	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2450	90	8	AdamsMoultonIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
5783	99	6	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
5783	99	6	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
5783	99	6	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2451	111	6	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.isLastStep
2452	113	8	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.resetOccurred
2453	124	8	AdamsMoultonIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
5785	44	4	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ > 0
5786	52	4	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ < nSteps
5786	52	4	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	nSteps	int	0	NIL-FOR	i < $
2455	64	6	AdamsNordsieckTransformer.java	getInstance	t	AdamsNordsieckTransformer	0	DEF	$ == null
5787	85	4	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < pData.$.length
5787	85	4	AdamsNordsieckTransformer.java	buildP	i	int	0	NIL-FOR	$ < pData.length
5787	85	4	AdamsNordsieckTransformer.java	buildP	pData	BigFraction[][]	0	NIL-FOR	i < $.length
5788	89	6	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < pI.$.length
5788	89	6	AdamsNordsieckTransformer.java	buildP	j	int	0	NIL-FOR	$ < pI.length
5788	89	6	AdamsNordsieckTransformer.java	buildP	pI	BigFraction[]	0	NIL-FOR	j < $.length
5789	109	4	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < y.$.length
5789	109	4	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	i	int	0	NIL-FOR	$ < y.length
5789	109	4	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	y	double[][]	0	NIL-FOR	i < $.length
5790	115	6	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < aI.$.length
5790	115	6	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < aI.length
5790	115	6	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	aI	double[]	0	NIL-FOR	j < $.length
5791	124	6	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < yI.$.length
5791	124	6	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < yI.length
5791	124	6	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	yI	double[]	0	NIL-FOR	j < $.length
5792	152	4	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < data.$.length
5792	152	4	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	i	int	0	NIL-FOR	$ < data.length
5792	152	4	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	data	double[][]	0	NIL-FOR	i < $.length
5793	155	6	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < dataI.$.length
5793	155	6	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	j	int	0	NIL-FOR	$ < dataI.length
5793	155	6	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	dataI	double[]	0	NIL-FOR	j < $.length
2457	111	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
2457	111	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
2457	111	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
2457	111	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
2458	124	4	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance.$.length != $.mainSetDimension
2458	124	4	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance != null
2459	127	4	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance != null
2459	127	4	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance.$.length != $.mainSetDimension
2460	146	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
5796	152	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
5796	152	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
5796	152	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
2461	159	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
5797	162	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
5797	162	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
5797	162	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
5798	167	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
5798	167	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
5798	167	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
2462	176	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
2462	176	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
2463	179	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
2463	179	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
2464	182	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
2465	197	4	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	NumberIsTooSmallException	$.FastMath.abs(h) < $.minStep
2465	197	4	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	NumberIsTooSmallException	FastMath.abs($) < minStep
2466	198	6	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
2467	205	4	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
2467	205	4	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
2468	209	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
2468	209	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
282	176	4	AggregateSummaryStatistics.java	aggregate	statistics	Collection<SummaryStatistics>	0	RET	$ == null
283	180	4	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	RET	$.hasNext()
4407	190	4	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	NIL-WHILE	$.hasNext()
284	192	6	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMin() < min
284	192	6	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	Double.isNaN($)
284	192	6	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	current.getMin() < $
285	195	6	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMax() > max
285	195	6	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	current.getMax() > $
285	195	6	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	Double.isNaN($)
286	207	4	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 0
287	211	6	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 1
3914	21	4	ArgUtils.java	flatten	array	Object[]	0	DEF	$ != null
3915	23	8	ArgUtils.java	flatten	THIS	ArgUtils	1	DEF	$.o instanceof Object[]
709	38	4	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
709	38	4	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
710	65	4	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	$ == k
710	65	4	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
710	65	4	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	n == $
711	68	4	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
711	68	4	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
711	68	4	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
712	71	4	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	k > $ / 2
712	71	4	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ > n / 2
713	75	4	ArithmeticUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 61
4610	77	6	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
4610	77	6	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
714	83	6	ArithmeticUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 66
4611	85	8	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
4611	85	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
4612	93	8	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
4612	93	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
715	113	4	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	$ == k
715	113	4	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 0
715	113	4	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	n == $
716	116	4	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	k == $ - 1
716	116	4	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 1
716	116	4	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == n - 1
717	119	4	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	k > $ / 2
717	119	4	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ > n / 2
718	122	4	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	$ < 67
4613	126	4	ArithmeticUtils.java	binomialCoefficientDouble	i	int	0	NIL-FOR	$ <= k
4613	126	4	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	NIL-FOR	i <= $
719	142	4	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
719	142	4	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
719	142	4	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
720	145	4	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
720	145	4	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
720	145	4	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
721	148	4	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 67
722	151	4	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 1030
723	154	4	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	k > $ / 2
723	154	4	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ > n / 2
4614	158	4	ArithmeticUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
4614	158	4	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
4615	161	4	ArithmeticUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= k
4615	161	4	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= $
724	175	4	ArithmeticUtils.java	factorial	n	int	0	NotPositiveException	$ < 0
725	178	4	ArithmeticUtils.java	factorial	n	int	0	MathArithmeticException	$ > 20
726	190	4	ArithmeticUtils.java	factorialDouble	n	int	0	NotPositiveException	$ < 0
727	193	4	ArithmeticUtils.java	factorialDouble	n	int	0	RET	$ < 21
728	205	4	ArithmeticUtils.java	factorialLog	n	int	0	NotPositiveException	$ < 0
729	208	4	ArithmeticUtils.java	factorialLog	n	int	0	RET	$ < 21
4616	212	4	ArithmeticUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
4616	212	4	ArithmeticUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
730	228	4	ArithmeticUtils.java	gcd	a	int	0	MathArithmeticException:RET	$ == 0
730	228	4	ArithmeticUtils.java	gcd	b	int	0	MathArithmeticException:RET	$ == 0
731	229	6	ArithmeticUtils.java	gcd	a	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
731	229	6	ArithmeticUtils.java	gcd	b	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
732	237	4	ArithmeticUtils.java	gcd	a	int	0	DEF	$ < 0
733	238	6	ArithmeticUtils.java	gcd	a	int	1	DEF	Integer.MIN_VALUE == $
734	246	4	ArithmeticUtils.java	gcd	b	int	0	DEF	$ < 0
735	247	6	ArithmeticUtils.java	gcd	b	int	1	DEF	Integer.MIN_VALUE == $
736	255	4	ArithmeticUtils.java	gcd	useLong	boolean	0	MathArithmeticException:RET	$
737	256	6	ArithmeticUtils.java	gcd	al	long	0	MathArithmeticException	$ == bl
737	256	6	ArithmeticUtils.java	gcd	bl	long	0	MathArithmeticException	al == $
738	262	6	ArithmeticUtils.java	gcd	al	long	0	MathArithmeticException:RET	$ == 0
739	263	8	ArithmeticUtils.java	gcd	bl	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
740	281	4	ArithmeticUtils.java	gcdPositive	a	int	1	RET	$ == 0
741	285	6	ArithmeticUtils.java	gcdPositive	b	int	0	RET	$ == 0
4617	294	4	ArithmeticUtils.java	gcdPositive	a	int	0	NIL-WHILE	$ != b
4617	294	4	ArithmeticUtils.java	gcdPositive	b	int	0	NIL-WHILE	a != $
742	313	4	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException:RET	$ == 0
742	313	4	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException:RET	$ == 0
743	314	6	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException	$ == Long.MIN_VALUE
743	314	6	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException	$ == Long.MIN_VALUE
744	319	4	ArithmeticUtils.java	gcd	u	long	0	DEF	$ > 0
745	322	4	ArithmeticUtils.java	gcd	v	long	0	DEF	$ > 0
4618	326	4	ArithmeticUtils.java	gcd	u	long	0	NIL-WHILE	($ & 1) == 0
4618	326	4	ArithmeticUtils.java	gcd	v	long	0	NIL-WHILE	($ & 1) == 0
4618	326	4	ArithmeticUtils.java	gcd	k	int	0	NIL-WHILE	$ < 63
746	331	4	ArithmeticUtils.java	gcd	k	int	0	MathArithmeticException	$ == 63
4619	335	4	ArithmeticUtils.java	gcd	t	long	0	NIL-DOWHILE	$ != 0
4620	336	6	ArithmeticUtils.java	gcd	t	long	0	NIL-WHILE	($ & 1) == 0
747	339	6	ArithmeticUtils.java	gcd	t	long	1	DEF	$ > 0
748	359	4	ArithmeticUtils.java	lcm	a	int	0	RET	$ == 0
748	359	4	ArithmeticUtils.java	lcm	b	int	0	RET	$ == 0
749	363	4	ArithmeticUtils.java	lcm	lcm	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
750	377	4	ArithmeticUtils.java	lcm	a	long	0	RET	$ == 0
750	377	4	ArithmeticUtils.java	lcm	b	long	0	RET	$ == 0
751	381	4	ArithmeticUtils.java	lcm	lcm	long	0	MathArithmeticException	$ == Long.MIN_VALUE
752	396	4	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
752	396	4	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
753	411	4	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ > b
753	411	4	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a > $
754	415	6	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ < 0
755	416	8	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ < 0
756	417	10	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
756	417	10	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
757	425	10	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ > 0
758	426	12	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
758	426	12	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
759	439	8	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ > 0
760	440	10	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
760	440	10	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
761	464	4	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
761	464	4	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
762	479	4	ArithmeticUtils.java	subAndCheck	b	long	1	MathArithmeticException	$ == Long.MIN_VALUE
763	480	6	ArithmeticUtils.java	subAndCheck	a	long	1	DEF	$ < 0
764	500	4	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
4621	505	4	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
765	506	6	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
766	522	4	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
4622	527	4	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
767	528	6	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
768	544	4	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
4623	549	4	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
769	550	6	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
770	566	4	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
4624	571	4	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
771	572	6	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
772	588	4	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
773	601	4	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
4625	606	4	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
774	607	6	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
775	623	4	ArithmeticUtils.java	pow	e	BigInteger	0	NotPositiveException	$.compareTo(BigInteger.ZERO) < 0
4626	628	4	ArithmeticUtils.java	pow	e	BigInteger	0	NIL-WHILE	BigInteger.ZERO.equals($)
776	629	6	ArithmeticUtils.java	pow	e	BigInteger	0	DEF	$.testBit(0)
777	648	4	ArithmeticUtils.java	stirlingS2	k	int	0	NotPositiveException	$ < 0
778	651	4	ArithmeticUtils.java	stirlingS2	n	int	0	NumberIsTooLargeException	k > $
778	651	4	ArithmeticUtils.java	stirlingS2	k	int	0	NumberIsTooLargeException	$ > n
779	655	4	ArithmeticUtils.java	stirlingS2	stirlingS2	long[][]	0	DEF	$ == null
4627	659	6	ArithmeticUtils.java	stirlingS2	THIS	ArithmeticUtils	0	NIL-FOR	i < stirlingS2.$.length
4627	659	6	ArithmeticUtils.java	stirlingS2	i	int	0	NIL-FOR	$ < stirlingS2.length
4627	659	6	ArithmeticUtils.java	stirlingS2	stirlingS2	long[][]	0	NIL-FOR	i < $.length
4628	664	8	ArithmeticUtils.java	stirlingS2	j	int	0	NIL-FOR	$ < i
4628	664	8	ArithmeticUtils.java	stirlingS2	i	int	0	NIL-FOR	j < $
780	670	4	ArithmeticUtils.java	stirlingS2	THIS	ArithmeticUtils	1	RET	n < stirlingS2.$.length
780	670	4	ArithmeticUtils.java	stirlingS2	stirlingS2	long[][]	1	RET	n < $.length
780	670	4	ArithmeticUtils.java	stirlingS2	n	int	1	RET	$ < stirlingS2.length
781	674	6	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == 0
782	678	8	ArithmeticUtils.java	stirlingS2	n	int	1	RET	k == $
782	678	8	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == n
782	678	8	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == 1
783	682	10	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == 2
784	686	12	ArithmeticUtils.java	stirlingS2	n	int	1	RET	k == $ - 1
784	686	12	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == n - 1
4629	692	14	ArithmeticUtils.java	stirlingS2	j	int	0	NIL-FOR	$ <= k
4629	692	14	ArithmeticUtils.java	stirlingS2	k	int	0	NIL-FOR	j <= $
785	695	16	ArithmeticUtils.java	stirlingS2	sum	long	0	MathArithmeticException	$ < 0
786	717	4	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ > b
786	717	4	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a > $
787	721	6	ArithmeticUtils.java	addAndCheck	a	long	1	MathArithmeticException	$ < 0
788	722	8	ArithmeticUtils.java	addAndCheck	b	long	1	MathArithmeticException	$ < 0
789	723	10	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
789	723	10	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
790	735	8	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
790	735	8	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
791	753	4	ArithmeticUtils.java	checkBinomial	n	int	0	NumberIsTooLargeException	$ < k
791	753	4	ArithmeticUtils.java	checkBinomial	k	int	0	NumberIsTooLargeException	n < $
792	756	4	ArithmeticUtils.java	checkBinomial	n	int	0	NotPositiveException	$ < 0
1234	95	4	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	copyArray	boolean	1	DEF	$
1235	101	6	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NoDataException	$ == 0
1236	105	6	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
4830	108	6	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	NIL-FOR	$ < nRows
4830	108	6	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	r < $
1237	109	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	d[r].length != nCols
1237	109	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1237	109	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1237	109	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	DimensionMismatchException	$[r].length != nCols
4831	133	4	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	row	int	0	NIL-FOR	$ < nRows
4831	133	4	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	row < $
4832	160	4	Array2DRowFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
4832	160	4	Array2DRowFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
4833	164	6	Array2DRowFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
4833	164	6	Array2DRowFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
4834	181	4	Array2DRowFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
4834	181	4	Array2DRowFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
4835	185	6	Array2DRowFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
4835	185	6	Array2DRowFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
4836	203	4	Array2DRowFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
4836	203	4	Array2DRowFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
4837	206	6	Array2DRowFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
4837	206	6	Array2DRowFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
4838	208	8	Array2DRowFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
4838	208	8	Array2DRowFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1238	233	4	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	1	DimensionMismatchException	$.data == null
1239	234	6	Array2DRowFieldMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1240	237	6	Array2DRowFieldMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1241	241	6	Array2DRowFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1242	245	6	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
4839	249	6	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	NIL-FOR	i < $.data.$.length
4839	249	6	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1243	250	8	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1243	250	8	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1243	250	8	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1243	250	8	Array2DRowFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[i].length != nCols
1244	310	4	Array2DRowFieldMatrix.java	operate	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1244	310	4	Array2DRowFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1244	310	4	Array2DRowFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
4840	314	4	Array2DRowFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
4840	314	4	Array2DRowFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
4841	317	6	Array2DRowFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
4841	317	6	Array2DRowFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1245	330	4	Array2DRowFieldMatrix.java	preMultiply	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1245	330	4	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1245	330	4	Array2DRowFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
4842	334	4	Array2DRowFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
4842	334	4	Array2DRowFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
4843	336	6	Array2DRowFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
4843	336	6	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
4844	350	4	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
4844	350	4	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
4845	352	6	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
4845	352	6	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
4846	365	4	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
4846	365	4	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
4847	367	6	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
4847	367	6	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
4848	379	4	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
4848	379	4	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
4849	381	6	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
4849	381	6	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
4850	393	4	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
4850	393	4	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
4851	395	6	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
4851	395	6	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
4852	408	4	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
4852	408	4	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
4853	409	6	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
4853	409	6	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
4854	423	4	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
4854	423	4	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
4855	424	6	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
4855	424	6	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
4856	436	4	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
4856	436	4	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
4857	437	6	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
4857	437	6	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
4858	450	4	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
4858	450	4	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
4859	451	6	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
4859	451	6	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
4860	464	4	Array2DRowFieldMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
4860	464	4	Array2DRowFieldMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1189	61	4	Array2DRowRealMatrix.java	Array2DRowRealMatrix	copyArray	boolean	1	DEF	$
1190	65	6	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	NullArgumentException	$ == null
1191	69	6	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NoDataException	$ == 0
1192	73	6	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	NoDataException	$ == 0
4756	76	6	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	NIL-FOR	$ < nRows
4756	76	6	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	r < $
1193	77	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	d[r].length != nCols
1193	77	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1193	77	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1193	77	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	DimensionMismatchException	$[r].length != nCols
4757	91	4	Array2DRowRealMatrix.java	Array2DRowRealMatrix	row	int	0	NIL-FOR	$ < nRows
4757	91	4	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	row < $
4758	118	4	Array2DRowRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
4758	118	4	Array2DRowRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
4759	122	6	Array2DRowRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
4759	122	6	Array2DRowRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
4760	139	4	Array2DRowRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
4760	139	4	Array2DRowRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
4761	143	6	Array2DRowRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
4761	143	6	Array2DRowRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
4762	163	4	Array2DRowRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
4762	163	4	Array2DRowRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
4763	164	6	Array2DRowRealMatrix.java	multiply	mRow	int	0	NIL-FOR	$ < nSum
4763	164	6	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	mRow < $
4764	167	6	Array2DRowRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
4764	167	6	Array2DRowRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
4765	170	8	Array2DRowRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
4765	170	8	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1194	195	4	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	1	DimensionMismatchException	$.data == null
1195	196	6	Array2DRowRealMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1196	199	6	Array2DRowRealMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1197	204	6	Array2DRowRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1198	208	6	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
4766	212	6	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	NIL-FOR	i < $.data.$.length
4766	212	6	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1199	213	8	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1199	213	8	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1199	213	8	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1199	213	8	Array2DRowRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[i].length != nCols
1200	269	4	Array2DRowRealMatrix.java	operate	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1200	269	4	Array2DRowRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1200	269	4	Array2DRowRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
4767	273	4	Array2DRowRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
4767	273	4	Array2DRowRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
4768	276	6	Array2DRowRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
4768	276	6	Array2DRowRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1201	289	4	Array2DRowRealMatrix.java	preMultiply	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1201	289	4	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1201	289	4	Array2DRowRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
4769	293	4	Array2DRowRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
4769	293	4	Array2DRowRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
4770	295	6	Array2DRowRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
4770	295	6	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
4771	309	4	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
4771	309	4	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
4772	311	6	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
4772	311	6	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
4773	324	4	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
4773	324	4	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
4774	326	6	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
4774	326	6	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
4775	338	4	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
4775	338	4	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
4776	340	6	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
4776	340	6	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
4777	352	4	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
4777	352	4	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
4778	354	6	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
4778	354	6	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
4779	367	4	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
4779	367	4	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
4780	368	6	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
4780	368	6	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
4781	382	4	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
4781	382	4	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
4782	383	6	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
4782	383	6	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
4783	395	4	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
4783	395	4	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
4784	396	6	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
4784	396	6	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
4785	409	4	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
4785	409	4	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
4786	410	6	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
4786	410	6	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
4787	423	4	Array2DRowRealMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
4787	423	4	Array2DRowRealMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1483	100	4	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	d.$.length == 0
1483	100	4	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	ZeroException	$.length == 0
1484	129	4	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1484	129	4	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1484	129	4	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1484	129	4	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
1485	147	4	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1485	147	4	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1485	147	4	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1485	147	4	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
5224	163	4	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5224	163	4	ArrayFieldVector.java	ArrayFieldVector	i	int	0	NIL-FOR	$ < data.length
1486	278	4	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1486	278	4	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1486	278	4	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
1487	298	4	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1487	298	4	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1487	298	4	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
5225	328	6	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5225	328	6	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
5226	343	4	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5226	343	4	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
5227	358	6	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5227	358	6	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
5228	373	4	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5228	373	4	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
5229	383	4	ArrayFieldVector.java	mapAdd	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5229	383	4	ArrayFieldVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
5230	392	4	ArrayFieldVector.java	mapAddToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5230	392	4	ArrayFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
5231	402	4	ArrayFieldVector.java	mapSubtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5231	402	4	ArrayFieldVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
5232	411	4	ArrayFieldVector.java	mapSubtractToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5232	411	4	ArrayFieldVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
5233	421	4	ArrayFieldVector.java	mapMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5233	421	4	ArrayFieldVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
5234	430	4	ArrayFieldVector.java	mapMultiplyToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5234	430	4	ArrayFieldVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
5235	441	4	ArrayFieldVector.java	mapDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5235	441	4	ArrayFieldVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
5236	451	4	ArrayFieldVector.java	mapDivideToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5236	451	4	ArrayFieldVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
5237	462	4	ArrayFieldVector.java	mapInv	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5237	462	4	ArrayFieldVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
5238	477	4	ArrayFieldVector.java	mapInvToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5238	477	4	ArrayFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
5239	497	6	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5239	497	6	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
5240	512	4	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5240	512	4	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
5241	527	6	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5241	527	6	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
5242	548	4	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5242	548	4	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
5243	581	6	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5243	581	6	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
5244	596	4	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5244	596	4	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
5245	628	6	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
5245	628	6	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
5246	629	8	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
5246	629	8	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
5247	645	4	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
5247	645	4	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
5248	646	6	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
5248	646	6	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1488	696	4	ArrayFieldVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
5249	729	8	ArrayFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
5249	729	8	ArrayFieldVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
5249	729	8	ArrayFieldVector.java	setSubVector	v	FieldVector<T>	0	NIL-FOR	i < index + $.getDimension()
1489	780	4	ArrayFieldVector.java	checkVectorDimensions	THIS	ArrayFieldVector	0	DimensionMismatchException	$.data.$.length != n
1489	780	4	ArrayFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1490	790	4	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$ == other
1490	790	4	ArrayFieldVector.java	equals	other	Object	0	RET	this == $
1491	793	4	ArrayFieldVector.java	equals	other	Object	0	RET	$ == null
1492	798	6	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data.$.length != rhs.getDimension()
1492	798	6	ArrayFieldVector.java	equals	rhs	FieldVector	0	RET	data.length != $.getDimension()
5250	801	6	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
5250	801	6	ArrayFieldVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1493	802	8	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data[i].equals(rhs.getEntry(i))
1493	802	8	ArrayFieldVector.java	equals	i	int	0	RET	data[$].equals(rhs.getEntry($))
1493	802	8	ArrayFieldVector.java	equals	rhs	FieldVector	0	RET	data[i].equals($.getEntry(i))
1494	829	4	ArrayFieldVector.java	checkIndex	THIS	ArrayFieldVector	0	OutOfRangeException	index >= $.getDimension()
1494	829	4	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1494	829	4	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1206	70	4	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1207	84	4	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1208	87	4	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1208	87	4	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NumberIsTooLargeException	$.length < pos + size
1208	87	4	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1208	87	4	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
4793	99	4	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < d.$.length
4793	99	4	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < d.length
4793	99	4	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NIL-FOR	i < $.length
1209	112	4	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NullArgumentException	$ == null
1210	115	4	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1210	115	4	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NumberIsTooLargeException	$.length < pos + size
1210	115	4	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1210	115	4	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
4794	119	4	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < pos + size
4794	119	4	ArrayRealVector.java	ArrayRealVector	pos	int	0	NIL-FOR	i < $ + size
4794	119	4	ArrayRealVector.java	ArrayRealVector	size	int	0	NIL-FOR	i < pos + $
1211	129	4	ArrayRealVector.java	ArrayRealVector	v	RealVector	0	NullArgumentException	$ == null
4795	133	4	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
4795	133	4	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < data.length
4796	173	4	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l2
4796	173	4	ArrayRealVector.java	ArrayRealVector	l2	int	0	NIL-FOR	i < $
4797	186	4	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l1
4797	186	4	ArrayRealVector.java	ArrayRealVector	l1	int	0	NIL-FOR	i < $
1212	237	4	ArrayRealVector.java	add	v	RealVector	1	RET	$ instanceof ArrayRealVector
4798	243	6	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < dim
4798	243	6	ArrayRealVector.java	add	dim	int	0	NIL-FOR	i < $
4799	252	6	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1213	263	4	ArrayRealVector.java	subtract	v	RealVector	1	RET	$ instanceof ArrayRealVector
4800	269	6	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < dim
4800	269	6	ArrayRealVector.java	subtract	dim	int	0	NIL-FOR	i < $
4801	278	6	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
4802	295	4	ArrayRealVector.java	mapToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
4802	295	4	ArrayRealVector.java	mapToSelf	i	int	0	NIL-FOR	$ < data.length
4803	304	4	ArrayRealVector.java	mapAddToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
4803	304	4	ArrayRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
4804	313	4	ArrayRealVector.java	mapSubtractToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
4804	313	4	ArrayRealVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
4805	322	4	ArrayRealVector.java	mapMultiplyToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
4805	322	4	ArrayRealVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
4806	331	4	ArrayRealVector.java	mapDivideToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
4806	331	4	ArrayRealVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
1214	340	4	ArrayRealVector.java	ebeMultiply	v	RealVector	1	RET	$ instanceof ArrayRealVector
4807	346	6	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < dim
4807	346	6	ArrayRealVector.java	ebeMultiply	dim	int	0	NIL-FOR	i < $
4808	354	6	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
4808	354	6	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
1215	364	4	ArrayRealVector.java	ebeDivide	v	RealVector	1	RET	$ instanceof ArrayRealVector
4809	370	6	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < dim
4809	370	6	ArrayRealVector.java	ebeDivide	dim	int	0	NIL-FOR	i < $
4810	378	6	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
4810	378	6	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
1216	395	4	ArrayRealVector.java	dotProduct	v	RealVector	0	RET	$ instanceof ArrayRealVector
4811	399	6	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
4811	399	6	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
1217	440	4	ArrayRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
4812	444	6	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
4812	444	6	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
4813	453	6	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
4813	453	6	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
1218	464	4	ArrayRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof ArrayRealVector
4814	468	6	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
4814	468	6	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
4815	477	6	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
4815	477	6	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
1219	488	4	ArrayRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
4816	492	6	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
4816	492	6	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
4817	501	6	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
4817	501	6	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
1220	512	4	ArrayRealVector.java	outerProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
4818	517	6	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
4818	517	6	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
4819	518	8	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
4819	518	8	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
4820	528	6	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
4820	528	6	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
4821	529	8	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
4821	529	8	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1221	585	4	ArrayRealVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
1222	624	4	ArrayRealVector.java	setSubVector	v	RealVector	1	DEF	$ instanceof ArrayRealVector
4822	629	8	ArrayRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
4822	629	8	ArrayRealVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
4822	629	8	ArrayRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
1223	686	4	ArrayRealVector.java	checkVectorDimensions	THIS	ArrayRealVector	0	DimensionMismatchException	$.data.$.length != n
1223	686	4	ArrayRealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1224	696	6	ArrayRealVector.java	isNaN	THIS	ArrayRealVector	0	RET	Double.isNaN($.v)
1225	707	4	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	$.isNaN()
1226	711	6	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	Double.isInfinite($.v)
1227	721	4	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$ == other
1227	721	4	ArrayRealVector.java	equals	other	Object	0	RET	this == $
1228	724	4	ArrayRealVector.java	equals	other	Object	0	RET	$ instanceof RealVector
1229	728	4	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data.$.length != rhs.getDimension()
1229	728	4	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
1230	731	4	ArrayRealVector.java	equals	rhs	RealVector	0	RET	$.isNaN()
4823	734	4	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
4823	734	4	ArrayRealVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1231	735	6	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data[i] != rhs.getEntry(i)
1231	735	6	ArrayRealVector.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
1231	735	6	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
1232	745	4	ArrayRealVector.java	hashCode	THIS	ArrayRealVector	0	RET	$.isNaN()
1233	760	4	ArrayRealVector.java	combineToSelf	y	RealVector	1	DEF	$ instanceof ArrayRealVector
4824	763	6	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
4824	763	6	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
4825	769	6	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
4825	769	6	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
4826	780	4	ArrayRealVector.java	walkInDefaultOrder	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
4826	780	4	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < data.length
4827	791	4	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
4827	791	4	ArrayRealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
4828	813	4	ArrayRealVector.java	walkInDefaultOrder	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
4828	813	4	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < data.length
4829	824	4	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
4829	824	4	ArrayRealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
6295	168	4	BOBYQAOptimizer.java	bobyqa	j	int	0	NIL-FOR	$ < n
6295	168	4	BOBYQAOptimizer.java	bobyqa	n	int	0	NIL-FOR	j < $
3170	172	6	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= -$.initialTrustRegionRadius
3170	172	6	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= -initialTrustRegionRadius
3171	173	8	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= ZERO
3171	173	8	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= ZERO
3172	186	8	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(j) <= $.initialTrustRegionRadius
3172	186	8	BOBYQAOptimizer.java	bobyqa	j	int	0	DEF	upperDifference.getEntry($) <= initialTrustRegionRadius
3173	187	10	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.upperDifference.getEntry(j) <= ZERO
3173	187	10	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	upperDifference.getEntry($) <= ZERO
6296	227	4	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
6296	227	4	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
3174	258	10	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex != kbase
3174	258	10	BOBYQAOptimizer.java	bobyqb	kbase	int	0	DEF	trustRegionCenterInterpolationPointIndex != $
6297	260	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
6297	260	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
6298	261	14	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
6298	261	14	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
3175	262	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
3175	262	16	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
3176	269	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() > npt
3176	269	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	getEvaluations() > $
6299	270	14	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6299	270	14	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
6300	272	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
6300	272	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
6301	276	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
6301	276	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
3177	297	8	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm < HALF * $
3177	297	8	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ < HALF * rho
3178	301	10	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() <= nfsav + 2
3178	301	10	BOBYQAOptimizer.java	bobyqb	nfsav	int	0	DEF	getEvaluations() <= $ + 2
3179	308	10	BOBYQAOptimizer.java	bobyqb	errbig	double	0	DEF	$ > frhosq * crvmin
3179	308	10	BOBYQAOptimizer.java	bobyqb	frhosq	double	0	DEF	errbig > $ * crvmin
3179	308	10	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	errbig > frhosq * $
3179	308	10	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	$ > ZERO
6302	313	10	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
6302	313	10	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
3180	315	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.lowerDifference.getEntry(j)
3180	315	12	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
3181	318	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.upperDifference.getEntry(j)
3181	318	12	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
3182	321	12	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
3182	321	12	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
6303	323	14	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6303	323	14	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
3183	328	14	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
3183	328	14	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
3184	342	6	BOBYQAOptimizer.java	bobyqb	dsq	double	0	DEF	$ <= xoptsq * ONE_OVER_A_THOUSAND
3184	342	6	BOBYQAOptimizer.java	bobyqb	xoptsq	double	0	DEF	dsq <= $ * ONE_OVER_A_THOUSAND
6304	345	8	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6304	345	8	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
6305	348	10	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
6305	348	10	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
6306	353	10	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
6306	353	10	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
6307	357	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
6307	357	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
6308	362	8	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
6308	362	8	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
6309	365	10	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6309	365	10	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
6310	370	10	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
6310	370	10	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
6311	372	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6311	372	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
6312	376	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6312	376	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
6313	380	10	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
6313	380	10	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
6314	383	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
6314	383	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
6315	389	8	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
6315	389	8	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
6316	391	10	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6316	391	10	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
6317	395	10	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
6317	395	10	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
6318	401	8	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
6318	401	8	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
3185	410	6	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
6319	423	4	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
6319	423	4	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
6320	430	2	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6320	430	2	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
6321	434	4	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
6321	434	4	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
6322	444	2	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
6322	444	2	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
6323	446	4	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6323	446	4	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
6324	450	4	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6324	450	4	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
6325	457	2	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
6325	457	2	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
6326	461	4	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6326	461	4	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
6327	466	4	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
6327	466	4	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
3186	475	2	BOBYQAOptimizer.java	bobyqb	ntrits	int	1	DEF	$ == 0
3187	478	4	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	$ > ZERO
3187	478	4	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	denom < $
3187	478	4	BOBYQAOptimizer.java	bobyqb	denom	double	0	DEF	$ < cauchy
6328	479	6	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
6328	479	6	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
6329	493	4	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6329	493	4	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
3188	494	6	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
3188	494	6	BOBYQAOptimizer.java	bobyqb	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
6330	498	6	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
6330	498	6	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
6331	505	6	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
6331	505	6	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
3189	511	6	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
3189	511	6	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
3189	511	6	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
6332	524	0	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
6332	524	0	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
3190	530	2	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.lowerDifference.getEntry(i)
3190	530	2	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
3191	533	2	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.upperDifference.getEntry(i)
3191	533	2	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
3192	538	0	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.isMinimize
3193	541	0	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
6333	549	0	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
6333	549	0	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
6334	551	2	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
6334	551	2	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
3194	553	4	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ == j
3194	553	4	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i == $
6335	560	0	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6335	560	0	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
3195	569	0	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm > $
3195	569	0	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ > rho
3196	572	0	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	MathIllegalStateException	$ > 0
3197	573	2	BOBYQAOptimizer.java	bobyqb	vquad	double	0	MathIllegalStateException	$ >= ZERO
3198	578	2	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= ONE_OVER_TEN
3199	582	4	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= .7
3200	589	2	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
3200	589	2	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
3201	592	2	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
3201	592	2	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
6336	599	4	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6336	599	4	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
6337	601	6	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
6337	601	6	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
6338	608	6	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
6338	608	6	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
3202	614	6	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
3202	614	6	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
3202	614	6	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
3203	623	4	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	$ <= HALF * biglsq
3203	623	4	BOBYQAOptimizer.java	bobyqb	biglsq	double	0	DEF	scaden <= HALF * $
6339	633	0	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
6339	633	0	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
6340	635	2	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
6340	635	2	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
6341	640	0	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
6341	640	0	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
6342	642	2	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6342	642	2	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
6343	647	0	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
6343	647	0	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
6344	651	0	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6344	651	0	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
6345	653	2	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
6345	653	2	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
6346	657	2	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
6346	657	2	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
6347	661	2	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
6347	661	2	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
6348	665	0	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
6348	665	0	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
3204	668	0	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
3204	668	0	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
6349	672	2	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
6349	672	2	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
6350	676	4	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
6350	676	4	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
3205	677	6	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
3205	677	6	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
6351	684	2	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6351	684	2	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
6352	686	4	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
6352	686	4	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
6353	690	4	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
6353	690	4	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
3206	695	0	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ > 0
6354	696	2	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6354	696	2	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
6355	700	2	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < nptm
6355	700	2	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	j < $
6356	702	4	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6356	702	4	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
6357	705	4	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6357	705	4	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
6358	709	2	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6358	709	2	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
6359	711	4	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
6359	711	4	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
6360	719	2	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
6360	719	2	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
6361	721	4	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6361	721	4	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
3207	724	4	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
3207	724	4	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
3208	731	6	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
3208	731	6	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
3209	746	2	BOBYQAOptimizer.java	bobyqb	gqsq	double	0	DEF	$ < TEN * gisq
3209	746	2	BOBYQAOptimizer.java	bobyqb	gisq	double	0	DEF	gqsq < TEN * $
3210	749	2	BOBYQAOptimizer.java	bobyqb	itest	int	0	DEF	$ >= 3
6362	750	4	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < max
6362	750	4	BOBYQAOptimizer.java	bobyqb	max	int	0	NIL-FOR	i < $
3211	751	6	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < n
3211	751	6	BOBYQAOptimizer.java	bobyqb	n	int	0	DEF	i < $
3212	754	6	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < npt
3212	754	6	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	i < $
3213	757	6	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < nh
3213	757	6	BOBYQAOptimizer.java	bobyqb	nh	int	0	DEF	i < $
3214	764	0	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
3215	768	0	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f <= $ + ONE_OVER_TEN * vquad
3215	768	0	BOBYQAOptimizer.java	bobyqb	vquad	double	0	DEF	f <= fopt + ONE_OVER_TEN * $
3215	768	0	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ <= fopt + ONE_OVER_TEN * vquad
6363	780	0	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
6363	780	0	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
6364	782	0	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
6364	782	0	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
3216	786	0	BOBYQAOptimizer.java	bobyqb	sum	double	0	DEF	$ > distsq
3216	786	0	BOBYQAOptimizer.java	bobyqb	distsq	double	0	DEF	sum > $
3217	791	0	BOBYQAOptimizer.java	bobyqb	knew	int	0	DEF	$ >= 0
3218	793	0	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
3219	795	2	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
3219	795	2	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
3220	806	0	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
3221	810	0	BOBYQAOptimizer.java	bobyqb	ratio	double	0	DEF	$ > ZERO
3222	814	0	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	Math.max(delta,dnorm) > $
3222	814	0	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	Math.max($,dnorm) > rho
3222	814	0	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	Math.max(delta,$) > rho
3223	822	0	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	rho > $.stoppingTrustRegionRadius
3223	822	0	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	$ > stoppingTrustRegionRadius
3224	825	0	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= SIXTEEN
3225	829	0	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= TWO_HUNDRED_FIFTY
3226	842	0	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
3227	850	0	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex) <= fsave
3227	850	0	BOBYQAOptimizer.java	bobyqb	fsave	double	0	DEF	fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= $
6365	851	0	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
6365	851	0	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
3228	857	0	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
3228	857	0	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
3229	860	0	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
3229	860	0	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
6366	888	0	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
6366	888	0	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
6367	891	0	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < max
6367	891	0	BOBYQAOptimizer.java	altmov	max	int	0	NIL-FOR	j < $
6368	893	0	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
6368	893	0	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
6369	899	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
6369	899	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
6370	902	0	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
6370	902	0	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
6371	904	0	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
6371	904	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
6372	908	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
6372	908	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
6373	917	0	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
6373	917	0	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
3230	918	0	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
3230	918	0	BOBYQAOptimizer.java	altmov	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
6374	923	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
6374	923	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
6375	933	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
6375	933	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
3231	935	0	BOBYQAOptimizer.java	altmov	tmp	double	1	DEF	$ > ZERO
3232	936	0	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
3232	936	0	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
3232	936	0	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
3232	936	0	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
3233	940	0	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
3233	940	0	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
3233	940	0	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
3233	940	0	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
3234	946	0	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	$ < ZERO
3235	947	0	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
3235	947	0	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
3235	947	0	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
3235	947	0	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
3236	951	0	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
3236	951	0	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
3236	951	0	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
3236	951	0	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
3237	961	0	BOBYQAOptimizer.java	altmov	k	int	1	DEF	$ == knew
3237	961	0	BOBYQAOptimizer.java	altmov	knew	int	1	DEF	k == $
3238	965	0	BOBYQAOptimizer.java	altmov	d1	double	0	DEF	Math.abs($) > Math.abs(vlag)
3238	965	0	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d1) > Math.abs($)
3239	973	0	BOBYQAOptimizer.java	altmov	d3	double	0	DEF	$ * d4 < ZERO
3239	973	0	BOBYQAOptimizer.java	altmov	d4	double	0	DEF	d3 * $ < ZERO
3240	975	0	BOBYQAOptimizer.java	altmov	d5	double	0	DEF	Math.abs($) > Math.abs(vlag)
3240	975	0	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d5) > Math.abs($)
3241	985	0	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	Math.abs($) > Math.abs(vlag)
3241	985	0	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(tmp) > Math.abs($)
3242	990	0	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ > HALF
3242	990	0	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs($) < ONE_OVER_FOUR
3243	999	0	BOBYQAOptimizer.java	altmov	predsq	double	0	DEF	$ > presav
3243	999	0	BOBYQAOptimizer.java	altmov	presav	double	0	DEF	predsq > $
6376	1006	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
6376	1006	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
3244	1010	0	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ < 0
3245	1013	0	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ > 0
6377	1023	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
6377	1023	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
3246	1026	0	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.max($.trustRegionCenterOffset.getEntry(i) - $.upperDifference.getEntry(i),glagValue) < ZERO
3246	1026	0	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.min($.trustRegionCenterOffset.getEntry(i) - $.lowerDifference.getEntry(i),glagValue) > ZERO
3246	1026	0	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i),$) < ZERO
3246	1026	0	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i),$) > ZERO
3246	1026	0	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($),glagValue) < ZERO
3246	1026	0	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($),glagValue) > ZERO
3247	1031	0	BOBYQAOptimizer.java	altmov	ggfree	double	0	RET	$ == ZERO
3248	1035	0	BOBYQAOptimizer.java	altmov	tmp1	double	0	DEF	$ > ZERO
6378	1038	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
6378	1038	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
3249	1039	0	BOBYQAOptimizer.java	altmov	i	int	0	DEF	work1.getEntry($) == bigstp
3249	1039	0	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	0	DEF	$.getEntry(i) == bigstp
3249	1039	0	BOBYQAOptimizer.java	altmov	bigstp	double	0	DEF	work1.getEntry(i) == $
3250	1041	0	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 <= $.lowerDifference.getEntry(i)
3250	1041	0	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ <= lowerDifference.getEntry(i)
3250	1041	0	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 <= lowerDifference.getEntry($)
3251	1047	0	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 >= $.upperDifference.getEntry(i)
3251	1047	0	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ >= upperDifference.getEntry(i)
3251	1047	0	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 >= upperDifference.getEntry($)
6379	1061	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
6379	1061	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
3252	1063	0	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == bigstp
3252	1063	0	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == bigstp
3252	1063	0	BOBYQAOptimizer.java	altmov	bigstp	double	1	DEF	work1.getEntry(i) == $
3253	1069	0	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == ZERO
3253	1069	0	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
3254	1073	0	BOBYQAOptimizer.java	altmov	glagValue	double	1	DEF	$ > ZERO
6380	1084	0	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
6380	1084	0	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
6381	1086	0	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
6381	1086	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
3255	1091	0	BOBYQAOptimizer.java	altmov	iflag	int	0	DEF	$ == 1
3256	1094	0	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv < -$ * (ONE + Math.sqrt(TWO))
3256	1094	0	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv > -$
3256	1094	0	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ < -gw * (ONE + Math.sqrt(TWO))
3256	1094	0	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ > -gw
6382	1096	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
6382	1096	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
3257	1107	0	BOBYQAOptimizer.java	altmov	iflag	int	1	DEF	$ == 0
6383	1108	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
6383	1108	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
3258	1119	0	BOBYQAOptimizer.java	altmov	cauchy	double	0	DEF	csave > $
3258	1119	0	BOBYQAOptimizer.java	altmov	csave	double	0	DEF	$ > cauchy
6384	1120	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
6384	1120	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
6385	1140	0	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
6385	1140	0	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
6386	1142	0	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
6386	1142	0	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
6387	1145	0	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < ndim
6387	1145	0	BOBYQAOptimizer.java	prelim	ndim	int	0	NIL-FOR	i < $
6388	1149	0	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < max
6388	1149	0	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	i < $
6389	1152	0	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
6389	1152	0	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
6390	1154	0	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < max
6390	1154	0	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	j < $
6391	1161	0	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	NIL-DOWHILE	$.getEvaluations() < npt
6391	1161	0	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-DOWHILE	getEvaluations() < $
3259	1168	0	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= 2 * n
3259	1168	0	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= 2 * $
3260	1169	0	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= n
3260	1169	0	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ >= 1
3260	1169	0	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= $
3261	1171	0	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfmm) == ZERO
3261	1171	0	BOBYQAOptimizer.java	prelim	nfmm	int	0	DEF	upperDifference.getEntry($) == ZERO
3262	1177	0	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	$ > n
3262	1177	0	BOBYQAOptimizer.java	prelim	n	int	0	DEF	nfm > $
3263	1180	0	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.lowerDifference.getEntry(nfxm) == ZERO
3263	1180	0	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	lowerDifference.getEntry($) == ZERO
3264	1183	0	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfxm) == ZERO
3264	1183	0	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	upperDifference.getEntry($) == ZERO
3265	1194	0	BOBYQAOptimizer.java	prelim	n	int	0	DEF	ipt > $
3265	1194	0	BOBYQAOptimizer.java	prelim	ipt	int	0	DEF	$ > n
6392	1204	0	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
6392	1204	0	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
3266	1206	0	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm,j) == $.lowerDifference.getEntry(j)
3266	1206	0	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm,$) == lowerDifference.getEntry($)
3266	1206	0	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($,j) == lowerDifference.getEntry(j)
3267	1209	0	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm,j) == $.upperDifference.getEntry(j)
3267	1209	0	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm,$) == upperDifference.getEntry($)
3267	1209	0	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($,j) == upperDifference.getEntry(j)
3268	1217	0	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ == 1
3269	1222	0	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex)
3269	1222	0	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)
3270	1226	0	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= 2 * n + 1
3270	1226	0	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= 2 * $ + 1
3271	1227	0	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= n + 1
3271	1227	0	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ >= 2
3271	1227	0	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= $ + 1
3272	1229	0	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	npt < $ + n
3272	1229	0	BOBYQAOptimizer.java	prelim	n	int	0	DEF	npt < numEval + $
3272	1229	0	BOBYQAOptimizer.java	prelim	npt	int	0	DEF	$ < numEval + n
3273	1237	0	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	$ >= n + 2
3273	1237	0	BOBYQAOptimizer.java	prelim	n	int	0	DEF	numEval >= $ + 2
3274	1243	0	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry(nfm - n)
3274	1243	0	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	f < fAtInterpolationPoints.getEntry($ - n)
3274	1243	0	BOBYQAOptimizer.java	prelim	stepa	double	0	DEF	$ * stepb < ZERO
3274	1243	0	BOBYQAOptimizer.java	prelim	stepb	double	0	DEF	stepa * $ < ZERO
3274	1243	0	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(nfm - n)
3274	1243	0	BOBYQAOptimizer.java	prelim	n	int	0	DEF	f < fAtInterpolationPoints.getEntry(nfm - $)
3275	1246	0	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex == nfm
3275	1246	0	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	trustRegionCenterInterpolationPointIndex == $
6393	1303	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
6393	1303	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3276	1305	0	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) <= $.lowerDifference.getEntry(i)
3276	1305	0	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	trustRegionCenterOffset.getEntry($) <= lowerDifference.getEntry($)
3277	1306	0	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) >= ZERO
3277	1306	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) >= ZERO
3278	1311	0	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) >= $.upperDifference.getEntry(i)
3278	1311	0	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) <= ZERO
3278	1311	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	trustRegionCenterOffset.getEntry($) >= upperDifference.getEntry($)
3278	1311	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) <= ZERO
3279	1315	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) != ZERO
3279	1315	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
6394	1336	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
6394	1336	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3280	1337	0	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) != ZERO
3280	1337	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) != ZERO
3281	1341	0	BOBYQAOptimizer.java	trsbox	beta	double	1	DEF	$ == ZERO
3282	1351	0	BOBYQAOptimizer.java	trsbox	stepsq	double	0	DEF	$ == ZERO
3283	1355	0	BOBYQAOptimizer.java	trsbox	beta	double	0	DEF	$ == ZERO
3284	1359	0	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	gredsq * delsq <= $ * 1e-4 * $
3284	1359	0	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	gredsq * $ <= qred * 1e-4 * qred
3284	1359	0	BOBYQAOptimizer.java	trsbox	gredsq	double	0	DEF	$ * delsq <= qred * 1e-4 * qred
6395	1372	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
6395	1372	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3285	1373	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
3285	1373	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
3286	1380	0	BOBYQAOptimizer.java	trsbox	resid	double	0	DEF	$ <= ZERO
3287	1385	0	BOBYQAOptimizer.java	trsbox	ds	double	1	DEF	$ < ZERO
3288	1392	0	BOBYQAOptimizer.java	trsbox	shs	double	0	DEF	$ > ZERO
6396	1396	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
6396	1396	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3289	1397	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	s.getEntry($) != ZERO
3289	1397	0	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
3290	1399	0	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	s.getEntry($) > ZERO
3290	1399	0	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	1	DEF	$.getEntry(i) > ZERO
3291	1405	0	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ < stplen
3291	1405	0	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	temp < $
3292	1412	0	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ > ZERO
3293	1415	0	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ == -1
3293	1415	0	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
3294	1417	0	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ == MINUS_ONE
6397	1423	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
6397	1423	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3295	1425	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
3295	1425	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
3296	1435	0	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
3297	1438	0	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	s.getEntry($) < ZERO
3297	1438	0	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(iact) < ZERO
3298	1443	0	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	$ <= ZERO
3299	1450	0	BOBYQAOptimizer.java	trsbox	blen	double	0	DEF	stplen < $
3299	1450	0	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ < blen
3300	1451	0	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ == itermax
3300	1451	0	BOBYQAOptimizer.java	trsbox	itermax	int	0	DEF	iterc == $
3301	1455	0	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= qred * .01
3301	1455	0	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec <= $ * .01
3302	1472	0	BOBYQAOptimizer.java	trsbox	n	int	0	DEF	nact >= $ - 1
3302	1472	0	BOBYQAOptimizer.java	trsbox	nact	int	0	DEF	$ >= n - 1
6398	1479	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
6398	1479	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3303	1480	0	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
3303	1480	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
3304	1501	0	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	temp <= $ * 1e-4 * $
3304	1501	0	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ <= qred * 1e-4 * qred
6399	1506	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
6399	1506	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3305	1507	0	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
3305	1507	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
6400	1517	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
6400	1517	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3306	1518	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
3306	1518	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
3307	1521	0	BOBYQAOptimizer.java	trsbox	tempa	double	1	DEF	$ <= ZERO
3308	1528	0	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	$ <= ZERO
3309	1540	0	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
3310	1542	0	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempa
3310	1542	0	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempa
3310	1542	0	BOBYQAOptimizer.java	trsbox	tempa	double	0	DEF	angbd * temp > $
3311	1550	0	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
3312	1552	0	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempb
3312	1552	0	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempb
3312	1552	0	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	angbd * temp > $
6401	1569	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
6401	1569	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3313	1570	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
3313	1570	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
6402	1580	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < iu
6402	1580	0	BOBYQAOptimizer.java	trsbox	iu	int	0	NIL-FOR	i < $
3314	1585	0	BOBYQAOptimizer.java	trsbox	redmax	double	1	DEF	rednew > $
3314	1585	0	BOBYQAOptimizer.java	trsbox	rednew	double	1	DEF	$ > redmax
3315	1591	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ == isav + 1
3315	1591	0	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	i == $ + 1
3316	1597	0	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < 0
3317	1601	0	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav < $
3317	1601	0	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < iu
3318	1609	0	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= ZERO
6403	1615	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
6403	1615	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3319	1617	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
3319	1617	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
3320	1626	0	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav == $
3320	1626	0	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
3320	1626	0	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ == iu
3321	1632	0	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ > qred * .01
3321	1632	0	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec > $ * .01
6404	1641	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
6404	1641	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3322	1644	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == MINUS_ONE
3322	1644	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == MINUS_ONE
3323	1647	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ONE
3323	1647	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ONE
6405	1660	0	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	$ < n
6405	1660	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	j < $
6406	1662	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ <= j
6406	1662	0	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	i <= $
3324	1663	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ < j
3324	1663	0	BOBYQAOptimizer.java	trsbox	j	int	0	DEF	i < $
6407	1671	0	BOBYQAOptimizer.java	trsbox	k	int	0	NIL-FOR	$ < npt
6407	1671	0	BOBYQAOptimizer.java	trsbox	npt	int	0	NIL-FOR	k < $
3325	1672	0	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.modelSecondDerivativesParameters.getEntry(k) != ZERO
3325	1672	0	BOBYQAOptimizer.java	trsbox	k	int	0	DEF	modelSecondDerivativesParameters.getEntry($) != ZERO
6408	1673	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
6408	1673	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3326	1678	0	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ != ZERO
3327	1682	0	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ > itcsav
3327	1682	0	BOBYQAOptimizer.java	trsbox	itcsav	int	0	DEF	iterc > $
6409	1686	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
6409	1686	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
6410	1712	0	BOBYQAOptimizer.java	update	k	int	0	NIL-FOR	$ < npt
6410	1712	0	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	k < $
6411	1713	0	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
6411	1713	0	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
6412	1718	0	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
6412	1718	0	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
3328	1720	0	BOBYQAOptimizer.java	update	d1	double	0	DEF	Math.abs($) > ztest
3328	1720	0	BOBYQAOptimizer.java	update	ztest	double	0	DEF	Math.abs(d1) > $
6413	1726	0	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
6413	1726	0	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
6414	1734	0	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
6414	1734	0	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
6415	1743	0	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
6415	1743	0	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
6416	1746	0	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < n
6416	1746	0	BOBYQAOptimizer.java	update	n	int	0	NIL-FOR	j < $
6417	1751	0	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ <= jp
6417	1751	0	BOBYQAOptimizer.java	update	jp	int	0	NIL-FOR	i <= $
3329	1753	0	BOBYQAOptimizer.java	update	i	int	0	DEF	$ >= npt
3329	1753	0	BOBYQAOptimizer.java	update	npt	int	0	DEF	i >= $
3330	1768	0	BOBYQAOptimizer.java	setup	dimension	int	0	NumberIsTooSmallException	$ < MINIMUM_PROBLEM_DIMENSION
3331	1772	0	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints > nPointsInterval[1]
3331	1772	0	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints < nPointsInterval[0]
3331	1772	0	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints > $[1]
3331	1772	0	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints < $[0]
6418	1778	0	BOBYQAOptimizer.java	setup	i	int	0	NIL-FOR	$ < dimension
6418	1778	0	BOBYQAOptimizer.java	setup	dimension	int	0	NIL-FOR	i < $
3332	1782	0	BOBYQAOptimizer.java	setup	requiredMinDiff	double	0	DEF	minDiff < $
3332	1782	0	BOBYQAOptimizer.java	setup	minDiff	double	0	DEF	$ < requiredMinDiff
5881	170	4	BOBYQAOptimizer.java	bobyqa	j	int	0	NIL-FOR	$ < n
5881	170	4	BOBYQAOptimizer.java	bobyqa	n	int	0	NIL-FOR	j < $
2572	174	6	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= -$.initialTrustRegionRadius
2572	174	6	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= -initialTrustRegionRadius
2573	175	8	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= ZERO
2573	175	8	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= ZERO
2574	188	8	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(j) <= $.initialTrustRegionRadius
2574	188	8	BOBYQAOptimizer.java	bobyqa	j	int	0	DEF	upperDifference.getEntry($) <= initialTrustRegionRadius
2575	189	10	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.upperDifference.getEntry(j) <= ZERO
2575	189	10	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	upperDifference.getEntry($) <= ZERO
5882	229	4	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
5882	229	4	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2576	260	10	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex != kbase
2576	260	10	BOBYQAOptimizer.java	bobyqb	kbase	int	0	DEF	trustRegionCenterInterpolationPointIndex != $
5883	262	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
5883	262	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
5884	263	14	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
5884	263	14	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2577	264	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
2577	264	16	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
2578	271	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() > npt
2578	271	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	getEvaluations() > $
5885	272	14	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5885	272	14	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
5886	274	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
5886	274	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
5887	278	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
5887	278	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2579	299	8	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm < HALF * $
2579	299	8	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ < HALF * rho
2580	303	10	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() <= nfsav + 2
2580	303	10	BOBYQAOptimizer.java	bobyqb	nfsav	int	0	DEF	getEvaluations() <= $ + 2
2581	310	10	BOBYQAOptimizer.java	bobyqb	errbig	double	0	DEF	$ > frhosq * crvmin
2581	310	10	BOBYQAOptimizer.java	bobyqb	frhosq	double	0	DEF	errbig > $ * crvmin
2581	310	10	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	errbig > frhosq * $
2581	310	10	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	$ > ZERO
5888	315	10	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
5888	315	10	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2582	317	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.lowerDifference.getEntry(j)
2582	317	12	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
2583	320	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.upperDifference.getEntry(j)
2583	320	12	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
2584	323	12	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
2584	323	12	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
5889	325	14	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5889	325	14	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2585	330	14	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
2585	330	14	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
2586	344	6	BOBYQAOptimizer.java	bobyqb	dsq	double	0	DEF	$ <= xoptsq * ONE_OVER_A_THOUSAND
2586	344	6	BOBYQAOptimizer.java	bobyqb	xoptsq	double	0	DEF	dsq <= $ * ONE_OVER_A_THOUSAND
5890	347	8	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5890	347	8	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
5891	350	10	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
5891	350	10	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
5892	355	10	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
5892	355	10	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
5893	359	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
5893	359	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
5894	364	8	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
5894	364	8	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
5895	367	10	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5895	367	10	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
5896	372	10	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
5896	372	10	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
5897	374	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5897	374	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
5898	378	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5898	378	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
5899	382	10	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
5899	382	10	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
5900	385	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
5900	385	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
5901	391	8	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
5901	391	8	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
5902	393	10	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5902	393	10	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
5903	397	10	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
5903	397	10	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
5904	403	8	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
5904	403	8	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2587	412	6	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
5905	425	4	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
5905	425	4	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
5906	432	2	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5906	432	2	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
5907	436	4	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
5907	436	4	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
5908	446	2	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
5908	446	2	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
5909	448	4	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5909	448	4	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
5910	452	4	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5910	452	4	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
5911	459	2	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
5911	459	2	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
5912	463	4	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5912	463	4	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
5913	468	4	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
5913	468	4	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2588	477	2	BOBYQAOptimizer.java	bobyqb	ntrits	int	1	DEF	$ == 0
2589	480	4	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	$ > ZERO
2589	480	4	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	denom < $
2589	480	4	BOBYQAOptimizer.java	bobyqb	denom	double	0	DEF	$ < cauchy
5914	481	6	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
5914	481	6	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
5915	495	4	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5915	495	4	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2590	496	6	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
2590	496	6	BOBYQAOptimizer.java	bobyqb	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
5916	500	6	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
5916	500	6	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
5917	507	6	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
5917	507	6	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2591	513	6	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
2591	513	6	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
2591	513	6	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
5918	526	0	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
5918	526	0	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2592	532	2	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.lowerDifference.getEntry(i)
2592	532	2	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
2593	535	2	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.upperDifference.getEntry(i)
2593	535	2	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
2594	540	0	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.isMinimize
2595	543	0	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
5919	551	0	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
5919	551	0	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
5920	553	2	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
5920	553	2	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2596	555	4	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ == j
2596	555	4	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i == $
5921	562	0	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5921	562	0	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2597	571	0	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm > $
2597	571	0	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ > rho
2598	574	0	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	MathIllegalStateException	$ > 0
2599	575	2	BOBYQAOptimizer.java	bobyqb	vquad	double	0	MathIllegalStateException	$ >= ZERO
2600	580	2	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= ONE_OVER_TEN
2601	584	4	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= .7
2602	591	2	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
2602	591	2	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
2603	594	2	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
2603	594	2	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
5922	601	4	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5922	601	4	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
5923	603	6	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
5923	603	6	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
5924	610	6	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
5924	610	6	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2604	616	6	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
2604	616	6	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
2604	616	6	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
2605	625	4	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	$ <= HALF * biglsq
2605	625	4	BOBYQAOptimizer.java	bobyqb	biglsq	double	0	DEF	scaden <= HALF * $
5925	635	0	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
5925	635	0	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
5926	637	2	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
5926	637	2	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
5927	642	0	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
5927	642	0	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
5928	644	2	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5928	644	2	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
5929	649	0	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
5929	649	0	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
5930	653	0	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5930	653	0	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
5931	655	2	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
5931	655	2	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
5932	659	2	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
5932	659	2	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
5933	663	2	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
5933	663	2	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
5934	667	0	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
5934	667	0	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2606	670	0	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
2606	670	0	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
5935	674	2	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
5935	674	2	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
5936	678	4	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
5936	678	4	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2607	679	6	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
2607	679	6	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
5937	686	2	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5937	686	2	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
5938	688	4	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
5938	688	4	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
5939	692	4	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
5939	692	4	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2608	697	0	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ > 0
5940	698	2	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5940	698	2	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
5941	702	2	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < nptm
5941	702	2	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	j < $
5942	704	4	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5942	704	4	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
5943	707	4	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5943	707	4	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
5944	711	2	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5944	711	2	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
5945	713	4	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
5945	713	4	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
5946	721	2	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
5946	721	2	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
5947	723	4	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5947	723	4	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2609	726	4	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
2609	726	4	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
2610	733	6	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
2610	733	6	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
2611	748	2	BOBYQAOptimizer.java	bobyqb	gqsq	double	0	DEF	$ < TEN * gisq
2611	748	2	BOBYQAOptimizer.java	bobyqb	gisq	double	0	DEF	gqsq < TEN * $
2612	751	2	BOBYQAOptimizer.java	bobyqb	itest	int	0	DEF	$ >= 3
5948	752	4	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < max
5948	752	4	BOBYQAOptimizer.java	bobyqb	max	int	0	NIL-FOR	i < $
2613	753	6	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < n
2613	753	6	BOBYQAOptimizer.java	bobyqb	n	int	0	DEF	i < $
2614	756	6	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < npt
2614	756	6	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	i < $
2615	759	6	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < nh
2615	759	6	BOBYQAOptimizer.java	bobyqb	nh	int	0	DEF	i < $
2616	766	0	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
2617	770	0	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f <= $ + ONE_OVER_TEN * vquad
2617	770	0	BOBYQAOptimizer.java	bobyqb	vquad	double	0	DEF	f <= fopt + ONE_OVER_TEN * $
2617	770	0	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ <= fopt + ONE_OVER_TEN * vquad
5949	782	0	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
5949	782	0	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
5950	784	0	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
5950	784	0	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2618	788	0	BOBYQAOptimizer.java	bobyqb	sum	double	0	DEF	$ > distsq
2618	788	0	BOBYQAOptimizer.java	bobyqb	distsq	double	0	DEF	sum > $
2619	793	0	BOBYQAOptimizer.java	bobyqb	knew	int	0	DEF	$ >= 0
2620	795	0	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2621	797	2	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
2621	797	2	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
2622	808	0	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2623	812	0	BOBYQAOptimizer.java	bobyqb	ratio	double	0	DEF	$ > ZERO
2624	816	0	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	Math.max(delta,dnorm) > $
2624	816	0	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	Math.max($,dnorm) > rho
2624	816	0	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	Math.max(delta,$) > rho
2625	824	0	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	rho > $.stoppingTrustRegionRadius
2625	824	0	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	$ > stoppingTrustRegionRadius
2626	827	0	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= SIXTEEN
2627	831	0	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= TWO_HUNDRED_FIFTY
2628	844	0	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2629	852	0	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex) <= fsave
2629	852	0	BOBYQAOptimizer.java	bobyqb	fsave	double	0	DEF	fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= $
5951	853	0	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
5951	853	0	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2630	859	0	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
2630	859	0	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
2631	862	0	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
2631	862	0	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
5952	890	0	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
5952	890	0	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
5953	893	0	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < max
5953	893	0	BOBYQAOptimizer.java	altmov	max	int	0	NIL-FOR	j < $
5954	895	0	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
5954	895	0	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
5955	901	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
5955	901	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
5956	904	0	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
5956	904	0	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
5957	906	0	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
5957	906	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
5958	910	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
5958	910	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
5959	919	0	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
5959	919	0	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
2632	920	0	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
2632	920	0	BOBYQAOptimizer.java	altmov	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
5960	925	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
5960	925	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
5961	935	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
5961	935	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2633	937	0	BOBYQAOptimizer.java	altmov	tmp	double	1	DEF	$ > ZERO
2634	938	0	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2634	938	0	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2634	938	0	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2634	938	0	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2635	942	0	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2635	942	0	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2635	942	0	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2635	942	0	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2636	948	0	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	$ < ZERO
2637	949	0	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2637	949	0	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2637	949	0	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2637	949	0	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2638	953	0	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2638	953	0	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2638	953	0	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2638	953	0	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2639	963	0	BOBYQAOptimizer.java	altmov	k	int	1	DEF	$ == knew
2639	963	0	BOBYQAOptimizer.java	altmov	knew	int	1	DEF	k == $
2640	967	0	BOBYQAOptimizer.java	altmov	d1	double	0	DEF	Math.abs($) > Math.abs(vlag)
2640	967	0	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d1) > Math.abs($)
2641	975	0	BOBYQAOptimizer.java	altmov	d3	double	0	DEF	$ * d4 < ZERO
2641	975	0	BOBYQAOptimizer.java	altmov	d4	double	0	DEF	d3 * $ < ZERO
2642	977	0	BOBYQAOptimizer.java	altmov	d5	double	0	DEF	Math.abs($) > Math.abs(vlag)
2642	977	0	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d5) > Math.abs($)
2643	987	0	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	Math.abs($) > Math.abs(vlag)
2643	987	0	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(tmp) > Math.abs($)
2644	992	0	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ > HALF
2644	992	0	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs($) < ONE_OVER_FOUR
2645	1001	0	BOBYQAOptimizer.java	altmov	predsq	double	0	DEF	$ > presav
2645	1001	0	BOBYQAOptimizer.java	altmov	presav	double	0	DEF	predsq > $
5962	1008	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
5962	1008	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2646	1012	0	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ < 0
2647	1015	0	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ > 0
5963	1025	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
5963	1025	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2648	1028	0	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.min($.trustRegionCenterOffset.getEntry(i) - $.lowerDifference.getEntry(i),glagValue) > ZERO
2648	1028	0	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.max($.trustRegionCenterOffset.getEntry(i) - $.upperDifference.getEntry(i),glagValue) < ZERO
2648	1028	0	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i),$) > ZERO
2648	1028	0	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i),$) < ZERO
2648	1028	0	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($),glagValue) > ZERO
2648	1028	0	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($),glagValue) < ZERO
2649	1033	0	BOBYQAOptimizer.java	altmov	ggfree	double	0	RET	$ == ZERO
2650	1037	0	BOBYQAOptimizer.java	altmov	tmp1	double	0	DEF	$ > ZERO
5964	1040	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
5964	1040	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2651	1041	0	BOBYQAOptimizer.java	altmov	i	int	0	DEF	work1.getEntry($) == bigstp
2651	1041	0	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	0	DEF	$.getEntry(i) == bigstp
2651	1041	0	BOBYQAOptimizer.java	altmov	bigstp	double	0	DEF	work1.getEntry(i) == $
2652	1043	0	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 <= $.lowerDifference.getEntry(i)
2652	1043	0	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ <= lowerDifference.getEntry(i)
2652	1043	0	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 <= lowerDifference.getEntry($)
2653	1049	0	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 >= $.upperDifference.getEntry(i)
2653	1049	0	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ >= upperDifference.getEntry(i)
2653	1049	0	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 >= upperDifference.getEntry($)
5965	1063	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
5965	1063	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2654	1065	0	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == bigstp
2654	1065	0	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == bigstp
2654	1065	0	BOBYQAOptimizer.java	altmov	bigstp	double	1	DEF	work1.getEntry(i) == $
2655	1071	0	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == ZERO
2655	1071	0	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
2656	1075	0	BOBYQAOptimizer.java	altmov	glagValue	double	1	DEF	$ > ZERO
5966	1086	0	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
5966	1086	0	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
5967	1088	0	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
5967	1088	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
2657	1093	0	BOBYQAOptimizer.java	altmov	iflag	int	0	DEF	$ == 1
2658	1096	0	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv > -$
2658	1096	0	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv < -$ * (ONE + Math.sqrt(TWO))
2658	1096	0	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ > -gw
2658	1096	0	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ < -gw * (ONE + Math.sqrt(TWO))
5968	1098	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
5968	1098	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2659	1109	0	BOBYQAOptimizer.java	altmov	iflag	int	1	DEF	$ == 0
5969	1110	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
5969	1110	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2660	1121	0	BOBYQAOptimizer.java	altmov	cauchy	double	0	DEF	csave > $
2660	1121	0	BOBYQAOptimizer.java	altmov	csave	double	0	DEF	$ > cauchy
5970	1122	0	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
5970	1122	0	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
5971	1142	0	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
5971	1142	0	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
5972	1144	0	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
5972	1144	0	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
5973	1147	0	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < ndim
5973	1147	0	BOBYQAOptimizer.java	prelim	ndim	int	0	NIL-FOR	i < $
5974	1151	0	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < max
5974	1151	0	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	i < $
5975	1154	0	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
5975	1154	0	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
5976	1156	0	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < max
5976	1156	0	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	j < $
5977	1163	0	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	NIL-DOWHILE	$.getEvaluations() < npt
5977	1163	0	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-DOWHILE	getEvaluations() < $
2661	1170	0	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= 2 * n
2661	1170	0	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= 2 * $
2662	1171	0	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= n
2662	1171	0	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ >= 1
2662	1171	0	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= $
2663	1173	0	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfmm) == ZERO
2663	1173	0	BOBYQAOptimizer.java	prelim	nfmm	int	0	DEF	upperDifference.getEntry($) == ZERO
2664	1179	0	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	$ > n
2664	1179	0	BOBYQAOptimizer.java	prelim	n	int	0	DEF	nfm > $
2665	1182	0	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.lowerDifference.getEntry(nfxm) == ZERO
2665	1182	0	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	lowerDifference.getEntry($) == ZERO
2666	1185	0	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfxm) == ZERO
2666	1185	0	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	upperDifference.getEntry($) == ZERO
2667	1196	0	BOBYQAOptimizer.java	prelim	n	int	0	DEF	ipt > $
2667	1196	0	BOBYQAOptimizer.java	prelim	ipt	int	0	DEF	$ > n
5978	1206	0	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
5978	1206	0	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
2668	1208	0	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm,j) == $.lowerDifference.getEntry(j)
2668	1208	0	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm,$) == lowerDifference.getEntry($)
2668	1208	0	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($,j) == lowerDifference.getEntry(j)
2669	1211	0	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm,j) == $.upperDifference.getEntry(j)
2669	1211	0	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm,$) == upperDifference.getEntry($)
2669	1211	0	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($,j) == upperDifference.getEntry(j)
2670	1219	0	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ == 1
2671	1224	0	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex)
2671	1224	0	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)
2672	1228	0	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= 2 * n + 1
2672	1228	0	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= 2 * $ + 1
2673	1229	0	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ >= 2
2673	1229	0	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= n + 1
2673	1229	0	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= $ + 1
2674	1231	0	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	npt < $ + n
2674	1231	0	BOBYQAOptimizer.java	prelim	n	int	0	DEF	npt < numEval + $
2674	1231	0	BOBYQAOptimizer.java	prelim	npt	int	0	DEF	$ < numEval + n
2675	1239	0	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	$ >= n + 2
2675	1239	0	BOBYQAOptimizer.java	prelim	n	int	0	DEF	numEval >= $ + 2
2676	1245	0	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry(nfm - n)
2676	1245	0	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	f < fAtInterpolationPoints.getEntry($ - n)
2676	1245	0	BOBYQAOptimizer.java	prelim	stepa	double	0	DEF	$ * stepb < ZERO
2676	1245	0	BOBYQAOptimizer.java	prelim	stepb	double	0	DEF	stepa * $ < ZERO
2676	1245	0	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(nfm - n)
2676	1245	0	BOBYQAOptimizer.java	prelim	n	int	0	DEF	f < fAtInterpolationPoints.getEntry(nfm - $)
2677	1248	0	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex == nfm
2677	1248	0	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	trustRegionCenterInterpolationPointIndex == $
5979	1305	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
5979	1305	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2678	1307	0	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) <= $.lowerDifference.getEntry(i)
2678	1307	0	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	trustRegionCenterOffset.getEntry($) <= lowerDifference.getEntry($)
2679	1308	0	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) >= ZERO
2679	1308	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) >= ZERO
2680	1313	0	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) >= $.upperDifference.getEntry(i)
2680	1313	0	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) <= ZERO
2680	1313	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	trustRegionCenterOffset.getEntry($) >= upperDifference.getEntry($)
2680	1313	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) <= ZERO
2681	1317	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) != ZERO
2681	1317	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
5980	1338	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
5980	1338	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2682	1339	0	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) != ZERO
2682	1339	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) != ZERO
2683	1343	0	BOBYQAOptimizer.java	trsbox	beta	double	1	DEF	$ == ZERO
2684	1353	0	BOBYQAOptimizer.java	trsbox	stepsq	double	0	DEF	$ == ZERO
2685	1357	0	BOBYQAOptimizer.java	trsbox	beta	double	0	DEF	$ == ZERO
2686	1361	0	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	gredsq * delsq <= $ * 1e-4 * $
2686	1361	0	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	gredsq * $ <= qred * 1e-4 * qred
2686	1361	0	BOBYQAOptimizer.java	trsbox	gredsq	double	0	DEF	$ * delsq <= qred * 1e-4 * qred
5981	1374	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
5981	1374	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2687	1375	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2687	1375	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2688	1382	0	BOBYQAOptimizer.java	trsbox	resid	double	0	DEF	$ <= ZERO
2689	1387	0	BOBYQAOptimizer.java	trsbox	ds	double	1	DEF	$ < ZERO
2690	1394	0	BOBYQAOptimizer.java	trsbox	shs	double	0	DEF	$ > ZERO
5982	1398	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
5982	1398	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2691	1399	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	s.getEntry($) != ZERO
2691	1399	0	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
2692	1401	0	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	s.getEntry($) > ZERO
2692	1401	0	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	1	DEF	$.getEntry(i) > ZERO
2693	1407	0	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ < stplen
2693	1407	0	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	temp < $
2694	1414	0	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ > ZERO
2695	1417	0	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ == -1
2695	1417	0	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2696	1419	0	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ == MINUS_ONE
5983	1425	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
5983	1425	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2697	1427	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2697	1427	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2698	1437	0	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
2699	1440	0	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	s.getEntry($) < ZERO
2699	1440	0	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(iact) < ZERO
2700	1445	0	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	$ <= ZERO
2701	1452	0	BOBYQAOptimizer.java	trsbox	blen	double	0	DEF	stplen < $
2701	1452	0	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ < blen
2702	1453	0	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ == itermax
2702	1453	0	BOBYQAOptimizer.java	trsbox	itermax	int	0	DEF	iterc == $
2703	1457	0	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= qred * .01
2703	1457	0	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec <= $ * .01
2704	1474	0	BOBYQAOptimizer.java	trsbox	n	int	0	DEF	nact >= $ - 1
2704	1474	0	BOBYQAOptimizer.java	trsbox	nact	int	0	DEF	$ >= n - 1
5984	1481	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
5984	1481	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2705	1482	0	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
2705	1482	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
2706	1503	0	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	temp <= $ * 1e-4 * $
2706	1503	0	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ <= qred * 1e-4 * qred
5985	1508	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
5985	1508	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2707	1509	0	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
2707	1509	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
5986	1519	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
5986	1519	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2708	1520	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2708	1520	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2709	1523	0	BOBYQAOptimizer.java	trsbox	tempa	double	1	DEF	$ <= ZERO
2710	1530	0	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	$ <= ZERO
2711	1542	0	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2712	1544	0	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempa
2712	1544	0	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempa
2712	1544	0	BOBYQAOptimizer.java	trsbox	tempa	double	0	DEF	angbd * temp > $
2713	1552	0	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2714	1554	0	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempb
2714	1554	0	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempb
2714	1554	0	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	angbd * temp > $
5987	1571	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
5987	1571	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2715	1572	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2715	1572	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
5988	1582	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < iu
5988	1582	0	BOBYQAOptimizer.java	trsbox	iu	int	0	NIL-FOR	i < $
2716	1587	0	BOBYQAOptimizer.java	trsbox	redmax	double	1	DEF	rednew > $
2716	1587	0	BOBYQAOptimizer.java	trsbox	rednew	double	1	DEF	$ > redmax
2717	1593	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ == isav + 1
2717	1593	0	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	i == $ + 1
2718	1599	0	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < 0
2719	1603	0	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav < $
2719	1603	0	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < iu
2720	1611	0	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= ZERO
5989	1617	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
5989	1617	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2721	1619	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2721	1619	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2722	1628	0	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav == $
2722	1628	0	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
2722	1628	0	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ == iu
2723	1634	0	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ > qred * .01
2723	1634	0	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec > $ * .01
5990	1643	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
5990	1643	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2724	1646	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == MINUS_ONE
2724	1646	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == MINUS_ONE
2725	1649	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ONE
2725	1649	0	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ONE
5991	1662	0	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	$ < n
5991	1662	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	j < $
5992	1664	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ <= j
5992	1664	0	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	i <= $
2726	1665	0	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ < j
2726	1665	0	BOBYQAOptimizer.java	trsbox	j	int	0	DEF	i < $
5993	1673	0	BOBYQAOptimizer.java	trsbox	k	int	0	NIL-FOR	$ < npt
5993	1673	0	BOBYQAOptimizer.java	trsbox	npt	int	0	NIL-FOR	k < $
2727	1674	0	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.modelSecondDerivativesParameters.getEntry(k) != ZERO
2727	1674	0	BOBYQAOptimizer.java	trsbox	k	int	0	DEF	modelSecondDerivativesParameters.getEntry($) != ZERO
5994	1675	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
5994	1675	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2728	1680	0	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ != ZERO
2729	1684	0	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ > itcsav
2729	1684	0	BOBYQAOptimizer.java	trsbox	itcsav	int	0	DEF	iterc > $
5995	1688	0	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
5995	1688	0	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
5996	1714	0	BOBYQAOptimizer.java	update	k	int	0	NIL-FOR	$ < npt
5996	1714	0	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	k < $
5997	1715	0	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
5997	1715	0	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
5998	1720	0	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
5998	1720	0	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
2730	1722	0	BOBYQAOptimizer.java	update	d1	double	0	DEF	Math.abs($) > ztest
2730	1722	0	BOBYQAOptimizer.java	update	ztest	double	0	DEF	Math.abs(d1) > $
5999	1728	0	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
5999	1728	0	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
6000	1736	0	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
6000	1736	0	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
6001	1745	0	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
6001	1745	0	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
6002	1748	0	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < n
6002	1748	0	BOBYQAOptimizer.java	update	n	int	0	NIL-FOR	j < $
6003	1753	0	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ <= jp
6003	1753	0	BOBYQAOptimizer.java	update	jp	int	0	NIL-FOR	i <= $
2731	1755	0	BOBYQAOptimizer.java	update	i	int	0	DEF	$ >= npt
2731	1755	0	BOBYQAOptimizer.java	update	npt	int	0	DEF	i >= $
2732	1770	0	BOBYQAOptimizer.java	setup	dimension	int	0	NumberIsTooSmallException	$ < MINIMUM_PROBLEM_DIMENSION
2733	1774	0	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints < nPointsInterval[0]
2733	1774	0	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints > nPointsInterval[1]
2733	1774	0	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints < $[0]
2733	1774	0	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints > $[1]
6004	1780	0	BOBYQAOptimizer.java	setup	i	int	0	NIL-FOR	$ < dimension
6004	1780	0	BOBYQAOptimizer.java	setup	dimension	int	0	NIL-FOR	i < $
2734	1784	0	BOBYQAOptimizer.java	setup	requiredMinDiff	double	0	DEF	minDiff < $
2734	1784	0	BOBYQAOptimizer.java	setup	minDiff	double	0	DEF	$ < requiredMinDiff
3676	78	4	BSPTree.java	insertCut	THIS	BSPTree	0	DEF	$.cut != null
3677	83	4	BSPTree.java	insertCut	chopped	SubHyperplane	0	RET	$.isEmpty()
3677	83	4	BSPTree.java	insertCut	chopped	SubHyperplane	0	RET	$ == null
3678	101	4	BSPTree.java	copySelf	THIS	BSPTree	0	RET	$.cut == null
3679	155	4	BSPTree.java	visit	THIS	BSPTree	1	DEF	$.cut == null
6478	202	0	BSPTree.java	fitToCell	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
6478	202	0	BSPTree.java	fitToCell	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
3680	203	0	BSPTree.java	fitToCell	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
3680	203	0	BSPTree.java	fitToCell	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
3681	218	0	BSPTree.java	getCell	THIS	BSPTree	0	RET	$.cut == null
3682	222	0	BSPTree.java	getCell	THIS	BSPTree	1	RET	$.FastMath.abs(offset) < 1.0e-10
3682	222	0	BSPTree.java	getCell	offset	double	1	RET	FastMath.abs($) < 1.0e-10
3683	226	0	BSPTree.java	getCell	offset	double	1	RET	$ <= 0
3684	238	0	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.cut == null
3684	238	0	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute.equals($.minus.$.attribute)
3684	238	0	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.cut != null
3684	238	0	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.attribute == null
3684	238	0	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.cut == null
3684	238	0	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute == null
3684	238	0	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute != null
3685	263	0	BSPTree.java	merge	THIS	BSPTree	1	RET	$.cut == null
3686	267	0	BSPTree.java	merge	THIS	BSPTree	1	RET	tree.$.cut == null
3686	267	0	BSPTree.java	merge	tree	BSPTree<S>	1	RET	$.cut == null
3687	272	0	BSPTree.java	merge	parentTree	BSPTree<S>	0	DEF	$ != null
3688	274	0	BSPTree.java	merge	isPlusChild	boolean	1	DEF	$
3689	284	0	BSPTree.java	merge	THIS	BSPTree	0	DEF	merged.$.cut != null
3689	284	0	BSPTree.java	merge	merged	BSPTree<S>	0	DEF	$.cut != null
3690	313	0	BSPTree.java	split	THIS	BSPTree	0	RET	$.cut == null
3691	322	0	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
3691	322	0	BSPTree.java	split	sHyperplane	Hyperplane	1	DEF	cut.side($) == Side.PLUS
3692	337	0	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
3692	337	0	BSPTree.java	split	sHyperplane	Hyperplane	1	DEF	cut.side($) == Side.PLUS
3693	377	0	BSPTree.java	insertInTree	parentTree	BSPTree<S>	0	DEF	$ != null
3694	378	0	BSPTree.java	insertInTree	isPlusChild	boolean	1	DEF	$
3695	385	0	BSPTree.java	insertInTree	THIS	BSPTree	0	DEF	$.cut != null
6479	386	0	BSPTree.java	insertInTree	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
6479	386	0	BSPTree.java	insertInTree	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
3696	388	0	BSPTree.java	insertInTree	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
3696	388	0	BSPTree.java	insertInTree	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
3697	407	0	BSPTree.java	chopOffMinus	THIS	BSPTree	0	DEF	$.cut != null
3698	418	0	BSPTree.java	chopOffPlus	THIS	BSPTree	0	DEF	$.cut != null
2509	158	6	BaseAbstractMultivariateOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.data instanceof InitialGuess
2510	162	6	BaseAbstractMultivariateOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.data instanceof SimpleBounds
2511	205	4	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	NumberIsTooLargeException	$.start != null
2512	207	6	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	NumberIsTooSmallException	$.lowerBound != null
2513	208	8	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DimensionMismatchException	$.lowerBound.$.length != dim
2513	208	8	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	lowerBound.length != $
5821	211	8	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
5821	211	8	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2514	214	10	BaseAbstractMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooSmallException	$ < lo
2514	214	10	BaseAbstractMultivariateOptimizer.java	checkParameters	lo	double	0	NumberIsTooSmallException	v < $
2515	219	6	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	NumberIsTooLargeException	$.upperBound != null
2516	220	8	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DimensionMismatchException	$.upperBound.$.length != dim
2516	220	8	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	upperBound.length != $
5822	223	8	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
5822	223	8	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2517	226	10	BaseAbstractMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooLargeException	$ > hi
2517	226	10	BaseAbstractMultivariateOptimizer.java	checkParameters	hi	double	0	NumberIsTooLargeException	v > $
2518	231	6	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.lowerBound == null
5823	233	8	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
5823	233	8	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2519	237	6	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.upperBound == null
5824	239	8	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
5824	239	8	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2500	134	4	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	f	FUNC	0	NullArgumentException	$ == null
2501	137	4	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	t	double[]	0	NullArgumentException	$ == null
2502	140	4	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	w	double[]	0	NullArgumentException	$ == null
2503	143	4	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	startPoint	double[]	0	NullArgumentException	$ == null
2504	146	4	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	THIS	BaseAbstractMultivariateVectorOptimizer	0	DimensionMismatchException	t.$.length != w.$.length
2504	146	4	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	t	double[]	0	DimensionMismatchException	$.length != w.length
2504	146	4	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	w	double[]	0	DimensionMismatchException	t.length != $.length
5820	227	4	BaseAbstractMultivariateVectorOptimizer.java	setUp	i	int	0	NIL-FOR	$ < dim
5820	227	4	BaseAbstractMultivariateVectorOptimizer.java	setUp	dim	int	0	NIL-FOR	i < $
2505	237	6	BaseAbstractMultivariateVectorOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateVectorOptimizer	0	DEF	$.data instanceof Target
2506	241	6	BaseAbstractMultivariateVectorOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateVectorOptimizer	0	DEF	$.data instanceof Weight
2507	245	6	BaseAbstractMultivariateVectorOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateVectorOptimizer	0	DEF	$.data instanceof InitialGuess
2508	256	4	BaseAbstractMultivariateVectorOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateVectorOptimizer	0	DimensionMismatchException	$.target.$.length != $.weightMatrix.getColumnDimension()
4293	78	4	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NotStrictlyPositiveException	$ <= 0
4294	81	4	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NumberIsTooSmallException	maximalIterationCount <= $
4294	81	4	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	maximalIterationCount	int	0	NumberIsTooSmallException	$ <= minimalIterationCount
2829	105	4	BaseAbstractUnivariateOptimizer.java	optimize	f	UnivariateFunction	0	NullArgumentException	$ == null
2830	108	4	BaseAbstractUnivariateOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
3369	50	4	BaseMultiStartMultivariateOptimizer.java	BaseMultiStartMultivariateOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
6447	80	4	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	NIL-FOR	i < $.optimData.$.length
6447	80	4	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < optimData.length
3370	81	6	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	DEF	$.optimData[i] instanceof MaxEval
3370	81	6	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof MaxEval
3371	85	6	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	DEF	$.optimData[i] instanceof InitialGuess
3371	85	6	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof InitialGuess
3372	91	4	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	MathIllegalStateException	$.maxEvalIndex == -1
3373	94	4	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	MathIllegalStateException	$.initialGuessIndex == -1
6448	104	4	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	NIL-FOR	i < $.starts
6448	104	4	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < starts
3374	108	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	1	DEF	$ == 0
6449	113	10	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	NIL-WHILE	$ == null
3375	114	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	TooManyEvaluationsException	attempts++ >= $.getMaxEvaluations()
3375	114	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	attempts	int	0	TooManyEvaluationsException	$++ >= getMaxEvaluations()
6450	118	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	NIL-FOR	k < s.$.length
6450	118	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < s.length
6450	118	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	NIL-FOR	$ != null
6450	118	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	NIL-FOR	k < $.length
3376	119	14	BaseMultiStartMultivariateOptimizer.java	doOptimize	k	int	0	DEF	s[$] < min[$]
3376	119	14	BaseMultiStartMultivariateOptimizer.java	doOptimize	k	int	0	DEF	s[$] > max[$]
3376	119	14	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	DEF	$[k] < min[k]
3376	119	14	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	DEF	$[k] > max[k]
3376	119	14	BaseMultiStartMultivariateOptimizer.java	doOptimize	min	double[]	0	DEF	s[k] < $[k]
3376	119	14	BaseMultiStartMultivariateOptimizer.java	doOptimize	min	double[]	0	DEF	$ != null
3376	119	14	BaseMultiStartMultivariateOptimizer.java	doOptimize	max	double[]	0	DEF	$ != null
3376	119	14	BaseMultiStartMultivariateOptimizer.java	doOptimize	max	double[]	0	DEF	s[k] > $[k]
3377	135	4	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	DEF	optima.$.length == 0
3377	135	4	BaseMultiStartMultivariateOptimizer.java	doOptimize	optima	PAIR[]	0	DEF	$.length == 0
2833	51	4	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	optimizer	BaseMultivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
2833	51	4	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
2834	54	4	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
2835	67	4	BaseMultivariateMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
6041	98	4	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
6041	98	4	BaseMultivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
2836	109	4	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
3048	45	6	BaseMultivariateOptimizer.java	parseOptimizationData	THIS	BaseMultivariateOptimizer	0	DEF	$.data instanceof InitialGuess
3049	49	6	BaseMultivariateOptimizer.java	parseOptimizationData	THIS	BaseMultivariateOptimizer	0	DEF	$.data instanceof SimpleBounds
3050	81	4	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	NumberIsTooLargeException	$.start != null
3051	83	6	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	NumberIsTooSmallException	$.lowerBound != null
3052	84	8	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	DimensionMismatchException	$.lowerBound.$.length != dim
3052	84	8	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	lowerBound.length != $
6168	87	8	BaseMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
6168	87	8	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
3053	90	10	BaseMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooSmallException	$ < lo
3053	90	10	BaseMultivariateOptimizer.java	checkParameters	lo	double	0	NumberIsTooSmallException	v < $
3054	95	6	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	NumberIsTooLargeException	$.upperBound != null
3055	96	8	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	DimensionMismatchException	$.upperBound.$.length != dim
3055	96	8	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	upperBound.length != $
6169	99	8	BaseMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
6169	99	8	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
3056	102	10	BaseMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooLargeException	$ > hi
3056	102	10	BaseMultivariateOptimizer.java	checkParameters	hi	double	0	NumberIsTooLargeException	v > $
2890	52	4	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	optimizer	BaseMultivariateVectorOptimizer<FUNC>	0	NullArgumentException	$ == null
2890	52	4	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
2891	55	4	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
2892	68	4	BaseMultivariateVectorMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateVectorMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
6117	99	4	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	NIL-FOR	i < $.starts
6117	99	4	BaseMultivariateVectorMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
2893	113	4	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	DEF	$.optima[0] == null
3380	105	6	BaseOptimizer.java	parseOptimizationData	THIS	BaseOptimizer	0	DEF	$.data instanceof MaxEval
3381	109	6	BaseOptimizer.java	parseOptimizationData	THIS	BaseOptimizer	0	DEF	$.data instanceof MaxIter
4280	31	4	BaseRuleFactory.java	getRule	numberOfPoints	int	0	NotStrictlyPositiveException	$ <= 0
4281	35	4	BaseRuleFactory.java	getRule	cached	Pair	0	DEF	$ == null
4282	50	4	BaseRuleFactory.java	getRuleInternal	rule	Pair	0	RET	$ == null
4283	62	4	BaseRuleFactory.java	addRule	THIS	BaseRuleFactory	0	DimensionMismatchException	rule.getFirst().length != rule.getSecond().length
4283	62	4	BaseRuleFactory.java	addRule	rule	Pair<T[],T[]>	0	DimensionMismatchException	$.getFirst().length != $.getSecond().length
6752	86	4	BaseRuleFactory.java	convertToDouble	i	int	0	NIL-FOR	$ < len
6752	86	4	BaseRuleFactory.java	convertToDouble	len	int	0	NIL-FOR	i < $
4143	85	4	BaseSecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
4144	88	4	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
4145	99	6	BaseSecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
4146	102	6	BaseSecantSolver.java	doSolve	fx	double	1	DEF	f1 * $ < 0
4146	102	6	BaseSecantSolver.java	doSolve	f1	double	1	DEF	$ * fx < 0
4147	116	2	BaseSecantSolver.java	doSolve	x	double	0	ConvergenceException	$ == x1
4147	116	2	BaseSecantSolver.java	doSolve	x1	double	0	ConvergenceException	x == $
4148	126	0	BaseSecantSolver.java	doSolve	THIS	BaseSecantSolver	0	MathInternalError:RET	$.FastMath.abs(f1) <= ftol
4148	126	0	BaseSecantSolver.java	doSolve	f1	double	0	MathInternalError:RET	FastMath.abs($) <= ftol
4148	126	0	BaseSecantSolver.java	doSolve	ftol	double	0	MathInternalError:RET	FastMath.abs(f1) <= $
4149	131	0	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
4150	136	0	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
4151	141	0	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ <= 0
4152	146	0	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ >= 0
4153	154	0	BaseSecantSolver.java	doSolve	THIS	BaseSecantSolver	0	MathInternalError:RET	$.FastMath.abs(x1 - x0) < $.FastMath.max(rtol * $.FastMath.abs(x1),atol)
4153	154	0	BaseSecantSolver.java	doSolve	x0	double	0	MathInternalError:RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1),atol)
4153	154	0	BaseSecantSolver.java	doSolve	x1	double	0	MathInternalError:RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($),atol)
4153	154	0	BaseSecantSolver.java	doSolve	atol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),$)
4153	154	0	BaseSecantSolver.java	doSolve	rtol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1),atol)
2249	75	4	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
2249	75	4	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
2249	75	4	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
2249	75	4	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
2249	75	4	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
2249	75	4	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
2249	75	4	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
2250	79	6	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
2250	79	6	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
2250	79	6	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
2251	127	4	Beta.java	logGammaSum	a	double	0	OutOfRangeException	$ < 1.0
2251	127	4	Beta.java	logGammaSum	a	double	0	OutOfRangeException	$ > 2.0
2252	130	4	Beta.java	logGammaSum	b	double	0	OutOfRangeException	$ > 2.0
2252	130	4	Beta.java	logGammaSum	b	double	0	OutOfRangeException	$ < 1.0
2253	134	4	Beta.java	logGammaSum	x	double	1	RET	$ <= 0.5
2254	138	6	Beta.java	logGammaSum	x	double	1	RET	$ <= 1.5
2255	154	4	Beta.java	logGammaMinusLogGammaSum	a	double	0	NumberIsTooSmallException	$ < 0.0
2256	157	4	Beta.java	logGammaMinusLogGammaSum	b	double	0	NumberIsTooSmallException	$ < 10.0
2257	162	4	Beta.java	logGammaMinusLogGammaSum	a	double	1	DEF	$ <= b
2257	162	4	Beta.java	logGammaMinusLogGammaSum	b	double	1	DEF	a <= $
2258	183	4	Beta.java	deltaMinusDeltaSum	a	double	0	OutOfRangeException	$ > b
2258	183	4	Beta.java	deltaMinusDeltaSum	a	double	0	OutOfRangeException	$ < 0
2258	183	4	Beta.java	deltaMinusDeltaSum	b	double	0	OutOfRangeException	a > $
2259	186	4	Beta.java	deltaMinusDeltaSum	b	double	0	NumberIsTooSmallException	$ < 10
5652	195	4	Beta.java	deltaMinusDeltaSum	THIS	Beta	0	NIL-FOR	i < s.$.length
5652	195	4	Beta.java	deltaMinusDeltaSum	i	int	0	NIL-FOR	$ < s.length
5652	195	4	Beta.java	deltaMinusDeltaSum	s	double[]	0	NIL-FOR	i < $.length
5653	201	4	Beta.java	deltaMinusDeltaSum	i	int	0	NIL-FOR	$ >= 0
2260	214	4	Beta.java	sumDeltaMinusDeltaSum	p	double	0	NumberIsTooSmallException	$ < 10.0
2261	217	4	Beta.java	sumDeltaMinusDeltaSum	q	double	0	NumberIsTooSmallException	$ < 10.0
5654	225	4	Beta.java	sumDeltaMinusDeltaSum	i	int	0	NIL-FOR	$ >= 0
2262	237	4	Beta.java	logBeta	p	double	0	RET	Double.isNaN($)
2262	237	4	Beta.java	logBeta	p	double	0	RET	$ <= 0.0
2262	237	4	Beta.java	logBeta	q	double	0	RET	Double.isNaN($)
2262	237	4	Beta.java	logBeta	q	double	0	RET	$ <= 0.0
2263	242	4	Beta.java	logBeta	a	double	1	RET	$ >= 10.0
2264	248	6	Beta.java	logBeta	u	double	1	RET	$ <= v
2264	248	6	Beta.java	logBeta	v	double	1	RET	u <= $
2265	256	6	Beta.java	logBeta	a	double	1	RET	$ > 2.0
2266	257	8	Beta.java	logBeta	b	double	1	RET	$ > 1000.0
5655	261	10	Beta.java	logBeta	i	int	0	NIL-FOR	$ < n
5655	261	10	Beta.java	logBeta	n	int	0	NIL-FOR	i < $
5656	270	10	Beta.java	logBeta	ared	double	0	NIL-WHILE	$ > 2.0
2267	275	10	Beta.java	logBeta	b	double	1	RET	$ < 10.0
5657	278	12	Beta.java	logBeta	bred	double	0	NIL-WHILE	$ > 2.0
2268	290	8	Beta.java	logBeta	a	double	1	RET	$ >= 1.0
2269	291	10	Beta.java	logBeta	b	double	1	RET	$ > 2.0
2270	292	12	Beta.java	logBeta	b	double	1	RET	$ < 10.0
5658	295	14	Beta.java	logBeta	bred	double	0	NIL-WHILE	$ > 2.0
2271	310	10	Beta.java	logBeta	b	double	1	RET	$ >= 10.0
1720	92	4	BetaDistribution.java	recomputeZ	THIS	BetaDistribution	0	DEF	Double.isNaN($.z)
1721	101	4	BetaDistribution.java	density	x	double	1	RET	$ < 0
1721	101	4	BetaDistribution.java	density	x	double	1	RET	$ > 1
1722	105	6	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 0
1723	106	8	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.alpha < 1
1724	112	8	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 1
1725	113	10	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.beta < 1
1726	130	4	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ <= 0
1727	134	6	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ >= 1
1604	47	4	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
1604	47	4	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
1605	59	4	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
5454	66	6	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
5454	66	6	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
5455	69	6	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
5455	69	6	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
1606	72	8	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
1606	72	8	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
1606	72	8	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
5456	73	10	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
5456	73	10	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
5457	75	12	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
5457	75	12	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
5458	79	12	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
5458	79	12	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
1607	85	6	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
1608	97	4	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
5459	101	6	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
5459	101	6	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
1609	103	8	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
1609	103	8	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
1610	104	10	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
1611	109	10	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1611	109	10	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
1612	123	4	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
5460	130	6	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
5460	130	6	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
5461	133	6	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
5461	133	6	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
1613	136	8	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
1613	136	8	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
5462	137	10	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
5462	137	10	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
5463	139	12	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
5463	139	12	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
5464	143	12	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
5464	143	12	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
1614	149	6	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
5465	190	4	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
5465	190	4	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
5466	192	6	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
5466	192	6	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1615	199	6	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
5467	201	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
5467	201	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
5468	203	10	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
5468	203	10	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
5469	208	10	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
5469	208	10	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1616	214	6	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
1616	214	6	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
5470	216	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
5470	216	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
1617	222	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
5471	224	10	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
5471	224	10	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
5472	227	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
5472	227	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
5473	231	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
5473	231	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
5474	245	4	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
5474	245	4	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
5475	248	6	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
5475	248	6	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1618	254	6	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
5476	256	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
5476	256	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
5477	259	10	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
5477	259	10	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
5478	263	10	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
5478	263	10	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1619	268	6	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
1619	268	6	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
5479	271	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
5479	271	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
1620	277	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
5480	279	10	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
5480	279	10	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
5481	281	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
5481	281	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
5482	286	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
5482	286	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
3933	53	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
3933	53	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
3933	53	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
3933	53	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
3933	53	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$.length == 0
3933	53	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$[0].length == 0
3934	56	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
3934	56	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
3934	56	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	xLen != $.length
3935	59	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
3935	59	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
3935	59	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	xLen != $.length
3936	62	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
3936	62	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
3936	62	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	xLen != $.length
3937	65	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
3937	65	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
3937	65	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	xLen != $.length
6525	75	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
6525	75	4	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
3938	76	6	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
3938	76	6	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
3938	76	6	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
3938	76	6	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	$[i].length != yLen
3939	79	6	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
3939	79	6	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
3939	79	6	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
3939	79	6	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	$[i].length != yLen
3940	82	6	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
3940	82	6	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
3940	82	6	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
3940	82	6	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
3941	85	6	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
3941	85	6	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
3941	85	6	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
3941	85	6	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
6526	89	6	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
6526	89	6	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
3942	113	4	BicubicSplineInterpolatingFunction.java	isValidPoint	THIS	BicubicSplineInterpolatingFunction	1	RET	x < $.xval[0]
3942	113	4	BicubicSplineInterpolatingFunction.java	isValidPoint	THIS	BicubicSplineInterpolatingFunction	1	RET	y < $.yval[0]
3942	113	4	BicubicSplineInterpolatingFunction.java	isValidPoint	THIS	BicubicSplineInterpolatingFunction	1	RET	x > $.xval[$.xval.$.length - 1]
3942	113	4	BicubicSplineInterpolatingFunction.java	isValidPoint	THIS	BicubicSplineInterpolatingFunction	1	RET	y > $.yval[$.yval.$.length - 1]
3942	113	4	BicubicSplineInterpolatingFunction.java	isValidPoint	x	double	1	RET	$ < xval[0]
3942	113	4	BicubicSplineInterpolatingFunction.java	isValidPoint	x	double	1	RET	$ > xval[xval.length - 1]
3942	113	4	BicubicSplineInterpolatingFunction.java	isValidPoint	y	double	1	RET	$ < yval[0]
3942	113	4	BicubicSplineInterpolatingFunction.java	isValidPoint	y	double	1	RET	$ > yval[yval.length - 1]
3943	173	4	BicubicSplineInterpolatingFunction.java	partialDerivative	THIS	BicubicSplineInterpolatingFunction	0	DEF	$.partialDerivatives == null
6527	189	4	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < lastI
6527	189	4	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastI	int	0	NIL-FOR	i < $
6528	190	6	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < lastJ
6528	190	6	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastJ	int	0	NIL-FOR	j < $
3944	208	4	BicubicSplineInterpolatingFunction.java	searchIndex	THIS	BicubicSplineInterpolatingFunction	0	OutOfRangeException	r == -val.$.length - 1
3944	208	4	BicubicSplineInterpolatingFunction.java	searchIndex	r	int	0	OutOfRangeException	$ == -1
3944	208	4	BicubicSplineInterpolatingFunction.java	searchIndex	r	int	0	OutOfRangeException	$ == -val.length - 1
3944	208	4	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	OutOfRangeException	r == -$.length - 1
3945	211	4	BicubicSplineInterpolatingFunction.java	searchIndex	r	int	0	RET	$ < 0
3946	215	4	BicubicSplineInterpolatingFunction.java	searchIndex	r	int	0	RET	$ == last
3946	215	4	BicubicSplineInterpolatingFunction.java	searchIndex	last	int	0	RET	r == $
6529	227	4	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < NUM_COEFF
6530	230	6	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < NUM_COEFF
6531	277	4	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	i	int	0	NIL-FOR	$ < N
6532	278	6	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	j	int	0	NIL-FOR	$ < N
3947	287	4	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
3947	287	4	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
3948	290	4	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
3948	290	4	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
6533	310	4	BicubicSplineInterpolatingFunction.java	apply	i	int	0	NIL-FOR	$ < N
6534	311	6	BicubicSplineInterpolatingFunction.java	apply	j	int	0	NIL-FOR	$ < N
3949	321	4	BicubicSplineInterpolatingFunction.java	partialDerivativeX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeX == null
3950	330	4	BicubicSplineInterpolatingFunction.java	partialDerivativeY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeY == null
3951	339	4	BicubicSplineInterpolatingFunction.java	partialDerivativeXX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXX == null
3952	348	4	BicubicSplineInterpolatingFunction.java	partialDerivativeYY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeYY == null
3953	357	4	BicubicSplineInterpolatingFunction.java	partialDerivativeXY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXY == null
6535	371	4	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < N
6536	372	6	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < N
3954	19	4	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3954	19	4	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3954	19	4	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3954	19	4	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3954	19	4	BicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3954	19	4	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
3955	22	4	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3955	22	4	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3955	22	4	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
6537	30	4	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
6537	30	4	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3956	31	6	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3956	31	6	BicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3956	31	6	BicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3956	31	6	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
6538	34	6	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
6538	34	6	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
6539	40	4	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
6539	40	4	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
6540	44	4	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
6540	44	4	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
6541	48	4	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
6541	48	4	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
6542	50	6	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
6542	50	6	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
6543	55	4	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
6543	55	4	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
6544	57	6	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
6544	57	6	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
6545	62	4	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
6545	62	4	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
6546	65	6	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
6546	65	6	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
3393	109	4	BigFraction.java	BigFraction	den	BigInteger	0	ZeroException	BigInteger.ZERO.equals($)
3394	112	4	BigFraction.java	BigFraction	num	BigInteger	1	DEF	BigInteger.ZERO.equals($)
3395	118	6	BigFraction.java	BigFraction	gcd	BigInteger	0	DEF	BigInteger.ONE.compareTo($) < 0
3396	122	6	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.compareTo($) > 0
3397	137	4	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isNaN($)
3398	140	4	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isInfinite($)
3399	147	4	BigFraction.java	BigFraction	exponent	long	0	DEF	$ != 0
3400	150	4	BigFraction.java	BigFraction	sign	long	0	DEF	$ != 0
6452	154	4	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x1) == 0
6452	154	4	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x001ffffffffffffeL) != 0
3401	158	4	BigFraction.java	BigFraction	k	int	1	DEF	$ < 0
3402	190	4	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	a0 > $
3402	190	4	BigFraction.java	BigFraction	a0	long	0	FractionConversionException	$ > overflow
3403	193	4	BigFraction.java	BigFraction	THIS	BigFraction	0	RET	$.FastMath.abs(a0 - value) < epsilon
3403	193	4	BigFraction.java	BigFraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
3403	193	4	BigFraction.java	BigFraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
3403	193	4	BigFraction.java	BigFraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
6453	206	4	BigFraction.java	BigFraction	stop	boolean	0	NIL-DOWHILE	$
3404	212	6	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	q2 > $
3404	212	6	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	p2 > $
3404	212	6	BigFraction.java	BigFraction	p2	long	0	FractionConversionException	$ > overflow
3404	212	6	BigFraction.java	BigFraction	q2	long	0	FractionConversionException	$ > overflow
3405	216	6	BigFraction.java	BigFraction	THIS	BigFraction	1	DEF	$.FastMath.abs(convergent - value) > epsilon
3405	216	6	BigFraction.java	BigFraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
3405	216	6	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
3405	216	6	BigFraction.java	BigFraction	n	int	1	DEF	$ < maxIterations
3405	216	6	BigFraction.java	BigFraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
3405	216	6	BigFraction.java	BigFraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
3405	216	6	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
3405	216	6	BigFraction.java	BigFraction	maxIterations	int	1	DEF	n < $
3406	229	4	BigFraction.java	BigFraction	n	int	0	FractionConversionException	$ >= maxIterations
3406	229	4	BigFraction.java	BigFraction	maxIterations	int	0	FractionConversionException	n >= $
3407	232	4	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
3407	232	4	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
3408	288	4	BigFraction.java	getReducedFraction	numerator	int	0	RET	$ == 0
3409	333	4	BigFraction.java	add	fraction	BigFraction	0	NullArgumentException	$ == null
3410	336	4	BigFraction.java	add	fraction	BigFraction	0	RET	ZERO.equals($)
3411	341	4	BigFraction.java	add	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
3411	341	4	BigFraction.java	add	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
3412	399	4	BigFraction.java	divide	bg	BigInteger	0	NullArgumentException	$ == null
3413	402	4	BigFraction.java	divide	bg	BigInteger	0	MathArithmeticException	BigInteger.ZERO.equals($)
3414	433	4	BigFraction.java	divide	fraction	BigFraction	0	NullArgumentException	$ == null
3415	436	4	BigFraction.java	divide	THIS	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals(fraction.$.numerator)
3415	436	4	BigFraction.java	divide	fraction	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals($.numerator)
3416	448	4	BigFraction.java	doubleValue	result	double	0	DEF	Double.isNaN($)
3417	462	4	BigFraction.java	equals	THIS	BigFraction	1	DEF	$ == other
3417	462	4	BigFraction.java	equals	other	Object	1	DEF	this == $
3418	466	6	BigFraction.java	equals	other	Object	0	DEF	$ instanceof BigFraction
3419	481	4	BigFraction.java	floatValue	result	float	0	DEF	Double.isNaN($)
3420	560	4	BigFraction.java	multiply	bg	BigInteger	0	NullArgumentException	$ == null
3421	588	4	BigFraction.java	multiply	fraction	BigFraction	0	NullArgumentException	$ == null
3422	591	4	BigFraction.java	multiply	THIS	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
3422	591	4	BigFraction.java	multiply	THIS	BigFraction	0	RET	fraction.$.numerator.equals(BigInteger.ZERO)
3422	591	4	BigFraction.java	multiply	fraction	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
3423	616	4	BigFraction.java	pow	exponent	int	0	RET	$ < 0
3424	627	4	BigFraction.java	pow	exponent	long	0	RET	$ < 0
3425	638	4	BigFraction.java	pow	exponent	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
3426	674	4	BigFraction.java	subtract	bg	BigInteger	0	NullArgumentException	$ == null
3427	702	4	BigFraction.java	subtract	fraction	BigFraction	0	NullArgumentException	$ == null
3428	705	4	BigFraction.java	subtract	fraction	BigFraction	0	RET	ZERO.equals($)
3429	710	4	BigFraction.java	subtract	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
3429	710	4	BigFraction.java	subtract	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
3430	727	4	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ONE.equals($.denominator)
3431	731	6	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ZERO.equals($.numerator)
3387	112	4	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigFraction
3388	116	6	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigInteger
3389	120	8	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
3390	139	4	BigFractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
3391	154	4	BigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
3392	172	0	BigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
6451	187	0	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	Character.isDigit(source.charAt($))
6451	187	0	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	$ < source.length()
6451	187	0	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	Character.isDigit($.charAt(end))
6451	187	0	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	end < $.length()
1083	284	4	BigReal.java	equals	THIS	BigReal	0	RET	$ == other
1083	284	4	BigReal.java	equals	other	Object	0	RET	this == $
1084	287	4	BigReal.java	equals	other	Object	0	RET	$ instanceof BigReal
2942	32	6	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i < 0
2942	32	6	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i > 1
6137	44	4	BinaryChromosome.java	randomBinaryRepresentation	j	int	0	NIL-FOR	$ < length
6137	44	4	BinaryChromosome.java	randomBinaryRepresentation	length	int	0	NIL-FOR	j < $
2943	50	4	BinaryChromosome.java	isSame	another	Chromosome	0	RET	$ instanceof BinaryChromosome
2944	54	4	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getLength() != anotherBc.getLength()
2944	54	4	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getLength() != $.getLength()
6138	57	4	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	NIL-FOR	i < $.getRepresentation().size()
6138	57	4	BinaryChromosome.java	isSame	i	int	0	NIL-FOR	$ < getRepresentation().size()
2945	58	6	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))
2945	58	6	BinaryChromosome.java	isSame	i	int	0	RET	getRepresentation().get($).equals(anotherBc.getRepresentation().get($))
2945	58	6	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getRepresentation().get(i).equals($.getRepresentation().get(i))
2914	19	4	BinaryMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof BinaryChromosome
1741	49	4	BinomialDistribution.java	BinomialDistribution	trials	int	0	NotPositiveException	$ < 0
1742	52	4	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ > 1
1742	52	4	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ < 0
1743	77	4	BinomialDistribution.java	probability	THIS	BinomialDistribution	1	DEF	x > $.numberOfTrials
1743	77	4	BinomialDistribution.java	probability	x	int	1	DEF	$ > numberOfTrials
1743	77	4	BinomialDistribution.java	probability	x	int	1	DEF	$ < 0
1744	90	4	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
1745	94	6	BinomialDistribution.java	cumulativeProbability	THIS	BinomialDistribution	1	DEF	x >= $.numberOfTrials
1745	94	6	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= numberOfTrials
4186	49	6	BisectionSolver.java	doSolve	fm	double	1	DEF	$ * fmin > 0
4186	49	6	BisectionSolver.java	doSolve	fmin	double	1	DEF	fm * $ > 0
4187	55	6	BisectionSolver.java	doSolve	THIS	BisectionSolver	0	RET	$.FastMath.abs(max - min) <= absoluteAccuracy
4187	55	6	BisectionSolver.java	doSolve	min	double	0	RET	FastMath.abs(max - $) <= absoluteAccuracy
4187	55	6	BisectionSolver.java	doSolve	max	double	0	RET	FastMath.abs($ - min) <= absoluteAccuracy
4187	55	6	BisectionSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(max - min) <= $
4538	55	4	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < iEnd
4538	55	4	BitsStreamGenerator.java	nextBytes	iEnd	int	0	NIL-WHILE	i < $
4539	64	4	BitsStreamGenerator.java	nextBytes	THIS	BitsStreamGenerator	0	NIL-WHILE	i < bytes.$.length
4539	64	4	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < bytes.length
4539	64	4	BitsStreamGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	i < $.length
529	88	4	BitsStreamGenerator.java	nextGaussian	THIS	BitsStreamGenerator	1	DEF	Double.isNaN($.nextGaussian)
530	112	4	BitsStreamGenerator.java	nextInt	n	int	0	RET	$ > 0
531	113	6	BitsStreamGenerator.java	nextInt	n	int	0	RET	($ & -$) == $
4540	118	6	BitsStreamGenerator.java	nextInt	bits	int	0	NIL-DOWHILE	$ - val + (n - 1) < 0
4540	118	6	BitsStreamGenerator.java	nextInt	val	int	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
4540	118	6	BitsStreamGenerator.java	nextInt	n	int	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
532	142	4	BitsStreamGenerator.java	nextLong	n	long	0	RET	$ > 0
4541	145	6	BitsStreamGenerator.java	nextLong	bits	long	0	NIL-DOWHILE	$ - val + (n - 1) < 0
4541	145	6	BitsStreamGenerator.java	nextLong	val	long	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
4541	145	6	BitsStreamGenerator.java	nextLong	n	long	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
1443	92	4	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	1	DEF	$
5106	99	4	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
5106	99	4	BlockFieldMatrix.java	BlockFieldMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
5107	101	6	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
5107	101	6	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1444	102	8	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1444	102	8	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1444	102	8	BlockFieldMatrix.java	BlockFieldMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1444	102	8	BlockFieldMatrix.java	BlockFieldMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1444	102	8	BlockFieldMatrix.java	BlockFieldMatrix	blockData	T[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1445	105	8	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	0	DEF	$
5108	125	4	BlockFieldMatrix.java	toBlocksLayout	THIS	BlockFieldMatrix	0	NIL-FOR	i < rawData.$.length
5108	125	4	BlockFieldMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
5108	125	4	BlockFieldMatrix.java	toBlocksLayout	rawData	T[][]	0	NIL-FOR	i < $.length
1446	127	6	BlockFieldMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1446	127	6	BlockFieldMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
5109	134	4	BlockFieldMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
5109	134	4	BlockFieldMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
5110	138	6	BlockFieldMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
5110	138	6	BlockFieldMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
5111	145	8	BlockFieldMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
5111	145	8	BlockFieldMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
5112	169	4	BlockFieldMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
5112	169	4	BlockFieldMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
5113	173	6	BlockFieldMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
5113	173	6	BlockFieldMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
5114	194	4	BlockFieldMatrix.java	copy	THIS	BlockFieldMatrix	0	NIL-FOR	i < $.blocks.$.length
5114	194	4	BlockFieldMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
5115	210	6	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
5115	210	6	BlockFieldMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
5115	210	6	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
5116	211	8	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
5116	211	8	BlockFieldMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
5116	211	8	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
5117	219	10	BlockFieldMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
5117	219	10	BlockFieldMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
5118	220	12	BlockFieldMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
5118	220	12	BlockFieldMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
5119	240	4	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
5119	240	4	BlockFieldMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
5119	240	4	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
5120	244	6	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
5120	244	6	BlockFieldMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
5120	244	6	BlockFieldMatrix.java	add	outBlock	T[]	0	NIL-FOR	k < $.length
5121	261	6	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
5121	261	6	BlockFieldMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
5121	261	6	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
5122	262	8	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
5122	262	8	BlockFieldMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
5122	262	8	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
5123	270	10	BlockFieldMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
5123	270	10	BlockFieldMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
5124	271	12	BlockFieldMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
5124	271	12	BlockFieldMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
5125	291	4	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
5125	291	4	BlockFieldMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
5125	291	4	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
5126	295	6	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
5126	295	6	BlockFieldMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
5126	295	6	BlockFieldMatrix.java	subtract	outBlock	T[]	0	NIL-FOR	k < $.length
5127	306	4	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
5127	306	4	BlockFieldMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
5127	306	4	BlockFieldMatrix.java	scalarAdd	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
5128	309	6	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
5128	309	6	BlockFieldMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
5128	309	6	BlockFieldMatrix.java	scalarAdd	outBlock	T[]	0	NIL-FOR	k < $.length
5129	320	4	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
5129	320	4	BlockFieldMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
5129	320	4	BlockFieldMatrix.java	scalarMultiply	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
5130	323	6	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
5130	323	6	BlockFieldMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
5130	323	6	BlockFieldMatrix.java	scalarMultiply	outBlock	T[]	0	NIL-FOR	k < $.length
5131	341	6	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
5131	341	6	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
5131	341	6	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
5132	344	8	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
5132	344	8	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
5132	344	8	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
5133	348	10	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
5133	348	10	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
5134	353	12	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
5134	353	12	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
5135	356	14	BlockFieldMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
5135	356	14	BlockFieldMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
5136	359	16	BlockFieldMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
5136	359	16	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
5137	385	4	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
5137	385	4	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
5137	385	4	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
5138	388	6	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
5138	388	6	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
5138	388	6	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
5139	394	8	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
5139	394	8	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
5140	399	10	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
5140	399	10	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
5141	402	12	BlockFieldMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
5141	402	12	BlockFieldMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
5142	406	14	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
5142	406	14	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
5143	411	14	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
5143	411	14	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
5144	431	4	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
5144	431	4	BlockFieldMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
5145	436	6	BlockFieldMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
5145	436	6	BlockFieldMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
5146	440	8	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
5146	440	8	BlockFieldMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
5147	462	4	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
5147	462	4	BlockFieldMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
5147	462	4	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
5148	465	6	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
5148	465	6	BlockFieldMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
5148	465	6	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
1447	473	8	BlockFieldMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1448	474	10	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1449	487	10	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
5149	519	4	BlockFieldMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
5149	519	4	BlockFieldMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1450	531	4	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1451	538	6	BlockFieldMatrix.java	setSubMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1451	538	6	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
5150	546	4	BlockFieldMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
5150	546	4	BlockFieldMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
5151	551	6	BlockFieldMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
5151	551	6	BlockFieldMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
5152	558	8	BlockFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
5152	558	8	BlockFieldMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
5153	575	4	BlockFieldMatrix.java	getRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
5153	575	4	BlockFieldMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1452	579	6	BlockFieldMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1452	579	6	BlockFieldMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1453	613	4	BlockFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1453	613	4	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1453	613	4	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
5154	621	4	BlockFieldMatrix.java	setRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
5154	621	4	BlockFieldMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1454	625	6	BlockFieldMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1454	625	6	BlockFieldMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
5155	649	4	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
5155	649	4	BlockFieldMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
5156	652	6	BlockFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
5156	652	6	BlockFieldMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1455	653	8	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	DEF	outIndex >= outBlock.$.length
1455	653	8	BlockFieldMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1455	653	8	BlockFieldMatrix.java	getColumnMatrix	outBlock	T[]	0	DEF	outIndex >= $.length
1456	683	4	BlockFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1456	683	4	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1456	683	4	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
5157	692	4	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
5157	692	4	BlockFieldMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
5158	695	6	BlockFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
5158	695	6	BlockFieldMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1457	696	8	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	DEF	mIndex >= mBlock.$.length
1457	696	8	BlockFieldMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1457	696	8	BlockFieldMatrix.java	setColumnMatrix	mBlock	T[]	0	DEF	mIndex >= $.length
5159	713	4	BlockFieldMatrix.java	getRowVector	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
5159	713	4	BlockFieldMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
5160	742	4	BlockFieldMatrix.java	getColumnVector	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
5160	742	4	BlockFieldMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
5161	745	6	BlockFieldMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
5161	745	6	BlockFieldMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
5162	771	4	BlockFieldMatrix.java	getRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
5162	771	4	BlockFieldMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1458	785	4	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1458	785	4	BlockFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1458	785	4	BlockFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
5163	791	4	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
5163	791	4	BlockFieldMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
5164	808	4	BlockFieldMatrix.java	getColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
5164	808	4	BlockFieldMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
5165	811	6	BlockFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
5165	811	6	BlockFieldMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1459	823	4	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1459	823	4	BlockFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1459	823	4	BlockFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
5166	830	4	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
5166	830	4	BlockFieldMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
5167	833	6	BlockFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
5167	833	6	BlockFieldMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
5168	892	4	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockColumns
5168	892	4	BlockFieldMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
5169	893	6	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockRows
5169	893	6	BlockFieldMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
5170	901	8	BlockFieldMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
5170	901	8	BlockFieldMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
5171	904	10	BlockFieldMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
5171	904	10	BlockFieldMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1460	931	4	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.columns
1460	931	4	BlockFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != columns
5172	936	4	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
5172	936	4	BlockFieldMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
5173	939	6	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
5173	939	6	BlockFieldMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
5174	944	8	BlockFieldMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
5174	944	8	BlockFieldMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
5175	947	10	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
5175	947	10	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
5176	952	10	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
5176	952	10	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1461	965	4	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.rows
1461	965	4	BlockFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != rows
5177	970	4	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
5177	970	4	BlockFieldMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
5178	977	6	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
5178	977	6	BlockFieldMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
5179	981	8	BlockFieldMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
5179	981	8	BlockFieldMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
5180	985	10	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
5180	985	10	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
5181	990	10	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
5181	990	10	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
5182	1005	4	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
5182	1005	4	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
5183	1008	6	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
5183	1008	6	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
5184	1009	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
5184	1009	8	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
5185	1015	10	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
5185	1015	10	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
5186	1029	4	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
5186	1029	4	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
5187	1032	6	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
5187	1032	6	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
5188	1033	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
5188	1033	8	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
5189	1039	10	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
5189	1039	10	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
5190	1054	4	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
5190	1054	4	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
5191	1058	6	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
5191	1058	6	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
5192	1059	8	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
5192	1059	8	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
5193	1066	10	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
5193	1066	10	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
5194	1081	4	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
5194	1081	4	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
5195	1085	6	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
5195	1085	6	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
5196	1086	8	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
5196	1086	8	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
5197	1093	10	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
5197	1093	10	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
5198	1108	4	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
5198	1108	4	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
5199	1111	6	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
5199	1111	6	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
5200	1116	8	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
5200	1116	8	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
5201	1117	10	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
5201	1117	10	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
5202	1133	4	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
5202	1133	4	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
5203	1136	6	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
5203	1136	6	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
5204	1141	8	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
5204	1141	8	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
5205	1142	10	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
5205	1142	10	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
5206	1158	4	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
5206	1158	4	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
5207	1162	6	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
5207	1162	6	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
5208	1168	8	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
5208	1168	8	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
5209	1170	10	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
5209	1170	10	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
5210	1185	4	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
5210	1185	4	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
5211	1189	6	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
5211	1189	6	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
5212	1195	8	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
5212	1195	8	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
5213	1197	10	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
5213	1197	10	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
1548	89	4	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	1	DEF	$
5288	96	4	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
5288	96	4	BlockRealMatrix.java	BlockRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
5289	98	6	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
5289	98	6	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1549	99	8	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1549	99	8	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1549	99	8	BlockRealMatrix.java	BlockRealMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1549	99	8	BlockRealMatrix.java	BlockRealMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1549	99	8	BlockRealMatrix.java	BlockRealMatrix	blockData	double[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1550	102	8	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	0	DEF	$
5290	121	4	BlockRealMatrix.java	toBlocksLayout	THIS	BlockRealMatrix	0	NIL-FOR	i < rawData.$.length
5290	121	4	BlockRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
5290	121	4	BlockRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
1551	123	6	BlockRealMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1551	123	6	BlockRealMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
5291	129	4	BlockRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
5291	129	4	BlockRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
5292	133	6	BlockRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
5292	133	6	BlockRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
5293	140	8	BlockRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
5293	140	8	BlockRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
5294	162	4	BlockRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
5294	162	4	BlockRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
5295	166	6	BlockRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
5295	166	6	BlockRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
5296	187	4	BlockRealMatrix.java	copy	THIS	BlockRealMatrix	0	NIL-FOR	i < $.blocks.$.length
5296	187	4	BlockRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
5297	203	6	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
5297	203	6	BlockRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
5297	203	6	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
5298	204	8	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
5298	204	8	BlockRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
5298	204	8	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
5299	212	10	BlockRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
5299	212	10	BlockRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
5300	213	12	BlockRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
5300	213	12	BlockRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
5301	233	4	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
5301	233	4	BlockRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
5301	233	4	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
5302	237	6	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
5302	237	6	BlockRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
5302	237	6	BlockRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
5303	254	6	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
5303	254	6	BlockRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
5303	254	6	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
5304	255	8	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
5304	255	8	BlockRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
5304	255	8	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
5305	263	10	BlockRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
5305	263	10	BlockRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
5306	264	12	BlockRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
5306	264	12	BlockRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
5307	284	4	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
5307	284	4	BlockRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
5307	284	4	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
5308	288	6	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
5308	288	6	BlockRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
5308	288	6	BlockRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
5309	299	4	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
5309	299	4	BlockRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
5309	299	4	BlockRealMatrix.java	scalarAdd	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
5310	302	6	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
5310	302	6	BlockRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
5310	302	6	BlockRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
5311	313	4	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
5311	313	4	BlockRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
5311	313	4	BlockRealMatrix.java	scalarMultiply	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
5312	316	6	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
5312	316	6	BlockRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
5312	316	6	BlockRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
5313	333	6	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
5313	333	6	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
5313	333	6	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
5314	336	8	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
5314	336	8	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
5314	336	8	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
5315	340	10	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
5315	340	10	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
5316	345	12	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
5316	345	12	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
5317	348	14	BlockRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
5317	348	14	BlockRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
5318	351	16	BlockRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
5318	351	16	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
5319	376	4	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
5319	376	4	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
5319	376	4	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
5320	379	6	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
5320	379	6	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
5320	379	6	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
5321	385	8	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
5321	385	8	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
5322	390	10	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
5322	390	10	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
5323	393	12	BlockRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
5323	393	12	BlockRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
5324	397	14	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
5324	397	14	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
5325	402	14	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
5325	402	14	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
5326	422	4	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
5326	422	4	BlockRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
5327	427	6	BlockRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
5327	427	6	BlockRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
5328	431	8	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
5328	431	8	BlockRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
5329	448	4	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
5329	448	4	BlockRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
5330	451	6	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
5330	451	6	BlockRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
5331	454	8	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
5331	454	8	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
5332	456	10	BlockRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
5332	456	10	BlockRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
5333	462	6	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
5333	462	6	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
5334	473	4	BlockRealMatrix.java	getFrobeniusNorm	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
5334	473	4	BlockRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
5335	491	4	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
5335	491	4	BlockRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
5335	491	4	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
5336	494	6	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
5336	494	6	BlockRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
5336	494	6	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
1552	502	8	BlockRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1553	503	10	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1554	516	10	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
5337	548	4	BlockRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
5337	548	4	BlockRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1555	560	4	BlockRealMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1556	567	6	BlockRealMatrix.java	setSubMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1556	567	6	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
5338	575	4	BlockRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
5338	575	4	BlockRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
5339	580	6	BlockRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
5339	580	6	BlockRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
5340	587	8	BlockRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
5340	587	8	BlockRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
5341	604	4	BlockRealMatrix.java	getRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
5341	604	4	BlockRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1557	608	6	BlockRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1557	608	6	BlockRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1558	642	4	BlockRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1558	642	4	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1558	642	4	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
5342	650	4	BlockRealMatrix.java	setRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
5342	650	4	BlockRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1559	654	6	BlockRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1559	654	6	BlockRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
5343	678	4	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
5343	678	4	BlockRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
5344	681	6	BlockRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
5344	681	6	BlockRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1560	682	8	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	DEF	outIndex >= outBlock.$.length
1560	682	8	BlockRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1560	682	8	BlockRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
1561	712	4	BlockRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1561	712	4	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1561	712	4	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
5345	721	4	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
5345	721	4	BlockRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
5346	724	6	BlockRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
5346	724	6	BlockRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1562	725	8	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	DEF	mIndex >= mBlock.$.length
1562	725	8	BlockRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1562	725	8	BlockRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
5347	742	4	BlockRealMatrix.java	getRowVector	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
5347	742	4	BlockRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
5348	771	4	BlockRealMatrix.java	getColumnVector	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
5348	771	4	BlockRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
5349	774	6	BlockRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
5349	774	6	BlockRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
5350	800	4	BlockRealMatrix.java	getRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
5350	800	4	BlockRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1563	814	4	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1563	814	4	BlockRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1563	814	4	BlockRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
5351	820	4	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
5351	820	4	BlockRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
5352	837	4	BlockRealMatrix.java	getColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
5352	837	4	BlockRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
5353	840	6	BlockRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
5353	840	6	BlockRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1564	852	4	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1564	852	4	BlockRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1564	852	4	BlockRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
5354	859	4	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
5354	859	4	BlockRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
5355	862	6	BlockRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
5355	862	6	BlockRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
5356	915	4	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
5356	915	4	BlockRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
5357	916	6	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockRows
5357	916	6	BlockRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
5358	924	8	BlockRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
5358	924	8	BlockRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
5359	927	10	BlockRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
5359	927	10	BlockRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1565	954	4	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.columns
1565	954	4	BlockRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != columns
5360	958	4	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
5360	958	4	BlockRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
5361	961	6	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
5361	961	6	BlockRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
5362	966	8	BlockRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
5362	966	8	BlockRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
5363	969	10	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
5363	969	10	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
5364	974	10	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
5364	974	10	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1566	987	4	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.rows
1566	987	4	BlockRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != rows
5365	991	4	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
5365	991	4	BlockRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
5366	998	6	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
5366	998	6	BlockRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
5367	1002	8	BlockRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
5367	1002	8	BlockRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
5368	1006	10	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
5368	1006	10	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
5369	1011	10	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
5369	1011	10	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
5370	1026	4	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
5370	1026	4	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
5371	1029	6	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
5371	1029	6	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
5372	1030	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
5372	1030	8	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
5373	1036	10	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
5373	1036	10	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
5374	1050	4	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
5374	1050	4	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
5375	1053	6	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
5375	1053	6	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
5376	1054	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
5376	1054	8	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
5377	1060	10	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
5377	1060	10	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
5378	1075	4	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
5378	1075	4	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
5379	1079	6	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
5379	1079	6	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
5380	1080	8	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
5380	1080	8	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
5381	1087	10	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
5381	1087	10	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
5382	1102	4	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
5382	1102	4	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
5383	1106	6	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
5383	1106	6	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
5384	1107	8	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
5384	1107	8	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
5385	1114	10	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
5385	1114	10	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
5386	1129	4	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
5386	1129	4	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
5387	1132	6	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
5387	1132	6	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
5388	1137	8	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
5388	1137	8	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
5389	1138	10	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
5389	1138	10	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
5390	1154	4	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
5390	1154	4	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
5391	1157	6	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
5391	1157	6	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
5392	1162	8	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
5392	1162	8	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
5393	1163	10	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
5393	1163	10	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
5394	1179	4	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
5394	1179	4	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
5395	1183	6	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
5395	1183	6	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
5396	1189	8	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
5396	1189	8	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
5397	1191	10	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
5397	1191	10	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
5398	1206	4	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
5398	1206	4	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
5399	1210	6	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
5399	1210	6	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
5400	1216	8	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
5400	1216	8	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
5401	1218	10	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
5401	1218	10	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
3632	31	4	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute	0	DEF	$.getPlusOutside() != null
3633	34	4	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute	0	DEF	$.getPlusInside() != null
3002	66	4	BracketFinder.java	BracketFinder	growLimit	double	0	NotStrictlyPositiveException	$ <= 0
3003	69	4	BracketFinder.java	BracketFinder	maxEvaluations	int	0	NotStrictlyPositiveException	$ <= 0
3004	88	4	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fA < fB : fA > fB
3004	88	4	BracketFinder.java	search	fA	double	0	DEF	isMinim ? $ < fB : $ > fB
3004	88	4	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fA < $ : fA > $
6165	98	4	BracketFinder.java	search	isMinim	boolean	0	NIL-WHILE	$ ? fC < fB : fC > fB
6165	98	4	BracketFinder.java	search	fB	double	0	NIL-WHILE	isMinim ? fC < $ : fC > $
6165	98	4	BracketFinder.java	search	fC	double	0	NIL-WHILE	isMinim ? $ < fB : $ > fB
3005	106	6	BracketFinder.java	search	w	double	1	DEF	($ - xC) * (xB - $) > 0
3005	106	6	BracketFinder.java	search	xC	double	1	DEF	(w - $) * (xB - w) > 0
3005	106	6	BracketFinder.java	search	xB	double	1	DEF	(w - xC) * ($ - w) > 0
3006	108	8	BracketFinder.java	search	fW	double	1	DEF	isMinim ? $ < fC : $ > fC
3006	108	8	BracketFinder.java	search	isMinim	boolean	1	DEF	$ ? fW < fC : fW > fC
3006	108	8	BracketFinder.java	search	fC	double	1	DEF	isMinim ? fW < $ : fW > $
3007	116	10	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ > fB : $ < fB
3007	116	10	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW > fB : fW < fB
3007	116	10	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fW > $ : fW < $
3008	126	8	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (wLim - xC) >= 0
3008	126	8	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * ($ - xC) >= 0
3008	126	8	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * (wLim - $) >= 0
3009	131	10	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (xC - $) > 0
3009	131	10	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * (xC - w) > 0
3009	131	10	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * ($ - w) > 0
3010	133	12	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ < fC : $ > fC
3010	133	12	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW < fC : fW > fC
3010	133	12	BracketFinder.java	search	fC	double	0	DEF	isMinim ? fW < $ : fW > $
3011	161	4	BracketFinder.java	search	THIS	BracketFinder	0	DEF	$.lo > $.hi
2791	67	4	BracketFinder.java	BracketFinder	growLimit	double	0	NotStrictlyPositiveException	$ <= 0
2792	70	4	BracketFinder.java	BracketFinder	maxEvaluations	int	0	NotStrictlyPositiveException	$ <= 0
2793	89	4	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fA < fB : fA > fB
2793	89	4	BracketFinder.java	search	fA	double	0	DEF	isMinim ? $ < fB : $ > fB
2793	89	4	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fA < $ : fA > $
6039	99	4	BracketFinder.java	search	isMinim	boolean	0	NIL-WHILE	$ ? fC < fB : fC > fB
6039	99	4	BracketFinder.java	search	fB	double	0	NIL-WHILE	isMinim ? fC < $ : fC > $
6039	99	4	BracketFinder.java	search	fC	double	0	NIL-WHILE	isMinim ? $ < fB : $ > fB
2794	107	6	BracketFinder.java	search	w	double	1	DEF	($ - xC) * (xB - $) > 0
2794	107	6	BracketFinder.java	search	xC	double	1	DEF	(w - $) * (xB - w) > 0
2794	107	6	BracketFinder.java	search	xB	double	1	DEF	(w - xC) * ($ - w) > 0
2795	109	8	BracketFinder.java	search	fW	double	1	DEF	isMinim ? $ < fC : $ > fC
2795	109	8	BracketFinder.java	search	isMinim	boolean	1	DEF	$ ? fW < fC : fW > fC
2795	109	8	BracketFinder.java	search	fC	double	1	DEF	isMinim ? fW < $ : fW > $
2796	117	10	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ > fB : $ < fB
2796	117	10	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW > fB : fW < fB
2796	117	10	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fW > $ : fW < $
2797	127	8	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (wLim - xC) >= 0
2797	127	8	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * ($ - xC) >= 0
2797	127	8	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * (wLim - $) >= 0
2798	132	10	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (xC - $) > 0
2798	132	10	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * (xC - w) > 0
2798	132	10	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * ($ - w) > 0
2799	134	12	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ < fC : $ > fC
2799	134	12	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW < fC : fW > fC
2799	134	12	BracketFinder.java	search	fC	double	0	DEF	isMinim ? fW < $ : fW > $
2800	162	4	BracketFinder.java	search	THIS	BracketFinder	0	DEF	$.lo > $.hi
4154	53	4	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
4155	68	4	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
4156	84	4	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
4157	108	4	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	RET	$.Precision.equals(y[1],0.0,1)
4157	108	4	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[1],0.0,1)
4158	112	4	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	RET	$.Precision.equals(y[0],0.0,1)
4158	112	4	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[0],0.0,1)
4159	117	4	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[0] * $[1] < 0
4160	123	6	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	RET	$.Precision.equals(y[2],0.0,1)
4160	123	6	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[2],0.0,1)
4161	126	6	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[1] * $[2] < 0
4162	145	6	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	MathInternalError:RET	$.FastMath.max(absYA,absYB) < $.getFunctionValueAccuracy()
4162	145	6	BracketingNthOrderBrentSolver.java	doSolve	xTol	double	0	MathInternalError:RET	(xB - xA) <= $
4162	145	6	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	MathInternalError:RET	(xB - $) <= xTol
4162	145	6	BracketingNthOrderBrentSolver.java	doSolve	absYA	double	0	MathInternalError:RET	FastMath.max($,absYB) < getFunctionValueAccuracy()
4162	145	6	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	MathInternalError:RET	($ - xA) <= xTol
4162	145	6	BracketingNthOrderBrentSolver.java	doSolve	absYB	double	0	MathInternalError:RET	FastMath.max(absYA,$) < getFunctionValueAccuracy()
4163	162	0	BracketingNthOrderBrentSolver.java	doSolve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
4164	169	0	BracketingNthOrderBrentSolver.java	doSolve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
6653	182	0	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	NIL-DOWHILE	Double.isNaN($)
6653	182	0	BracketingNthOrderBrentSolver.java	doSolve	start	int	0	NIL-DOWHILE	end - $ > 1
6653	182	0	BracketingNthOrderBrentSolver.java	doSolve	end	int	0	NIL-DOWHILE	$ - start > 1
4165	185	0	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ < xB
4165	185	0	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ > xA
4165	185	0	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	DEF	nextX > $
4165	185	0	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	DEF	nextX < $
4166	186	0	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
4166	186	0	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
4166	186	0	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	1	DEF	$ - start >= end - $
4167	196	0	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	Double.isNaN($)
4168	202	0	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	RET	$.Precision.equals(nextY,0.0,1)
4168	202	0	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	0	RET	Precision.equals($,0.0,1)
4169	205	0	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	end - $ != nbPoints
4169	205	0	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	$ - start != nbPoints
4169	205	0	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	end - start != $
4169	205	0	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	$ > 2
4170	212	0	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	nbPoints == x.$.length
4170	212	0	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	nbPoints == $.length
4170	212	0	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	0	DEF	$ == x.length
4171	214	0	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
4171	214	0	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
4171	214	0	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
4172	226	0	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	1	DEF	$ * yA <= 0
4172	226	0	BracketingNthOrderBrentSolver.java	doSolve	yA	double	1	DEF	nextY * $ <= 0
6654	253	0	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	$ < end - 1
6654	253	0	BracketingNthOrderBrentSolver.java	guessX	end	int	0	NIL-FOR	i < $ - 1
6655	255	0	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ > i
6655	255	0	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	j > $
6656	260	0	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ >= start
6656	260	0	BracketingNthOrderBrentSolver.java	guessX	start	int	0	NIL-FOR	j >= $
1890	47	4	BracketingNthOrderBrentSolverDFP.java	BracketingNthOrderBrentSolverDFP	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
1891	136	4	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[1].isZero()
1892	141	4	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[0].isZero()
1893	146	4	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[0].multiply($[1]).negativeOrNull()
1894	153	6	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[2].isZero()
1895	156	6	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[1].multiply($[2]).negativeOrNull()
1896	179	6	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	MathInternalError:RET	maxY.lessThan($.functionValueAccuracy)
1896	179	6	BracketingNthOrderBrentSolverDFP.java	solve	maxY	Dfp	0	MathInternalError:RET	$.lessThan(functionValueAccuracy)
1896	179	6	BracketingNthOrderBrentSolverDFP.java	solve	xTol	Dfp	0	MathInternalError:RET	xB.subtract(xA).subtract($).negativeOrNull()
1896	179	6	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	MathInternalError:RET	xB.subtract($).subtract(xTol).negativeOrNull()
1896	179	6	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	MathInternalError:RET	$.subtract(xA).subtract(xTol).negativeOrNull()
1897	196	0	BracketingNthOrderBrentSolverDFP.java	solve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
1898	200	0	BracketingNthOrderBrentSolverDFP.java	solve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
5573	210	0	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	NIL-DOWHILE	$.isNaN()
5573	210	0	BracketingNthOrderBrentSolverDFP.java	solve	start	int	0	NIL-DOWHILE	end - $ > 1
5573	210	0	BracketingNthOrderBrentSolverDFP.java	solve	end	int	0	NIL-DOWHILE	$ - start > 1
1899	213	0	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.lessThan(xB)
1899	213	0	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.greaterThan(xA)
1899	213	0	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	DEF	nextX.greaterThan($)
1899	213	0	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	DEF	nextX.lessThan($)
1900	214	0	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
1900	214	0	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
1900	214	0	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	1	DEF	$ - start >= end - $
1901	224	0	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.isNaN()
1902	231	0	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	0	RET	$.isZero()
1903	234	0	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	end - $ != nbPoints
1903	234	0	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	$ - start != nbPoints
1903	234	0	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	end - start != $
1903	234	0	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	$ > 2
1904	241	0	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	nbPoints == x.$.length
1904	241	0	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	nbPoints == $.length
1904	241	0	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	0	DEF	$ == x.length
1905	243	0	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
1905	243	0	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
1905	243	0	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
1906	255	0	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	1	DEF	$.multiply(yA).negativeOrNull()
1906	255	0	BracketingNthOrderBrentSolverDFP.java	solve	yA	Dfp	1	DEF	nextY.multiply($).negativeOrNull()
5574	282	0	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	$ < end - 1
5574	282	0	BracketingNthOrderBrentSolverDFP.java	guessX	end	int	0	NIL-FOR	i < $ - 1
5575	284	0	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ > i
5575	284	0	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	j > $
5576	289	0	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ >= start
5576	289	0	BracketingNthOrderBrentSolverDFP.java	guessX	start	int	0	NIL-FOR	j >= $
3012	40	4	BrentOptimizer.java	BrentOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
3013	43	4	BrentOptimizer.java	BrentOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
3014	70	4	BrentOptimizer.java	doOptimize	lo	double	1	DEF	$ < hi
3014	70	4	BrentOptimizer.java	doOptimize	hi	double	1	DEF	lo < $
3015	84	4	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
3016	98	6	BrentOptimizer.java	doOptimize	stop	boolean	1	RET	$
3017	103	8	BrentOptimizer.java	doOptimize	THIS	BrentOptimizer	1	DEF	$.FastMath.abs(e) > tol1
3017	103	8	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(e) > $
3017	103	8	BrentOptimizer.java	doOptimize	e	double	1	DEF	FastMath.abs($) > tol1
3018	108	10	BrentOptimizer.java	doOptimize	q	double	1	DEF	$ > 0
3019	116	10	BrentOptimizer.java	doOptimize	THIS	BrentOptimizer	1	DEF	$.FastMath.abs(p) < $.FastMath.abs(0.5 * q * r)
3019	116	10	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ < q * (b - x)
3019	116	10	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ > q * (a - x)
3019	116	10	BrentOptimizer.java	doOptimize	p	double	1	DEF	FastMath.abs($) < FastMath.abs(0.5 * q * r)
3019	116	10	BrentOptimizer.java	doOptimize	q	double	1	DEF	p < $ * (b - x)
3019	116	10	BrentOptimizer.java	doOptimize	q	double	1	DEF	p > $ * (a - x)
3019	116	10	BrentOptimizer.java	doOptimize	q	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * $ * r)
3019	116	10	BrentOptimizer.java	doOptimize	r	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * q * $)
3019	116	10	BrentOptimizer.java	doOptimize	a	double	1	DEF	p > q * ($ - x)
3019	116	10	BrentOptimizer.java	doOptimize	b	double	1	DEF	p < q * ($ - x)
3019	116	10	BrentOptimizer.java	doOptimize	x	double	1	DEF	p < q * (b - $)
3019	116	10	BrentOptimizer.java	doOptimize	x	double	1	DEF	p > q * (a - $)
3020	119	12	BrentOptimizer.java	doOptimize	u	double	0	DEF	$ - a < tol2
3020	119	12	BrentOptimizer.java	doOptimize	u	double	0	DEF	b - $ < tol2
3020	119	12	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	u - a < $
3020	119	12	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	b - u < $
3020	119	12	BrentOptimizer.java	doOptimize	a	double	0	DEF	u - $ < tol2
3020	119	12	BrentOptimizer.java	doOptimize	b	double	0	DEF	$ - u < tol2
3021	120	14	BrentOptimizer.java	doOptimize	m	double	1	DEF	x <= $
3021	120	14	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ <= m
3022	129	12	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
3022	129	12	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
3023	139	10	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
3023	139	10	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
3024	147	8	BrentOptimizer.java	doOptimize	THIS	BrentOptimizer	1	DEF	$.FastMath.abs(d) < tol1
3024	147	8	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(d) < $
3024	147	8	BrentOptimizer.java	doOptimize	d	double	1	DEF	FastMath.abs($) < tol1
3025	148	10	BrentOptimizer.java	doOptimize	d	double	1	DEF	$ >= 0
3026	159	8	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
3027	165	8	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker	0	RET	$.converged(iter,previous,current)
3027	165	8	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker	0	RET	$ != null
3027	165	8	BrentOptimizer.java	doOptimize	previous	UnivariatePointValuePair	0	RET	checker.converged(iter,$,current)
3027	165	8	BrentOptimizer.java	doOptimize	current	UnivariatePointValuePair	0	RET	checker.converged(iter,previous,$)
3027	165	8	BrentOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($,previous,current)
3028	168	8	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fx
3028	168	8	BrentOptimizer.java	doOptimize	fx	double	1	DEF	fu <= $
3029	169	10	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
3029	169	10	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
3030	183	10	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
3030	183	10	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
3031	189	10	BrentOptimizer.java	doOptimize	THIS	BrentOptimizer	1	DEF	$.Precision.equals(w,x)
3031	189	10	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fw
3031	189	10	BrentOptimizer.java	doOptimize	x	double	1	DEF	Precision.equals(w,$)
3031	189	10	BrentOptimizer.java	doOptimize	w	double	1	DEF	Precision.equals($,x)
3031	189	10	BrentOptimizer.java	doOptimize	fw	double	1	DEF	fu <= $
3032	196	12	BrentOptimizer.java	doOptimize	THIS	BrentOptimizer	0	DEF	$.Precision.equals(v,w)
3032	196	12	BrentOptimizer.java	doOptimize	THIS	BrentOptimizer	0	DEF	$.Precision.equals(v,x)
3032	196	12	BrentOptimizer.java	doOptimize	fu	double	0	DEF	$ <= fv
3032	196	12	BrentOptimizer.java	doOptimize	x	double	0	DEF	Precision.equals(v,$)
3032	196	12	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($,w)
3032	196	12	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($,x)
3032	196	12	BrentOptimizer.java	doOptimize	w	double	0	DEF	Precision.equals(v,$)
3032	196	12	BrentOptimizer.java	doOptimize	fv	double	0	DEF	fu <= $
3033	217	4	BrentOptimizer.java	best	a	UnivariatePointValuePair	0	RET	$ == null
3034	220	4	BrentOptimizer.java	best	b	UnivariatePointValuePair	0	RET	$ == null
3035	223	4	BrentOptimizer.java	best	isMinim	boolean	1	RET	$
2801	41	4	BrentOptimizer.java	BrentOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
2802	44	4	BrentOptimizer.java	BrentOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
2803	71	4	BrentOptimizer.java	doOptimize	lo	double	1	DEF	$ < hi
2803	71	4	BrentOptimizer.java	doOptimize	hi	double	1	DEF	lo < $
2804	85	4	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
2805	99	6	BrentOptimizer.java	doOptimize	stop	boolean	1	RET	$
2806	104	8	BrentOptimizer.java	doOptimize	THIS	BrentOptimizer	1	DEF	$.FastMath.abs(e) > tol1
2806	104	8	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(e) > $
2806	104	8	BrentOptimizer.java	doOptimize	e	double	1	DEF	FastMath.abs($) > tol1
2807	109	10	BrentOptimizer.java	doOptimize	q	double	1	DEF	$ > 0
2808	117	10	BrentOptimizer.java	doOptimize	THIS	BrentOptimizer	1	DEF	$.FastMath.abs(p) < $.FastMath.abs(0.5 * q * r)
2808	117	10	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ > q * (a - x)
2808	117	10	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ < q * (b - x)
2808	117	10	BrentOptimizer.java	doOptimize	p	double	1	DEF	FastMath.abs($) < FastMath.abs(0.5 * q * r)
2808	117	10	BrentOptimizer.java	doOptimize	q	double	1	DEF	p > $ * (a - x)
2808	117	10	BrentOptimizer.java	doOptimize	q	double	1	DEF	p < $ * (b - x)
2808	117	10	BrentOptimizer.java	doOptimize	q	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * $ * r)
2808	117	10	BrentOptimizer.java	doOptimize	r	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * q * $)
2808	117	10	BrentOptimizer.java	doOptimize	a	double	1	DEF	p > q * ($ - x)
2808	117	10	BrentOptimizer.java	doOptimize	b	double	1	DEF	p < q * ($ - x)
2808	117	10	BrentOptimizer.java	doOptimize	x	double	1	DEF	p > q * (a - $)
2808	117	10	BrentOptimizer.java	doOptimize	x	double	1	DEF	p < q * (b - $)
2809	120	12	BrentOptimizer.java	doOptimize	u	double	0	DEF	$ - a < tol2
2809	120	12	BrentOptimizer.java	doOptimize	u	double	0	DEF	b - $ < tol2
2809	120	12	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	u - a < $
2809	120	12	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	b - u < $
2809	120	12	BrentOptimizer.java	doOptimize	a	double	0	DEF	u - $ < tol2
2809	120	12	BrentOptimizer.java	doOptimize	b	double	0	DEF	$ - u < tol2
2810	121	14	BrentOptimizer.java	doOptimize	m	double	1	DEF	x <= $
2810	121	14	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ <= m
2811	130	12	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
2811	130	12	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
2812	140	10	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
2812	140	10	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
2813	148	8	BrentOptimizer.java	doOptimize	THIS	BrentOptimizer	1	DEF	$.FastMath.abs(d) < tol1
2813	148	8	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(d) < $
2813	148	8	BrentOptimizer.java	doOptimize	d	double	1	DEF	FastMath.abs($) < tol1
2814	149	10	BrentOptimizer.java	doOptimize	d	double	1	DEF	$ >= 0
2815	160	8	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
2816	166	8	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker	0	RET	$.converged(iter,previous,current)
2816	166	8	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker	0	RET	$ != null
2816	166	8	BrentOptimizer.java	doOptimize	previous	UnivariatePointValuePair	0	RET	checker.converged(iter,$,current)
2816	166	8	BrentOptimizer.java	doOptimize	current	UnivariatePointValuePair	0	RET	checker.converged(iter,previous,$)
2816	166	8	BrentOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($,previous,current)
2817	169	8	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fx
2817	169	8	BrentOptimizer.java	doOptimize	fx	double	1	DEF	fu <= $
2818	170	10	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
2818	170	10	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
2819	184	10	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
2819	184	10	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
2820	190	10	BrentOptimizer.java	doOptimize	THIS	BrentOptimizer	1	DEF	$.Precision.equals(w,x)
2820	190	10	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fw
2820	190	10	BrentOptimizer.java	doOptimize	x	double	1	DEF	Precision.equals(w,$)
2820	190	10	BrentOptimizer.java	doOptimize	w	double	1	DEF	Precision.equals($,x)
2820	190	10	BrentOptimizer.java	doOptimize	fw	double	1	DEF	fu <= $
2821	197	12	BrentOptimizer.java	doOptimize	THIS	BrentOptimizer	0	DEF	$.Precision.equals(v,x)
2821	197	12	BrentOptimizer.java	doOptimize	THIS	BrentOptimizer	0	DEF	$.Precision.equals(v,w)
2821	197	12	BrentOptimizer.java	doOptimize	fu	double	0	DEF	$ <= fv
2821	197	12	BrentOptimizer.java	doOptimize	x	double	0	DEF	Precision.equals(v,$)
2821	197	12	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($,x)
2821	197	12	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($,w)
2821	197	12	BrentOptimizer.java	doOptimize	w	double	0	DEF	Precision.equals(v,$)
2821	197	12	BrentOptimizer.java	doOptimize	fv	double	0	DEF	fu <= $
2822	218	4	BrentOptimizer.java	best	a	UnivariatePointValuePair	0	RET	$ == null
2823	221	4	BrentOptimizer.java	best	b	UnivariatePointValuePair	0	RET	$ == null
2824	224	4	BrentOptimizer.java	best	isMinim	boolean	1	RET	$
4121	56	4	BrentSolver.java	doSolve	THIS	BrentSolver	0	RET	$.FastMath.abs(yInitial) <= functionValueAccuracy
4121	56	4	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
4121	56	4	BrentSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4122	60	4	BrentSolver.java	doSolve	THIS	BrentSolver	0	RET	$.FastMath.abs(yMin) <= functionValueAccuracy
4122	60	4	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
4122	60	4	BrentSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4123	63	4	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
4123	63	4	BrentSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
4124	67	4	BrentSolver.java	doSolve	THIS	BrentSolver	0	RET	$.FastMath.abs(yMax) <= functionValueAccuracy
4124	67	4	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
4124	67	4	BrentSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4125	70	4	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
4125	70	4	BrentSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
4126	95	6	BrentSolver.java	brent	THIS	BrentSolver	0	DEF	$.FastMath.abs(fc) < $.FastMath.abs(fb)
4126	95	6	BrentSolver.java	brent	fb	double	0	DEF	FastMath.abs(fc) < FastMath.abs($)
4126	95	6	BrentSolver.java	brent	fc	double	0	DEF	FastMath.abs($) < FastMath.abs(fb)
4127	105	6	BrentSolver.java	brent	THIS	BrentSolver	0	RET	$.FastMath.abs(m) <= tol
4127	105	6	BrentSolver.java	brent	THIS	BrentSolver	0	RET	$.Precision.equals(fb,0)
4127	105	6	BrentSolver.java	brent	tol	double	0	RET	FastMath.abs(m) <= $
4127	105	6	BrentSolver.java	brent	m	double	0	RET	FastMath.abs($) <= tol
4127	105	6	BrentSolver.java	brent	fb	double	0	RET	Precision.equals($,0)
4128	108	6	BrentSolver.java	brent	THIS	BrentSolver	1	DEF	$.FastMath.abs(e) < tol
4128	108	6	BrentSolver.java	brent	THIS	BrentSolver	1	DEF	$.FastMath.abs(fa) <= $.FastMath.abs(fb)
4128	108	6	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(e) < $
4128	108	6	BrentSolver.java	brent	fa	double	1	DEF	FastMath.abs($) <= FastMath.abs(fb)
4128	108	6	BrentSolver.java	brent	fb	double	1	DEF	FastMath.abs(fa) <= FastMath.abs($)
4128	108	6	BrentSolver.java	brent	e	double	1	DEF	FastMath.abs($) < tol
4129	116	8	BrentSolver.java	brent	a	double	1	DEF	$ == c
4129	116	8	BrentSolver.java	brent	c	double	1	DEF	a == $
4130	126	8	BrentSolver.java	brent	p	double	1	DEF	$ > 0
4131	134	8	BrentSolver.java	brent	THIS	BrentSolver	1	DEF	p >= 1.5 * m * q - $.FastMath.abs(tol * q)
4131	134	8	BrentSolver.java	brent	THIS	BrentSolver	1	DEF	p >= $.FastMath.abs(0.5 * s * q)
4131	134	8	BrentSolver.java	brent	s	double	1	DEF	p >= FastMath.abs(0.5 * $ * q)
4131	134	8	BrentSolver.java	brent	p	double	1	DEF	$ >= 1.5 * m * q - FastMath.abs(tol * q)
4131	134	8	BrentSolver.java	brent	p	double	1	DEF	$ >= FastMath.abs(0.5 * s * q)
4131	134	8	BrentSolver.java	brent	q	double	1	DEF	p >= 1.5 * m * $ - FastMath.abs(tol * $)
4131	134	8	BrentSolver.java	brent	q	double	1	DEF	p >= FastMath.abs(0.5 * s * $)
4131	134	8	BrentSolver.java	brent	tol	double	1	DEF	p >= 1.5 * m * q - FastMath.abs($ * q)
4131	134	8	BrentSolver.java	brent	m	double	1	DEF	p >= 1.5 * $ * q - FastMath.abs(tol * q)
4132	144	6	BrentSolver.java	brent	THIS	BrentSolver	1	DEF	$.FastMath.abs(d) > tol
4132	144	6	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(d) > $
4132	144	6	BrentSolver.java	brent	d	double	1	DEF	FastMath.abs($) > tol
4133	148	8	BrentSolver.java	brent	m	double	1	DEF	$ > 0
4134	156	6	BrentSolver.java	brent	fb	double	0	DEF	$ > 0
4134	156	6	BrentSolver.java	brent	fb	double	0	DEF	$ <= 0
4134	156	6	BrentSolver.java	brent	fc	double	0	DEF	$ <= 0
4134	156	6	BrentSolver.java	brent	fc	double	0	DEF	$ > 0
6243	329	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	$.iterations <= $.maxIterations
6244	334	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	k < $.lambda
6244	334	6	CMAESOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < lambda
6245	336	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.checkFeasableCount + 1
6245	336	8	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < checkFeasableCount + 1
3123	337	10	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
3124	343	10	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.checkFeasableCount
3124	343	10	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= checkFeasableCount
3124	343	10	CMAESOptimizer.java	doOptimize	arxk	RealMatrix	0	DEF	fitfun.isFeasible($.getColumn(0))
3124	343	10	CMAESOptimizer.java	doOptimize	fitfun	FitnessFunction	0	DEF	$.isFeasible(arxk.getColumn(0))
3125	363	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
3126	372	6	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	bestValue > $
3126	372	6	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ > bestFitness
3127	376	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations,optimum,lastResult)
3127	376	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
3127	376	8	CMAESOptimizer.java	doOptimize	optimum	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations,$,lastResult)
3127	376	8	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations,optimum,$)
3127	376	8	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
3128	380	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.stopFitness != 0
3128	380	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestFitness < ($.isMinimize ? $.stopFitness : -$.stopFitness)
3128	380	6	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	$ < (isMinimize ? stopFitness : -stopFitness)
6246	385	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
6246	385	6	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
3129	386	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * Math.max(Math.abs(pcCol[i]),sqrtDiagC[i]) > $.stopTolX
3129	386	8	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * Math.max(Math.abs(pcCol[$]),sqrtDiagC[$]) > stopTolX
3129	386	8	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * Math.max(Math.abs(pcCol[i]),$[i]) > stopTolX
3129	386	8	CMAESOptimizer.java	doOptimize	pcCol	double[]	0	DEF	sigma * Math.max(Math.abs($[i]),sqrtDiagC[i]) > stopTolX
3130	389	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.dimension - 1
3130	389	8	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= dimension - 1
6247	393	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
6247	393	6	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
3131	394	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * sqrtDiagC[i] > $.stopTolUpX
3131	394	8	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * sqrtDiagC[$] > stopTolUpX
3131	394	8	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * $[i] > stopTolUpX
3132	400	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	Math.max(historyWorst,worstFitness) - Math.min(historyBest,bestFitness) < $.stopTolFun
3132	400	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
3132	400	6	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst,worstFitness) - Math.min(historyBest,$) < stopTolFun
3132	400	6	CMAESOptimizer.java	doOptimize	worstFitness	double	0	DEF	Math.max(historyWorst,$) - Math.min(historyBest,bestFitness) < stopTolFun
3132	400	6	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst,worstFitness) - Math.min($,bestFitness) < stopTolFun
3132	400	6	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($,worstFitness) - Math.min(historyBest,bestFitness) < stopTolFun
3133	403	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > $.fitnessHistory.$.length
3133	403	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	historyWorst - historyBest < $.stopTolHistFun
3133	403	6	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	historyWorst - $ < stopTolHistFun
3133	403	6	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	$ - historyBest < stopTolHistFun
3134	406	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) / $.min($.diagD) > 1e7
3135	409	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
3136	411	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations,current,lastResult)
3136	411	8	CMAESOptimizer.java	doOptimize	current	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations,$,lastResult)
3136	411	8	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
3136	411	8	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations,current,$)
3137	416	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestValue == fitness[arindex[(int)(0.1 + $.lambda / 4.)]]
3137	416	6	CMAESOptimizer.java	doOptimize	fitness	double[]	0	DEF	bestValue == $[arindex[(int)(0.1 + lambda / 4.)]]
3137	416	6	CMAESOptimizer.java	doOptimize	arindex	int[]	0	DEF	bestValue == fitness[$[(int)(0.1 + lambda / 4.)]]
3137	416	6	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ == fitness[arindex[(int)(0.1 + lambda / 4.)]]
3138	419	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
3138	419	6	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst,$) - Math.min(historyBest,$) == 0
3138	419	6	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst,bestFitness) - Math.min($,bestFitness) == 0
3138	419	6	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($,bestFitness) - Math.min(historyBest,bestFitness) == 0
3139	424	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.generateStatistics
3140	440	6	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof Sigma
3141	444	6	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof PopulationSize
3142	458	4	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma != null
3143	459	6	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	DimensionMismatchException	$.inputSigma.$.length != init.$.length
3143	459	6	CMAESOptimizer.java	checkParameters	init	double[]	0	DimensionMismatchException	inputSigma.length != $.length
6248	462	6	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < init.$.length
6248	462	6	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < init.length
6248	462	6	CMAESOptimizer.java	checkParameters	init	double[]	0	NIL-FOR	i < $.length
3144	463	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma[i] > uB[i] - lB[i]
3144	463	8	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	inputSigma[$] > uB[$] - lB[$]
3144	463	8	CMAESOptimizer.java	checkParameters	lB	double[]	0	OutOfRangeException	inputSigma[i] > uB[i] - $[i]
3144	463	8	CMAESOptimizer.java	checkParameters	uB	double[]	0	OutOfRangeException	inputSigma[i] > $[i] - lB[i]
3145	474	4	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NotStrictlyPositiveException	$.lambda <= 0
6249	478	4	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < guess.$.length
6249	478	4	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < guess.length
6249	478	4	CMAESOptimizer.java	initializeCMA	guess	double[]	0	NIL-FOR	i < $.length
6250	492	4	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.mu
6250	492	4	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < mu
6251	519	4	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.historySize
6251	519	4	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < historySize
3146	534	4	CMAESOptimizer.java	updateEvolutionPaths	hsig	boolean	0	DEF	$
3147	549	4	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.iterations > $.diagonalOnly
3147	549	4	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.diagonalOnly > 1
3148	566	4	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu > 0
3149	571	6	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	1	DEF	$.isActiveCMA
3150	586	8	CMAESOptimizer.java	updateCovariance	negcovMax	double	0	DEF	negccov > $
3150	586	8	CMAESOptimizer.java	updateCovariance	negccov	double	0	DEF	$ > negcovMax
3151	606	4	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu + negccov > 0
3151	606	4	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	($.iterations % 1. / ($.ccov1 + $.ccovmu + negccov) / $.dimension / 10.) < 1
3151	606	4	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	ccov1 + ccovmu + $ > 0
3151	606	4	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1
3152	612	6	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.min($.diagD) <= 0
6252	613	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
6252	613	8	CMAESOptimizer.java	updateBD	i	int	0	NIL-FOR	$ < dimension
3153	614	10	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.diagD.getEntry(i,0) < 0
3153	614	10	CMAESOptimizer.java	updateBD	i	int	0	DEF	diagD.getEntry($,0) < 0
3154	622	6	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) > 1e14 * $.min($.diagD)
6253	638	4	CMAESOptimizer.java	push	i	int	0	NIL-FOR	$ > 0
6254	650	4	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
6254	650	4	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
6254	650	4	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
6255	655	4	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
6255	655	4	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
6255	655	4	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
6256	806	4	CMAESOptimizer.java	log	r	int	0	NIL-FOR	$ < m.getRowDimension()
6256	806	4	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
6257	807	6	CMAESOptimizer.java	log	c	int	0	NIL-FOR	$ < m.getColumnDimension()
6257	807	6	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
6258	819	4	CMAESOptimizer.java	sqrt	r	int	0	NIL-FOR	$ < m.getRowDimension()
6258	819	4	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
6259	820	6	CMAESOptimizer.java	sqrt	c	int	0	NIL-FOR	$ < m.getColumnDimension()
6259	820	6	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
6260	832	4	CMAESOptimizer.java	square	r	int	0	NIL-FOR	$ < m.getRowDimension()
6260	832	4	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
6261	833	6	CMAESOptimizer.java	square	c	int	0	NIL-FOR	$ < m.getColumnDimension()
6261	833	6	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
6262	847	4	CMAESOptimizer.java	times	r	int	0	NIL-FOR	$ < m.getRowDimension()
6262	847	4	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
6263	848	6	CMAESOptimizer.java	times	c	int	0	NIL-FOR	$ < m.getColumnDimension()
6263	848	6	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
6264	861	4	CMAESOptimizer.java	divide	r	int	0	NIL-FOR	$ < m.getRowDimension()
6264	861	4	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
6265	862	6	CMAESOptimizer.java	divide	c	int	0	NIL-FOR	$ < m.getColumnDimension()
6265	862	6	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
6266	875	4	CMAESOptimizer.java	selectColumns	r	int	0	NIL-FOR	$ < m.getRowDimension()
6266	875	4	CMAESOptimizer.java	selectColumns	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
6267	876	6	CMAESOptimizer.java	selectColumns	THIS	CMAESOptimizer	0	NIL-FOR	c < cols.$.length
6267	876	6	CMAESOptimizer.java	selectColumns	c	int	0	NIL-FOR	$ < cols.length
6267	876	6	CMAESOptimizer.java	selectColumns	cols	int[]	0	NIL-FOR	c < $.length
6268	889	4	CMAESOptimizer.java	triu	r	int	0	NIL-FOR	$ < m.getRowDimension()
6268	889	4	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
6269	890	6	CMAESOptimizer.java	triu	c	int	0	NIL-FOR	$ < m.getColumnDimension()
6269	890	6	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
6270	902	4	CMAESOptimizer.java	sumRows	c	int	0	NIL-FOR	$ < m.getColumnDimension()
6270	902	4	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
6271	904	6	CMAESOptimizer.java	sumRows	r	int	0	NIL-FOR	$ < m.getRowDimension()
6271	904	6	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
3155	916	4	CMAESOptimizer.java	diag	m	RealMatrix	1	RET	$.getColumnDimension() == 1
6272	918	6	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getRowDimension()
6272	918	6	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
6273	925	6	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getColumnDimension()
6273	925	6	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
6274	939	4	CMAESOptimizer.java	copyColumn	i	int	0	NIL-FOR	$ < m1.getRowDimension()
6274	939	4	CMAESOptimizer.java	copyColumn	m1	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
6275	950	4	CMAESOptimizer.java	ones	r	int	0	NIL-FOR	$ < n
6275	950	4	CMAESOptimizer.java	ones	n	int	0	NIL-FOR	r < $
6276	962	4	CMAESOptimizer.java	eye	r	int	0	NIL-FOR	$ < n
6276	962	4	CMAESOptimizer.java	eye	n	int	0	NIL-FOR	r < $
3156	963	6	CMAESOptimizer.java	eye	r	int	0	DEF	$ < m
3156	963	6	CMAESOptimizer.java	eye	m	int	0	DEF	r < $
6277	987	4	CMAESOptimizer.java	repmat	r	int	0	NIL-FOR	$ < n * rd
6277	987	4	CMAESOptimizer.java	repmat	rd	int	0	NIL-FOR	r < n * $
6277	987	4	CMAESOptimizer.java	repmat	n	int	0	NIL-FOR	r < $ * rd
6278	988	6	CMAESOptimizer.java	repmat	c	int	0	NIL-FOR	$ < m * cd
6278	988	6	CMAESOptimizer.java	repmat	cd	int	0	NIL-FOR	c < m * $
6278	988	6	CMAESOptimizer.java	repmat	m	int	0	NIL-FOR	c < $ * cd
6279	1004	4	CMAESOptimizer.java	sequence	r	int	0	NIL-FOR	$ < size
6279	1004	4	CMAESOptimizer.java	sequence	size	int	0	NIL-FOR	r < $
6280	1016	4	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.getRowDimension()
6280	1016	4	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
6281	1017	6	CMAESOptimizer.java	max	c	int	0	NIL-FOR	$ < m.getColumnDimension()
6281	1017	6	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
3157	1019	8	CMAESOptimizer.java	max	e	double	0	DEF	max < $
3157	1019	8	CMAESOptimizer.java	max	max	double	0	DEF	$ < e
6282	1032	4	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.getRowDimension()
6282	1032	4	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
6283	1033	6	CMAESOptimizer.java	min	c	int	0	NIL-FOR	$ < m.getColumnDimension()
6283	1033	6	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
3158	1035	8	CMAESOptimizer.java	min	e	double	0	DEF	min > $
3158	1035	8	CMAESOptimizer.java	min	min	double	0	DEF	$ > e
6284	1048	4	CMAESOptimizer.java	max	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
6284	1048	4	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.length
6284	1048	4	CMAESOptimizer.java	max	m	double[]	0	NIL-FOR	r < $.length
3159	1049	6	CMAESOptimizer.java	max	r	int	0	DEF	max < m[$]
3159	1049	6	CMAESOptimizer.java	max	max	double	0	DEF	$ < m[r]
3159	1049	6	CMAESOptimizer.java	max	m	double[]	0	DEF	max < $[r]
6285	1061	4	CMAESOptimizer.java	min	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
6285	1061	4	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.length
6285	1061	4	CMAESOptimizer.java	min	m	double[]	0	NIL-FOR	r < $.length
3160	1062	6	CMAESOptimizer.java	min	r	int	0	DEF	min > m[$]
3160	1062	6	CMAESOptimizer.java	min	min	double	0	DEF	$ > m[r]
3160	1062	6	CMAESOptimizer.java	min	m	double[]	0	DEF	min > $[r]
6286	1074	4	CMAESOptimizer.java	inverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
6286	1074	4	CMAESOptimizer.java	inverse	i	int	0	NIL-FOR	$ < indices.length
6286	1074	4	CMAESOptimizer.java	inverse	indices	int[]	0	NIL-FOR	i < $.length
6287	1085	4	CMAESOptimizer.java	reverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
6287	1085	4	CMAESOptimizer.java	reverse	i	int	0	NIL-FOR	$ < indices.length
6287	1085	4	CMAESOptimizer.java	reverse	indices	int[]	0	NIL-FOR	i < $.length
6288	1096	4	CMAESOptimizer.java	randn	i	int	0	NIL-FOR	$ < size
6288	1096	4	CMAESOptimizer.java	randn	size	int	0	NIL-FOR	i < $
6289	1108	4	CMAESOptimizer.java	randn1	r	int	0	NIL-FOR	$ < size
6289	1108	4	CMAESOptimizer.java	randn1	size	int	0	NIL-FOR	r < $
6290	1109	6	CMAESOptimizer.java	randn1	c	int	0	NIL-FOR	$ < popSize
6290	1109	6	CMAESOptimizer.java	randn1	popSize	int	0	NIL-FOR	c < $
5829	424	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	$.iterations <= $.maxIterations
5830	428	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	k < $.lambda
5830	428	6	CMAESOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < lambda
5831	430	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.checkFeasableCount + 1
5831	430	8	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < checkFeasableCount + 1
2525	431	10	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
2526	437	10	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.checkFeasableCount
2526	437	10	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= checkFeasableCount
2526	437	10	CMAESOptimizer.java	doOptimize	arxk	RealMatrix	0	DEF	fitfun.isFeasible($.getColumn(0))
2526	437	10	CMAESOptimizer.java	doOptimize	fitfun	FitnessFunction	0	DEF	$.isFeasible(arxk.getColumn(0))
2527	457	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
2528	466	6	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	bestValue > $
2528	466	6	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ > bestFitness
2529	470	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations,optimum,lastResult)
2529	470	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
2529	470	8	CMAESOptimizer.java	doOptimize	optimum	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations,$,lastResult)
2529	470	8	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
2529	470	8	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations,optimum,$)
2530	474	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.stopFitness != 0
2530	474	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestFitness < ($.isMinimize ? $.stopFitness : -$.stopFitness)
2530	474	6	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	$ < (isMinimize ? stopFitness : -stopFitness)
5832	479	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
5832	479	6	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
2531	480	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * Math.max(Math.abs(pcCol[i]),sqrtDiagC[i]) > $.stopTolX
2531	480	8	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * Math.max(Math.abs(pcCol[$]),sqrtDiagC[$]) > stopTolX
2531	480	8	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * Math.max(Math.abs(pcCol[i]),$[i]) > stopTolX
2531	480	8	CMAESOptimizer.java	doOptimize	pcCol	double[]	0	DEF	sigma * Math.max(Math.abs($[i]),sqrtDiagC[i]) > stopTolX
2532	483	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.dimension - 1
2532	483	8	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= dimension - 1
5833	487	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
5833	487	6	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
2533	488	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * sqrtDiagC[i] > $.stopTolUpX
2533	488	8	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * sqrtDiagC[$] > stopTolUpX
2533	488	8	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * $[i] > stopTolUpX
2534	494	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
2534	494	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	Math.max(historyWorst,worstFitness) - Math.min(historyBest,bestFitness) < $.stopTolFun
2534	494	6	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst,worstFitness) - Math.min(historyBest,$) < stopTolFun
2534	494	6	CMAESOptimizer.java	doOptimize	worstFitness	double	0	DEF	Math.max(historyWorst,$) - Math.min(historyBest,bestFitness) < stopTolFun
2534	494	6	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst,worstFitness) - Math.min($,bestFitness) < stopTolFun
2534	494	6	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($,worstFitness) - Math.min(historyBest,bestFitness) < stopTolFun
2535	497	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > $.fitnessHistory.$.length
2535	497	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	historyWorst - historyBest < $.stopTolHistFun
2535	497	6	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	historyWorst - $ < stopTolHistFun
2535	497	6	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	$ - historyBest < stopTolHistFun
2536	500	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) / $.min($.diagD) > 1e7
2537	503	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
2538	505	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations,current,lastResult)
2538	505	8	CMAESOptimizer.java	doOptimize	current	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations,$,lastResult)
2538	505	8	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations,current,$)
2538	505	8	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
2539	510	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestValue == fitness[arindex[(int)(0.1 + $.lambda / 4.)]]
2539	510	6	CMAESOptimizer.java	doOptimize	fitness	double[]	0	DEF	bestValue == $[arindex[(int)(0.1 + lambda / 4.)]]
2539	510	6	CMAESOptimizer.java	doOptimize	arindex	int[]	0	DEF	bestValue == fitness[$[(int)(0.1 + lambda / 4.)]]
2539	510	6	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ == fitness[arindex[(int)(0.1 + lambda / 4.)]]
2540	513	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
2540	513	6	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst,$) - Math.min(historyBest,$) == 0
2540	513	6	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst,bestFitness) - Math.min($,bestFitness) == 0
2540	513	6	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($,bestFitness) - Math.min(historyBest,bestFitness) == 0
2541	518	6	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.generateStatistics
2542	533	6	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof Sigma
2543	537	6	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof PopulationSize
2544	550	4	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma != null
2545	551	6	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	DimensionMismatchException	$.inputSigma.$.length != init.$.length
2545	551	6	CMAESOptimizer.java	checkParameters	init	double[]	0	DimensionMismatchException	inputSigma.length != $.length
5834	554	6	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < init.$.length
5834	554	6	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < init.length
5834	554	6	CMAESOptimizer.java	checkParameters	init	double[]	0	NIL-FOR	i < $.length
2546	555	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NotPositiveException	$.inputSigma[i] < 0
2546	555	8	CMAESOptimizer.java	checkParameters	i	int	0	NotPositiveException	inputSigma[$] < 0
2547	558	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma[i] > uB[i] - lB[i]
2547	558	8	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	inputSigma[$] > uB[$] - lB[$]
2547	558	8	CMAESOptimizer.java	checkParameters	lB	double[]	0	OutOfRangeException	inputSigma[i] > uB[i] - $[i]
2547	558	8	CMAESOptimizer.java	checkParameters	uB	double[]	0	OutOfRangeException	inputSigma[i] > $[i] - lB[i]
2548	569	4	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	DEF	$.lambda <= 0
5835	573	4	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < guess.$.length
5835	573	4	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < guess.length
5835	573	4	CMAESOptimizer.java	initializeCMA	guess	double[]	0	NIL-FOR	i < $.length
5836	587	4	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.mu
5836	587	4	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < mu
5837	614	4	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.historySize
5837	614	4	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < historySize
2549	629	4	CMAESOptimizer.java	updateEvolutionPaths	hsig	boolean	0	DEF	$
2550	644	4	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.diagonalOnly > 1
2550	644	4	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.iterations > $.diagonalOnly
2551	661	4	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu > 0
2552	666	6	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	1	DEF	$.isActiveCMA
2553	681	8	CMAESOptimizer.java	updateCovariance	negcovMax	double	0	DEF	negccov > $
2553	681	8	CMAESOptimizer.java	updateCovariance	negccov	double	0	DEF	$ > negcovMax
2554	701	4	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu + negccov > 0
2554	701	4	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	($.iterations % 1. / ($.ccov1 + $.ccovmu + negccov) / $.dimension / 10.) < 1
2554	701	4	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	ccov1 + ccovmu + $ > 0
2554	701	4	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1
2555	707	6	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.min($.diagD) <= 0
5838	708	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
5838	708	8	CMAESOptimizer.java	updateBD	i	int	0	NIL-FOR	$ < dimension
2556	709	10	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.diagD.getEntry(i,0) < 0
2556	709	10	CMAESOptimizer.java	updateBD	i	int	0	DEF	diagD.getEntry($,0) < 0
2557	717	6	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) > 1e14 * $.min($.diagD)
5839	733	4	CMAESOptimizer.java	push	i	int	0	NIL-FOR	$ > 0
5840	745	4	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
5840	745	4	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
5840	745	4	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
5841	750	4	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
5841	750	4	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
5841	750	4	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
5842	901	4	CMAESOptimizer.java	log	r	int	0	NIL-FOR	$ < m.getRowDimension()
5842	901	4	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
5843	902	6	CMAESOptimizer.java	log	c	int	0	NIL-FOR	$ < m.getColumnDimension()
5843	902	6	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
5844	914	4	CMAESOptimizer.java	sqrt	r	int	0	NIL-FOR	$ < m.getRowDimension()
5844	914	4	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
5845	915	6	CMAESOptimizer.java	sqrt	c	int	0	NIL-FOR	$ < m.getColumnDimension()
5845	915	6	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
5846	927	4	CMAESOptimizer.java	square	r	int	0	NIL-FOR	$ < m.getRowDimension()
5846	927	4	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
5847	928	6	CMAESOptimizer.java	square	c	int	0	NIL-FOR	$ < m.getColumnDimension()
5847	928	6	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
5848	942	4	CMAESOptimizer.java	times	r	int	0	NIL-FOR	$ < m.getRowDimension()
5848	942	4	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
5849	943	6	CMAESOptimizer.java	times	c	int	0	NIL-FOR	$ < m.getColumnDimension()
5849	943	6	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
5850	956	4	CMAESOptimizer.java	divide	r	int	0	NIL-FOR	$ < m.getRowDimension()
5850	956	4	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
5851	957	6	CMAESOptimizer.java	divide	c	int	0	NIL-FOR	$ < m.getColumnDimension()
5851	957	6	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
5852	970	4	CMAESOptimizer.java	selectColumns	r	int	0	NIL-FOR	$ < m.getRowDimension()
5852	970	4	CMAESOptimizer.java	selectColumns	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
5853	971	6	CMAESOptimizer.java	selectColumns	THIS	CMAESOptimizer	0	NIL-FOR	c < cols.$.length
5853	971	6	CMAESOptimizer.java	selectColumns	c	int	0	NIL-FOR	$ < cols.length
5853	971	6	CMAESOptimizer.java	selectColumns	cols	int[]	0	NIL-FOR	c < $.length
5854	984	4	CMAESOptimizer.java	triu	r	int	0	NIL-FOR	$ < m.getRowDimension()
5854	984	4	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
5855	985	6	CMAESOptimizer.java	triu	c	int	0	NIL-FOR	$ < m.getColumnDimension()
5855	985	6	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
5856	997	4	CMAESOptimizer.java	sumRows	c	int	0	NIL-FOR	$ < m.getColumnDimension()
5856	997	4	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
5857	999	6	CMAESOptimizer.java	sumRows	r	int	0	NIL-FOR	$ < m.getRowDimension()
5857	999	6	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
2558	1011	4	CMAESOptimizer.java	diag	m	RealMatrix	1	RET	$.getColumnDimension() == 1
5858	1013	6	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getRowDimension()
5858	1013	6	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
5859	1020	6	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getColumnDimension()
5859	1020	6	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
5860	1034	4	CMAESOptimizer.java	copyColumn	i	int	0	NIL-FOR	$ < m1.getRowDimension()
5860	1034	4	CMAESOptimizer.java	copyColumn	m1	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
5861	1045	4	CMAESOptimizer.java	ones	r	int	0	NIL-FOR	$ < n
5861	1045	4	CMAESOptimizer.java	ones	n	int	0	NIL-FOR	r < $
5862	1057	4	CMAESOptimizer.java	eye	r	int	0	NIL-FOR	$ < n
5862	1057	4	CMAESOptimizer.java	eye	n	int	0	NIL-FOR	r < $
2559	1058	6	CMAESOptimizer.java	eye	r	int	0	DEF	$ < m
2559	1058	6	CMAESOptimizer.java	eye	m	int	0	DEF	r < $
5863	1082	4	CMAESOptimizer.java	repmat	r	int	0	NIL-FOR	$ < n * rd
5863	1082	4	CMAESOptimizer.java	repmat	rd	int	0	NIL-FOR	r < n * $
5863	1082	4	CMAESOptimizer.java	repmat	n	int	0	NIL-FOR	r < $ * rd
5864	1083	6	CMAESOptimizer.java	repmat	c	int	0	NIL-FOR	$ < m * cd
5864	1083	6	CMAESOptimizer.java	repmat	cd	int	0	NIL-FOR	c < m * $
5864	1083	6	CMAESOptimizer.java	repmat	m	int	0	NIL-FOR	c < $ * cd
5865	1099	4	CMAESOptimizer.java	sequence	r	int	0	NIL-FOR	$ < size
5865	1099	4	CMAESOptimizer.java	sequence	size	int	0	NIL-FOR	r < $
5866	1111	4	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.getRowDimension()
5866	1111	4	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
5867	1112	6	CMAESOptimizer.java	max	c	int	0	NIL-FOR	$ < m.getColumnDimension()
5867	1112	6	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
2560	1114	8	CMAESOptimizer.java	max	e	double	0	DEF	max < $
2560	1114	8	CMAESOptimizer.java	max	max	double	0	DEF	$ < e
5868	1127	4	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.getRowDimension()
5868	1127	4	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
5869	1128	6	CMAESOptimizer.java	min	c	int	0	NIL-FOR	$ < m.getColumnDimension()
5869	1128	6	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
2561	1130	8	CMAESOptimizer.java	min	e	double	0	DEF	min > $
2561	1130	8	CMAESOptimizer.java	min	min	double	0	DEF	$ > e
5870	1143	4	CMAESOptimizer.java	max	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
5870	1143	4	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.length
5870	1143	4	CMAESOptimizer.java	max	m	double[]	0	NIL-FOR	r < $.length
2562	1144	6	CMAESOptimizer.java	max	r	int	0	DEF	max < m[$]
2562	1144	6	CMAESOptimizer.java	max	max	double	0	DEF	$ < m[r]
2562	1144	6	CMAESOptimizer.java	max	m	double[]	0	DEF	max < $[r]
5871	1156	4	CMAESOptimizer.java	min	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
5871	1156	4	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.length
5871	1156	4	CMAESOptimizer.java	min	m	double[]	0	NIL-FOR	r < $.length
2563	1157	6	CMAESOptimizer.java	min	r	int	0	DEF	min > m[$]
2563	1157	6	CMAESOptimizer.java	min	min	double	0	DEF	$ > m[r]
2563	1157	6	CMAESOptimizer.java	min	m	double[]	0	DEF	min > $[r]
5872	1169	4	CMAESOptimizer.java	inverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
5872	1169	4	CMAESOptimizer.java	inverse	i	int	0	NIL-FOR	$ < indices.length
5872	1169	4	CMAESOptimizer.java	inverse	indices	int[]	0	NIL-FOR	i < $.length
5873	1180	4	CMAESOptimizer.java	reverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
5873	1180	4	CMAESOptimizer.java	reverse	i	int	0	NIL-FOR	$ < indices.length
5873	1180	4	CMAESOptimizer.java	reverse	indices	int[]	0	NIL-FOR	i < $.length
5874	1191	4	CMAESOptimizer.java	randn	i	int	0	NIL-FOR	$ < size
5874	1191	4	CMAESOptimizer.java	randn	size	int	0	NIL-FOR	i < $
5875	1203	4	CMAESOptimizer.java	randn1	r	int	0	NIL-FOR	$ < size
5875	1203	4	CMAESOptimizer.java	randn1	size	int	0	NIL-FOR	r < $
5876	1204	6	CMAESOptimizer.java	randn1	c	int	0	NIL-FOR	$ < popSize
5876	1204	6	CMAESOptimizer.java	randn1	popSize	int	0	NIL-FOR	c < $
5506	18	4	CanberraDistance.java	compute	THIS	CanberraDistance	0	NIL-FOR	i < a.$.length
5506	18	4	CanberraDistance.java	compute	i	int	0	NIL-FOR	$ < a.length
5506	18	4	CanberraDistance.java	compute	a	double[]	0	NIL-FOR	i < $.length
1672	73	4	CauchyDistribution.java	CauchyDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1673	112	4	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0
1673	112	4	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1
1674	116	6	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
1675	120	8	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
393	34	4	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length < 2
393	34	4	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length < 2
394	37	4	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length != observed.$.length
394	37	4	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length != observed.length
394	37	4	ChiSquareTest.java	chiSquare	observed	long[]	0	DimensionMismatchException	expected.length != $.length
4450	44	4	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
4450	44	4	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
4450	44	4	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
395	50	4	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DEF	$.FastMath.abs(sumExpected - sumObserved) > 10E-6
395	50	4	ChiSquareTest.java	chiSquare	sumExpected	double	0	DEF	FastMath.abs($ - sumObserved) > 10E-6
395	50	4	ChiSquareTest.java	chiSquare	sumObserved	double	0	DEF	FastMath.abs(sumExpected - $) > 10E-6
4451	55	4	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
4451	55	4	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
4451	55	4	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
396	56	6	ChiSquareTest.java	chiSquare	rescale	boolean	1	DEF	$
397	94	4	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
397	94	4	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
4452	114	4	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
4452	114	4	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
4453	115	6	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
4453	115	6	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
4454	123	4	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
4454	123	4	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
4455	124	6	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
4455	124	6	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
398	159	4	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
398	159	4	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
399	175	4	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length < 2
399	175	4	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length < 2
400	178	4	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length != observed2.$.length
400	178	4	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length != observed2.length
400	178	4	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	0	DimensionMismatchException	observed1.length != $.length
4456	187	4	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
4456	187	4	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
4456	187	4	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
401	191	4	ChiSquareTest.java	chiSquareDataSetsComparison	countSum1	long	0	ZeroException	$ == 0
401	191	4	ChiSquareTest.java	chiSquareDataSetsComparison	countSum2	long	0	ZeroException	$ == 0
402	195	4	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
4457	202	4	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
4457	202	4	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
4457	202	4	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
403	203	6	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed1[$] == 0
403	203	6	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed2[$] == 0
403	203	6	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	1	ZeroException	$[i] == 0
403	203	6	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	1	ZeroException	$[i] == 0
404	209	8	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
405	250	4	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ > 0.5
405	250	4	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ <= 0
406	263	4	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in.$.length < 2
406	263	4	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$.length < 2
407	266	4	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in[0].length < 2
407	266	4	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$[0].length < 2
1184	58	4	CholeskyDecomposition.java	CholeskyDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
4750	65	4	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
4750	65	4	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
4751	67	6	CholeskyDecomposition.java	CholeskyDecomposition	j	int	0	NIL-FOR	$ < order
4751	67	6	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	j < $
1185	72	8	CholeskyDecomposition.java	CholeskyDecomposition	THIS	CholeskyDecomposition	0	NonSymmetricMatrixException	$.FastMath.abs(lIJ - lJI) > maxDelta
1185	72	8	CholeskyDecomposition.java	CholeskyDecomposition	lIJ	double	0	NonSymmetricMatrixException	FastMath.abs($ - lJI) > maxDelta
1185	72	8	CholeskyDecomposition.java	CholeskyDecomposition	lJI	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - $) > maxDelta
1185	72	8	CholeskyDecomposition.java	CholeskyDecomposition	maxDelta	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - lJI) > $
4752	78	4	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
4752	78	4	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
1186	80	6	CholeskyDecomposition.java	CholeskyDecomposition	ltI	double[]	0	NonPositiveDefiniteMatrixException	$[i] <= absolutePositivityThreshold
1186	80	6	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	ltI[$] <= absolutePositivityThreshold
1186	80	6	CholeskyDecomposition.java	CholeskyDecomposition	absolutePositivityThreshold	double	0	NonPositiveDefiniteMatrixException	ltI[i] <= $
4753	85	6	CholeskyDecomposition.java	CholeskyDecomposition	q	int	0	NIL-FOR	$ > i
4753	85	6	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	q > $
4754	88	8	CholeskyDecomposition.java	CholeskyDecomposition	p	int	0	NIL-FOR	$ < order
4754	88	8	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	p < $
1187	99	4	CholeskyDecomposition.java	getL	THIS	CholeskyDecomposition	0	DEF	$.cachedL == null
1188	109	4	CholeskyDecomposition.java	getLT	THIS	CholeskyDecomposition	0	DEF	$.cachedLT == null
4755	120	4	CholeskyDecomposition.java	getDeterminant	THIS	CholeskyDecomposition	0	NIL-FOR	i < $.lTData.$.length
4755	120	4	CholeskyDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < lTData.length
2934	21	4	Chromosome.java	getFitness	THIS	Chromosome	0	DEF	$.fitness == NO_FITNESS
2935	49	6	Chromosome.java	findSameChromosome	THIS	Chromosome	0	RET	$.isSame($.anotherChr)
2936	61	4	Chromosome.java	searchForFitnessUpdate	sameChromosome	Chromosome	0	DEF	$ != null
2375	41	4	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	1	DEF	$.previousState != null
2375	41	4	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
5706	47	6	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
5706	47	6	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
5707	61	6	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
5707	61	6	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
3514	79	4	Complex.java	abs	THIS	Complex	0	RET	$.isNaN
3515	82	4	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
3516	85	4	Complex.java	abs	THIS	Complex	1	RET	$.FastMath.abs($.real) < $.FastMath.abs($.imaginary)
3517	86	6	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
3518	93	6	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
3519	108	4	Complex.java	add	THIS	Complex	0	RET	addend.$.isNaN
3519	108	4	Complex.java	add	THIS	Complex	0	RET	$.isNaN
3519	108	4	Complex.java	add	addend	Complex	0	RET	$.isNaN
3520	120	4	Complex.java	add	THIS	Complex	0	RET	$.isNaN
3520	120	4	Complex.java	add	addend	double	0	RET	Double.isNaN($)
3521	130	4	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN
3522	143	4	Complex.java	divide	THIS	Complex	0	RET	divisor.$.isNaN
3522	143	4	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
3522	143	4	Complex.java	divide	divisor	Complex	0	RET	$.isNaN
3523	148	4	Complex.java	divide	c	double	0	RET	$ == 0.0
3523	148	4	Complex.java	divide	d	double	0	RET	$ == 0.0
3524	151	4	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
3524	151	4	Complex.java	divide	divisor	Complex	0	RET	$.isInfinite()
3525	154	4	Complex.java	divide	THIS	Complex	1	RET	$.FastMath.abs(c) < $.FastMath.abs(d)
3525	154	4	Complex.java	divide	c	double	1	RET	FastMath.abs($) < FastMath.abs(d)
3525	154	4	Complex.java	divide	d	double	1	RET	FastMath.abs(c) < FastMath.abs($)
3526	172	4	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
3526	172	4	Complex.java	divide	divisor	double	0	RET	Double.isNaN($)
3527	175	4	Complex.java	divide	divisor	double	0	RET	$ == 0d
3528	178	4	Complex.java	divide	divisor	double	0	RET	Double.isInfinite($)
3529	187	4	Complex.java	reciprocal	THIS	Complex	0	RET	$.isNaN
3530	190	4	Complex.java	reciprocal	THIS	Complex	0	RET	$.real == 0.0
3530	190	4	Complex.java	reciprocal	THIS	Complex	0	RET	$.imaginary == 0.0
3531	193	4	Complex.java	reciprocal	THIS	Complex	0	RET	$.isInfinite
3532	196	4	Complex.java	reciprocal	THIS	Complex	1	RET	$.FastMath.abs($.real) < $.FastMath.abs($.imaginary)
3533	213	4	Complex.java	equals	THIS	Complex	0	RET	$ == other
3533	213	4	Complex.java	equals	other	Object	0	RET	this == $
3534	216	4	Complex.java	equals	other	Object	0	RET	$ instanceof Complex
3535	218	6	Complex.java	equals	THIS	Complex	1	RET	c.$.isNaN
3535	218	6	Complex.java	equals	c	Complex	1	RET	$.isNaN
3536	232	4	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN
3537	273	4	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
3537	273	4	Complex.java	multiply	THIS	Complex	0	RET	factor.$.isNaN
3537	273	4	Complex.java	multiply	factor	Complex	0	RET	$.isNaN
3538	276	4	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
3538	276	4	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.real)
3538	276	4	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
3538	276	4	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.imaginary)
3538	276	4	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.real)
3538	276	4	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.imaginary)
3539	288	4	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
3540	291	4	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
3540	291	4	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
3541	303	4	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
3541	303	4	Complex.java	multiply	factor	double	0	RET	Double.isNaN($)
3542	306	4	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
3542	306	4	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
3542	306	4	Complex.java	multiply	factor	double	0	RET	Double.isInfinite($)
3543	316	4	Complex.java	negate	THIS	Complex	0	RET	$.isNaN
3544	329	4	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
3544	329	4	Complex.java	subtract	THIS	Complex	0	RET	subtrahend.$.isNaN
3544	329	4	Complex.java	subtract	subtrahend	Complex	0	RET	$.isNaN
3545	341	4	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
3545	341	4	Complex.java	subtract	subtrahend	double	0	RET	Double.isNaN($)
3546	352	4	Complex.java	acos	THIS	Complex	0	RET	$.isNaN
3547	363	4	Complex.java	asin	THIS	Complex	0	RET	$.isNaN
3548	374	4	Complex.java	atan	THIS	Complex	0	RET	$.isNaN
3549	385	4	Complex.java	cos	THIS	Complex	0	RET	$.isNaN
3550	396	4	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN
3551	407	4	Complex.java	exp	THIS	Complex	0	RET	$.isNaN
3552	419	4	Complex.java	log	THIS	Complex	0	RET	$.isNaN
3553	450	4	Complex.java	sin	THIS	Complex	0	RET	$.isNaN
3554	461	4	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN
3555	472	4	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN
3556	475	4	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
3556	475	4	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
3557	479	4	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
3558	500	4	Complex.java	tan	THIS	Complex	0	RET	Double.isInfinite($.real)
3558	500	4	Complex.java	tan	THIS	Complex	0	RET	$.isNaN
3559	503	4	Complex.java	tan	THIS	Complex	0	RET	$.imaginary > 20.0
3560	506	4	Complex.java	tan	THIS	Complex	0	RET	$.imaginary < -20.0
3561	520	4	Complex.java	tanh	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
3561	520	4	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN
3562	523	4	Complex.java	tanh	THIS	Complex	0	RET	$.real > 20.0
3563	526	4	Complex.java	tanh	THIS	Complex	0	RET	$.real < -20.0
3564	549	4	Complex.java	nthRoot	n	int	0	NotPositiveException	$ <= 0
3565	553	4	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN
3566	557	4	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
6464	565	4	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
6464	565	4	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
3567	591	4	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
3567	591	4	Complex.java	valueOf	imaginaryPart	double	0	RET	Double.isNaN($)
3568	602	4	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
3582	47	4	ComplexFormat.java	ComplexFormat	format	NumberFormat	0	NullArgumentException	$ == null
3583	62	4	ComplexFormat.java	ComplexFormat	imaginaryFormat	NumberFormat	0	NullArgumentException	$ == null
3584	65	4	ComplexFormat.java	ComplexFormat	realFormat	NumberFormat	0	NullArgumentException	$ == null
3585	103	4	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NullArgumentException	$ == null
3586	106	4	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NoDataException	$.length() == 0
3587	109	4	ComplexFormat.java	ComplexFormat	imaginaryFormat	NumberFormat	0	NullArgumentException	$ == null
3588	112	4	ComplexFormat.java	ComplexFormat	realFormat	NumberFormat	0	NullArgumentException	$ == null
3589	156	4	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
3590	163	6	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
3590	163	6	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
3591	183	4	ComplexFormat.java	formatImaginary	toAppendTo	StringBuffer	0	DEF	$.toString().equals("1")
3592	199	4	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
3593	203	6	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
3594	270	4	ComplexFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
3595	285	4	ComplexFormat.java	parse	re	Number	0	RET	$ == null
3596	308	0	ComplexFormat.java	parse	im	Number	0	RET	$ == null
3597	312	0	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	$.CompositeFormat.parseFixedstring(source,$.getImaginaryCharacter(),pos)
3597	312	0	ComplexFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($,getImaginaryCharacter(),pos)
3597	312	0	ComplexFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source,getImaginaryCharacter(),$)
3598	24	4	ComplexUtils.java	polar2Complex	r	double	0	MathIllegalArgumentException	$ < 0
6466	37	4	ComplexUtils.java	convertToComplex	THIS	ComplexUtils	0	NIL-FOR	i < real.$.length
6466	37	4	ComplexUtils.java	convertToComplex	i	int	0	NIL-FOR	$ < real.length
6466	37	4	ComplexUtils.java	convertToComplex	real	double[]	0	NIL-FOR	i < $.length
572	52	4	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
572	52	4	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
4557	54	6	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
4557	54	6	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
4557	54	6	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
573	59	6	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
573	59	6	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
574	81	4	CompositeFormat.java	parseNumber	sb	StringBuilder	0	DEF	source.substring(startIndex,endIndex).compareTo($.toString()) == 0
574	81	4	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($,endIndex).compareTo(sb.toString()) == 0
574	81	4	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
574	81	4	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex,$).compareTo(sb.toString()) == 0
574	81	4	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
574	81	4	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex,endIndex).compareTo(sb.toString()) == 0
575	98	4	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
575	98	4	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
4558	100	6	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
4558	100	6	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
4558	100	6	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
576	102	8	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
577	119	4	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
577	119	4	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($,endIndex).compareTo(expected) != 0
577	119	4	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
577	119	4	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex,$).compareTo(expected) != 0
577	119	4	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
577	119	4	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
577	119	4	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex,endIndex).compareTo(expected) != 0
577	119	4	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex,endIndex).compareTo($) != 0
578	136	4	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
578	136	4	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
1252	78	4	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	1	DEF	$ == null
1253	87	4	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1253	87	4	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
1254	96	6	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	0	DEF	$ != null
1255	100	6	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1255	100	6	ConjugateGradient.java	solveInPlace	rhoNext	double	0	DEF	$ <= 0.
1256	108	6	ConjugateGradient.java	solveInPlace	manager	IterationManager	1	DEF	$.getIterations() == 2
1257	116	6	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1257	116	6	ConjugateGradient.java	solveInPlace	pq	double	0	DEF	$ <= 0.
1258	131	6	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1258	131	6	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
542	76	4	ContinuedFraction.java	evaluate	THIS	ContinuedFraction	0	DEF	$.Precision.equals(hPrev,0.0,small)
542	76	4	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(hPrev,0.0,$)
542	76	4	ContinuedFraction.java	evaluate	hPrev	double	0	DEF	Precision.equals($,0.0,small)
4552	83	4	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
4552	83	4	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
543	87	6	ContinuedFraction.java	evaluate	THIS	ContinuedFraction	0	DEF	$.Precision.equals(dN,0.0,small)
543	87	6	ContinuedFraction.java	evaluate	dN	double	0	DEF	Precision.equals($,0.0,small)
543	87	6	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(dN,0.0,$)
544	91	6	ContinuedFraction.java	evaluate	THIS	ContinuedFraction	0	DEF	$.Precision.equals(cN,0.0,small)
544	91	6	ContinuedFraction.java	evaluate	cN	double	0	DEF	Precision.equals($,0.0,small)
544	91	6	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(cN,0.0,$)
545	97	6	ContinuedFraction.java	evaluate	hN	double	0	ConvergenceException	Double.isInfinite($)
546	100	6	ContinuedFraction.java	evaluate	hN	double	0	ConvergenceException	Double.isNaN($)
547	103	6	ContinuedFraction.java	evaluate	THIS	ContinuedFraction	0	DEF	$.FastMath.abs(deltaN - 1.0) < epsilon
547	103	6	ContinuedFraction.java	evaluate	deltaN	double	0	DEF	FastMath.abs($ - 1.0) < epsilon
547	103	6	ContinuedFraction.java	evaluate	epsilon	double	0	DEF	FastMath.abs(deltaN - 1.0) < $
548	111	4	ContinuedFraction.java	evaluate	n	int	0	MaxCountExceededException	$ >= maxIterations
548	111	4	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxCountExceededException	n >= $
2304	61	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
2304	61	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
2305	64	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
2306	69	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DimensionMismatchException	$.getInterpolatedState().length != model.getInterpolatedState().length
2306	69	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DimensionMismatchException	getInterpolatedState().length != $.getInterpolatedState().length
2307	72	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	MathIllegalArgumentException	$.forward ^ model.$.forward
2307	72	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	MathIllegalArgumentException	forward ^ $.forward
2308	80	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	MathIllegalArgumentException	$.FastMath.abs(gap) > 1.0e-3 * $.FastMath.abs(step)
2308	80	6	ContinuousOutputModel.java	append	step	double	0	MathIllegalArgumentException	FastMath.abs(gap) > 1.0e-3 * FastMath.abs($)
2308	80	6	ContinuousOutputModel.java	append	gap	double	0	MathIllegalArgumentException	FastMath.abs($) > 1.0e-3 * FastMath.abs(step)
2309	107	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
2310	112	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
2311	149	4	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time,sMin) <= 0
2311	149	4	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time,$) <= 0
2311	149	4	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($,sMin) <= 0
2312	154	4	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time,sMax) >= 0
2312	154	4	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time,$) >= 0
2312	154	4	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($,sMax) >= 0
5666	159	4	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
5666	159	4	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
2313	162	6	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
2314	167	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
2315	179	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.FastMath.abs(tMax - tMed) < 1e-6
2315	179	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.FastMath.abs(tMed - tMin) < 1e-6
2315	179	6	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs(tMax - $) < 1e-6
2315	179	6	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs($ - tMin) < 1e-6
2315	179	6	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	FastMath.abs(tMed - $) < 1e-6
2315	179	6	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	FastMath.abs($ - tMed) < 1e-6
2316	194	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
2316	194	6	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
2317	198	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
2317	198	8	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
5667	204	4	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time,$.steps.get($.index)) > 0
5667	204	4	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
5667	204	4	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
5667	204	4	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($,steps.get(index)) > 0
2318	236	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
2319	237	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
2319	237	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
2320	241	8	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
2320	241	8	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
2321	249	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
2321	249	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
2322	253	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
2322	253	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
461	38	4	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
461	38	4	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
461	38	4	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
4506	57	4	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
4506	57	4	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
4507	93	4	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.normalized.$.length
4507	93	4	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < normalized.length
4508	97	4	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
4508	97	4	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
4508	97	4	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
4509	99	6	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.root.getColumnDimension()
4509	99	6	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < root.getColumnDimension()
4476	94	4	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	$ < dimension
4476	94	4	Covariance.java	computeCovarianceMatrix	dimension	int	0	NIL-FOR	i < $
4477	95	6	Covariance.java	computeCovarianceMatrix	j	int	0	NIL-FOR	$ < i
4477	95	6	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	j < $
424	148	4	Covariance.java	covariance	THIS	Covariance	1	MathIllegalArgumentException	length != yArray.$.length
424	148	4	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ != yArray.length
424	148	4	Covariance.java	covariance	yArray	double[]	1	MathIllegalArgumentException	length != $.length
425	152	6	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ < 2
4478	158	8	Covariance.java	covariance	i	int	0	NIL-FOR	$ < length
4478	158	8	Covariance.java	covariance	length	int	0	NIL-FOR	i < $
426	185	4	Covariance.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
426	185	4	Covariance.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 1
2743	132	4	CurveFitter.java	fit	THIS	CurveFitter	1	DEF	$.optimizer == null
2921	48	4	CycleCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2921	48	4	CycleCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2922	62	4	CycleCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
2922	62	4	CycleCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
6125	73	4	CycleCrossover.java	mate	length	int	0	NIL-WHILE	visitedIndices.size() < $
6125	73	4	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.size() < length
6126	77	6	CycleCrossover.java	mate	indices	List<Integer>	0	NIL-WHILE	idx != $.get(0)
6126	77	6	CycleCrossover.java	mate	idx	int	0	NIL-WHILE	$ != indices.get(0)
2923	82	6	CycleCrossover.java	mate	cycle	int	0	DEF	$++ % 2 != 0
6127	91	6	CycleCrossover.java	mate	length	int	0	NIL-WHILE	visitedIndices.size() < $
6127	91	6	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.size() < length
6127	91	6	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.contains(idx)
6127	91	6	CycleCrossover.java	mate	idx	int	0	NIL-WHILE	visitedIndices.contains($)
2924	93	8	CycleCrossover.java	mate	length	int	0	DEF	idx >= $
2924	93	8	CycleCrossover.java	mate	idx	int	0	DEF	$ >= length
1663	60	4	DBSCANClusterer.java	DBSCANClusterer	eps	double	0	NotPositiveException	$ < 0.0d
1664	63	4	DBSCANClusterer.java	DBSCANClusterer	minPts	int	0	NotPositiveException	$ < 0
1665	94	6	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	0	DEF	visited.get($.point) != null
1665	94	6	DBSCANClusterer.java	cluster	visited	Map<Clusterable,PointStatus>	0	DEF	$.get(point) != null
1666	98	6	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	1	DEF	neighbors.size() >= $.minPts
1666	98	6	DBSCANClusterer.java	cluster	neighbors	List<T>	1	DEF	$.size() >= minPts
5505	122	4	DBSCANClusterer.java	expandCluster	seeds	List<T>	0	NIL-WHILE	index < $.size()
5505	122	4	DBSCANClusterer.java	expandCluster	index	int	0	NIL-WHILE	$ < seeds.size()
1667	125	6	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ == null
1668	127	8	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	currentNeighbors.size() >= $.minPts
1668	127	8	DBSCANClusterer.java	expandCluster	currentNeighbors	List<T>	0	DEF	$.size() >= minPts
1669	131	6	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	pStatus != $.PointStatus.PART_OF_CLUSTER
1669	131	6	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ != PointStatus.PART_OF_CLUSTER
1670	148	6	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	$.distance($.neighbor,point) <= $.eps
1670	148	6	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	point != $.neighbor
1670	148	6	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	distance(neighbor,$) <= eps
1670	148	6	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	$ != neighbor
1671	163	6	DBSCANClusterer.java	merge	THIS	DBSCANClusterer	0	DEF	oneSet.contains($.item)
1671	163	6	DBSCANClusterer.java	merge	oneSet	Set<T>	0	DEF	$.contains(item)
358	48	4	DBSCANClusterer.java	DBSCANClusterer	eps	double	0	NotPositiveException	$ < 0.0d
359	51	4	DBSCANClusterer.java	DBSCANClusterer	minPts	int	0	NotPositiveException	$ < 0
360	82	6	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	0	DEF	visited.get($.point) != null
360	82	6	DBSCANClusterer.java	cluster	visited	Map<Clusterable,PointStatus>	0	DEF	$.get(point) != null
361	86	6	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	1	DEF	neighbors.size() >= $.minPts
361	86	6	DBSCANClusterer.java	cluster	neighbors	List<T>	1	DEF	$.size() >= minPts
4435	110	4	DBSCANClusterer.java	expandCluster	seeds	List<T>	0	NIL-WHILE	index < $.size()
4435	110	4	DBSCANClusterer.java	expandCluster	index	int	0	NIL-WHILE	$ < seeds.size()
362	113	6	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ == null
363	115	8	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	currentNeighbors.size() >= $.minPts
363	115	8	DBSCANClusterer.java	expandCluster	currentNeighbors	List<T>	0	DEF	$.size() >= minPts
364	119	6	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	pStatus != $.PointStatus.PART_OF_CLUSTER
364	119	6	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ != PointStatus.PART_OF_CLUSTER
365	136	6	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	$.neighbor.distanceFrom(point) <= $.eps
365	136	6	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	point != $.neighbor
365	136	6	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	neighbor.distanceFrom($) <= eps
365	136	6	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	$ != neighbor
366	151	6	DBSCANClusterer.java	merge	THIS	DBSCANClusterer	0	DEF	oneSet.contains($.item)
366	151	6	DBSCANClusterer.java	merge	oneSet	Set<T>	0	DEF	$.contains(item)
4205	79	4	DSCompiler.java	getCompiler	THIS	DSCompiler	0	RET	cache.$.length > parameters
4205	79	4	DSCompiler.java	getCompiler	THIS	DSCompiler	0	RET	cache[parameters].length > order
4205	79	4	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$ != null
4205	79	4	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$[parameters][order] != null
4205	79	4	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$.length > parameters
4205	79	4	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$[parameters].length > order
4205	79	4	DSCompiler.java	getCompiler	parameters	int	0	RET	cache[$][order] != null
4205	79	4	DSCompiler.java	getCompiler	parameters	int	0	RET	cache.length > $
4205	79	4	DSCompiler.java	getCompiler	parameters	int	0	RET	cache[$].length > order
4205	79	4	DSCompiler.java	getCompiler	order	int	0	RET	cache[parameters][$] != null
4205	79	4	DSCompiler.java	getCompiler	order	int	0	RET	cache[parameters].length > $
4206	85	4	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	DEF	$ != null
6672	86	6	DSCompiler.java	getCompiler	THIS	DSCompiler	0	NIL-FOR	i < cache.$.length
6672	86	6	DSCompiler.java	getCompiler	i	int	0	NIL-FOR	$ < cache.length
6672	86	6	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	NIL-FOR	i < $.length
6673	90	4	DSCompiler.java	getCompiler	diag	int	0	NIL-FOR	$ <= parameters + order
6673	90	4	DSCompiler.java	getCompiler	parameters	int	0	NIL-FOR	diag <= $ + order
6673	90	4	DSCompiler.java	getCompiler	order	int	0	NIL-FOR	diag <= parameters + $
6674	91	6	DSCompiler.java	getCompiler	THIS	DSCompiler	0	NIL-FOR	o <= $.FastMath.min(order,diag)
6674	91	6	DSCompiler.java	getCompiler	o	int	0	NIL-FOR	$ <= FastMath.min(order,diag)
6674	91	6	DSCompiler.java	getCompiler	diag	int	0	NIL-FOR	o <= FastMath.min(order,$)
6674	91	6	DSCompiler.java	getCompiler	order	int	0	NIL-FOR	o <= FastMath.min($,diag)
4207	93	8	DSCompiler.java	getCompiler	p	int	0	DEF	newCache[$][o] == null
4207	93	8	DSCompiler.java	getCompiler	o	int	0	DEF	newCache[p][$] == null
4207	93	8	DSCompiler.java	getCompiler	newCache	DSCompiler[][]	0	DEF	$[p][o] == null
4208	112	4	DSCompiler.java	compileSizes	parameters	int	1	DEF	$ == 0
6675	118	6	DSCompiler.java	compileSizes	i	int	0	NIL-FOR	$ < order
6675	118	6	DSCompiler.java	compileSizes	order	int	0	NIL-FOR	i < $
4209	133	4	DSCompiler.java	compileDerivativesIndirection	parameters	int	0	RET	$ == 0
4209	133	4	DSCompiler.java	compileDerivativesIndirection	order	int	0	RET	$ == 0
6676	139	4	DSCompiler.java	compileDerivativesIndirection	i	int	0	NIL-FOR	$ < vSize
6676	139	4	DSCompiler.java	compileDerivativesIndirection	vSize	int	0	NIL-FOR	i < $
6677	142	4	DSCompiler.java	compileDerivativesIndirection	i	int	0	NIL-FOR	$ < dSize
6677	142	4	DSCompiler.java	compileDerivativesIndirection	dSize	int	0	NIL-FOR	i < $
4210	157	4	DSCompiler.java	compileLowerIndirection	parameters	int	0	RET	$ == 0
4210	157	4	DSCompiler.java	compileLowerIndirection	order	int	0	RET	$ <= 1
6678	164	4	DSCompiler.java	compileLowerIndirection	i	int	0	NIL-FOR	$ < dSize
6678	164	4	DSCompiler.java	compileLowerIndirection	dSize	int	0	NIL-FOR	i < $
4211	179	4	DSCompiler.java	compileMultiplicationIndirection	parameters	int	0	RET	$ == 0
4211	179	4	DSCompiler.java	compileMultiplicationIndirection	order	int	0	RET	$ == 0
6679	186	4	DSCompiler.java	compileMultiplicationIndirection	i	int	0	NIL-FOR	$ < dSize
6679	186	4	DSCompiler.java	compileMultiplicationIndirection	dSize	int	0	NIL-FOR	i < $
6680	189	6	DSCompiler.java	compileMultiplicationIndirection	THIS	DSCompiler	0	NIL-FOR	j < dRow.$.length
6680	189	6	DSCompiler.java	compileMultiplicationIndirection	j	int	0	NIL-FOR	$ < dRow.length
6680	189	6	DSCompiler.java	compileMultiplicationIndirection	dRow	int[][]	0	NIL-FOR	j < $.length
6681	194	6	DSCompiler.java	compileMultiplicationIndirection	j	int	0	NIL-FOR	$ < row.size()
6681	194	6	DSCompiler.java	compileMultiplicationIndirection	row	List<int[]>	0	NIL-FOR	j < $.size()
4212	196	8	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[0] > 0
6682	197	10	DSCompiler.java	compileMultiplicationIndirection	k	int	0	NIL-FOR	$ < row.size()
6682	197	10	DSCompiler.java	compileMultiplicationIndirection	row	List<int[]>	0	NIL-FOR	k < $.size()
4213	199	12	DSCompiler.java	compileMultiplicationIndirection	termK	int[]	0	DEF	termJ[1] == $[1]
4213	199	12	DSCompiler.java	compileMultiplicationIndirection	termK	int[]	0	DEF	termJ[2] == $[2]
4213	199	12	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[1] == termK[1]
4213	199	12	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[2] == termK[2]
4214	223	4	DSCompiler.java	compileCompositionIndirection	parameters	int	0	RET	$ == 0
4214	223	4	DSCompiler.java	compileCompositionIndirection	order	int	0	RET	$ == 0
6683	230	4	DSCompiler.java	compileCompositionIndirection	i	int	0	NIL-FOR	$ < dSize
6683	230	4	DSCompiler.java	compileCompositionIndirection	dSize	int	0	NIL-FOR	i < $
6684	239	8	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	j < $.term.$.length
6684	239	8	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < term.length
6685	244	8	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	l < $.term.$.length
6685	244	8	DSCompiler.java	compileCompositionIndirection	l	int	0	NIL-FOR	$ < term.length
6686	248	10	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	j < $.term.$.length
6686	248	10	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < term.length
4215	250	12	DSCompiler.java	compileCompositionIndirection	j	int	0	DEF	$ == l
4215	250	12	DSCompiler.java	compileCompositionIndirection	l	int	0	DEF	j == $
6687	261	6	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < row.size()
6687	261	6	DSCompiler.java	compileCompositionIndirection	row	List<int[]>	0	NIL-FOR	j < $.size()
4216	263	8	DSCompiler.java	compileCompositionIndirection	termJ	int[]	0	DEF	$[0] > 0
6688	264	10	DSCompiler.java	compileCompositionIndirection	k	int	0	NIL-FOR	$ < row.size()
6688	264	10	DSCompiler.java	compileCompositionIndirection	row	List<int[]>	0	NIL-FOR	k < $.size()
6689	267	12	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	l < termJ.$.length
6689	267	12	DSCompiler.java	compileCompositionIndirection	l	int	0	NIL-FOR	$ < termJ.length
6689	267	12	DSCompiler.java	compileCompositionIndirection	equals	boolean	0	NIL-FOR	$
6689	267	12	DSCompiler.java	compileCompositionIndirection	termJ	int[]	0	NIL-FOR	l < $.length
4217	270	12	DSCompiler.java	compileCompositionIndirection	equals	boolean	0	DEF	$
4218	291	4	DSCompiler.java	getPartialDerivativeIndex	THIS	DSCompiler	0	DimensionMismatchException	orders.$.length != $.getFreeParameters()
4218	291	4	DSCompiler.java	getPartialDerivativeIndex	orders	int	0	DimensionMismatchException	$.length != getFreeParameters()
6690	309	4	DSCompiler.java	getPartialDerivativeIndex	i	int	0	NIL-FOR	$ >= 0
4219	312	6	DSCompiler.java	getPartialDerivativeIndex	ordersSum	int	0	NumberIsTooLargeException	$ > order
4219	312	6	DSCompiler.java	getPartialDerivativeIndex	order	int	0	NumberIsTooLargeException	ordersSum > $
6691	315	6	DSCompiler.java	getPartialDerivativeIndex	derivativeOrder	int	0	NIL-WHILE	$-- > 0
6692	379	4	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
6692	379	4	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
6693	398	4	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
6693	398	4	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
6694	420	4	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
6694	420	4	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
6695	434	4	DSCompiler.java	add	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
6695	434	4	DSCompiler.java	add	i	int	0	NIL-FOR	$ < getSize()
6696	448	4	DSCompiler.java	subtract	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
6696	448	4	DSCompiler.java	subtract	i	int	0	NIL-FOR	$ < getSize()
6697	462	4	DSCompiler.java	multiply	THIS	DSCompiler	0	NIL-FOR	i < $.multIndirection.$.length
6697	462	4	DSCompiler.java	multiply	i	int	0	NIL-FOR	$ < multIndirection.length
6698	465	6	DSCompiler.java	multiply	THIS	DSCompiler	0	NIL-FOR	j < mappingI.$.length
6698	465	6	DSCompiler.java	multiply	j	int	0	NIL-FOR	$ < mappingI.length
6698	465	6	DSCompiler.java	multiply	mappingI	int[][]	0	NIL-FOR	j < $.length
6699	498	4	DSCompiler.java	remainder	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
6699	498	4	DSCompiler.java	remainder	i	int	0	NIL-FOR	$ < getSize()
6700	513	4	DSCompiler.java	pow	i	int	0	NIL-FOR	$ > 0
6701	519	4	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
6701	519	4	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
4220	534	4	DSCompiler.java	pow	n	int	0	RET	$ == 0
4221	540	4	DSCompiler.java	pow	n	int	1	DEF	$ > 0
6702	543	6	DSCompiler.java	pow	i	int	0	NIL-FOR	$ > 0
6703	552	6	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
6703	552	6	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
6704	558	4	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
6704	558	4	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
4222	591	4	DSCompiler.java	rootN	n	int	1	DEF	$ == 2
4223	596	6	DSCompiler.java	rootN	n	int	1	DEF	$ == 3
6705	607	4	DSCompiler.java	rootN	THIS	DSCompiler	0	NIL-FOR	i <= $.order
6705	607	4	DSCompiler.java	rootN	i	int	0	NIL-FOR	$ <= order
4224	648	4	DSCompiler.java	log	THIS	DSCompiler	0	DEF	$.order > 0
6706	651	6	DSCompiler.java	log	THIS	DSCompiler	0	NIL-FOR	i <= $.order
6706	651	6	DSCompiler.java	log	i	int	0	NIL-FOR	$ <= order
4225	668	4	DSCompiler.java	log1p	THIS	DSCompiler	0	DEF	$.order > 0
6707	671	6	DSCompiler.java	log1p	THIS	DSCompiler	0	NIL-FOR	i <= $.order
6707	671	6	DSCompiler.java	log1p	i	int	0	NIL-FOR	$ <= order
4226	688	4	DSCompiler.java	log10	THIS	DSCompiler	0	DEF	$.order > 0
6708	691	6	DSCompiler.java	log10	THIS	DSCompiler	0	NIL-FOR	i <= $.order
6708	691	6	DSCompiler.java	log10	i	int	0	NIL-FOR	$ <= order
4227	708	4	DSCompiler.java	cos	THIS	DSCompiler	0	DEF	$.order > 0
6709	710	6	DSCompiler.java	cos	THIS	DSCompiler	0	NIL-FOR	i <= $.order
6709	710	6	DSCompiler.java	cos	i	int	0	NIL-FOR	$ <= order
4228	726	4	DSCompiler.java	sin	THIS	DSCompiler	0	DEF	$.order > 0
6710	728	6	DSCompiler.java	sin	THIS	DSCompiler	0	NIL-FOR	i <= $.order
6710	728	6	DSCompiler.java	sin	i	int	0	NIL-FOR	$ <= order
4229	745	4	DSCompiler.java	tan	THIS	DSCompiler	0	DEF	$.order > 0
6711	749	6	DSCompiler.java	tan	THIS	DSCompiler	0	NIL-FOR	n <= $.order
6711	749	6	DSCompiler.java	tan	n	int	0	NIL-FOR	$ <= order
6712	752	8	DSCompiler.java	tan	k	int	0	NIL-FOR	$ >= 0
4230	754	10	DSCompiler.java	tan	k	int	1	DEF	$ > 2
4231	758	12	DSCompiler.java	tan	k	int	0	DEF	$ == 2
4232	763	8	DSCompiler.java	tan	n	int	0	DEF	($ & 0x1) == 0
4233	782	4	DSCompiler.java	acos	THIS	DSCompiler	0	DEF	$.order > 0
6713	789	6	DSCompiler.java	acos	THIS	DSCompiler	0	NIL-FOR	n <= $.order
6713	789	6	DSCompiler.java	acos	n	int	0	NIL-FOR	$ <= order
6714	792	8	DSCompiler.java	acos	k	int	0	NIL-FOR	$ >= 0
4234	794	10	DSCompiler.java	acos	k	int	1	DEF	$ > 2
4235	798	12	DSCompiler.java	acos	k	int	0	DEF	$ == 2
4236	803	8	DSCompiler.java	acos	n	int	0	DEF	($ & 0x1) == 0
4237	823	4	DSCompiler.java	asin	THIS	DSCompiler	0	DEF	$.order > 0
6715	830	6	DSCompiler.java	asin	THIS	DSCompiler	0	NIL-FOR	n <= $.order
6715	830	6	DSCompiler.java	asin	n	int	0	NIL-FOR	$ <= order
6716	833	8	DSCompiler.java	asin	k	int	0	NIL-FOR	$ >= 0
4238	835	10	DSCompiler.java	asin	k	int	1	DEF	$ > 2
4239	839	12	DSCompiler.java	asin	k	int	0	DEF	$ == 2
4240	844	8	DSCompiler.java	asin	n	int	0	DEF	($ & 0x1) == 0
4241	864	4	DSCompiler.java	atan	THIS	DSCompiler	0	DEF	$.order > 0
6717	871	6	DSCompiler.java	atan	THIS	DSCompiler	0	NIL-FOR	n <= $.order
6717	871	6	DSCompiler.java	atan	n	int	0	NIL-FOR	$ <= order
6718	874	8	DSCompiler.java	atan	k	int	0	NIL-FOR	$ >= 0
4242	876	10	DSCompiler.java	atan	k	int	1	DEF	$ > 2
4243	880	12	DSCompiler.java	atan	k	int	0	DEF	$ == 2
4244	885	8	DSCompiler.java	atan	n	int	0	DEF	($ & 0x1) == 0
4245	910	4	DSCompiler.java	atan2	x	double[]	1	DEF	$[xOffset] >= 0
4245	910	4	DSCompiler.java	atan2	xOffset	int	1	DEF	x[$] >= 0
6719	914	6	DSCompiler.java	atan2	THIS	DSCompiler	0	NIL-FOR	i < tmp2.$.length
6719	914	6	DSCompiler.java	atan2	i	int	0	NIL-FOR	$ < tmp2.length
6719	914	6	DSCompiler.java	atan2	tmp2	double[]	0	NIL-FOR	i < $.length
6720	923	6	DSCompiler.java	atan2	THIS	DSCompiler	0	NIL-FOR	i < tmp2.$.length
6720	923	6	DSCompiler.java	atan2	i	int	0	NIL-FOR	$ < tmp2.length
6720	923	6	DSCompiler.java	atan2	tmp2	double[]	0	NIL-FOR	i < $.length
4246	939	4	DSCompiler.java	cosh	THIS	DSCompiler	0	DEF	$.order > 0
6721	941	6	DSCompiler.java	cosh	THIS	DSCompiler	0	NIL-FOR	i <= $.order
6721	941	6	DSCompiler.java	cosh	i	int	0	NIL-FOR	$ <= order
4247	957	4	DSCompiler.java	sinh	THIS	DSCompiler	0	DEF	$.order > 0
6722	959	6	DSCompiler.java	sinh	THIS	DSCompiler	0	NIL-FOR	i <= $.order
6722	959	6	DSCompiler.java	sinh	i	int	0	NIL-FOR	$ <= order
4248	976	4	DSCompiler.java	tanh	THIS	DSCompiler	0	DEF	$.order > 0
6723	980	6	DSCompiler.java	tanh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
6723	980	6	DSCompiler.java	tanh	n	int	0	NIL-FOR	$ <= order
6724	983	8	DSCompiler.java	tanh	k	int	0	NIL-FOR	$ >= 0
4249	985	10	DSCompiler.java	tanh	k	int	1	DEF	$ > 2
4250	989	12	DSCompiler.java	tanh	k	int	0	DEF	$ == 2
4251	994	8	DSCompiler.java	tanh	n	int	0	DEF	($ & 0x1) == 0
4252	1013	4	DSCompiler.java	acosh	THIS	DSCompiler	0	DEF	$.order > 0
6725	1020	6	DSCompiler.java	acosh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
6725	1020	6	DSCompiler.java	acosh	n	int	0	NIL-FOR	$ <= order
6726	1023	8	DSCompiler.java	acosh	k	int	0	NIL-FOR	$ >= 0
4253	1025	10	DSCompiler.java	acosh	k	int	1	DEF	$ > 2
4254	1029	12	DSCompiler.java	acosh	k	int	0	DEF	$ == 2
4255	1034	8	DSCompiler.java	acosh	n	int	0	DEF	($ & 0x1) == 0
4256	1054	4	DSCompiler.java	asinh	THIS	DSCompiler	0	DEF	$.order > 0
6727	1061	6	DSCompiler.java	asinh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
6727	1061	6	DSCompiler.java	asinh	n	int	0	NIL-FOR	$ <= order
6728	1064	8	DSCompiler.java	asinh	k	int	0	NIL-FOR	$ >= 0
4257	1066	10	DSCompiler.java	asinh	k	int	1	DEF	$ > 2
4258	1070	12	DSCompiler.java	asinh	k	int	0	DEF	$ == 2
4259	1075	8	DSCompiler.java	asinh	n	int	0	DEF	($ & 0x1) == 0
4260	1095	4	DSCompiler.java	atanh	THIS	DSCompiler	0	DEF	$.order > 0
6729	1102	6	DSCompiler.java	atanh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
6729	1102	6	DSCompiler.java	atanh	n	int	0	NIL-FOR	$ <= order
6730	1105	8	DSCompiler.java	atanh	k	int	0	NIL-FOR	$ >= 0
4261	1107	10	DSCompiler.java	atanh	k	int	1	DEF	$ > 2
4262	1111	12	DSCompiler.java	atanh	k	int	0	DEF	$ == 2
4263	1116	8	DSCompiler.java	atanh	n	int	0	DEF	($ & 0x1) == 0
6731	1134	4	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	i < $.compIndirection.$.length
6731	1134	4	DSCompiler.java	compose	i	int	0	NIL-FOR	$ < compIndirection.length
6732	1137	6	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	j < mappingI.$.length
6732	1137	6	DSCompiler.java	compose	j	int	0	NIL-FOR	$ < mappingI.length
6732	1137	6	DSCompiler.java	compose	mappingI	int[][]	0	NIL-FOR	j < $.length
6733	1140	8	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	k < mappingIJ.$.length
6733	1140	8	DSCompiler.java	compose	k	int	0	NIL-FOR	$ < mappingIJ.length
6733	1140	8	DSCompiler.java	compose	mappingIJ	int[]	0	NIL-FOR	k < $.length
6734	1158	4	DSCompiler.java	taylor	i	int	0	NIL-FOR	$ >= 0
6735	1161	6	DSCompiler.java	taylor	THIS	DSCompiler	0	NIL-FOR	k < orders.$.length
6735	1161	6	DSCompiler.java	taylor	k	int	0	NIL-FOR	$ < orders.length
6735	1161	6	DSCompiler.java	taylor	orders	int[]	0	NIL-FOR	k < $.length
4264	1162	8	DSCompiler.java	taylor	k	int	0	MathInternalError	orders[$] > 0
4264	1162	8	DSCompiler.java	taylor	orders	int[]	0	MathInternalError	$[k] > 0
4265	1181	4	DSCompiler.java	checkCompatibility	THIS	DSCompiler	0	DimensionMismatchException	$.parameters != compiler.$.parameters
4265	1181	4	DSCompiler.java	checkCompatibility	compiler	DSCompiler	0	DimensionMismatchException	parameters != $.parameters
4266	1184	4	DSCompiler.java	checkCompatibility	THIS	DSCompiler	0	DimensionMismatchException	$.order != compiler.$.order
4266	1184	4	DSCompiler.java	checkCompatibility	compiler	DSCompiler	0	DimensionMismatchException	order != $.order
586	147	4	Decimal64.java	equals	obj	Object	0	RET	$ instanceof Decimal64
587	320	4	Decimal64.java	rootN	THIS	Decimal64	1	RET	$.value < 0
588	480	4	Decimal64.java	linearCombination	THIS	Decimal64	0	DimensionMismatchException	a.$.length != b.$.length
588	480	4	Decimal64.java	linearCombination	a	Decimal64[]	0	DimensionMismatchException	$.length != b.length
588	480	4	Decimal64.java	linearCombination	b	Decimal64[]	0	DimensionMismatchException	a.length != $.length
4559	485	4	Decimal64.java	linearCombination	THIS	Decimal64	0	NIL-FOR	i < a.$.length
4559	485	4	Decimal64.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
4559	485	4	Decimal64.java	linearCombination	a	Decimal64[]	0	NIL-FOR	i < $.length
589	496	4	Decimal64.java	linearCombination	THIS	Decimal64	0	DimensionMismatchException	a.$.length != b.$.length
589	496	4	Decimal64.java	linearCombination	a	double[]	0	DimensionMismatchException	$.length != b.length
589	496	4	Decimal64.java	linearCombination	b	Decimal64[]	0	DimensionMismatchException	a.length != $.length
4560	500	4	Decimal64.java	linearCombination	THIS	Decimal64	0	NIL-FOR	i < a.$.length
4560	500	4	Decimal64.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
4560	500	4	Decimal64.java	linearCombination	a	double[]	0	NIL-FOR	i < $.length
1442	68	4	DefaultIterativeLinearSolverEvent.java	getResidual	THIS	DefaultIterativeLinearSolverEvent	0	RET	$.r != null
821	23	4	DefaultTransformer.java	transform	o	Object	0	NullArgumentException	$ == null
822	26	4	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
823	40	4	DefaultTransformer.java	equals	THIS	DefaultTransformer	0	RET	$ == other
823	40	4	DefaultTransformer.java	equals	other	Object	0	RET	this == $
4192	71	4	DerivativeStructure.java	DerivativeStructure	parameters	int	0	NumberIsTooLargeException	index >= $
4192	71	4	DerivativeStructure.java	DerivativeStructure	index	int	0	NumberIsTooLargeException	$ >= parameters
4193	74	4	DerivativeStructure.java	DerivativeStructure	order	int	0	DEF	$ > 0
4194	137	4	DerivativeStructure.java	DerivativeStructure	THIS	DerivativeStructure	0	DimensionMismatchException	derivatives.$.length != $.data.$.length
4194	137	4	DerivativeStructure.java	DerivativeStructure	derivatives	double	0	DimensionMismatchException	$.length != data.length
6661	245	4	DerivativeStructure.java	multiply	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
6661	245	4	DerivativeStructure.java	multiply	i	int	0	NIL-FOR	$ < ds.data.length
6661	245	4	DerivativeStructure.java	multiply	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
6662	266	4	DerivativeStructure.java	divide	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
6662	266	4	DerivativeStructure.java	divide	i	int	0	NIL-FOR	$ < ds.data.length
6662	266	4	DerivativeStructure.java	divide	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
6663	305	4	DerivativeStructure.java	negate	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
6663	305	4	DerivativeStructure.java	negate	i	int	0	NIL-FOR	$ < ds.data.length
6663	305	4	DerivativeStructure.java	negate	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
4195	315	4	DerivativeStructure.java	abs	THIS	DerivativeStructure	1	RET	Double.doubleToLongBits($.data[0]) < 0
4196	363	4	DerivativeStructure.java	copySign	m	long	0	RET	$ >= 0
4196	363	4	DerivativeStructure.java	copySign	m	long	0	RET	$ < 0
4196	363	4	DerivativeStructure.java	copySign	s	long	0	RET	$ >= 0
4196	363	4	DerivativeStructure.java	copySign	s	long	0	RET	$ < 0
4197	375	4	DerivativeStructure.java	copySign	m	long	0	RET	$ >= 0
4197	375	4	DerivativeStructure.java	copySign	m	long	0	RET	$ < 0
4197	375	4	DerivativeStructure.java	copySign	s	long	0	RET	$ < 0
4197	375	4	DerivativeStructure.java	copySign	s	long	0	RET	$ >= 0
6664	393	4	DerivativeStructure.java	scalb	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
6664	393	4	DerivativeStructure.java	scalb	i	int	0	NIL-FOR	$ < ds.data.length
6664	393	4	DerivativeStructure.java	scalb	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
4198	405	4	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isInfinite($.data[0])
4198	405	4	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isInfinite(y.$.data[0])
4198	405	4	DerivativeStructure.java	hypot	y	DerivativeStructure	1	RET	Double.isInfinite($.data[0])
4199	409	6	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isNaN($.data[0])
4199	409	6	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isNaN(y.$.data[0])
4199	409	6	DerivativeStructure.java	hypot	y	DerivativeStructure	1	RET	Double.isNaN($.data[0])
4200	415	8	DerivativeStructure.java	hypot	expX	int	1	RET	$ > expY + 27
4200	415	8	DerivativeStructure.java	hypot	expY	int	1	RET	expX > $ + 27
4201	419	10	DerivativeStructure.java	hypot	expX	int	1	RET	expY > $ + 27
4201	419	10	DerivativeStructure.java	hypot	expY	int	1	RET	$ > expX + 27
4202	451	4	DerivativeStructure.java	compose	THIS	DerivativeStructure	0	DimensionMismatchException	f.$.length != $.getOrder() + 1
4202	451	4	DerivativeStructure.java	compose	f	double	0	DimensionMismatchException	$.length != getOrder() + 1
6665	724	4	DerivativeStructure.java	toDegrees	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
6665	724	4	DerivativeStructure.java	toDegrees	i	int	0	NIL-FOR	$ < ds.data.length
6665	724	4	DerivativeStructure.java	toDegrees	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
6666	735	4	DerivativeStructure.java	toRadians	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
6666	735	4	DerivativeStructure.java	toRadians	i	int	0	NIL-FOR	$ < ds.data.length
6666	735	4	DerivativeStructure.java	toRadians	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
6667	756	4	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < a.$.length
6667	756	4	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
6667	756	4	DerivativeStructure.java	linearCombination	a	DerivativeStructure[]	0	NIL-FOR	i < $.length
6668	760	4	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < b.$.length
6668	760	4	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < b.length
6668	760	4	DerivativeStructure.java	linearCombination	b	DerivativeStructure[]	0	NIL-FOR	i < $.length
6669	765	4	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < a.$.length
6669	765	4	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
6669	765	4	DerivativeStructure.java	linearCombination	a	DerivativeStructure[]	0	NIL-FOR	i < $.length
6670	779	4	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < b.$.length
6670	779	4	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < b.length
6670	779	4	DerivativeStructure.java	linearCombination	b	DerivativeStructure[]	0	NIL-FOR	i < $.length
6671	784	4	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < a.$.length
6671	784	4	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
6671	784	4	DerivativeStructure.java	linearCombination	a	double[]	0	NIL-FOR	i < $.length
4203	870	4	DerivativeStructure.java	equals	THIS	DerivativeStructure	0	RET	$ == other
4203	870	4	DerivativeStructure.java	equals	other	Object	0	RET	this == $
4204	873	4	DerivativeStructure.java	equals	other	Object	0	RET	$ instanceof DerivativeStructure
323	105	4	DescriptiveStatistics.java	DescriptiveStatistics	initialDoubleArray	double[]	0	DEF	$ != null
324	122	4	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
325	123	6	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
326	127	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
327	191	4	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
328	192	6	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
329	269	4	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ != INFINITE_WINDOW
329	269	4	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ < 1
330	273	4	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
330	273	4	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
330	273	4	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
331	309	4	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
1907	154	4	Dfp.java	Dfp	x	long	0	DEF	$ == Long.MIN_VALUE
1908	158	4	Dfp.java	Dfp	x	long	1	DEF	$ < 0
5577	166	4	Dfp.java	Dfp	x	long	0	NIL-WHILE	$ != 0
1909	172	4	Dfp.java	Dfp	isLongMin	boolean	0	DEF	$
5578	173	6	Dfp.java	Dfp	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
5578	173	6	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < mant.length - 1
1910	174	8	Dfp.java	Dfp	THIS	Dfp	0	DEF	$.mant[i] != 0
1910	174	8	Dfp.java	Dfp	i	int	0	DEF	mant[$] != 0
1911	195	4	Dfp.java	Dfp	exponent	int	0	RET	$ == -1023
1912	196	6	Dfp.java	Dfp	x	double	0	RET	$ == 0
1913	197	8	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
5579	203	6	Dfp.java	Dfp	mantissa	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
1914	209	4	Dfp.java	Dfp	exponent	int	0	RET	$ == 1024
1915	210	6	Dfp.java	Dfp	x	double	1	DEF	$ != $
1916	215	8	Dfp.java	Dfp	x	double	1	DEF	$ < 0
1917	229	4	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
1918	263	4	Dfp.java	Dfp	s	String	0	RET	$.equals(POS_INFINITY_STRING)
1919	268	4	Dfp.java	Dfp	s	String	0	RET	$.equals(NEG_INFINITY_STRING)
1920	273	4	Dfp.java	Dfp	s	String	0	RET	$.equals(NAN_STRING)
1921	279	4	Dfp.java	Dfp	p	int	0	DEF	$ == -1
1922	284	4	Dfp.java	Dfp	p	int	1	DEF	$ != -1
5580	288	6	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < fpexp.length()
5580	288	6	Dfp.java	Dfp	fpexp	String	0	NIL-FOR	i < $.length()
1923	289	8	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) == '-'
1923	289	8	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) == '-'
1924	293	8	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) >= '0'
1924	293	8	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) <= '9'
1924	293	8	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) >= '0'
1924	293	8	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) <= '9'
1925	297	6	Dfp.java	Dfp	negative	boolean	0	DEF	$
1926	304	4	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.indexOf("-") != -1
1927	310	6	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) >= '1'
1927	310	6	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) <= '9'
1927	310	6	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) >= '1'
1927	310	6	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) <= '9'
1928	313	6	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
1928	313	6	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '0'
1928	313	6	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '0'
1929	316	6	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
1929	316	6	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
1930	320	6	Dfp.java	Dfp	p	int	0	DEF	$ == fpdecimal.length()
1930	320	6	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == $.length()
1931	331	6	Dfp.java	Dfp	p	int	0	DEF	$ == (fpdecimal.length())
1931	331	6	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == ($.length())
1932	334	6	Dfp.java	Dfp	THIS	Dfp	0	DEF	q == $.mant.$.length * rsize + offset + 1
1932	334	6	Dfp.java	Dfp	rsize	int	0	DEF	q == mant.length * $ + offset + 1
1932	334	6	Dfp.java	Dfp	offset	int	0	DEF	q == mant.length * rsize + $ + 1
1932	334	6	Dfp.java	Dfp	q	int	0	DEF	$ == mant.length * rsize + offset + 1
1933	337	6	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
1933	337	6	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
1934	343	6	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) < '0'
1934	343	6	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) > '9'
1934	343	6	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) < '0'
1934	343	6	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) > '9'
1935	352	4	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
1935	352	4	Dfp.java	Dfp	offset	int	0	DEF	q != $
1935	352	4	Dfp.java	Dfp	q	int	0	DEF	$ != offset
1936	355	8	Dfp.java	Dfp	offset	int	0	DEF	q == $
1936	355	8	Dfp.java	Dfp	q	int	0	DEF	$ == offset
1937	358	8	Dfp.java	Dfp	striped	char[]	1	DEF	$[q] == '0'
1937	358	8	Dfp.java	Dfp	q	int	1	DEF	striped[$] == '0'
1938	366	4	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
1938	366	4	Dfp.java	Dfp	significantDigits	int	0	DEF	$ == 0
1939	369	4	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
5581	374	4	Dfp.java	Dfp	p	int	0	NIL-WHILE	$ > q
5581	374	4	Dfp.java	Dfp	q	int	0	NIL-WHILE	p > $
1940	375	6	Dfp.java	Dfp	striped	char[]	0	DEF	$[p] != '0'
1940	375	6	Dfp.java	Dfp	p	int	0	DEF	striped[$] != '0'
5582	383	4	Dfp.java	Dfp	THIS	Dfp	0	NIL-WHILE	(p - q) < ($.mant.$.length * rsize)
5582	383	4	Dfp.java	Dfp	rsize	int	0	NIL-WHILE	(p - q) < (mant.length * $)
5582	383	4	Dfp.java	Dfp	p	int	0	NIL-WHILE	($ - q) < (mant.length * rsize)
5582	383	4	Dfp.java	Dfp	q	int	0	NIL-WHILE	(p - $) < (mant.length * rsize)
5583	384	6	Dfp.java	Dfp	rsize	int	0	NIL-FOR	i < $
5583	384	6	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < rsize
5584	388	4	Dfp.java	Dfp	i	int	0	NIL-FOR	$ >= 0
1941	393	4	Dfp.java	Dfp	THIS	Dfp	0	DEF	q < striped.$.length
1941	393	4	Dfp.java	Dfp	striped	char[]	0	DEF	q < $.length
1941	393	4	Dfp.java	Dfp	q	int	0	DEF	$ < striped.length
1942	455	4	Dfp.java	newInstance	THIS	Dfp	0	RET	$.field.getRadixDigits() != d.$.field.getRadixDigits()
1942	455	4	Dfp.java	newInstance	d	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
5585	519	4	Dfp.java	shiftLeft	i	int	0	NIL-FOR	$ > 0
5586	529	4	Dfp.java	shiftRight	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
5586	529	4	Dfp.java	shiftRight	i	int	0	NIL-FOR	$ < mant.length - 1
1943	545	4	Dfp.java	align	adiff	int	0	DEF	$ < 0
1944	548	4	Dfp.java	align	diff	int	0	RET	$ == 0
1945	551	4	Dfp.java	align	THIS	Dfp	0	RET	adiff > ($.mant.$.length + 1)
1945	551	4	Dfp.java	align	adiff	int	0	RET	$ > (mant.length + 1)
5587	558	4	Dfp.java	align	i	int	0	NIL-FOR	$ < adiff
5587	558	4	Dfp.java	align	adiff	int	0	NIL-FOR	i < $
1946	559	6	Dfp.java	align	diff	int	1	DEF	$ < 0
1947	560	8	Dfp.java	align	lostdigit	int	0	DEF	$ != 0
1948	570	4	Dfp.java	align	inexact	boolean	0	DEF	$
1949	582	4	Dfp.java	lessThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
1949	582	4	Dfp.java	lessThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
1950	589	4	Dfp.java	lessThan	THIS	Dfp	0	RET	$.isNaN()
1950	589	4	Dfp.java	lessThan	x	Dfp	0	RET	$.isNaN()
1951	602	4	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
1951	602	4	Dfp.java	greaterThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
1952	609	4	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.isNaN()
1952	609	4	Dfp.java	greaterThan	x	Dfp	0	RET	$.isNaN()
1953	621	4	Dfp.java	negativeOrNull	THIS	Dfp	0	RET	$.isNaN()
1954	633	4	Dfp.java	strictlyNegative	THIS	Dfp	0	RET	$.isNaN()
1955	645	4	Dfp.java	positiveOrNull	THIS	Dfp	0	RET	$.isNaN()
1956	657	4	Dfp.java	strictlyPositive	THIS	Dfp	0	RET	$.isNaN()
1957	693	4	Dfp.java	isZero	THIS	Dfp	0	RET	$.isNaN()
1958	706	4	Dfp.java	equals	other	Object	0	RET	$ instanceof Dfp
1959	708	6	Dfp.java	equals	THIS	Dfp	0	RET	$.isNaN()
1959	708	6	Dfp.java	equals	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
1959	708	6	Dfp.java	equals	x	Dfp	0	RET	$.isNaN()
1959	708	6	Dfp.java	equals	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
1960	728	4	Dfp.java	unequal	THIS	Dfp	0	RET	$.isNaN()
1960	728	4	Dfp.java	unequal	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
1960	728	4	Dfp.java	unequal	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
1960	728	4	Dfp.java	unequal	x	Dfp	0	RET	$.isNaN()
1961	740	4	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length - 1] == 0
1961	740	4	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[a.$.mant.$.length - 1] == 0
1961	740	4	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
1961	740	4	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
1961	740	4	Dfp.java	compare	a	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
1961	740	4	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
1961	740	4	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
1961	740	4	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
1962	743	4	Dfp.java	compare	THIS	Dfp	0	RET	a.$.sign != b.$.sign
1962	743	4	Dfp.java	compare	a	Dfp	0	RET	$.sign != b.sign
1962	743	4	Dfp.java	compare	b	Dfp	0	RET	a.sign != $.sign
1963	744	6	Dfp.java	compare	THIS	Dfp	1	RET	a.$.sign == -1
1963	744	6	Dfp.java	compare	a	Dfp	1	RET	$.sign == -1
1964	751	4	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
1964	751	4	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
1964	751	4	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
1964	751	4	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
1965	754	4	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
1965	754	4	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
1965	754	4	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
1965	754	4	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
1966	757	4	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
1966	757	4	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
1966	757	4	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
1966	757	4	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
1967	760	4	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length - 1] != 0
1967	760	4	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[b.$.mant.$.length - 1] != 0
1967	760	4	Dfp.java	compare	a	Dfp	0	RET	$.mant[b.mant.length - 1] != 0
1967	760	4	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length - 1] != 0
1967	760	4	Dfp.java	compare	b	Dfp	0	RET	a.mant[$.mant.length - 1] != 0
1968	761	6	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp < b.$.exp
1968	761	6	Dfp.java	compare	a	Dfp	0	RET	$.exp < b.exp
1968	761	6	Dfp.java	compare	b	Dfp	0	RET	a.exp < $.exp
1969	764	6	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp > b.$.exp
1969	764	6	Dfp.java	compare	a	Dfp	0	RET	$.exp > b.exp
1969	764	6	Dfp.java	compare	b	Dfp	0	RET	a.exp > $.exp
5588	768	4	Dfp.java	compare	i	int	0	NIL-FOR	$ >= 0
1970	769	6	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] > b.$.mant[i]
1970	769	6	Dfp.java	compare	i	int	0	RET	a.mant[$] > b.mant[$]
1970	769	6	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] > b.mant[i]
1970	769	6	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] > $.mant[i]
1971	772	6	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] < b.$.mant[i]
1971	772	6	Dfp.java	compare	i	int	0	RET	a.mant[$] < b.mant[$]
1971	772	6	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] < b.mant[i]
1971	772	6	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] < $.mant[i]
1972	810	4	Dfp.java	remainder	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length - 1] == 0
1972	810	4	Dfp.java	remainder	result	Dfp	0	DEF	$.mant[mant.length - 1] == 0
1973	822	4	Dfp.java	trunc	THIS	Dfp	0	RET	$.isNaN()
1974	825	4	Dfp.java	trunc	THIS	Dfp	0	RET	$.nans == INFINITE
1975	828	4	Dfp.java	trunc	THIS	Dfp	0	RET	$.mant[$.mant.$.length - 1] == 0
1976	831	4	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp < 0
1977	837	4	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp >= $.mant.$.length
5589	841	4	Dfp.java	trunc	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - result.$.exp
5589	841	4	Dfp.java	trunc	i	int	0	NIL-FOR	$ < mant.length - result.exp
5589	841	4	Dfp.java	trunc	result	Dfp	0	NIL-FOR	i < mant.length - $.exp
1978	845	4	Dfp.java	trunc	changed	boolean	0	RET	$
1979	848	8	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == -1
1979	848	8	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == -1
1980	853	4	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == 1
1980	853	4	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == 1
1981	862	0	Dfp.java	trunc	half	Dfp	0	DEF	a.greaterThan($)
1981	862	0	Dfp.java	trunc	a	Dfp	0	DEF	$.greaterThan(half)
1982	867	0	Dfp.java	trunc	THIS	Dfp	0	DEF	(result.$.mant[$.mant.$.length - result.$.exp] & 1) != 0
1982	867	0	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.exp > 0
1982	867	0	Dfp.java	trunc	half	Dfp	0	DEF	a.equals($)
1982	867	0	Dfp.java	trunc	a	Dfp	0	DEF	$.equals(half)
1982	867	0	Dfp.java	trunc	result	Dfp	0	DEF	($.mant[mant.length - $.exp] & 1) != 0
1982	867	0	Dfp.java	trunc	result	Dfp	0	DEF	$.exp > 0
1983	888	0	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.greaterThan($.newInstance(2147483647))
1983	888	0	Dfp.java	intValue	rounded	Dfp	0	RET	$.greaterThan(newInstance(2147483647))
1984	891	0	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.lessThan($.newInstance(-2147483648))
1984	891	0	Dfp.java	intValue	rounded	Dfp	0	RET	$.lessThan(newInstance(-2147483648))
5590	894	0	Dfp.java	intValue	THIS	Dfp	0	NIL-FOR	i >= $.mant.$.length - rounded.$.exp
5590	894	0	Dfp.java	intValue	i	int	0	NIL-FOR	$ >= mant.length - rounded.exp
5590	894	0	Dfp.java	intValue	rounded	Dfp	0	NIL-FOR	i >= mant.length - $.exp
1985	897	0	Dfp.java	intValue	THIS	Dfp	0	DEF	rounded.$.sign == -1
1985	897	0	Dfp.java	intValue	rounded	Dfp	0	DEF	$.sign == -1
1986	925	0	Dfp.java	intLog10	THIS	Dfp	0	RET	$.mant[$.mant.$.length - 1] > 1000
1987	928	0	Dfp.java	intLog10	THIS	Dfp	0	RET	$.mant[$.mant.$.length - 1] > 100
1988	931	0	Dfp.java	intLog10	THIS	Dfp	0	RET	$.mant[$.mant.$.length - 1] > 10
1989	943	0	Dfp.java	power10	e	int	1	DEF	$ >= 0
5591	970	0	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
5591	970	0	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
5592	975	0	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
5592	975	0	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
1990	988	0	Dfp.java	add	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
1990	988	0	Dfp.java	add	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
1991	994	0	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans != FINITE
1991	994	0	Dfp.java	add	THIS	Dfp	0	RET	$.nans != FINITE
1991	994	0	Dfp.java	add	x	Dfp	0	RET	$.nans != FINITE
1992	995	0	Dfp.java	add	THIS	Dfp	0	RET	$.isNaN()
1993	998	0	Dfp.java	add	x	Dfp	0	RET	$.isNaN()
1994	1001	0	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == FINITE
1994	1001	0	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
1994	1001	0	Dfp.java	add	x	Dfp	0	RET	$.nans == FINITE
1995	1004	0	Dfp.java	add	THIS	Dfp	0	RET	$.nans == FINITE
1995	1004	0	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
1995	1004	0	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
1996	1007	0	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
1996	1007	0	Dfp.java	add	THIS	Dfp	0	RET	$.sign == x.$.sign
1996	1007	0	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
1996	1007	0	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
1996	1007	0	Dfp.java	add	x	Dfp	0	RET	sign == $.sign
1997	1010	0	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
1997	1010	0	Dfp.java	add	THIS	Dfp	0	RET	$.sign != x.$.sign
1997	1010	0	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
1997	1010	0	Dfp.java	add	x	Dfp	0	RET	sign != $.sign
1997	1010	0	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
1998	1026	0	Dfp.java	add	THIS	Dfp	0	DEF	$.compare(a,b) > 0
1998	1026	0	Dfp.java	add	a	Dfp	0	DEF	compare($,b) > 0
1998	1026	0	Dfp.java	add	b	Dfp	0	DEF	compare(a,$) > 0
1999	1029	0	Dfp.java	add	THIS	Dfp	0	DEF	b.$.mant[$.mant.$.length - 1] == 0
1999	1029	0	Dfp.java	add	b	Dfp	0	DEF	$.mant[mant.length - 1] == 0
2000	1032	0	Dfp.java	add	THIS	Dfp	0	DEF	a.$.mant[$.mant.$.length - 1] == 0
2000	1032	0	Dfp.java	add	a	Dfp	0	DEF	$.mant[mant.length - 1] == 0
2001	1037	0	Dfp.java	add	THIS	Dfp	1	DEF	a.$.exp < b.$.exp
2001	1037	0	Dfp.java	add	a	Dfp	1	DEF	$.exp < b.exp
2001	1037	0	Dfp.java	add	b	Dfp	1	DEF	a.exp < $.exp
2002	1043	0	Dfp.java	add	asign	byte	0	DEF	$ != bsign
2002	1043	0	Dfp.java	add	bsign	byte	0	DEF	asign != $
2003	1044	0	Dfp.java	add	asign	byte	1	DEF	$ == rsign
2003	1044	0	Dfp.java	add	rsign	byte	1	DEF	asign == $
5593	1052	0	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
5593	1052	0	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
2004	1059	0	Dfp.java	add	asign	byte	0	DEF	$ == bsign
2004	1059	0	Dfp.java	add	bsign	byte	0	DEF	asign == $
2004	1059	0	Dfp.java	add	rh	int	0	DEF	$ != 0
2005	1064	0	Dfp.java	add	excp	int	0	DEF	$ != 0
5594	1068	0	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
5594	1068	0	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
2006	1069	0	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length - 1] != 0
2006	1069	0	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length - 1] != 0
2007	1073	0	Dfp.java	add	i	int	0	DEF	$ == 0
2008	1079	0	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length - 1] == 0
2008	1079	0	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length - 1] == 0
2009	1081	0	Dfp.java	add	asign	byte	0	DEF	$ != bsign
2009	1081	0	Dfp.java	add	bsign	byte	0	DEF	asign != $
2010	1086	0	Dfp.java	add	excp	int	0	DEF	$ != 0
2011	1142	0	Dfp.java	round	inc	boolean	0	DEF	$
5595	1144	0	Dfp.java	round	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
5595	1144	0	Dfp.java	round	i	int	0	NIL-FOR	$ < mant.length
2012	1149	0	Dfp.java	round	rh	int	0	DEF	$ != 0
2013	1154	0	Dfp.java	round	THIS	Dfp	0	RET	$.exp < MIN_EXP
2014	1158	0	Dfp.java	round	THIS	Dfp	0	RET	$.exp > MAX_EXP
2015	1162	0	Dfp.java	round	n	int	0	RET	$ != 0
2016	1174	0	Dfp.java	multiply	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2016	1174	0	Dfp.java	multiply	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2017	1181	0	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
2017	1181	0	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans != FINITE
2017	1181	0	Dfp.java	multiply	x	Dfp	0	RET	$.nans != FINITE
2018	1182	0	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
2019	1185	0	Dfp.java	multiply	x	Dfp	0	RET	$.isNaN()
2020	1188	0	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2020	1188	0	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length - 1] != 0
2020	1188	0	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
2020	1188	0	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length - 1] != 0
2020	1188	0	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
2021	1193	0	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
2021	1193	0	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length - 1] != 0
2021	1193	0	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2021	1193	0	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2022	1198	0	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2022	1198	0	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2022	1198	0	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2023	1203	0	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
2023	1203	0	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2023	1203	0	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
2023	1203	0	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2023	1203	0	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length - 1] == 0
2023	1203	0	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length - 1] == 0
2023	1203	0	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
2023	1203	0	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2023	1203	0	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length - 1] == 0
5596	1212	0	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
5596	1212	0	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
5597	1214	0	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	j < $.mant.$.length
5597	1214	0	Dfp.java	multiply	j	int	0	NIL-FOR	$ < mant.length
5598	1223	0	Dfp.java	multiply	i	int	0	NIL-FOR	$ >= 0
2024	1224	0	Dfp.java	multiply	i	int	0	DEF	product[$] != 0
2024	1224	0	Dfp.java	multiply	product	int[]	0	DEF	$[i] != 0
5599	1229	0	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
5599	1229	0	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
2025	1234	0	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length - 1] == 0
2025	1234	0	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length - 1] == 0
2026	1238	0	Dfp.java	multiply	THIS	Dfp	1	DEF	md > ($.mant.$.length - 1)
2026	1238	0	Dfp.java	multiply	md	int	1	DEF	$ > (mant.length - 1)
2027	1244	0	Dfp.java	multiply	excp	int	0	DEF	$ != 0
2028	1255	0	Dfp.java	multiply	x	int	1	RET	$ < RADIX
2028	1255	0	Dfp.java	multiply	x	int	1	RET	$ >= 0
2029	1269	0	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.nans != FINITE
2030	1270	0	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.isNaN()
2031	1273	0	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.nans == INFINITE
2031	1273	0	Dfp.java	multiplyFast	x	int	0	RET	$ != 0
2032	1277	0	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.nans == INFINITE
2032	1277	0	Dfp.java	multiplyFast	x	int	0	RET	$ == 0
2033	1285	0	Dfp.java	multiplyFast	x	int	0	RET	$ >= RADIX
2033	1285	0	Dfp.java	multiplyFast	x	int	0	RET	$ < 0
5600	1293	0	Dfp.java	multiplyFast	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
5600	1293	0	Dfp.java	multiplyFast	i	int	0	NIL-FOR	$ < mant.length
2034	1299	0	Dfp.java	multiplyFast	rh	int	0	DEF	$ != 0
2035	1304	0	Dfp.java	multiplyFast	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length - 1] == 0
2035	1304	0	Dfp.java	multiplyFast	result	Dfp	0	DEF	$.mant[mant.length - 1] == 0
2036	1308	0	Dfp.java	multiplyFast	excp	int	0	DEF	$ != 0
2037	1329	0	Dfp.java	divide	THIS	Dfp	0	RET	$.field.getRadixDigits() != divisor.$.field.getRadixDigits()
2037	1329	0	Dfp.java	divide	divisor	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2038	1336	0	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
2038	1336	0	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans != FINITE
2038	1336	0	Dfp.java	divide	divisor	Dfp	0	RET	$.nans != FINITE
2039	1337	0	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
2040	1340	0	Dfp.java	divide	divisor	Dfp	0	RET	$.isNaN()
2041	1343	0	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2041	1343	0	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == FINITE
2041	1343	0	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == FINITE
2042	1348	0	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == FINITE
2042	1348	0	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
2042	1348	0	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
2043	1353	0	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
2043	1353	0	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2043	1353	0	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
2044	1361	0	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.mant[$.mant.$.length - 1] == 0
2044	1361	0	Dfp.java	divide	divisor	Dfp	0	RET	$.mant[mant.length - 1] == 0
5601	1376	0	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
5601	1376	0	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
5602	1382	0	Dfp.java	divide	qd	int	0	NIL-FOR	$ >= 0
5603	1387	0	Dfp.java	divide	trialgood	boolean	0	NIL-WHILE	$
5604	1390	0	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
5604	1390	0	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
5605	1397	0	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
5605	1397	0	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
2045	1402	0	Dfp.java	divide	rh	int	0	DEF	$ == 0
2046	1408	0	Dfp.java	divide	minadj	int	0	DEF	$ >= 2
5606	1413	0	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2047	1414	0	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] > remainder[i]
2047	1414	0	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] > remainder[$]
2047	1414	0	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] > $[i]
2047	1414	0	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] > remainder[i]
2048	1417	0	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] < remainder[i]
2048	1417	0	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] < remainder[$]
2048	1417	0	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] < $[i]
2048	1417	0	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] < remainder[i]
2049	1421	0	Dfp.java	divide	THIS	Dfp	0	DEF	remainder[$.mant.$.length] != 0
2049	1421	0	Dfp.java	divide	remainder	int[]	0	DEF	$[mant.length] != 0
2050	1424	0	Dfp.java	divide	trialgood	boolean	0	DEF	$ == false
2051	1429	0	Dfp.java	divide	nsqd	int	0	DEF	$ != 0
2051	1429	0	Dfp.java	divide	trial	int	0	DEF	$ != 0
2052	1432	0	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd == $.mant.$.length
2052	1432	0	Dfp.java	divide	THIS	Dfp	0	DEF	$.field.getRoundingMode() == $.DfpField.$.RoundingMode.ROUND_DOWN
2052	1432	0	Dfp.java	divide	nsqd	int	0	DEF	$ == mant.length
2053	1435	0	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd > $.mant.$.length
2053	1435	0	Dfp.java	divide	nsqd	int	0	DEF	$ > mant.length
5607	1439	0	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
5607	1439	0	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
5608	1444	0	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2054	1445	0	Dfp.java	divide	i	int	0	DEF	quotient[$] != 0
2054	1445	0	Dfp.java	divide	quotient	int[]	0	DEF	$[i] != 0
5609	1450	0	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
5609	1450	0	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
2055	1455	0	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length - 1] == 0
2055	1455	0	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length - 1] == 0
2056	1458	0	Dfp.java	divide	THIS	Dfp	1	DEF	md > ($.mant.$.length - 1)
2056	1458	0	Dfp.java	divide	md	int	1	DEF	$ > (mant.length - 1)
2057	1464	0	Dfp.java	divide	excp	int	0	DEF	$ != 0
2058	1475	0	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
2059	1476	0	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
2060	1479	0	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2061	1483	0	Dfp.java	divide	divisor	int	0	RET	$ == 0
2062	1491	0	Dfp.java	divide	divisor	int	0	RET	$ >= RADIX
2062	1491	0	Dfp.java	divide	divisor	int	0	RET	$ < 0
5610	1500	0	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2063	1506	0	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length - 1] == 0
2063	1506	0	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length - 1] == 0
2064	1514	0	Dfp.java	divide	excp	int	0	DEF	$ != 0
2065	1531	0	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == FINITE
2065	1531	0	Dfp.java	sqrt	THIS	Dfp	0	RET	$.mant[$.mant.$.length - 1] == 0
2066	1534	0	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans != FINITE
2067	1535	0	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == 1
2067	1535	0	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == INFINITE
2068	1538	0	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == QNAN
2069	1541	0	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == SNAN
2070	1549	0	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == -1
2071	1558	0	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp < -1
2071	1558	0	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp > 1
2071	1558	0	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp < -1
2071	1558	0	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp > 1
5611	1577	0	Dfp.java	sqrt	x	Dfp	0	NIL-WHILE	$.unequal(px)
5611	1577	0	Dfp.java	sqrt	px	Dfp	0	NIL-WHILE	x.unequal($)
2072	1585	0	Dfp.java	sqrt	x	Dfp	0	DEF	$.equals(ppx)
2072	1585	0	Dfp.java	sqrt	ppx	Dfp	0	DEF	x.equals($)
2073	1588	0	Dfp.java	sqrt	THIS	Dfp	0	DEF	dx.$.mant[$.mant.$.length - 1] == 0
2073	1588	0	Dfp.java	sqrt	dx	Dfp	0	DEF	$.mant[mant.length - 1] == 0
2074	1599	0	Dfp.java	toString	THIS	Dfp	0	RET	$.nans != FINITE
2075	1600	0	Dfp.java	toString	THIS	Dfp	1	RET	$.nans == INFINITE
2076	1607	0	Dfp.java	toString	THIS	Dfp	0	RET	$.exp > $.mant.$.length
2076	1607	0	Dfp.java	toString	THIS	Dfp	0	RET	$.exp < -1
5612	1625	0	Dfp.java	dfp2sci	i	int	0	NIL-FOR	$ >= 0
5613	1631	0	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-FOR	p < rawdigits.$.length
5613	1631	0	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-FOR	p < $.length
5613	1631	0	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ < rawdigits.length
2077	1632	0	Dfp.java	dfp2sci	rawdigits	char[]	0	DEF	$[p] != '0'
2077	1632	0	Dfp.java	dfp2sci	p	int	0	DEF	rawdigits[$] != '0'
2078	1638	0	Dfp.java	dfp2sci	THIS	Dfp	0	DEF	$.sign == -1
2079	1641	0	Dfp.java	dfp2sci	THIS	Dfp	1	DEF	p != rawdigits.$.length
2079	1641	0	Dfp.java	dfp2sci	rawdigits	char[]	1	DEF	p != $.length
2079	1641	0	Dfp.java	dfp2sci	p	int	1	DEF	$ != rawdigits.length
5614	1644	0	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-WHILE	p < rawdigits.$.length
5614	1644	0	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-WHILE	p < $.length
5614	1644	0	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$ < rawdigits.length
2080	1659	0	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
5615	1662	0	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ > ae
5615	1662	0	Dfp.java	dfp2sci	ae	int	0	NIL-FOR	p > $
2081	1664	0	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
5616	1667	0	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$ > 0
2082	1685	0	Dfp.java	dfp2string	e	int	0	DEF	$ <= 0
5617	1690	0	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ < 0
5618	1697	0	Dfp.java	dfp2string	i	int	0	NIL-FOR	$ >= 0
2083	1702	0	Dfp.java	dfp2string	e	int	0	DEF	--$ == 0
5619	1707	0	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ > 0
2084	1714	0	Dfp.java	dfp2string	pointInserted	boolean	0	DEF	$
5620	1718	0	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[q] == '0'
5620	1718	0	Dfp.java	dfp2string	q	int	0	NIL-WHILE	buffer[$] == '0'
2085	1721	0	Dfp.java	dfp2string	buffer	char[]	0	DEF	$[q] == '.'
2085	1721	0	Dfp.java	dfp2string	q	int	0	DEF	buffer[$] == '.'
5621	1724	0	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[p - 1] == '0'
5621	1724	0	Dfp.java	dfp2string	p	int	0	NIL-WHILE	buffer[$ - 1] == '0'
2086	1727	0	Dfp.java	dfp2string	THIS	Dfp	0	DEF	$.sign < 0
2087	1749	0	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
2087	1749	0	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length - 1] != 0
2088	1754	0	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
2088	1754	0	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length - 1] == 0
2089	1758	0	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
2089	1758	0	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == QNAN
2090	1762	0	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
2090	1762	0	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == SNAN
2091	1768	0	Dfp.java	dotrap	THIS	Dfp	1	DEF	(result.$.exp + $.mant.$.length) < MIN_EXP
2091	1768	0	Dfp.java	dotrap	result	Dfp	1	DEF	($.exp + mant.length) < MIN_EXP
2092	1825	0	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2092	1825	0	Dfp.java	nextAfter	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2093	1832	0	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan(x)
2093	1832	0	Dfp.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
2094	1835	0	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.compare(this,x) == 0
2094	1835	0	Dfp.java	nextAfter	x	Dfp	0	RET	compare(this,$) == 0
2095	1838	0	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan($.getZero())
2096	1843	0	Dfp.java	nextAfter	up	boolean	1	DEF	$
2097	1847	0	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
2098	1856	0	Dfp.java	nextAfter	THIS	Dfp	1	DEF	$.equals(inc)
2098	1856	0	Dfp.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
2099	1862	0	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
2100	1867	0	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.classify() != INFINITE
2100	1867	0	Dfp.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
2101	1871	0	Dfp.java	nextAfter	THIS	Dfp	0	DEF	result.equals($.getZero())
2101	1871	0	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero()) == false
2101	1871	0	Dfp.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
2102	1883	0	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isInfinite()
2103	1884	0	Dfp.java	toDouble	THIS	Dfp	1	RET	$.lessThan($.getZero())
2104	1891	0	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isNaN()
2105	1897	0	Dfp.java	toDouble	cmp0	int	1	RET	$ == 0
2106	1901	0	Dfp.java	toDouble	cmp0	int	0	DEF	$ < 0
2107	1907	0	Dfp.java	toDouble	exponent	int	0	DEF	$ < 0
5622	1911	0	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.equals($)
5622	1911	0	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.lessThan($)
5622	1911	0	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.equals(y)
5622	1911	0	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.lessThan(y)
2108	1917	0	Dfp.java	toDouble	exponent	int	0	DEF	$ > -1023
2109	1920	0	Dfp.java	toDouble	exponent	int	0	RET	$ < -1074
2110	1923	0	Dfp.java	toDouble	exponent	int	0	RET	$ > 1023
2111	1930	0	Dfp.java	toDouble	mantissa	long	0	DEF	$ == 4503599627370496L
2112	1934	0	Dfp.java	toDouble	exponent	int	0	DEF	$ <= -1023
5623	1937	0	Dfp.java	toDouble	exponent	int	0	NIL-WHILE	$ < -1023
2113	1943	0	Dfp.java	toDouble	negate	boolean	0	DEF	$
2114	2014	0	Dfp.java	signum	THIS	Dfp	1	RET	$.isZero()
2114	2014	0	Dfp.java	signum	THIS	Dfp	1	RET	$.isNaN()
2115	2026	0	Dfp.java	copySign	THIS	Dfp	0	RET	s.$.sign >= 0
2115	2026	0	Dfp.java	copySign	THIS	Dfp	0	RET	s.$.sign < 0
2115	2026	0	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign >= 0
2115	2026	0	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign < 0
2115	2026	0	Dfp.java	copySign	s	Dfp	0	RET	$.sign >= 0
2115	2026	0	Dfp.java	copySign	s	Dfp	0	RET	$.sign < 0
2116	2037	0	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign >= 0
2116	2037	0	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign < 0
2116	2037	0	Dfp.java	copySign	sb	long	0	RET	$ < 0
2116	2037	0	Dfp.java	copySign	sb	long	0	RET	$ >= 0
2117	2175	0	Dfp.java	atan2	THIS	Dfp	1	RET	x.$.sign >= 0
2117	2175	0	Dfp.java	atan2	x	Dfp	1	RET	$.sign >= 0
2118	2233	0	Dfp.java	linearCombination	THIS	Dfp	0	DimensionMismatchException	a.$.length != b.$.length
2118	2233	0	Dfp.java	linearCombination	a	Dfp[]	0	DimensionMismatchException	$.length != b.length
2118	2233	0	Dfp.java	linearCombination	b	Dfp[]	0	DimensionMismatchException	a.length != $.length
5624	2237	0	Dfp.java	linearCombination	THIS	Dfp	0	NIL-FOR	i < a.$.length
5624	2237	0	Dfp.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
5624	2237	0	Dfp.java	linearCombination	a	Dfp[]	0	NIL-FOR	i < $.length
2119	2247	0	Dfp.java	linearCombination	THIS	Dfp	0	DimensionMismatchException	a.$.length != b.$.length
2119	2247	0	Dfp.java	linearCombination	a	double[]	0	DimensionMismatchException	$.length != b.length
2119	2247	0	Dfp.java	linearCombination	b	Dfp[]	0	DimensionMismatchException	a.length != $.length
5625	2251	0	Dfp.java	linearCombination	THIS	Dfp	0	NIL-FOR	i < a.$.length
5625	2251	0	Dfp.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
5625	2251	0	Dfp.java	linearCombination	a	double[]	0	NIL-FOR	i < $.length
2195	108	4	DfpDec.java	newInstance	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != d.getField().getRadixDigits()
2195	108	4	DfpDec.java	newInstance	d	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
2196	140	4	DfpDec.java	round	msb	int	0	RET	$ == 0
5643	145	4	DfpDec.java	round	msb	int	0	NIL-WHILE	lsbthreshold > $
5643	145	4	DfpDec.java	round	lsbthreshold	int	0	NIL-WHILE	$ > msb
5644	153	4	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsbshift % 4
5644	153	4	DfpDec.java	round	lsbshift	int	0	NIL-FOR	i < $ % 4
2197	157	4	DfpDec.java	round	THIS	DfpDec	0	RET	digits == 4 * $.mant.$.length - 3
2197	157	4	DfpDec.java	round	lsbthreshold	int	0	RET	$ <= 1
2197	157	4	DfpDec.java	round	digits	int	0	RET	$ == 4 * mant.length - 3
2198	162	4	DfpDec.java	round	lsbthreshold	int	1	DEF	$ == 1
5645	171	4	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsd
5645	171	4	DfpDec.java	round	lsd	int	0	NIL-FOR	i < $
2199	204	0	DfpDec.java	round	inc	boolean	0	DEF	$
5646	206	0	DfpDec.java	round	THIS	DfpDec	0	NIL-FOR	i < $.mant.$.length
5646	206	0	DfpDec.java	round	i	int	0	NIL-FOR	$ < mant.length
2200	211	0	DfpDec.java	round	rh	int	0	DEF	$ != 0
2201	216	0	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp < MIN_EXP
2202	220	0	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp > MAX_EXP
2203	224	0	DfpDec.java	round	discarded	int	0	RET	$ != 0
2203	224	0	DfpDec.java	round	n	int	0	RET	$ != 0
2204	235	0	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != x.getField().getRadixDigits()
2204	235	0	DfpDec.java	nextAfter	x	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
2205	244	0	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan(x)
2205	244	0	DfpDec.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
2206	247	0	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.equals(x)
2206	247	0	DfpDec.java	nextAfter	x	Dfp	0	RET	equals($)
2207	250	0	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan($.getZero())
2208	253	0	DfpDec.java	nextAfter	up	boolean	1	DEF	$
2209	256	0	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
2210	259	0	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
2210	259	0	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
2211	269	0	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	$.equals(inc)
2211	269	0	DfpDec.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
2212	275	0	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
2213	278	0	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
2213	278	0	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
2214	285	0	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.classify() != INFINITE
2214	285	0	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
2215	289	0	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero()) == false
2215	289	0	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	result.equals($.getZero())
2215	289	0	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
2120	193	4	DfpField.java	DfpField	computeConstants	boolean	1	DEF	$
5626	509	4	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
5626	509	4	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
5626	509	4	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
2121	511	6	DfpField.java	split	i	int	0	DEF	buf[$] >= '1'
2121	511	6	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
2121	511	6	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '1'
2121	511	6	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
2122	514	6	DfpField.java	split	i	int	0	DEF	buf[$] == '.'
2122	514	6	DfpField.java	split	buf	char[]	0	DEF	$[i] == '.'
2123	518	6	DfpField.java	split	THIS	DfpField	0	DEF	sig == ($.radixDigits / 2) * 4
2123	518	6	DfpField.java	split	sig	int	0	DEF	$ == (radixDigits / 2) * 4
2124	522	6	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
2124	522	6	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
2124	522	6	DfpField.java	split	leading	boolean	0	DEF	$
2124	522	6	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
2124	522	6	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
5627	527	4	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
5627	527	4	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
5627	527	4	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
2125	529	6	DfpField.java	split	i	int	0	DEF	$ < sp
2125	529	6	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
2125	529	6	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
2125	529	6	DfpField.java	split	sp	int	0	DEF	i < $
2125	529	6	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
2125	529	6	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
2126	541	4	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String == null
2126	541	4	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String.length() < highPrecisionDecimalDigits - 3
2126	541	4	DfpField.java	computeStringConstants	highPrecisionDecimalDigits	int	0	DEF	sqr2String.length() < $ - 3
5628	572	4	DfpField.java	computePi	i	int	0	NIL-FOR	$ < 20
2127	582	6	DfpField.java	computePi	ykM1	Dfp	0	DEF	yk.equals($)
2127	582	6	DfpField.java	computePi	yk	Dfp	0	DEF	$.equals(ykM1)
5629	600	4	DfpField.java	computeExp	i	int	0	NIL-FOR	$ < 10000
2128	605	6	DfpField.java	computeExp	y	Dfp	0	DEF	$.equals(py)
2128	605	6	DfpField.java	computeExp	py	Dfp	0	DEF	y.equals($)
5630	625	4	DfpField.java	computeLn	i	int	0	NIL-FOR	$ < 10000
2129	631	6	DfpField.java	computeLn	y	Dfp	0	DEF	$.equals(py)
2129	631	6	DfpField.java	computeLn	py	Dfp	0	DEF	y.equals($)
5631	30	4	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
5631	30	4	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
5631	30	4	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
2130	32	6	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
2130	32	6	DfpMath.java	split	i	int	0	DEF	buf[$] >= '1'
2130	32	6	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
2130	32	6	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '1'
2131	35	6	DfpMath.java	split	i	int	0	DEF	buf[$] == '.'
2131	35	6	DfpMath.java	split	buf	char[]	0	DEF	$[i] == '.'
2132	39	6	DfpMath.java	split	sig	int	0	DEF	$ == (field.getRadixDigits() / 2) * 4
2132	39	6	DfpMath.java	split	field	DfpField	0	DEF	sig == ($.getRadixDigits() / 2) * 4
2133	43	6	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
2133	43	6	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
2133	43	6	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
2133	43	6	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
2133	43	6	DfpMath.java	split	leading	boolean	0	DEF	$
5632	48	4	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
5632	48	4	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
5632	48	4	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
2134	50	6	DfpMath.java	split	i	int	0	DEF	$ < sp
2134	50	6	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
2134	50	6	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
2134	50	6	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
2134	50	6	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
2134	50	6	DfpMath.java	split	sp	int	0	DEF	i < $
2135	79	4	DfpMath.java	splitMult	THIS	DfpMath	0	RET	result[0].classify() == $.Dfp.INFINITE
2135	79	4	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].equals($[1])
2135	79	4	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].classify() == Dfp.INFINITE
2136	111	4	DfpMath.java	splitPow	a	int	0	RET	$ == 0
2137	114	4	DfpMath.java	splitPow	a	int	0	DEF	$ < 0
5633	118	4	DfpMath.java	splitPow	a	int	0	NIL-DOWHILE	$ >= 1
2138	126	8	DfpMath.java	splitPow	trial	int	0	DEF	$ > a
2138	126	8	DfpMath.java	splitPow	a	int	0	DEF	trial > $
2139	137	4	DfpMath.java	splitPow	invert	boolean	0	DEF	$
2140	151	4	DfpMath.java	pow	a	int	0	RET	$ == 0
2141	154	4	DfpMath.java	pow	a	int	0	DEF	$ < 0
5634	158	4	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$ >= 1
5635	163	6	DfpMath.java	pow	trial	int	0	NIL-DOWHILE	a > $
5635	163	6	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$ > trial
2142	176	4	DfpMath.java	pow	invert	boolean	0	DEF	$
2143	190	4	DfpMath.java	exp	ia	int	0	RET	$ > 2147483646
2144	193	4	DfpMath.java	exp	ia	int	0	RET	$ < -2147483646
5636	210	4	DfpMath.java	expInternal	i	int	0	NIL-FOR	$ < 90
2145	214	6	DfpMath.java	expInternal	y	Dfp	0	DEF	$.equals(py)
2145	214	6	DfpMath.java	expInternal	py	Dfp	0	DEF	y.equals($)
2146	231	4	DfpMath.java	log	a	Dfp	0	RET	$.equals($.getZero())
2146	231	4	DfpMath.java	log	a	Dfp	0	RET	$.isNaN()
2146	231	4	DfpMath.java	log	a	Dfp	0	RET	$.lessThan($.getZero())
2147	235	4	DfpMath.java	log	THIS	DfpMath	0	RET	a.classify() == $.Dfp.INFINITE
2147	235	4	DfpMath.java	log	a	Dfp	0	RET	$.classify() == Dfp.INFINITE
5637	242	4	DfpMath.java	log	ix	int	0	NIL-WHILE	$ > 2
5638	252	4	DfpMath.java	log	spx	Dfp[]	0	NIL-WHILE	$[0].add($[1]).greaterThan(spy[0])
5638	252	4	DfpMath.java	log	spy	Dfp[]	0	NIL-WHILE	spx[0].add(spx[1]).greaterThan($[0])
5639	282	4	DfpMath.java	logInternal	i	int	0	NIL-FOR	$ < 10000
2148	288	6	DfpMath.java	logInternal	y	Dfp	0	DEF	$.equals(py)
2148	288	6	DfpMath.java	logInternal	py	Dfp	0	DEF	y.equals($)
2149	303	4	DfpMath.java	pow	x	Dfp	0	RET	$.getField().getRadixDigits() != y.getField().getRadixDigits()
2149	303	4	DfpMath.java	pow	y	Dfp	0	RET	x.getField().getRadixDigits() != $.getField().getRadixDigits()
2150	314	4	DfpMath.java	pow	zero	Dfp	0	RET	y.equals($)
2150	314	4	DfpMath.java	pow	y	Dfp	0	RET	$.equals(zero)
2151	317	4	DfpMath.java	pow	one	Dfp	0	RET	y.equals($)
2151	317	4	DfpMath.java	pow	y	Dfp	0	RET	$.equals(one)
2152	318	6	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
2153	324	4	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
2153	324	4	DfpMath.java	pow	y	Dfp	0	RET	$.isNaN()
2154	328	4	DfpMath.java	pow	zero	Dfp	0	RET	x.equals($)
2154	328	4	DfpMath.java	pow	x	Dfp	0	RET	$.equals(zero)
2155	329	6	DfpMath.java	pow	THIS	DfpMath	1	RET	$.Dfp.copysign(one,x).greaterThan(zero)
2155	329	6	DfpMath.java	pow	zero	Dfp	1	RET	Dfp.copysign(one,x).greaterThan($)
2155	329	6	DfpMath.java	pow	one	Dfp	1	RET	Dfp.copysign($,x).greaterThan(zero)
2155	329	6	DfpMath.java	pow	x	Dfp	1	RET	Dfp.copysign(one,$).greaterThan(zero)
2156	330	8	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2156	330	8	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2157	338	8	DfpMath.java	pow	THIS	DfpMath	1	RET	y.classify() == $.Dfp.FINITE
2157	338	8	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
2157	338	8	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
2157	338	8	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
2157	338	8	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
2157	338	8	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
2158	339	10	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2158	339	10	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2159	347	10	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2159	347	10	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2160	356	4	DfpMath.java	pow	zero	Dfp	0	DEF	x.lessThan($)
2160	356	4	DfpMath.java	pow	x	Dfp	0	DEF	$.lessThan(zero)
2161	360	4	DfpMath.java	pow	THIS	DfpMath	0	RET	y.classify() == $.Dfp.INFINITE
2161	360	4	DfpMath.java	pow	one	Dfp	0	RET	x.greaterThan($)
2161	360	4	DfpMath.java	pow	x	Dfp	0	RET	$.greaterThan(one)
2161	360	4	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
2162	361	6	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2162	361	6	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2163	368	4	DfpMath.java	pow	THIS	DfpMath	0	RET	y.classify() == $.Dfp.INFINITE
2163	368	4	DfpMath.java	pow	one	Dfp	0	RET	x.lessThan($)
2163	368	4	DfpMath.java	pow	x	Dfp	0	RET	$.lessThan(one)
2163	368	4	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
2164	369	6	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2164	369	6	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2165	376	4	DfpMath.java	pow	THIS	DfpMath	0	RET	y.classify() == $.Dfp.INFINITE
2165	376	4	DfpMath.java	pow	one	Dfp	0	RET	x.equals($)
2165	376	4	DfpMath.java	pow	x	Dfp	0	RET	$.equals(one)
2165	376	4	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
2166	380	4	DfpMath.java	pow	THIS	DfpMath	0	RET	x.classify() == $.Dfp.INFINITE
2166	380	4	DfpMath.java	pow	x	Dfp	0	RET	$.classify() == Dfp.INFINITE
2167	381	6	DfpMath.java	pow	invert	boolean	1	RET	$
2168	382	8	DfpMath.java	pow	THIS	DfpMath	1	RET	y.classify() == $.Dfp.FINITE
2168	382	8	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
2168	382	8	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
2168	382	8	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
2168	382	8	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
2168	382	8	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
2169	383	10	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2169	383	10	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2170	391	10	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2170	391	10	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2171	400	8	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2171	400	8	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2172	408	4	DfpMath.java	pow	invert	boolean	0	RET	$
2172	408	4	DfpMath.java	pow	y	Dfp	0	RET	$.rint().equals($)
2173	413	4	DfpMath.java	pow	x	Dfp	1	DEF	y.greaterThan($.newInstance(-100000000))
2173	413	4	DfpMath.java	pow	x	Dfp	1	DEF	y.lessThan($.newInstance(100000000))
2173	413	4	DfpMath.java	pow	y	Dfp	1	DEF	$.greaterThan(x.newInstance(-100000000))
2173	413	4	DfpMath.java	pow	y	Dfp	1	DEF	$.lessThan(x.newInstance(100000000))
2174	417	6	DfpMath.java	pow	v	Dfp	1	DEF	$.unequal(zero)
2174	417	6	DfpMath.java	pow	zero	Dfp	1	DEF	v.unequal($)
2175	432	4	DfpMath.java	pow	zero	Dfp	0	DEF	y.remainder(two).equals($)
2175	432	4	DfpMath.java	pow	two	Dfp	0	DEF	y.remainder($).equals(zero)
2175	432	4	DfpMath.java	pow	invert	boolean	0	DEF	$
2175	432	4	DfpMath.java	pow	y	Dfp	0	DEF	$.remainder(two).equals(zero)
2175	432	4	DfpMath.java	pow	y	Dfp	0	DEF	$.rint().equals($)
5640	449	4	DfpMath.java	sinInternal	i	int	0	NIL-FOR	$ < 90
2176	454	6	DfpMath.java	sinInternal	y	Dfp	0	DEF	$.equals(py)
2176	454	6	DfpMath.java	sinInternal	py	Dfp	0	DEF	y.equals($)
5641	474	4	DfpMath.java	cosInternal	i	int	0	NIL-FOR	$ < 90
2177	479	6	DfpMath.java	cosInternal	y	Dfp	0	DEF	$.equals(py)
2177	479	6	DfpMath.java	cosInternal	py	Dfp	0	DEF	y.equals($)
2178	496	4	DfpMath.java	sin	zero	Dfp	0	DEF	x.lessThan($)
2178	496	4	DfpMath.java	sin	x	Dfp	0	DEF	$.lessThan(zero)
2179	500	4	DfpMath.java	sin	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
2179	500	4	DfpMath.java	sin	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
2180	504	4	DfpMath.java	sin	pi	Dfp	1	DEF	x.lessThan($.divide(4))
2180	504	4	DfpMath.java	sin	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
2181	517	4	DfpMath.java	sin	neg	boolean	0	DEF	$
2182	532	4	DfpMath.java	cos	zero	Dfp	0	DEF	x.lessThan($)
2182	532	4	DfpMath.java	cos	x	Dfp	0	DEF	$.lessThan(zero)
2183	535	4	DfpMath.java	cos	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
2183	535	4	DfpMath.java	cos	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
2184	540	4	DfpMath.java	cos	pi	Dfp	1	DEF	x.lessThan($.divide(4))
2184	540	4	DfpMath.java	cos	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
2185	553	4	DfpMath.java	cos	neg	boolean	0	DEF	$
5642	575	4	DfpMath.java	atanInternal	i	int	0	NIL-FOR	$ < 90
2186	580	6	DfpMath.java	atanInternal	y	Dfp	0	DEF	$.equals(py)
2186	580	6	DfpMath.java	atanInternal	py	Dfp	0	DEF	y.equals($)
2187	602	4	DfpMath.java	atan	zero	Dfp	0	DEF	x.lessThan($)
2187	602	4	DfpMath.java	atan	x	Dfp	0	DEF	$.lessThan(zero)
2188	606	4	DfpMath.java	atan	one	Dfp	0	DEF	x.greaterThan($)
2188	606	4	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(one)
2189	610	4	DfpMath.java	atan	ty	Dfp	0	DEF	x.greaterThan($)
2189	610	4	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(ty)
2190	624	4	DfpMath.java	atan	sub	boolean	0	DEF	$
2191	627	4	DfpMath.java	atan	recp	boolean	0	DEF	$
2192	630	4	DfpMath.java	atan	neg	boolean	0	DEF	$
2193	651	4	DfpMath.java	acos	a	Dfp	0	DEF	$.lessThan($.getZero())
2194	656	4	DfpMath.java	acos	negative	boolean	0	DEF	$
1585	56	4	DiagonalMatrix.java	createMatrix	rowDimension	int	0	DimensionMismatchException	$ != columnDimension
1585	56	4	DiagonalMatrix.java	createMatrix	columnDimension	int	0	DimensionMismatchException	rowDimension != $
5431	77	4	DiagonalMatrix.java	add	i	int	0	NIL-FOR	$ < dim
5431	77	4	DiagonalMatrix.java	add	dim	int	0	NIL-FOR	i < $
5432	92	4	DiagonalMatrix.java	subtract	i	int	0	NIL-FOR	$ < dim
5432	92	4	DiagonalMatrix.java	subtract	dim	int	0	NIL-FOR	i < $
5433	107	4	DiagonalMatrix.java	multiply	i	int	0	NIL-FOR	$ < dim
5433	107	4	DiagonalMatrix.java	multiply	dim	int	0	NIL-FOR	i < $
1586	119	4	DiagonalMatrix.java	multiply	m	RealMatrix	1	RET	$ instanceof DiagonalMatrix
5434	127	6	DiagonalMatrix.java	multiply	r	int	0	NIL-FOR	$ < nRows
5434	127	6	DiagonalMatrix.java	multiply	nRows	int	0	NIL-FOR	r < $
5435	128	8	DiagonalMatrix.java	multiply	c	int	0	NIL-FOR	$ < nCols
5435	128	8	DiagonalMatrix.java	multiply	nCols	int	0	NIL-FOR	c < $
5436	141	4	DiagonalMatrix.java	getData	i	int	0	NIL-FOR	$ < dim
5436	141	4	DiagonalMatrix.java	getData	dim	int	0	NIL-FOR	i < $
1587	165	4	DiagonalMatrix.java	setEntry	row	int	1	DEF	$ == column
1587	165	4	DiagonalMatrix.java	setEntry	column	int	1	DEF	row == $
1588	178	4	DiagonalMatrix.java	addToEntry	row	int	1	DEF	$ == column
1588	178	4	DiagonalMatrix.java	addToEntry	column	int	1	DEF	row == $
1589	190	4	DiagonalMatrix.java	multiplyEntry	row	int	0	DEF	$ == column
1589	190	4	DiagonalMatrix.java	multiplyEntry	column	int	0	DEF	row == $
1590	225	4	DiagonalMatrix.java	ensureZero	THIS	DiagonalMatrix	0	NumberIsTooLargeException	$.Precision.equals(0.0,value,1)
1590	225	4	DiagonalMatrix.java	ensureZero	value	double	0	NumberIsTooLargeException	Precision.equals(0.0,$,1)
6558	49	4	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
6558	49	4	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
6559	50	6	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n - i
6559	50	6	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n - $
6559	50	6	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $ - i
5799	80	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < $.mainSetDimension
5799	80	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
2396	97	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
2396	97	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
2397	140	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
2398	141	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
5747	147	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
5747	147	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2399	166	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	1	DEF	$.previousState != null
2399	166	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
5748	167	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
5748	167	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
5749	173	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
5749	173	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
5784	121	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < $.mainSetDimension
5784	121	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
2454	132	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
2391	215	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
2391	215	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
5733	223	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
5733	223	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
5734	228	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
5734	228	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
5735	248	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
5735	248	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
5736	252	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
5736	252	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
2392	268	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
2393	269	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
5737	271	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < 7
5738	276	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
5738	276	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
5739	292	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < D.$.length
5739	292	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < D.length
2394	307	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	1	DEF	$.previousState != null
2394	307	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
5740	308	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
5740	308	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
5741	314	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
5741	314	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2395	324	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
5742	330	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
5742	330	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
5743	335	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
5743	335	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
5744	340	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
5744	340	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
5745	360	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < dimension
5745	360	4	DormandPrince853StepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	i < $
5746	376	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
5746	376	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
5483	31	4	DoublePoint.java	DoublePoint	THIS	DoublePoint	0	NIL-FOR	i < point.$.length
5483	31	4	DoublePoint.java	DoublePoint	i	int	0	NIL-FOR	$ < point.length
5483	31	4	DoublePoint.java	DoublePoint	point	int[]	0	NIL-FOR	i < $.length
1632	45	4	DoublePoint.java	equals	other	Object	0	RET	$ instanceof DoublePoint
0	16	4	Dumper.java	write	message	String	0	RET	$ == null
1	20	4	Dumper.java	write	file	File	0	RET	$.exists()
2	29	4	Dumper.java	write	file	File	0	RET	($.length() >> 30) > MAX_OUTPUT_FILE_SIZE
3	48	6	Dumper.java	write	bufferedWriter	BufferedWriter	0	DEF	$ != null
1277	76	4	EigenDecomposition.java	EigenDecomposition	THIS	EigenDecomposition	1	DEF	$.isSymmetric
4907	110	4	EigenDecomposition.java	EigenDecomposition	i	int	0	NIL-FOR	$ < size
4907	110	4	EigenDecomposition.java	EigenDecomposition	size	int	0	NIL-FOR	i < $
1278	131	4	EigenDecomposition.java	getV	THIS	EigenDecomposition	0	DEF	$.cachedV == null
4908	134	6	EigenDecomposition.java	getV	k	int	0	NIL-FOR	$ < m
4908	134	6	EigenDecomposition.java	getV	m	int	0	NIL-FOR	k < $
1279	147	4	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	DEF	$.cachedD == null
4909	149	6	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	NIL-FOR	i < $.imagEigenvalues.$.length
4909	149	6	EigenDecomposition.java	getD	i	int	0	NIL-FOR	$ < imagEigenvalues.length
1280	150	8	EigenDecomposition.java	getD	THIS	EigenDecomposition	1	DEF	$.Precision.compareTo($.imagEigenvalues[i],0.0,EPSILON) > 0
1280	150	8	EigenDecomposition.java	getD	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$],0.0,EPSILON) > 0
1281	154	10	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	DEF	$.Precision.compareTo($.imagEigenvalues[i],0.0,EPSILON) < 0
1281	154	10	EigenDecomposition.java	getD	i	int	0	DEF	Precision.compareTo(imagEigenvalues[$],0.0,EPSILON) < 0
1282	167	4	EigenDecomposition.java	getVT	THIS	EigenDecomposition	0	DEF	$.cachedVt == null
4910	170	6	EigenDecomposition.java	getVT	k	int	0	NIL-FOR	$ < m
4910	170	6	EigenDecomposition.java	getVT	m	int	0	NIL-FOR	k < $
4911	182	4	EigenDecomposition.java	hasComplexEigenvalues	THIS	EigenDecomposition	0	NIL-FOR	i < $.imagEigenvalues.$.length
4911	182	4	EigenDecomposition.java	hasComplexEigenvalues	i	int	0	NIL-FOR	$ < imagEigenvalues.length
1283	183	6	EigenDecomposition.java	hasComplexEigenvalues	THIS	EigenDecomposition	0	RET	$.Precision.equals($.imagEigenvalues[i],0.0,EPSILON)
1283	183	6	EigenDecomposition.java	hasComplexEigenvalues	i	int	0	RET	Precision.equals(imagEigenvalues[$],0.0,EPSILON)
1284	258	4	EigenDecomposition.java	getSquareRoot	THIS	EigenDecomposition	0	MathUnsupportedOperationException	$.isSymmetric
4912	262	4	EigenDecomposition.java	getSquareRoot	THIS	EigenDecomposition	0	NIL-FOR	i < $.realEigenvalues.$.length
4912	262	4	EigenDecomposition.java	getSquareRoot	i	int	0	NIL-FOR	$ < realEigenvalues.length
1285	264	6	EigenDecomposition.java	getSquareRoot	eigen	double	0	MathUnsupportedOperationException	$ <= 0
1286	280	4	EigenDecomposition.java	getSolver	THIS	EigenDecomposition	0	MathUnsupportedOperationException	$.hasComplexEigenvalues()
4913	428	4	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n - 1
4913	428	4	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $ - 1
4914	435	4	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
4914	435	4	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1287	436	6	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	$.FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1287	436	6	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1287	436	6	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1288	439	6	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	$.FastMath.abs(e[i]) > maxAbsoluteValue
1288	439	6	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) > maxAbsoluteValue
1288	439	6	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) > maxAbsoluteValue
1288	439	6	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) > $
1289	443	4	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$ != 0
4915	444	6	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
4915	444	6	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1290	445	8	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	$.FastMath.abs($.realEigenvalues[i]) <= $.Precision.EPSILON * maxAbsoluteValue
1290	445	8	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) <= Precision.EPSILON * maxAbsoluteValue
1290	445	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * $
1291	448	8	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	$.FastMath.abs(e[i]) <= $.Precision.EPSILON * maxAbsoluteValue
1291	448	8	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) <= Precision.EPSILON * maxAbsoluteValue
1291	448	8	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) <= Precision.EPSILON * maxAbsoluteValue
1291	448	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) <= Precision.EPSILON * $
4916	453	4	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
4916	453	4	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
4917	456	6	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-DOWHILE	$ != j
4917	456	6	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-DOWHILE	m != $
4918	457	8	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-FOR	$ < n - 1
4918	457	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	m < $ - 1
1292	459	10	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	$.FastMath.abs(e[m]) + delta == delta
1292	459	10	EigenDecomposition.java	findEigenVectors	delta	double	0	DEF	FastMath.abs(e[m]) + $ == $
1292	459	10	EigenDecomposition.java	findEigenVectors	m	int	0	DEF	FastMath.abs(e[$]) + delta == delta
1292	459	10	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[m]) + delta == delta
1293	463	8	EigenDecomposition.java	findEigenVectors	m	int	0	MaxCountExceededException	$ != j
1293	463	8	EigenDecomposition.java	findEigenVectors	j	int	0	MaxCountExceededException	m != $
1294	464	10	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	MaxCountExceededException	its == $.maxIter
1294	464	10	EigenDecomposition.java	findEigenVectors	its	int	0	MaxCountExceededException	$ == maxIter
1295	470	10	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	$ < 0.0
4919	480	10	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ >= j
4919	480	10	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	i >= $
1296	483	12	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	1	DEF	$.FastMath.abs(p) >= $.FastMath.abs(q)
1296	483	12	EigenDecomposition.java	findEigenVectors	p	double	1	DEF	FastMath.abs($) >= FastMath.abs(q)
1296	483	12	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	FastMath.abs(p) >= FastMath.abs($)
1297	497	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	e[$ + 1] == 0.0
1297	497	12	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	$[i + 1] == 0.0
4920	507	12	EigenDecomposition.java	findEigenVectors	ia	int	0	NIL-FOR	$ < n
4920	507	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	ia < $
1298	513	10	EigenDecomposition.java	findEigenVectors	t	double	0	DEF	$ == 0.0
1298	513	10	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	$ >= j
1298	513	10	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	i >= $
4921	523	4	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
4921	523	4	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
4922	526	6	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
4922	526	6	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
1299	527	8	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	$.realEigenvalues[j] > p
1299	527	8	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	realEigenvalues[$] > p
1299	527	8	EigenDecomposition.java	findEigenVectors	p	double	0	DEF	realEigenvalues[j] > $
1300	532	6	EigenDecomposition.java	findEigenVectors	k	int	0	DEF	$ != i
1300	532	6	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	k != $
4923	535	8	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
4923	535	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
4924	543	4	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
4924	543	4	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1301	544	6	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	$.FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1301	544	6	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1301	544	6	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1302	548	4	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$ != 0.0
4925	549	6	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
4925	549	6	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1303	550	8	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	$.FastMath.abs($.realEigenvalues[i]) < $.Precision.EPSILON * maxAbsoluteValue
1303	550	8	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) < Precision.EPSILON * maxAbsoluteValue
1303	550	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * $
4926	557	4	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
4926	557	4	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
4927	558	6	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
4927	558	6	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
4928	574	4	EigenDecomposition.java	transformToSchur	THIS	EigenDecomposition	0	NIL-FOR	i < $.realEigenvalues.$.length
4928	574	4	EigenDecomposition.java	transformToSchur	i	int	0	NIL-FOR	$ < realEigenvalues.length
1304	575	6	EigenDecomposition.java	transformToSchur	THIS	EigenDecomposition	1	DEF	i == ($.realEigenvalues.$.length - 1)
1304	575	6	EigenDecomposition.java	transformToSchur	THIS	EigenDecomposition	1	DEF	$.Precision.equals(matT[i + 1][i],0.0,EPSILON)
1304	575	6	EigenDecomposition.java	transformToSchur	i	int	1	DEF	$ == (realEigenvalues.length - 1)
1304	575	6	EigenDecomposition.java	transformToSchur	i	int	1	DEF	Precision.equals(matT[$ + 1][$],0.0,EPSILON)
1304	575	6	EigenDecomposition.java	transformToSchur	matT	double[][]	1	DEF	Precision.equals($[i + 1][i],0.0,EPSILON)
4929	612	4	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
4929	612	4	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
4930	613	6	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
4930	613	6	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
1305	617	4	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	0	MathArithmeticException	$.Precision.equals(norm,0.0,EPSILON)
1305	617	4	EigenDecomposition.java	findEigenVectorsFromSchur	norm	double	0	MathArithmeticException	Precision.equals($,0.0,EPSILON)
4931	623	4	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	$ >= 0
1306	626	6	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	$.Precision.equals(q,0.0)
1306	626	6	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	1	DEF	Precision.equals($,0.0)
4932	629	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ >= 0
4933	632	10	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
4933	632	10	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1307	635	10	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	$.Precision.compareTo($.imagEigenvalues[i],0.0,EPSILON) < 0.0
1307	635	10	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$],0.0,EPSILON) < 0.0
1308	641	12	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	$.Precision.equals($.imagEigenvalues[i],0.0)
1308	641	12	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.equals(imagEigenvalues[$],0.0)
1309	642	14	EigenDecomposition.java	findEigenVectorsFromSchur	w	double	1	DEF	$ != 0.0
1310	655	14	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	$.FastMath.abs(x) > $.FastMath.abs(z)
1310	655	14	EigenDecomposition.java	findEigenVectorsFromSchur	x	double	1	DEF	FastMath.abs($) > FastMath.abs(z)
1310	655	14	EigenDecomposition.java	findEigenVectorsFromSchur	z	double	1	DEF	FastMath.abs(x) > FastMath.abs($)
1311	663	12	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	0	DEF	($.Precision.EPSILON * t) * t > 1
1311	663	12	EigenDecomposition.java	findEigenVectorsFromSchur	t	double	0	DEF	(Precision.EPSILON * $) * $ > 1
4934	664	14	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
4934	664	14	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1312	672	8	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	0	DEF	$ < 0.0
1313	674	10	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	$.FastMath.abs(matrixT[idx][idx - 1]) > $.FastMath.abs(matrixT[idx - 1][idx])
1313	674	10	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	1	DEF	FastMath.abs(matrixT[$][$ - 1]) > FastMath.abs(matrixT[$ - 1][$])
1313	674	10	EigenDecomposition.java	findEigenVectorsFromSchur	matrixT	double[][]	1	DEF	FastMath.abs($[idx][idx - 1]) > FastMath.abs($[idx - 1][idx])
4935	685	10	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ >= 0
4936	688	12	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
4936	688	12	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1314	693	12	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	$.Precision.compareTo($.imagEigenvalues[i],0.0,EPSILON) < 0.0
1314	693	12	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$],0.0,EPSILON) < 0.0
1315	700	14	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	$.Precision.equals($.imagEigenvalues[i],0.0)
1315	700	14	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.equals(imagEigenvalues[$],0.0)
1316	710	16	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	0	DEF	$.Precision.equals(vr,0.0)
1316	710	16	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	0	DEF	$.Precision.equals(vi,0.0)
1316	710	16	EigenDecomposition.java	findEigenVectorsFromSchur	vr	double	0	DEF	Precision.equals($,0.0)
1316	710	16	EigenDecomposition.java	findEigenVectorsFromSchur	vi	double	0	DEF	Precision.equals($,0.0)
1317	716	16	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	$.FastMath.abs(x) > ($.FastMath.abs(z) + $.FastMath.abs(q))
1317	716	16	EigenDecomposition.java	findEigenVectorsFromSchur	x	double	1	DEF	FastMath.abs($) > (FastMath.abs(z) + FastMath.abs(q))
1317	716	16	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	1	DEF	FastMath.abs(x) > (FastMath.abs(z) + FastMath.abs($))
1317	716	16	EigenDecomposition.java	findEigenVectorsFromSchur	z	double	1	DEF	FastMath.abs(x) > (FastMath.abs($) + FastMath.abs(q))
1318	727	14	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	0	DEF	($.Precision.EPSILON * t) * t > 1
1318	727	14	EigenDecomposition.java	findEigenVectorsFromSchur	t	double	0	DEF	(Precision.EPSILON * $) * $ > 1
4937	728	16	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
4937	728	16	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
4938	738	4	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
4938	738	4	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
1319	739	6	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	DEF	$ < 0 | $ > n - 1
1319	739	6	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	DEF	i < 0 | i > $ - 1
4939	740	8	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
4939	740	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
4940	745	4	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ >= 0
4941	746	6	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ <= n - 1
4941	746	6	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i <= $ - 1
4942	748	8	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	0	NIL-FOR	k <= $.FastMath.min(j,n - 1)
4942	748	8	EigenDecomposition.java	findEigenVectorsFromSchur	k	int	0	NIL-FOR	$ <= FastMath.min(j,n - 1)
4942	748	8	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	k <= FastMath.min($,n - 1)
4942	748	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	k <= FastMath.min(j,$ - 1)
4943	756	4	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
4943	756	4	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
4944	757	6	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
4944	757	6	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
6123	54	4	ElitisticListPopulation.java	nextGeneration	i	int	0	NIL-FOR	$ < oldChromosomes.size()
6123	54	4	ElitisticListPopulation.java	nextGeneration	oldChromosomes	List<Chromosome>	0	NIL-FOR	i < $.size()
2912	65	4	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ > 1
2912	65	4	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ < 0
5695	140	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
5696	143	6	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
2364	144	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
2364	144	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2365	147	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2366	149	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance == null
5697	150	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
5697	150	12	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
5697	150	12	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
5698	155	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
5698	155	12	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
5698	155	12	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
2367	163	8	EmbeddedRungeKuttaIntegrator.java	integrate	forward	boolean	1	DEF	$
2368	164	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize >= t
2368	164	10	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize >= $
2369	169	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize <= t
2369	169	10	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize <= $
5699	173	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
5699	173	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
5700	174	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
5700	174	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
5700	174	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
5701	176	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
5701	176	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
5702	183	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
5702	183	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
5702	183	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
5703	185	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
5703	185	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
2370	191	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
2371	201	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.isLastStep
2372	203	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
2373	213	8	EmbeddedRungeKuttaIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
463	168	6	EmpiricalDistribution.java	load	THIS	EmpiricalDistribution	0	ZeroException	$.sampleStats.getN() == 0
464	316	4	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	DEF	$.binStats.isEmpty()
4511	319	4	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
4511	319	4	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
4512	326	4	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount - 1
4512	326	4	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount - 1
465	345	4	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	MathIllegalStateException	$.loaded
4513	349	4	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
4513	349	4	EmpiricalDistribution.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
466	350	6	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	RET	x <= $.upperBounds[i]
466	350	6	EmpiricalDistribution.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
466	350	6	EmpiricalDistribution.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
467	352	8	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
468	353	10	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
4514	393	4	EmpiricalDistribution.java	getUpperBounds	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount - 1
4514	393	4	EmpiricalDistribution.java	getUpperBounds	i	int	0	NIL-FOR	$ < binCount - 1
469	437	4	EmpiricalDistribution.java	density	THIS	EmpiricalDistribution	0	RET	x < $.min
469	437	4	EmpiricalDistribution.java	density	THIS	EmpiricalDistribution	0	RET	x > $.max
469	437	4	EmpiricalDistribution.java	density	x	double	0	RET	$ < min
469	437	4	EmpiricalDistribution.java	density	x	double	0	RET	$ > max
470	449	4	EmpiricalDistribution.java	cumulativeProbability	THIS	EmpiricalDistribution	1	RET	x < $.min
470	449	4	EmpiricalDistribution.java	cumulativeProbability	x	double	1	RET	$ < min
471	453	6	EmpiricalDistribution.java	cumulativeProbability	THIS	EmpiricalDistribution	0	RET	x >= $.max
471	453	6	EmpiricalDistribution.java	cumulativeProbability	x	double	0	RET	$ >= max
472	472	4	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
472	472	4	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
473	475	4	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
474	478	4	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
4515	482	4	EmpiricalDistribution.java	inverseCumulativeProbability	THIS	EmpiricalDistribution	0	NIL-WHILE	$.cumBinP(i) < p
4515	482	4	EmpiricalDistribution.java	inverseCumulativeProbability	i	int	0	NIL-WHILE	cumBinP($) < p
4515	482	4	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumBinP(i) < $
475	493	4	EmpiricalDistribution.java	inverseCumulativeProbability	pCrit	double	0	RET	$ <= 0
5554	64	4	EnumeratedDistribution.java	EnumeratedDistribution	i	int	0	NIL-FOR	$ < pmf.size()
5554	64	4	EnumeratedDistribution.java	EnumeratedDistribution	pmf	List<Pair<T,Double>>	0	NIL-FOR	i < $.size()
1871	68	6	EnumeratedDistribution.java	EnumeratedDistribution	p	double	0	NotPositiveException	$ < 0
1872	71	6	EnumeratedDistribution.java	EnumeratedDistribution	p	double	0	NotFiniteNumberException	Double.isInfinite($)
1873	74	6	EnumeratedDistribution.java	EnumeratedDistribution	p	double	0	NotANumberException	Double.isNaN($)
5555	95	4	EnumeratedDistribution.java	probability	THIS	EnumeratedDistribution	0	NIL-FOR	i < $.probabilities.$.length
5555	95	4	EnumeratedDistribution.java	probability	i	int	0	NIL-FOR	$ < probabilities.length
1874	96	6	EnumeratedDistribution.java	probability	THIS	EnumeratedDistribution	0	DEF	$.singletons.get(i) == null
1874	96	6	EnumeratedDistribution.java	probability	THIS	EnumeratedDistribution	0	DEF	x.equals($.singletons.get(i))
1874	96	6	EnumeratedDistribution.java	probability	i	int	0	DEF	singletons.get($) == null
1874	96	6	EnumeratedDistribution.java	probability	i	int	0	DEF	x.equals(singletons.get($))
1874	96	6	EnumeratedDistribution.java	probability	x	T	0	DEF	$ != null
1874	96	6	EnumeratedDistribution.java	probability	x	T	0	DEF	$ == null
1874	96	6	EnumeratedDistribution.java	probability	x	T	0	DEF	$.equals(singletons.get(i))
5556	108	4	EnumeratedDistribution.java	getPmf	THIS	EnumeratedDistribution	0	NIL-FOR	i < $.probabilities.$.length
5556	108	4	EnumeratedDistribution.java	getPmf	i	int	0	NIL-FOR	$ < probabilities.length
5557	120	4	EnumeratedDistribution.java	sample	THIS	EnumeratedDistribution	0	NIL-FOR	i < $.probabilities.$.length
5557	120	4	EnumeratedDistribution.java	sample	i	int	0	NIL-FOR	$ < probabilities.length
1875	122	6	EnumeratedDistribution.java	sample	randomValue	double	0	RET	$ < sum
1875	122	6	EnumeratedDistribution.java	sample	sum	double	0	RET	randomValue < $
1876	135	4	EnumeratedDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
5558	139	4	EnumeratedDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
5558	139	4	EnumeratedDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1877	153	4	EnumeratedDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
1878	156	4	EnumeratedDistribution.java	sample	array	T[]	0	NullArgumentException	$ == null
1879	160	4	EnumeratedDistribution.java	sample	THIS	EnumeratedDistribution	1	DEF	array.$.length < sampleSize
1879	160	4	EnumeratedDistribution.java	sample	sampleSize	int	1	DEF	array.length < $
1879	160	4	EnumeratedDistribution.java	sample	array	T[]	1	DEF	$.length < sampleSize
5559	167	4	EnumeratedDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
5559	167	4	EnumeratedDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1806	52	4	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	THIS	EnumeratedIntegerDistribution	0	DimensionMismatchException	singletons.$.length != probabilities.$.length
1806	52	4	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	singletons	int[]	0	DimensionMismatchException	$.length != probabilities.length
1806	52	4	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	probabilities	double[]	0	DimensionMismatchException	singletons.length != $.length
5531	56	4	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	THIS	EnumeratedIntegerDistribution	0	NIL-FOR	i < singletons.$.length
5531	56	4	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	i	int	0	NIL-FOR	$ < singletons.length
5531	56	4	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	singletons	int[]	0	NIL-FOR	i < $.length
1807	73	6	EnumeratedIntegerDistribution.java	cumulativeProbability	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getKey() <= x
1807	73	6	EnumeratedIntegerDistribution.java	cumulativeProbability	x	int	0	DEF	sample.getKey() <= $
1808	110	6	EnumeratedIntegerDistribution.java	getSupportLowerBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getValue() > 0
1808	110	6	EnumeratedIntegerDistribution.java	getSupportLowerBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getKey() < min
1808	110	6	EnumeratedIntegerDistribution.java	getSupportLowerBound	min	int	0	DEF	sample.getKey() < $
1809	123	6	EnumeratedIntegerDistribution.java	getSupportUpperBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getKey() > max
1809	123	6	EnumeratedIntegerDistribution.java	getSupportUpperBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getValue() > 0
1809	123	6	EnumeratedIntegerDistribution.java	getSupportUpperBound	max	int	0	DEF	sample.getKey() > $
1824	52	4	EnumeratedRealDistribution.java	EnumeratedRealDistribution	THIS	EnumeratedRealDistribution	0	DimensionMismatchException	singletons.$.length != probabilities.$.length
1824	52	4	EnumeratedRealDistribution.java	EnumeratedRealDistribution	singletons	double[]	0	DimensionMismatchException	$.length != probabilities.length
1824	52	4	EnumeratedRealDistribution.java	EnumeratedRealDistribution	probabilities	double[]	0	DimensionMismatchException	singletons.length != $.length
5544	56	4	EnumeratedRealDistribution.java	EnumeratedRealDistribution	THIS	EnumeratedRealDistribution	0	NIL-FOR	i < singletons.$.length
5544	56	4	EnumeratedRealDistribution.java	EnumeratedRealDistribution	i	int	0	NIL-FOR	$ < singletons.length
5544	56	4	EnumeratedRealDistribution.java	EnumeratedRealDistribution	singletons	double[]	0	NIL-FOR	i < $.length
1825	81	6	EnumeratedRealDistribution.java	cumulativeProbability	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getKey() <= x
1825	81	6	EnumeratedRealDistribution.java	cumulativeProbability	x	double	0	DEF	sample.getKey() <= $
1826	118	6	EnumeratedRealDistribution.java	getSupportLowerBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getKey() < min
1826	118	6	EnumeratedRealDistribution.java	getSupportLowerBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getValue() > 0
1826	118	6	EnumeratedRealDistribution.java	getSupportLowerBound	min	double	0	DEF	sample.getKey() < $
1827	131	6	EnumeratedRealDistribution.java	getSupportUpperBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getKey() > max
1827	131	6	EnumeratedRealDistribution.java	getSupportUpperBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getValue() > 0
1827	131	6	EnumeratedRealDistribution.java	getSupportUpperBound	max	double	0	DEF	sample.getKey() > $
2333	53	4	EquationsMapper.java	extractEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
2333	53	4	EquationsMapper.java	extractEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
2334	65	4	EquationsMapper.java	insertEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
2334	65	4	EquationsMapper.java	insertEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
2243	25	4	Erf.java	erf	THIS	Erf	0	RET	$.FastMath.abs(x) > 40
2243	25	4	Erf.java	erf	x	double	0	RET	FastMath.abs($) > 40
2244	40	4	Erf.java	erfc	THIS	Erf	0	RET	$.FastMath.abs(x) > 40
2244	40	4	Erf.java	erfc	x	double	0	RET	FastMath.abs($) > 40
2245	53	4	Erf.java	erf	x1	double	0	RET	$ > x2
2245	53	4	Erf.java	erf	x2	double	0	RET	x1 > $
2246	67	4	Erf.java	erfInv	w	double	1	DEF	$ < 6.25
2247	94	6	Erf.java	erfInv	w	double	1	DEF	$ < 16.0
2248	117	8	Erf.java	erfInv	w	double	1	DEF	Double.isInfinite($)
4424	34	6	EuclideanDoublePoint.java	centroidOf	THIS	EuclideanDoublePoint	0	NIL-FOR	i < centroid.$.length
4424	34	6	EuclideanDoublePoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
4424	34	6	EuclideanDoublePoint.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
4425	38	4	EuclideanDoublePoint.java	centroidOf	THIS	EuclideanDoublePoint	0	NIL-FOR	i < centroid.$.length
4425	38	4	EuclideanDoublePoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
4425	38	4	EuclideanDoublePoint.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
333	53	4	EuclideanDoublePoint.java	equals	other	Object	0	RET	$ instanceof EuclideanDoublePoint
4422	47	6	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
4422	47	6	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
4422	47	6	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
4423	51	4	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
4423	51	4	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
4423	51	4	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
332	60	4	EuclideanIntegerPoint.java	equals	other	Object	0	RET	$ instanceof EuclideanIntegerPoint
2456	36	4	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	1	DEF	$.previousState != null
2456	36	4	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
5794	37	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
5794	37	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
5795	43	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
5795	43	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2289	63	4	EventFilter.java	g	THIS	EventFilter	1	RET	$.forward
2290	65	6	EventFilter.java	g	THIS	EventFilter	1	RET	$.extremeT < t
2290	65	6	EventFilter.java	g	t	double	1	RET	extremeT < $
2291	68	8	EventFilter.java	g	previous	Transformer	0	DEF	next != $
2291	68	8	EventFilter.java	g	next	Transformer	0	DEF	$ != previous
5663	78	8	EventFilter.java	g	i	int	0	NIL-FOR	$ > 0
2292	79	10	EventFilter.java	g	THIS	EventFilter	0	RET	$.updates[i] <= t
2292	79	10	EventFilter.java	g	i	int	0	RET	updates[$] <= t
2292	79	10	EventFilter.java	g	t	double	0	RET	updates[i] <= $
2293	87	6	EventFilter.java	g	THIS	EventFilter	1	RET	t < $.extremeT
2293	87	6	EventFilter.java	g	t	double	1	RET	$ < extremeT
2294	90	8	EventFilter.java	g	previous	Transformer	0	DEF	next != $
2294	90	8	EventFilter.java	g	next	Transformer	0	DEF	$ != previous
5664	100	8	EventFilter.java	g	THIS	EventFilter	0	NIL-FOR	i < $.updates.$.length - 1
5664	100	8	EventFilter.java	g	i	int	0	NIL-FOR	$ < updates.length - 1
2295	101	10	EventFilter.java	g	THIS	EventFilter	0	RET	t <= $.updates[i]
2295	101	10	EventFilter.java	g	i	int	0	RET	t <= updates[$]
2295	101	10	EventFilter.java	g	t	double	0	RET	$ <= updates[i]
2280	148	4	EventState.java	reinitializeBegin	THIS	EventState	0	DEF	$.g0 == 0
2281	182	6	EventState.java	evaluateStep	THIS	EventState	0	RET	$.FastMath.abs(dt) < $.convergence
2281	182	6	EventState.java	evaluateStep	dt	double	0	RET	FastMath.abs($) < convergence
5662	201	6	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
5662	201	6	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
2282	205	8	EventState.java	evaluateStep	THIS	EventState	1	RET	$.g0Positive ^ (gb >= 0)
2282	205	8	EventState.java	evaluateStep	gb	double	1	RET	g0Positive ^ ($ >= 0)
2283	208	10	EventState.java	evaluateStep	THIS	EventState	1	DEF	$.solver instanceof BracketedUnivariateSolver<?>
2284	218	10	EventState.java	evaluateStep	THIS	EventState	1	DEF	$.FastMath.abs(root - ta) <= $.convergence
2284	218	10	EventState.java	evaluateStep	THIS	EventState	1	DEF	Double.isNaN($.previousEventTime)
2284	218	10	EventState.java	evaluateStep	THIS	EventState	1	DEF	$.FastMath.abs(root - $.previousEventTime) <= $.convergence
2284	218	10	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - ta) <= convergence
2284	218	10	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - previousEventTime) <= convergence
2284	218	10	EventState.java	evaluateStep	ta	double	1	DEF	FastMath.abs(root - $) <= convergence
2285	224	12	EventState.java	evaluateStep	THIS	EventState	1	RET	$.FastMath.abs($.previousEventTime - root) > $.convergence
2285	224	12	EventState.java	evaluateStep	THIS	EventState	1	RET	Double.isNaN($.previousEventTime)
2285	224	12	EventState.java	evaluateStep	root	double	1	RET	FastMath.abs(previousEventTime - $) > convergence
2286	263	4	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
2286	263	4	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.FastMath.abs($.pendingEventTime - t) <= $.convergence
2286	263	4	EventState.java	stepAccepted	t	double	1	DEF	FastMath.abs(pendingEventTime - $) <= convergence
2287	287	4	EventState.java	reset	THIS	EventState	0	RET	$.FastMath.abs($.pendingEventTime - t) <= $.convergence
2287	287	4	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
2287	287	4	EventState.java	reset	t	double	0	RET	FastMath.abs(pendingEventTime - $) <= convergence
2288	290	4	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == $.EventHandler.$.Action.RESET_STATE
6498	129	4	ExceptionContext.java	buildMessage	i	int	0	NIL-FOR	$ < len
6498	129	4	ExceptionContext.java	buildMessage	len	int	0	NIL-FOR	i < $
3916	134	6	ExceptionContext.java	buildMessage	count	int	0	DEF	++$ < len
3916	134	6	ExceptionContext.java	buildMessage	len	int	0	DEF	++count < $
6499	169	4	ExceptionContext.java	serializeMessages	i	int	0	NIL-FOR	$ < len
6499	169	4	ExceptionContext.java	serializeMessages	len	int	0	NIL-FOR	i < $
6500	175	6	ExceptionContext.java	serializeMessages	j	int	0	NIL-FOR	$ < aLen
6500	175	6	ExceptionContext.java	serializeMessages	aLen	int	0	NIL-FOR	j < $
3917	176	8	ExceptionContext.java	serializeMessages	j	int	1	DEF	args[$] instanceof Serializable
3917	176	8	ExceptionContext.java	serializeMessages	args	Object[]	1	DEF	$[j] instanceof Serializable
6501	195	4	ExceptionContext.java	deSerializeMessages	i	int	0	NIL-FOR	$ < len
6501	195	4	ExceptionContext.java	deSerializeMessages	len	int	0	NIL-FOR	i < $
6502	200	6	ExceptionContext.java	deSerializeMessages	j	int	0	NIL-FOR	$ < aLen
6502	200	6	ExceptionContext.java	deSerializeMessages	aLen	int	0	NIL-FOR	j < $
3918	217	6	ExceptionContext.java	serializeContext	value	Object	1	DEF	$ instanceof Serializable
6503	234	4	ExceptionContext.java	deSerializeContext	i	int	0	NIL-FOR	$ < len
6503	234	4	ExceptionContext.java	deSerializeContext	len	int	0	NIL-FOR	i < $
2323	63	4	ExpandableStatefulODE.java	getTotalDimension	THIS	ExpandableStatefulODE	1	RET	$.components.isEmpty()
2324	96	4	ExpandableStatefulODE.java	addSecondaryEquations	THIS	ExpandableStatefulODE	1	DEF	$.components.isEmpty()
5668	122	4	ExpandableStatefulODE.java	getSecondaryMappers	THIS	ExpandableStatefulODE	0	NIL-FOR	i < mappers.$.length
5668	122	4	ExpandableStatefulODE.java	getSecondaryMappers	i	int	0	NIL-FOR	$ < mappers.length
5668	122	4	ExpandableStatefulODE.java	getSecondaryMappers	mappers	EquationsMapper[]	0	NIL-FOR	i < $.length
2325	147	4	ExpandableStatefulODE.java	setPrimaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	primaryState.$.length != $.primaryState.length
2325	147	4	ExpandableStatefulODE.java	setPrimaryState	primaryState	double[]	0	DimensionMismatchException	$.length != this.primaryState.length
2326	174	4	ExpandableStatefulODE.java	setSecondaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	secondaryState.$.length != localArray.$.length
2326	174	4	ExpandableStatefulODE.java	setSecondaryState	localArray	double[]	0	DimensionMismatchException	secondaryState.length != $.length
2326	174	4	ExpandableStatefulODE.java	setSecondaryState	secondaryState	double[]	0	DimensionMismatchException	$.length != localArray.length
2327	201	4	ExpandableStatefulODE.java	setCompleteState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	completeState.$.length != $.getTotalDimension()
2327	201	4	ExpandableStatefulODE.java	setCompleteState	completeState	double[]	0	DimensionMismatchException	$.length != getTotalDimension()
1817	80	4	ExponentialDistribution.java	ExponentialDistribution	mean	double	0	NotStrictlyPositiveException	$ <= 0
1818	97	4	ExponentialDistribution.java	density	x	double	0	RET	$ < 0
1819	107	4	ExponentialDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
1820	120	4	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
1820	120	4	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
1821	124	6	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
5542	141	4	ExponentialDistribution.java	sample	u	double	0	NIL-WHILE	$ < 0.5
1822	146	4	ExponentialDistribution.java	sample	u	double	0	RET	$ <= EXPONENTIAL_SA_QI[0]
5543	152	4	ExponentialDistribution.java	sample	u	double	0	NIL-DOWHILE	$ > EXPONENTIAL_SA_QI[i]
5543	152	4	ExponentialDistribution.java	sample	i	int	0	NIL-DOWHILE	u > EXPONENTIAL_SA_QI[$]
1823	155	6	ExponentialDistribution.java	sample	u2	double	0	DEF	$ < umin
1823	155	6	ExponentialDistribution.java	sample	umin	double	0	DEF	u2 < $
1683	75	4	FDistribution.java	FDistribution	numeratorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1684	78	4	FDistribution.java	FDistribution	denominatorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1685	103	4	FDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
1686	138	4	FDistribution.java	getNumericalMean	denominatorDF	double	0	RET	$ > 2
1687	147	4	FDistribution.java	getNumericalVariance	THIS	FDistribution	0	DEF	$.numericalVarianceIsCalculated
1688	159	4	FDistribution.java	calculateNumericalVariance	denominatorDF	double	0	RET	$ > 4
1099	36	4	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	type == $.TransformType.FORWARD
1099	36	4	FastCosineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
1100	37	6	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
1101	45	4	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	1	DEF	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
1102	72	4	FastCosineTransformer.java	fct	THIS	FastCosineTransformer	0	MathIllegalArgumentException	$.ArithmeticUtils.isPowerOfTwo(n)
1102	72	4	FastCosineTransformer.java	fct	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
1103	75	4	FastCosineTransformer.java	fct	n	int	0	RET	$ == 1
4662	84	4	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
4662	84	4	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
4663	97	4	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
4663	97	4	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
4645	54	4	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	NIL-FOR	$ < n
4645	54	4	FastFourierTransformer.java	bitReversalShuffle2	n	int	0	NIL-FOR	i < $
1085	55	6	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	DEF	$ < j
1085	55	6	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	DEF	i < $
4646	64	6	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ <= j
4646	64	6	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ > 0
4646	64	6	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	NIL-WHILE	k <= $
1086	84	6	FastFourierTransformer.java	normalizeTransformedData	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
1086	84	6	FastFourierTransformer.java	normalizeTransformedData	type	TransformType	0	DEF	$ == TransformType.INVERSE
4647	86	8	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
4647	86	8	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
4648	94	0	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
4648	94	0	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
1087	112	0	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataRI.$.length != 2
1087	112	0	FastFourierTransformer.java	transformInPlace	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
1088	117	0	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataR.$.length != dataI.$.length
1088	117	0	FastFourierTransformer.java	transformInPlace	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
1088	117	0	FastFourierTransformer.java	transformInPlace	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
1089	121	0	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	MathIllegalArgumentException	$.ArithmeticUtils.isPowerOfTwo(n)
1089	121	0	FastFourierTransformer.java	transformInPlace	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
1090	124	0	FastFourierTransformer.java	transformInPlace	n	int	1	RET	$ == 1
1091	128	0	FastFourierTransformer.java	transformInPlace	n	int	0	RET	$ == 2
1092	142	0	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	1	DEF	type == $.TransformType.INVERSE
1092	142	0	FastFourierTransformer.java	transformInPlace	type	TransformType	1	DEF	$ == TransformType.INVERSE
4649	143	0	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
4649	143	0	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
4650	166	0	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
4650	166	0	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
4651	190	0	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-WHILE	lastN0 < $
4651	190	0	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-WHILE	$ < n
1093	195	0	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
1093	195	0	FastFourierTransformer.java	transformInPlace	type	TransformType	0	DEF	$ == TransformType.INVERSE
4652	198	0	FastFourierTransformer.java	transformInPlace	destEvenStartIndex	int	0	NIL-FOR	$ < n
4652	198	0	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	destEvenStartIndex < $
4653	202	0	FastFourierTransformer.java	transformInPlace	r	int	0	NIL-FOR	$ < lastN0
4653	202	0	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-FOR	r < $
4654	273	0	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
4654	273	0	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
4654	273	0	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
1094	289	0	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
1094	289	0	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
1094	289	0	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
4655	291	0	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
4655	291	0	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
4655	291	0	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
4656	296	0	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
4656	296	0	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
4656	296	0	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
1095	304	0	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
1095	304	0	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
1095	304	0	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
4657	309	0	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
4657	309	0	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
4657	309	0	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
4657	309	0	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
1104	23	4	FastHadamardTransformer.java	transform	THIS	FastHadamardTransformer	0	RET	type == $.TransformType.FORWARD
1104	23	4	FastHadamardTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
1105	55	4	FastHadamardTransformer.java	fht	THIS	FastHadamardTransformer	0	MathIllegalArgumentException	$.ArithmeticUtils.isPowerOfTwo(n)
1105	55	4	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
4664	60	4	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
4664	60	4	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
4665	64	6	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
4665	64	6	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
4666	68	6	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
4666	68	6	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
1106	84	4	FastHadamardTransformer.java	fht	THIS	FastHadamardTransformer	0	MathIllegalArgumentException	$.ArithmeticUtils.isPowerOfTwo(n)
1106	84	4	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
4667	89	4	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
4667	89	4	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
4668	93	6	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
4668	93	6	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
4669	97	6	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
4669	97	6	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
840	204	4	FastMath.java	doubleHighPart	THIS	FastMath	0	RET	d < $.Precision.SAFE_MIN
840	204	4	FastMath.java	doubleHighPart	THIS	FastMath	0	RET	d > -$.Precision.SAFE_MIN
840	204	4	FastMath.java	doubleHighPart	d	double	0	RET	$ < Precision.SAFE_MIN
840	204	4	FastMath.java	doubleHighPart	d	double	0	RET	$ > -Precision.SAFE_MIN
841	225	4	FastMath.java	cosh	x	double	0	RET	$ != $
842	228	4	FastMath.java	cosh	x	double	1	RET	$ > 20
843	229	6	FastMath.java	cosh	x	double	1	RET	$ >= LOG_MAX_VALUE
844	238	6	FastMath.java	cosh	x	double	0	RET	$ < -20
845	239	8	FastMath.java	cosh	x	double	1	RET	$ <= -LOG_MAX_VALUE
846	249	4	FastMath.java	cosh	x	double	0	DEF	$ < 0.0
847	281	4	FastMath.java	sinh	x	double	0	RET	$ != $
848	284	4	FastMath.java	sinh	x	double	1	RET	$ > 20
849	285	6	FastMath.java	sinh	x	double	1	RET	$ >= LOG_MAX_VALUE
850	294	6	FastMath.java	sinh	x	double	0	RET	$ < -20
851	295	8	FastMath.java	sinh	x	double	1	RET	$ <= -LOG_MAX_VALUE
852	304	4	FastMath.java	sinh	x	double	0	RET	$ == 0
853	307	4	FastMath.java	sinh	x	double	0	DEF	$ < 0.0
854	312	4	FastMath.java	sinh	x	double	1	DEF	$ > 0.25
855	364	4	FastMath.java	sinh	negate	boolean	0	DEF	$
856	376	4	FastMath.java	tanh	x	double	0	RET	$ != $
857	379	4	FastMath.java	tanh	x	double	0	RET	$ > 20.0
858	382	4	FastMath.java	tanh	x	double	0	RET	$ < -20
859	385	4	FastMath.java	tanh	x	double	0	RET	$ == 0
860	388	4	FastMath.java	tanh	x	double	0	DEF	$ < 0.0
861	393	4	FastMath.java	tanh	x	double	1	DEF	$ >= 0.5
862	444	4	FastMath.java	tanh	negate	boolean	0	DEF	$
863	464	4	FastMath.java	asinh	a	double	0	DEF	$ < 0
864	469	4	FastMath.java	asinh	a	double	1	DEF	$ > 0.167
865	474	6	FastMath.java	asinh	a	double	1	DEF	$ > 0.097
866	478	8	FastMath.java	asinh	a	double	1	DEF	$ > 0.036
867	482	10	FastMath.java	asinh	a	double	1	DEF	$ > 0.0036
868	500	4	FastMath.java	atanh	a	double	0	DEF	$ < 0
869	505	4	FastMath.java	atanh	a	double	1	DEF	$ > 0.15
870	510	6	FastMath.java	atanh	a	double	1	DEF	$ > 0.087
871	514	8	FastMath.java	atanh	a	double	1	DEF	$ > 0.031
872	518	10	FastMath.java	atanh	a	double	1	DEF	$ > 0.003
873	587	4	FastMath.java	exp	x	double	1	RET	$ < 0.0
874	589	6	FastMath.java	exp	intVal	int	0	RET	$ > 746
875	590	8	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
876	596	6	FastMath.java	exp	intVal	int	0	RET	$ > 709
877	598	8	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
878	604	6	FastMath.java	exp	intVal	int	0	RET	$ == 709
879	606	8	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
880	619	6	FastMath.java	exp	intVal	int	0	RET	$ > 709
881	620	8	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
882	642	4	FastMath.java	exp	extra	double	1	DEF	$ != 0.0
883	648	4	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
884	669	4	FastMath.java	expm1	x	double	0	RET	$ != $
884	669	4	FastMath.java	expm1	x	double	0	RET	$ == 0.0
885	672	4	FastMath.java	expm1	x	double	0	RET	$ >= 1.0
885	672	4	FastMath.java	expm1	x	double	0	RET	$ <= -1.0
886	675	6	FastMath.java	expm1	x	double	1	RET	$ > 0.0
887	689	4	FastMath.java	expm1	x	double	0	DEF	$ < 0.0
888	741	4	FastMath.java	expm1	negative	boolean	0	DEF	$
889	758	4	FastMath.java	expm1	hiPrecOut	double	0	DEF	$ != null
890	779	4	FastMath.java	log	x	double	0	RET	$ == 0
891	783	4	FastMath.java	log	bits	long	0	RET	($ & 0x8000000000000000L) != 0
891	783	4	FastMath.java	log	x	double	0	RET	$ != 0.0
891	783	4	FastMath.java	log	x	double	0	RET	$ != $
892	784	6	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
893	789	4	FastMath.java	log	x	double	0	RET	$ == Double.POSITIVE_INFINITY
894	790	6	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
895	796	4	FastMath.java	log	bits	long	0	RET	($ & 0x7ff0000000000000L) == 0
896	797	6	FastMath.java	log	x	double	0	RET	$ == 0
897	798	8	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
4639	804	6	FastMath.java	log	bits	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
898	809	4	FastMath.java	log	exp	int	0	RET	$ == -1
898	809	4	FastMath.java	log	exp	int	0	RET	$ == 0
898	809	4	FastMath.java	log	x	double	0	RET	$ > 0.99
898	809	4	FastMath.java	log	x	double	0	RET	$ < 1.01
898	809	4	FastMath.java	log	hiPrec	double[]	0	RET	$ == null
4640	820	6	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
899	844	4	FastMath.java	log	hiPrec	double[]	1	DEF	$ != null
4641	857	6	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
900	906	4	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
901	918	4	FastMath.java	log1p	x	double	0	RET	$ == -1
902	921	4	FastMath.java	log1p	x	double	0	RET	$ == Double.POSITIVE_INFINITY
903	924	4	FastMath.java	log1p	x	double	1	RET	$ < -1e-6
903	924	4	FastMath.java	log1p	x	double	1	RET	$ > 1e-6
904	929	6	FastMath.java	log1p	lores	double	0	RET	Double.isInfinite($)
905	949	4	FastMath.java	log10	lores	double	0	RET	Double.isInfinite($)
906	977	4	FastMath.java	pow	y	double	0	RET	$ == 0.0
907	980	4	FastMath.java	pow	x	double	0	RET	$ != $
908	983	4	FastMath.java	pow	x	double	0	RET	$ == 0
909	985	6	FastMath.java	pow	bits	long	0	RET	($ & 0x8000000000000000L) != 0
910	987	8	FastMath.java	pow	yi	long	0	RET	y == $
910	987	8	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
910	987	8	FastMath.java	pow	y	double	0	RET	$ == yi
910	987	8	FastMath.java	pow	y	double	0	RET	$ < 0
911	990	8	FastMath.java	pow	yi	long	0	RET	y == $
911	990	8	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
911	990	8	FastMath.java	pow	y	double	0	RET	$ == yi
911	990	8	FastMath.java	pow	y	double	0	RET	$ > 0
912	994	6	FastMath.java	pow	y	double	0	RET	$ < 0
913	997	6	FastMath.java	pow	y	double	0	RET	$ > 0
914	1002	4	FastMath.java	pow	x	double	0	RET	$ == Double.POSITIVE_INFINITY
915	1003	6	FastMath.java	pow	y	double	0	RET	$ != $
916	1006	6	FastMath.java	pow	y	double	1	RET	$ < 0.0
917	1013	4	FastMath.java	pow	y	double	0	RET	$ == Double.POSITIVE_INFINITY
918	1014	6	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
919	1017	6	FastMath.java	pow	x	double	1	RET	$ * $ > 1.0
920	1024	4	FastMath.java	pow	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
921	1025	6	FastMath.java	pow	y	double	0	RET	$ != $
922	1028	6	FastMath.java	pow	y	double	0	RET	$ < 0
923	1030	8	FastMath.java	pow	yi	long	0	RET	y == $
923	1030	8	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
923	1030	8	FastMath.java	pow	y	double	0	RET	$ == yi
924	1035	6	FastMath.java	pow	y	double	0	RET	$ > 0
925	1037	8	FastMath.java	pow	yi	long	0	RET	y == $
925	1037	8	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
925	1037	8	FastMath.java	pow	y	double	0	RET	$ == yi
926	1043	4	FastMath.java	pow	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
927	1044	6	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
928	1047	6	FastMath.java	pow	x	double	1	RET	$ * $ < 1.0
929	1054	4	FastMath.java	pow	x	double	0	RET	$ < 0
930	1055	6	FastMath.java	pow	THIS	FastMath	0	RET	y <= -$.TWO_POWER_53
930	1055	6	FastMath.java	pow	THIS	FastMath	0	RET	y >= $.TWO_POWER_53
930	1055	6	FastMath.java	pow	y	double	0	RET	$ <= -TWO_POWER_53
930	1055	6	FastMath.java	pow	y	double	0	RET	$ >= TWO_POWER_53
931	1058	6	FastMath.java	pow	y	double	1	RET	$ == (long)$
932	1067	4	FastMath.java	pow	y	double	1	DEF	$ > -8e298
932	1067	4	FastMath.java	pow	y	double	1	DEF	$ < 8e298
933	1079	4	FastMath.java	pow	lores	double	0	RET	Double.isInfinite($)
934	1109	4	FastMath.java	pow	e	int	1	RET	$ == 0
935	1113	6	FastMath.java	pow	e	int	0	DEF	$ < 0
4642	1127	4	FastMath.java	pow	e	int	0	NIL-WHILE	$ != 0
936	1128	6	FastMath.java	pow	e	int	0	DEF	($ & 0x1) != 0
937	1214	4	FastMath.java	sinQ	xb	double	0	DEF	$ != 0.0
938	1291	4	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
939	1310	4	FastMath.java	tanQ	xb	double	0	DEF	$ != 0.0
940	1312	6	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
941	1336	4	FastMath.java	reducePayneHanek	shift	int	1	DEF	$ != 0
942	1360	4	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
942	1360	4	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
942	1360	4	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
942	1360	4	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
942	1360	4	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
943	1368	4	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
943	1368	4	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
943	1368	4	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
943	1368	4	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
943	1368	4	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
944	1381	4	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
944	1381	4	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
944	1381	4	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
944	1381	4	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
944	1381	4	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
945	1407	4	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
945	1407	4	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
945	1407	4	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
945	1407	4	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
945	1407	4	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
946	1415	4	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
946	1415	4	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
946	1415	4	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
946	1415	4	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
946	1415	4	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
947	1428	4	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
947	1428	4	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
947	1428	4	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
947	1428	4	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
947	1428	4	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
948	1443	4	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
948	1443	4	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
948	1443	4	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
948	1443	4	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
948	1443	4	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
949	1465	4	FastMath.java	sin	x	double	0	DEF	$ < 0
950	1469	4	FastMath.java	sin	xa	double	0	RET	$ == 0.0
951	1471	6	FastMath.java	sin	bits	long	0	RET	$ < 0
952	1476	4	FastMath.java	sin	xa	double	0	RET	$ != $
952	1476	4	FastMath.java	sin	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
953	1479	4	FastMath.java	sin	xa	double	1	DEF	$ > 3294198.0
954	1487	6	FastMath.java	sin	xa	double	0	DEF	$ > 1.5707963267948966
955	1494	4	FastMath.java	sin	negative	boolean	0	DEF	$
956	1518	0	FastMath.java	cos	x	double	0	DEF	$ < 0
957	1521	0	FastMath.java	cos	xa	double	0	RET	$ != $
957	1521	0	FastMath.java	cos	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
958	1525	0	FastMath.java	cos	xa	double	1	DEF	$ > 3294198.0
959	1533	0	FastMath.java	cos	xa	double	0	DEF	$ > 1.5707963267948966
960	1562	0	FastMath.java	tan	x	double	0	DEF	$ < 0
961	1566	0	FastMath.java	tan	xa	double	0	RET	$ == 0.0
962	1568	0	FastMath.java	tan	bits	long	0	RET	$ < 0
963	1573	0	FastMath.java	tan	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
963	1573	0	FastMath.java	tan	xa	double	0	RET	$ != $
964	1577	0	FastMath.java	tan	xa	double	1	DEF	$ > 3294198.0
965	1585	0	FastMath.java	tan	xa	double	0	DEF	$ > 1.5707963267948966
966	1592	0	FastMath.java	tan	xa	double	0	DEF	$ > 1.5
967	1604	0	FastMath.java	tan	quadrant	int	1	DEF	($ & 1) == 0
968	1610	0	FastMath.java	tan	negative	boolean	0	DEF	$
969	1633	0	FastMath.java	atan	xa	double	0	RET	$ == 0.0
970	1636	0	FastMath.java	atan	xa	double	0	DEF	$ < 0
971	1641	0	FastMath.java	atan	xa	double	0	RET	$ > 1.633123935319537E16
972	1644	0	FastMath.java	atan	xa	double	1	DEF	$ < 1
973	1662	0	FastMath.java	atan	idx	int	1	DEF	$ == 0
974	1709	0	FastMath.java	atan	leftPlane	boolean	0	DEF	$
975	1718	0	FastMath.java	atan	negate	boolean	0	DEF	$ ^ leftPlane
975	1718	0	FastMath.java	atan	leftPlane	boolean	0	DEF	negate ^ $
976	1730	0	FastMath.java	atan2	y	double	0	RET	$ != $
976	1730	0	FastMath.java	atan2	x	double	0	RET	$ != $
977	1733	0	FastMath.java	atan2	y	double	0	RET	$ == 0
978	1737	0	FastMath.java	atan2	invx	double	0	RET	$ == 0
979	1738	0	FastMath.java	atan2	x	double	1	RET	$ > 0
980	1745	0	FastMath.java	atan2	invx	double	1	RET	$ < 0
980	1745	0	FastMath.java	atan2	x	double	1	RET	$ < 0
981	1746	0	FastMath.java	atan2	invy	double	1	RET	$ < 0
981	1746	0	FastMath.java	atan2	y	double	1	RET	$ < 0
982	1757	0	FastMath.java	atan2	y	double	0	RET	$ == Double.POSITIVE_INFINITY
983	1758	0	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
984	1761	0	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
985	1766	0	FastMath.java	atan2	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
986	1767	0	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
987	1770	0	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
988	1775	0	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
989	1776	0	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
989	1776	0	FastMath.java	atan2	y	double	0	RET	$ > 0
990	1779	0	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
990	1779	0	FastMath.java	atan2	y	double	0	RET	$ < 0
991	1783	0	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
992	1784	0	FastMath.java	atan2	y	double	0	RET	$ > 0.0
992	1784	0	FastMath.java	atan2	y	double	0	RET	1 / $ > 0.0
993	1787	0	FastMath.java	atan2	y	double	0	RET	$ < 0
993	1787	0	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
994	1791	0	FastMath.java	atan2	x	double	0	RET	$ == 0
995	1792	0	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
995	1792	0	FastMath.java	atan2	y	double	0	RET	$ > 0
996	1795	0	FastMath.java	atan2	y	double	0	RET	$ < 0
996	1795	0	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
997	1800	0	FastMath.java	atan2	r	double	0	RET	Double.isInfinite($)
998	1811	0	FastMath.java	atan2	ra	double	0	DEF	$ == 0
999	1823	0	FastMath.java	asin	x	double	0	RET	$ != $
1000	1826	0	FastMath.java	asin	x	double	0	RET	$ < -1.0
1000	1826	0	FastMath.java	asin	x	double	0	RET	$ > 1.0
1001	1829	0	FastMath.java	asin	x	double	0	RET	$ == 1.0
1002	1832	0	FastMath.java	asin	x	double	0	RET	$ == -1.0
1003	1835	0	FastMath.java	asin	x	double	0	RET	$ == 0.0
1004	1874	0	FastMath.java	acos	x	double	0	RET	$ != $
1005	1877	0	FastMath.java	acos	x	double	0	RET	$ < -1.0
1005	1877	0	FastMath.java	acos	x	double	0	RET	$ > 1.0
1006	1880	0	FastMath.java	acos	x	double	0	RET	$ == -1.0
1007	1883	0	FastMath.java	acos	x	double	0	RET	$ == 1.0
1008	1886	0	FastMath.java	acos	x	double	0	RET	$ == 0
1009	1910	0	FastMath.java	acos	r	double	0	RET	Double.isInfinite($)
1010	1931	0	FastMath.java	cbrt	exponent	int	0	RET	$ == -1023
1011	1932	0	FastMath.java	cbrt	x	double	0	RET	$ == 0
1012	1940	0	FastMath.java	cbrt	exponent	int	0	RET	$ == 1024
1013	1971	0	FastMath.java	cbrt	subnormal	boolean	0	DEF	$
1014	1982	0	FastMath.java	toRadians	x	double	0	RET	$ == 0.0
1014	1982	0	FastMath.java	toRadians	x	double	0	RET	Double.isInfinite($)
1015	1990	0	FastMath.java	toRadians	result	double	0	DEF	$ == 0
1016	2001	0	FastMath.java	toDegrees	x	double	0	RET	Double.isInfinite($)
1016	2001	0	FastMath.java	toDegrees	x	double	0	RET	$ == 0.0
1017	2050	0	FastMath.java	ulp	x	double	0	RET	Double.isInfinite($)
1018	2061	0	FastMath.java	ulp	x	float	0	RET	Float.isInfinite($)
1019	2073	0	FastMath.java	scalb	n	int	0	RET	$ < 1024
1019	2073	0	FastMath.java	scalb	n	int	0	RET	$ > -1023
1020	2076	0	FastMath.java	scalb	d	double	0	RET	$ == 0
1020	2076	0	FastMath.java	scalb	d	double	0	RET	Double.isInfinite($)
1020	2076	0	FastMath.java	scalb	d	double	0	RET	Double.isNaN($)
1021	2079	0	FastMath.java	scalb	n	int	0	RET	$ < -2098
1022	2082	0	FastMath.java	scalb	n	int	0	RET	$ > 2097
1023	2090	0	FastMath.java	scalb	n	int	1	RET	$ < 0
1024	2091	0	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
1025	2095	0	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -53
1026	2099	0	FastMath.java	scalb	mostSignificantLostBit	long	0	DEF	$ != 0
1027	2110	0	FastMath.java	scalb	exponent	int	1	RET	$ == 0
4643	2111	0	FastMath.java	scalb	mantissa	long	0	NIL-WHILE	($ >>> 52) != 1
1028	2117	0	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
1029	2125	0	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
1030	2141	0	FastMath.java	scalb	n	int	0	RET	$ > -127
1030	2141	0	FastMath.java	scalb	n	int	0	RET	$ < 128
1031	2144	0	FastMath.java	scalb	f	float	0	RET	$ == 0f
1031	2144	0	FastMath.java	scalb	f	float	0	RET	Float.isInfinite($)
1031	2144	0	FastMath.java	scalb	f	float	0	RET	Float.isNaN($)
1032	2147	0	FastMath.java	scalb	n	int	0	RET	$ < -277
1033	2150	0	FastMath.java	scalb	n	int	0	RET	$ > 276
1034	2158	0	FastMath.java	scalb	n	int	1	RET	$ < 0
1035	2159	0	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
1036	2163	0	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -24
1037	2167	0	FastMath.java	scalb	mostSignificantLostBit	int	0	DEF	$ != 0
1038	2178	0	FastMath.java	scalb	exponent	int	1	RET	$ == 0
4644	2179	0	FastMath.java	scalb	mantissa	int	0	NIL-WHILE	($ >>> 23) != 1
1039	2185	0	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
1040	2193	0	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
1041	2209	0	FastMath.java	nextAfter	d	double	1	RET	Double.isNaN($)
1041	2209	0	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
1042	2213	0	FastMath.java	nextAfter	d	double	1	RET	$ == direction
1042	2213	0	FastMath.java	nextAfter	direction	double	1	RET	d == $
1043	2217	0	FastMath.java	nextAfter	d	double	1	RET	Double.isInfinite($)
1044	2221	0	FastMath.java	nextAfter	d	double	0	RET	$ == 0
1045	2229	0	FastMath.java	nextAfter	sign	long	1	RET	(direction < d) ^ ($ == 0L)
1045	2229	0	FastMath.java	nextAfter	d	double	1	RET	(direction < $) ^ (sign == 0L)
1045	2229	0	FastMath.java	nextAfter	direction	double	1	RET	($ < d) ^ (sign == 0L)
1046	2243	0	FastMath.java	nextAfter	f	float	1	RET	Double.isNaN($)
1046	2243	0	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
1047	2247	0	FastMath.java	nextAfter	f	float	1	RET	$ == direction
1047	2247	0	FastMath.java	nextAfter	direction	double	1	RET	f == $
1048	2251	0	FastMath.java	nextAfter	f	float	1	RET	Float.isInfinite($)
1049	2255	0	FastMath.java	nextAfter	f	float	0	RET	$ == 0f
1050	2263	0	FastMath.java	nextAfter	sign	int	1	RET	(direction < f) ^ ($ == 0)
1050	2263	0	FastMath.java	nextAfter	f	float	1	RET	(direction < $) ^ (sign == 0)
1050	2263	0	FastMath.java	nextAfter	direction	double	1	RET	($ < f) ^ (sign == 0)
1051	2277	0	FastMath.java	floor	x	double	0	RET	$ != $
1052	2280	0	FastMath.java	floor	THIS	FastMath	0	RET	x <= -$.TWO_POWER_52
1052	2280	0	FastMath.java	floor	THIS	FastMath	0	RET	x >= $.TWO_POWER_52
1052	2280	0	FastMath.java	floor	x	double	0	RET	$ <= -TWO_POWER_52
1052	2280	0	FastMath.java	floor	x	double	0	RET	$ >= TWO_POWER_52
1053	2284	0	FastMath.java	floor	y	long	0	DEF	$ != x
1053	2284	0	FastMath.java	floor	x	double	0	DEF	$ < 0
1053	2284	0	FastMath.java	floor	x	double	0	DEF	y != $
1054	2287	0	FastMath.java	floor	y	long	0	RET	$ == 0
1055	2299	0	FastMath.java	ceil	x	double	0	RET	$ != $
1056	2303	0	FastMath.java	ceil	y	double	0	RET	$ == x
1056	2303	0	FastMath.java	ceil	x	double	0	RET	y == $
1057	2307	0	FastMath.java	ceil	y	double	0	RET	$ == 0
1058	2320	0	FastMath.java	rint	d	double	0	RET	$ > 0.5
1059	2321	0	FastMath.java	rint	y	double	0	RET	$ == -1.0
1060	2326	0	FastMath.java	rint	d	double	0	RET	$ < 0.5
1061	2373	0	FastMath.java	min	a	float	0	RET	$ > b
1061	2373	0	FastMath.java	min	b	float	0	RET	a > $
1062	2376	0	FastMath.java	min	a	float	0	RET	$ < b
1062	2376	0	FastMath.java	min	b	float	0	RET	a < $
1063	2379	0	FastMath.java	min	a	float	0	RET	$ != b
1063	2379	0	FastMath.java	min	b	float	0	RET	a != $
1064	2383	0	FastMath.java	min	bits	int	0	RET	$ == 0x80000000
1065	2395	0	FastMath.java	min	a	double	0	RET	$ > b
1065	2395	0	FastMath.java	min	b	double	0	RET	a > $
1066	2398	0	FastMath.java	min	a	double	0	RET	$ < b
1066	2398	0	FastMath.java	min	b	double	0	RET	a < $
1067	2401	0	FastMath.java	min	a	double	0	RET	$ != b
1067	2401	0	FastMath.java	min	b	double	0	RET	a != $
1068	2405	0	FastMath.java	min	bits	long	0	RET	$ == 0x8000000000000000L
1069	2435	0	FastMath.java	max	a	float	0	RET	$ > b
1069	2435	0	FastMath.java	max	b	float	0	RET	a > $
1070	2438	0	FastMath.java	max	a	float	0	RET	$ < b
1070	2438	0	FastMath.java	max	b	float	0	RET	a < $
1071	2441	0	FastMath.java	max	a	float	0	RET	$ != b
1071	2441	0	FastMath.java	max	b	float	0	RET	a != $
1072	2445	0	FastMath.java	max	bits	int	0	RET	$ == 0x80000000
1073	2457	0	FastMath.java	max	a	double	0	RET	$ > b
1073	2457	0	FastMath.java	max	b	double	0	RET	a > $
1074	2460	0	FastMath.java	max	a	double	0	RET	$ < b
1074	2460	0	FastMath.java	max	b	double	0	RET	a < $
1075	2463	0	FastMath.java	max	a	double	0	RET	$ != b
1075	2463	0	FastMath.java	max	b	double	0	RET	a != $
1076	2467	0	FastMath.java	max	bits	long	0	RET	$ == 0x8000000000000000L
1077	2479	0	FastMath.java	hypot	x	double	1	RET	Double.isInfinite($)
1077	2479	0	FastMath.java	hypot	y	double	1	RET	Double.isInfinite($)
1078	2483	0	FastMath.java	hypot	x	double	1	RET	Double.isNaN($)
1078	2483	0	FastMath.java	hypot	y	double	1	RET	Double.isNaN($)
1079	2489	0	FastMath.java	hypot	expX	int	1	RET	$ > expY + 27
1079	2489	0	FastMath.java	hypot	expY	int	1	RET	expX > $ + 27
1080	2493	0	FastMath.java	hypot	expX	int	1	RET	expY > $ + 27
1080	2493	0	FastMath.java	hypot	expY	int	1	RET	$ > expX + 27
1081	2525	0	FastMath.java	copySign	m	long	0	RET	($ ^ s) >= 0
1081	2525	0	FastMath.java	copySign	s	long	0	RET	(m ^ $) >= 0
1082	2539	0	FastMath.java	copySign	m	int	0	RET	($ ^ s) >= 0
1082	2539	0	FastMath.java	copySign	s	int	0	RET	(m ^ $) >= 0
4630	47	4	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < 7
4631	56	4	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
824	62	6	FastMathCalc.java	buildSinCosTables	i	int	1	DEF	($ & 1) == 0
4632	101	4	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
4633	128	4	FastMathCalc.java	slowCos	i	int	0	NIL-FOR	$ >= 0
825	132	6	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 1) != 0
826	137	6	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 2) != 0
827	145	4	FastMathCalc.java	slowCos	result	double	0	DEF	$ != null
4634	164	4	FastMathCalc.java	slowSin	i	int	0	NIL-FOR	$ >= 0
828	168	6	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 1) == 0
829	173	6	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 2) != 0
830	181	4	FastMathCalc.java	slowSin	result	double	0	DEF	$ != null
4635	200	4	FastMathCalc.java	slowexp	i	int	0	NIL-FOR	$ >= 0
831	210	4	FastMathCalc.java	slowexp	result	double	0	DEF	$ != null
832	222	4	FastMathCalc.java	split	d	double	1	DEF	$ > -8e298
832	222	4	FastMathCalc.java	split	d	double	1	DEF	$ < 8e298
833	240	4	FastMathCalc.java	resplit	c	double	1	DEF	$ > -8e298
833	240	4	FastMathCalc.java	resplit	c	double	1	DEF	$ < 8e298
834	281	4	FastMathCalc.java	splitReciprocal	in	double	0	DEF	$[0] == 0.0
835	287	4	FastMathCalc.java	splitReciprocal	result	double	0	DEF	$[1] != $[1]
4636	291	4	FastMathCalc.java	splitReciprocal	i	int	0	NIL-FOR	$ < 2
4637	352	4	FastMathCalc.java	expint	p	int	0	NIL-WHILE	$ > 0
836	353	6	FastMathCalc.java	expint	p	int	0	DEF	($ & 1) != 0
837	363	4	FastMathCalc.java	expint	result	double	0	DEF	$ != null
4638	392	4	FastMathCalc.java	slowLog	i	int	0	NIL-FOR	$ >= 0
838	448	4	FastMathCalc.java	format	d	double	1	RET	$ != $
839	462	4	FastMathCalc.java	checkLen	expectedLen	int	0	DimensionMismatchException	$ != actual
839	462	4	FastMathCalc.java	checkLen	actual	int	0	DimensionMismatchException	expectedLen != $
1107	36	4	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	$.normalization == $.DstNormalization.ORTHOGONAL_DST_I
1108	40	4	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	type == $.TransformType.FORWARD
1108	40	4	FastSineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
1109	65	4	FastSineTransformer.java	fst	THIS	FastSineTransformer	0	MathIllegalArgumentException	$.ArithmeticUtils.isPowerOfTwo(f.$.length)
1109	65	4	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($.length)
1110	68	4	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	$[0] != 0.0
1111	72	4	FastSineTransformer.java	fst	n	int	0	RET	$ == 1
4670	79	4	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
4670	79	4	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
4671	90	4	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
4671	90	4	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
6571	52	4	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	NIL-FOR	i < value.$.length
6571	52	4	FieldHermiteInterpolator.java	addSamplePoint	i	int	0	NIL-FOR	$ < value.length
6571	52	4	FieldHermiteInterpolator.java	addSamplePoint	value	T[]	0	NIL-FOR	i < $.length
3969	54	6	FieldHermiteInterpolator.java	addSamplePoint	i	int	0	DEF	$ > 1
6572	57	8	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	NIL-FOR	j < y.$.length
6572	57	8	FieldHermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < y.length
6572	57	8	FieldHermiteInterpolator.java	addSamplePoint	y	T[]	0	NIL-FOR	j < $.length
6573	64	6	FieldHermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < n
6573	64	6	FieldHermiteInterpolator.java	addSamplePoint	n	int	0	NIL-FOR	j < $
3970	66	8	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	ZeroException	x.equals($.abscissae.get(n - (j + 1)))
3970	66	8	FieldHermiteInterpolator.java	addSamplePoint	j	int	0	ZeroException	x.equals(abscissae.get(n - ($ + 1)))
3970	66	8	FieldHermiteInterpolator.java	addSamplePoint	n	int	0	ZeroException	x.equals(abscissae.get($ - (j + 1)))
3970	66	8	FieldHermiteInterpolator.java	addSamplePoint	x	T	0	ZeroException	$.equals(abscissae.get(n - (j + 1)))
6574	70	8	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	NIL-FOR	k < y.$.length
6574	70	8	FieldHermiteInterpolator.java	addSamplePoint	k	int	0	NIL-FOR	$ < y.length
6574	70	8	FieldHermiteInterpolator.java	addSamplePoint	y	T[]	0	NIL-FOR	k < $.length
3971	88	4	FieldHermiteInterpolator.java	value	THIS	FieldHermiteInterpolator	0	NoDataException	$.abscissae.isEmpty()
6575	93	4	FieldHermiteInterpolator.java	value	THIS	FieldHermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
6575	93	4	FieldHermiteInterpolator.java	value	i	int	0	NIL-FOR	$ < topDiagonal.size()
6576	95	6	FieldHermiteInterpolator.java	value	THIS	FieldHermiteInterpolator	0	NIL-FOR	k < value.$.length
6576	95	6	FieldHermiteInterpolator.java	value	k	int	0	NIL-FOR	$ < value.length
6576	95	6	FieldHermiteInterpolator.java	value	value	T[]	0	NIL-FOR	k < $.length
3972	113	4	FieldHermiteInterpolator.java	derivatives	THIS	FieldHermiteInterpolator	0	NoDataException	$.abscissae.isEmpty()
6577	120	4	FieldHermiteInterpolator.java	derivatives	i	int	0	NIL-FOR	$ < order
6577	120	4	FieldHermiteInterpolator.java	derivatives	order	int	0	NIL-FOR	i < $
6578	126	4	FieldHermiteInterpolator.java	derivatives	THIS	FieldHermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
6578	126	4	FieldHermiteInterpolator.java	derivatives	i	int	0	NIL-FOR	$ < topDiagonal.size()
6579	129	6	FieldHermiteInterpolator.java	derivatives	j	int	0	NIL-FOR	$ >= 0
6580	130	8	FieldHermiteInterpolator.java	derivatives	THIS	FieldHermiteInterpolator	0	NIL-FOR	k < derivatives[j].length
6580	130	8	FieldHermiteInterpolator.java	derivatives	k	int	0	NIL-FOR	$ < derivatives[j].length
6580	130	8	FieldHermiteInterpolator.java	derivatives	j	int	0	NIL-FOR	k < derivatives[$].length
6580	130	8	FieldHermiteInterpolator.java	derivatives	derivatives	T[][]	0	NIL-FOR	k < $[j].length
3973	134	8	FieldHermiteInterpolator.java	derivatives	j	int	0	DEF	$ > 0
1266	53	4	FieldLUDecomposition.java	FieldLUDecomposition	matrix	FieldMatrix<T>	0	NonSquareMatrixException	$.isSquare()
4893	63	4	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
4893	63	4	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
4894	68	4	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	$ < m
4894	68	4	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	col < $
4895	70	6	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < col
4895	70	6	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	row < $
4896	73	8	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < row
4896	73	8	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	i < $
4897	79	6	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
4897	79	6	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
4898	82	8	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < col
4898	82	8	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	i < $
1267	86	8	FieldLUDecomposition.java	FieldLUDecomposition	THIS	FieldLUDecomposition	0	DEF	$.lu[nonZero][col].equals($.field.getZero())
1267	86	8	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	lu[$][col].equals(field.getZero())
1267	86	8	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	lu[nonZero][$].equals(field.getZero())
1268	90	6	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	RET	$ >= m
1268	90	6	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	RET	nonZero >= $
1269	94	6	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	$ != col
1269	94	6	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	nonZero != $
4899	96	8	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < m
4899	96	8	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	i < $
4900	107	6	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
4900	107	6	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
1270	118	4	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.cachedL == null
1270	118	4	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.singular
4901	121	6	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
4901	121	6	FieldLUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
4902	123	8	FieldLUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
4902	123	8	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1271	136	4	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.cachedU == null
1271	136	4	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.singular
4903	139	6	FieldLUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
4903	139	6	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
4904	141	8	FieldLUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
4904	141	8	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1272	154	4	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.singular
1272	154	4	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.cachedP == null
4905	157	6	FieldLUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
4905	157	6	FieldLUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1273	176	4	FieldLUDecomposition.java	getDeterminant	THIS	FieldLUDecomposition	1	RET	$.singular
4906	182	6	FieldLUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
4906	182	6	FieldLUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
3850	48	4	FieldRotation.java	FieldRotation	needsNormalization	boolean	1	DEF	$
3851	70	4	FieldRotation.java	FieldRotation	norm	T	0	MathIllegalArgumentException	$.getReal() == 0
3852	87	4	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m[0].length != 3
3852	87	4	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m.$.length != 3
3852	87	4	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m[1].length != 3
3852	87	4	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m[2].length != 3
3852	87	4	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$[0].length != 3
3852	87	4	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$.length != 3
3852	87	4	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$[1].length != 3
3852	87	4	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$[2].length != 3
3853	95	4	FieldRotation.java	FieldRotation	det	T	0	NotARotationMatrixException	$.getReal() < 0.0
3854	143	4	FieldRotation.java	FieldRotation	normProduct	T	0	MathArithmeticException	$.getReal() == 0
3855	147	4	FieldRotation.java	FieldRotation	normProduct	T	1	DEF	dot.getReal() < ((2.0e-15 - 1.0) * $.getReal())
3855	147	4	FieldRotation.java	FieldRotation	dot	T	1	DEF	$.getReal() < ((2.0e-15 - 1.0) * normProduct.getReal())
3856	189	4	FieldRotation.java	mat2quat	s	T	1	DEF	$.getReal() > -0.19
3857	198	6	FieldRotation.java	mat2quat	s	T	1	DEF	$.getReal() > -0.19
3858	207	8	FieldRotation.java	mat2quat	s	T	1	DEF	$.getReal() > -0.19
3859	268	4	FieldRotation.java	getAxis	squaredSine	T	1	RET	$.getReal() == 0
3860	273	6	FieldRotation.java	getAxis	THIS	FieldRotation	0	RET	$.q0.getReal() < 0
3861	287	4	FieldRotation.java	getAngle	THIS	FieldRotation	1	RET	$.q0.getReal() < -0.1
3861	287	4	FieldRotation.java	getAngle	THIS	FieldRotation	1	RET	$.q0.getReal() > 0.1
3862	291	6	FieldRotation.java	getAngle	THIS	FieldRotation	0	RET	$.q0.getReal() < 0
3863	304	4	FieldRotation.java	getAngles	THIS	FieldRotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.XYZ
3863	304	4	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
3864	307	6	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
3864	307	6	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
3865	313	6	FieldRotation.java	getAngles	THIS	FieldRotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.XZY
3865	313	6	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
3866	316	8	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
3866	316	8	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
3867	322	8	FieldRotation.java	getAngles	THIS	FieldRotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.YXZ
3867	322	8	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
3868	325	10	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
3868	325	10	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
3869	331	10	FieldRotation.java	getAngles	THIS	FieldRotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.YZX
3869	331	10	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
3870	334	12	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
3870	334	12	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
3871	340	12	FieldRotation.java	getAngles	THIS	FieldRotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.ZXY
3871	340	12	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
3872	343	14	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
3872	343	14	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
3873	349	14	FieldRotation.java	getAngles	THIS	FieldRotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.ZYX
3873	349	14	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
3874	352	16	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
3874	352	16	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
3875	358	16	FieldRotation.java	getAngles	THIS	FieldRotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.XYX
3875	358	16	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
3876	361	18	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
3876	361	18	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
3877	367	18	FieldRotation.java	getAngles	THIS	FieldRotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.XZX
3877	367	18	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
3878	370	20	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
3878	370	20	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
3879	376	20	FieldRotation.java	getAngles	THIS	FieldRotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.YXY
3879	376	20	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
3880	379	22	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
3880	379	22	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
3881	385	22	FieldRotation.java	getAngles	THIS	FieldRotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.YZY
3881	385	22	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
3882	388	24	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
3882	388	24	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
3883	394	24	FieldRotation.java	getAngles	THIS	FieldRotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.ZXZ
3883	394	24	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
3884	397	26	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
3884	397	26	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
3885	405	26	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
3885	405	26	FieldRotation.java	getAngles	v2	FieldVector3D	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
6492	690	4	FieldRotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
3886	719	6	FieldRotation.java	orthogonalizeMatrix	THIS	FieldRotation	0	RET	$.FastMath.abs(fn1 - fn) <= threshold
3886	719	6	FieldRotation.java	orthogonalizeMatrix	fn	double	0	RET	FastMath.abs(fn1 - $) <= threshold
3886	719	6	FieldRotation.java	orthogonalizeMatrix	fn1	double	0	RET	FastMath.abs($ - fn) <= threshold
3886	719	6	FieldRotation.java	orthogonalizeMatrix	threshold	double	0	RET	FastMath.abs(fn1 - fn) <= $
3824	54	4	FieldVector3D.java	FieldVector3D	THIS	FieldVector3D	0	DimensionMismatchException	v.$.length != 3
3824	54	4	FieldVector3D.java	FieldVector3D	v	T[]	0	DimensionMismatchException	$.length != 3
3825	311	4	FieldVector3D.java	getNormInf	xAbs	T	1	RET	$.getReal() <= yAbs.getReal()
3825	311	4	FieldVector3D.java	getNormInf	yAbs	T	1	RET	xAbs.getReal() <= $.getReal()
3826	312	6	FieldVector3D.java	getNormInf	yAbs	T	1	RET	$.getReal() <= zAbs.getReal()
3826	312	6	FieldVector3D.java	getNormInf	zAbs	T	1	RET	yAbs.getReal() <= $.getReal()
3827	320	6	FieldVector3D.java	getNormInf	xAbs	T	1	RET	$.getReal() <= zAbs.getReal()
3827	320	6	FieldVector3D.java	getNormInf	zAbs	T	1	RET	xAbs.getReal() <= $.getReal()
3828	455	4	FieldVector3D.java	normalize	s	T	0	MathArithmeticException	$.getReal() == 0
3829	467	4	FieldVector3D.java	orthogonal	threshold	double	0	MathArithmeticException	$ == 0
3830	470	4	FieldVector3D.java	orthogonal	THIS	FieldVector3D	1	RET	$.FastMath.abs($.x.getReal()) <= threshold
3830	470	4	FieldVector3D.java	orthogonal	threshold	double	1	RET	FastMath.abs(x.getReal()) <= $
3831	475	6	FieldVector3D.java	orthogonal	THIS	FieldVector3D	1	RET	$.FastMath.abs($.y.getReal()) <= threshold
3831	475	6	FieldVector3D.java	orthogonal	threshold	double	1	RET	FastMath.abs(y.getReal()) <= $
3832	495	4	FieldVector3D.java	angle	normProduct	T	0	MathArithmeticException	$.getReal() == 0
3833	500	4	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() < -threshold
3833	500	4	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() > threshold
3833	500	4	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() < -$
3833	500	4	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() > $
3834	502	6	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() >= 0
3835	519	4	FieldVector3D.java	angle	normProduct	T	0	MathArithmeticException	$.getReal() == 0
3836	524	4	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() > threshold
3836	524	4	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() < -threshold
3836	524	4	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() > $
3836	524	4	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() < -$
3837	526	6	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() >= 0
3838	587	4	FieldVector3D.java	equals	THIS	FieldVector3D	0	RET	$ == other
3838	587	4	FieldVector3D.java	equals	other	Object	0	RET	this == $
3839	590	4	FieldVector3D.java	equals	other	Object	0	RET	$ instanceof FieldVector3D
3840	592	6	FieldVector3D.java	equals	rhs	FieldVector3D<T>	0	RET	$.isNaN()
3841	604	4	FieldVector3D.java	hashCode	THIS	FieldVector3D	0	RET	$.isNaN()
3842	696	4	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dy.getReal()
3842	696	4	FieldVector3D.java	distanceInf	dy	T	1	RET	dx.getReal() <= $.getReal()
3843	697	6	FieldVector3D.java	distanceInf	dy	T	1	RET	$.getReal() <= dz.getReal()
3843	697	6	FieldVector3D.java	distanceInf	dz	T	1	RET	dy.getReal() <= $.getReal()
3844	705	6	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dz.getReal()
3844	705	6	FieldVector3D.java	distanceInf	dz	T	1	RET	dx.getReal() <= $.getReal()
3845	722	4	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dy.getReal()
3845	722	4	FieldVector3D.java	distanceInf	dy	T	1	RET	dx.getReal() <= $.getReal()
3846	723	6	FieldVector3D.java	distanceInf	dy	T	1	RET	$.getReal() <= dz.getReal()
3846	723	6	FieldVector3D.java	distanceInf	dz	T	1	RET	dy.getReal() <= $.getReal()
3847	731	6	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dz.getReal()
3847	731	6	FieldVector3D.java	distanceInf	dz	T	1	RET	dx.getReal() <= $.getReal()
4188	62	4	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	nbPoints	int	0	NumberIsTooSmallException	$ <= 1
4189	66	4	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	stepSize	double	0	NotPositiveException	$ <= 0
4190	71	4	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	THIS	FiniteDifferencesDifferentiator	0	NumberIsTooLargeException	2 * $.halfSampleSpan >= tUpper - tLower
4190	71	4	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	tLower	double	0	NumberIsTooLargeException	2 * halfSampleSpan >= tUpper - $
4190	71	4	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	tUpper	double	0	NumberIsTooLargeException	2 * halfSampleSpan >= $ - tLower
6658	103	4	FiniteDifferencesDifferentiator.java	evaluate	THIS	FiniteDifferencesDifferentiator	0	NIL-FOR	i < $.nbPoints
6658	103	4	FiniteDifferencesDifferentiator.java	evaluate	i	int	0	NIL-FOR	$ < nbPoints
6659	105	6	FiniteDifferencesDifferentiator.java	evaluate	j	int	0	NIL-FOR	$ <= i
6659	105	6	FiniteDifferencesDifferentiator.java	evaluate	i	int	0	NIL-FOR	j <= $
6660	116	4	FiniteDifferencesDifferentiator.java	evaluate	THIS	FiniteDifferencesDifferentiator	0	NIL-FOR	i < $.nbPoints
6660	116	4	FiniteDifferencesDifferentiator.java	evaluate	i	int	0	NIL-FOR	$ < nbPoints
4191	117	6	FiniteDifferencesDifferentiator.java	evaluate	i	int	1	DEF	$ == 0
252	53	4	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
2946	33	4	FixedElapsedTime.java	FixedElapsedTime	maxTime	long	0	NumberIsTooSmallException	$ < 0
2947	44	4	FixedElapsedTime.java	isSatisfied	THIS	FixedElapsedTime	0	DEF	$.endTime < 0
2915	23	4	FixedGenerationCount.java	FixedGenerationCount	maxGenerations	int	0	NumberIsTooSmallException	$ <= 0
2916	34	4	FixedGenerationCount.java	isSatisfied	THIS	FixedGenerationCount	0	RET	$.numGenerations < $.maxGenerations
246	38	4	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
3444	123	4	Fraction.java	Fraction	THIS	Fraction	0	FractionConversionException	$.FastMath.abs(a0) > overflow
3444	123	4	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(a0) > $
3444	123	4	Fraction.java	Fraction	a0	long	0	FractionConversionException	FastMath.abs($) > overflow
3445	126	4	Fraction.java	Fraction	THIS	Fraction	0	RET	$.FastMath.abs(a0 - value) < epsilon
3445	126	4	Fraction.java	Fraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
3445	126	4	Fraction.java	Fraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
3445	126	4	Fraction.java	Fraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
6455	139	4	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
3446	145	6	Fraction.java	Fraction	THIS	Fraction	0	FractionConversionException	$.FastMath.abs(q2) > overflow
3446	145	6	Fraction.java	Fraction	THIS	Fraction	0	FractionConversionException	$.FastMath.abs(p2) > overflow
3446	145	6	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(q2) > $
3446	145	6	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(p2) > $
3446	145	6	Fraction.java	Fraction	p2	long	0	FractionConversionException	FastMath.abs($) > overflow
3446	145	6	Fraction.java	Fraction	q2	long	0	FractionConversionException	FastMath.abs($) > overflow
3447	149	6	Fraction.java	Fraction	THIS	Fraction	1	DEF	$.FastMath.abs(convergent - value) > epsilon
3447	149	6	Fraction.java	Fraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
3447	149	6	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
3447	149	6	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
3447	149	6	Fraction.java	Fraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
3447	149	6	Fraction.java	Fraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
3447	149	6	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
3447	149	6	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
3448	162	4	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
3448	162	4	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
3449	165	4	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
3449	165	4	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
3450	188	4	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == 0
3451	191	4	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ < 0
3452	192	6	Fraction.java	Fraction	num	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
3452	192	6	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
3453	199	4	Fraction.java	Fraction	d	int	0	DEF	$ > 1
3454	203	4	Fraction.java	Fraction	den	int	0	DEF	$ < 0
3455	216	4	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
3456	247	4	Fraction.java	equals	THIS	Fraction	0	RET	$ == other
3456	247	4	Fraction.java	equals	other	Object	0	RET	this == $
3457	250	4	Fraction.java	equals	other	Object	0	RET	$ instanceof Fraction
3458	303	4	Fraction.java	negate	THIS	Fraction	0	MathArithmeticException	$.numerator == Integer.MIN_VALUE
3459	360	4	Fraction.java	addSub	fraction	Fraction	0	NullArgumentException	$ == null
3460	363	4	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
3461	366	4	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
3461	366	4	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
3462	370	4	Fraction.java	addSub	d1	int	0	RET	$ == 1
3463	381	4	Fraction.java	addSub	w	BigInteger	0	MathArithmeticException	$.bitLength() > 31
3464	394	4	Fraction.java	multiply	fraction	Fraction	0	NullArgumentException	$ == null
3465	397	4	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
3465	397	4	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
3465	397	4	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
3466	421	4	Fraction.java	divide	fraction	Fraction	0	NullArgumentException	$ == null
3467	424	4	Fraction.java	divide	THIS	Fraction	0	MathArithmeticException	fraction.$.numerator == 0
3467	424	4	Fraction.java	divide	fraction	Fraction	0	MathArithmeticException	$.numerator == 0
3468	452	4	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ == 0
3469	455	4	Fraction.java	getReducedFraction	numerator	int	0	RET	$ == 0
3470	458	4	Fraction.java	getReducedFraction	numerator	int	0	DEF	($ & 1) == 0
3470	458	4	Fraction.java	getReducedFraction	denominator	int	0	DEF	$ == Integer.MIN_VALUE
3471	462	4	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ < 0
3472	463	6	Fraction.java	getReducedFraction	numerator	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
3472	463	6	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
3473	481	4	Fraction.java	toString	THIS	Fraction	1	DEF	$.denominator == 1
3474	485	6	Fraction.java	toString	THIS	Fraction	1	DEF	$.numerator == 0
3382	118	4	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
3383	122	6	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
3384	140	4	FractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
3385	155	4	FractionFormat.java	parse	num	Number	0	RET	$ == null
3386	173	0	FractionFormat.java	parse	den	Number	0	RET	$ == null
4310	48	4	Frequency.java	toString	iter	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
4	78	4	Frequency.java	incrementValue	v	Comparable<?>	0	DEF	$ instanceof Integer
5	83	6	Frequency.java	incrementValue	count	Long	1	DEF	$ == null
4311	146	4	Frequency.java	getSumFreq	iterator	Iterator<Long>	0	NIL-WHILE	$.hasNext()
6	157	4	Frequency.java	getCount	v	Comparable<?>	0	RET	$ instanceof Integer
7	163	6	Frequency.java	getCount	count	Long	0	DEF	$ != null
8	210	4	Frequency.java	getPct	sumFreq	long	0	RET	$ == 0
9	245	4	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
10	248	4	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	$ instanceof Integer
11	252	4	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	DEF	$ == null
12	258	6	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
13	265	4	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v,$.freqTable.firstKey()) < 0
13	265	4	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v,freqTable.firstKey()) < 0
13	265	4	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($,freqTable.firstKey()) < 0
14	268	4	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v,$.freqTable.lastKey()) >= 0
14	268	4	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v,freqTable.lastKey()) >= 0
14	268	4	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($,freqTable.lastKey()) >= 0
4312	272	4	Frequency.java	getCumFreq	values	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
15	274	6	Frequency.java	getCumFreq	nextValue	Comparable<?>	1	DEF	c.compare(v,$) > 0
15	274	6	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	1	DEF	$.compare(v,nextValue) > 0
15	274	6	Frequency.java	getCumFreq	v	Comparable<?>	1	DEF	c.compare($,nextValue) > 0
16	314	4	Frequency.java	getCumPct	sumFreq	long	0	RET	$ == 0
4313	352	4	Frequency.java	merge	iter	Iterator<Entry<Comparable<?>,Long>>	0	NIL-WHILE	$.hasNext()
17	402	4	Frequency.java	equals	THIS	Frequency	0	RET	$ == obj
17	402	4	Frequency.java	equals	obj	Object	0	RET	this == $
18	405	4	Frequency.java	equals	obj	Object	0	RET	$ instanceof Frequency
19	409	4	Frequency.java	equals	THIS	Frequency	1	RET	$.freqTable == null
20	410	6	Frequency.java	equals	THIS	Frequency	0	RET	other.$.freqTable != null
20	410	6	Frequency.java	equals	other	Frequency	0	RET	$.freqTable != null
21	415	6	Frequency.java	equals	THIS	Frequency	0	RET	$.freqTable.equals(other.$.freqTable)
21	415	6	Frequency.java	equals	other	Frequency	0	RET	freqTable.equals($.freqTable)
3919	395	4	FunctionUtils.java	sample	n	int	0	NotStrictlyPositiveException	$ <= 0
3920	398	4	FunctionUtils.java	sample	min	double	0	NumberIsTooLargeException	$ >= max
3920	398	4	FunctionUtils.java	sample	max	double	0	NumberIsTooLargeException	min >= $
6504	403	4	FunctionUtils.java	sample	i	int	0	NIL-FOR	$ < n
6504	403	4	FunctionUtils.java	sample	n	int	0	NIL-FOR	i < $
1655	93	4	FuzzyKMeansClusterer.java	FuzzyKMeansClusterer	fuzziness	double	0	NumberIsTooSmallException	$ <= 1.0d
1656	146	4	FuzzyKMeansClusterer.java	getMembershipMatrix	THIS	FuzzyKMeansClusterer	0	MathIllegalStateException	$.membershipMatrix == null
1657	171	4	FuzzyKMeansClusterer.java	getObjectiveFunctionValue	THIS	FuzzyKMeansClusterer	0	MathIllegalStateException	$.points == null
1657	171	4	FuzzyKMeansClusterer.java	getObjectiveFunctionValue	THIS	FuzzyKMeansClusterer	0	MathIllegalStateException	$.clusters == null
1658	196	4	FuzzyKMeansClusterer.java	cluster	THIS	FuzzyKMeansClusterer	0	NumberIsTooSmallException	size < $.k
1658	196	4	FuzzyKMeansClusterer.java	cluster	size	int	0	NumberIsTooSmallException	$ < k
1659	203	4	FuzzyKMeansClusterer.java	cluster	size	int	0	RET	$ == 0
5494	208	4	FuzzyKMeansClusterer.java	cluster	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.k
5494	208	4	FuzzyKMeansClusterer.java	cluster	i	int	0	NIL-FOR	$ < k
5495	214	4	FuzzyKMeansClusterer.java	cluster	THIS	FuzzyKMeansClusterer	0	NIL-DOWHILE	difference > $.epsilon
5495	214	4	FuzzyKMeansClusterer.java	cluster	iteration	int	0	NIL-DOWHILE	++$ < max
5495	214	4	FuzzyKMeansClusterer.java	cluster	max	int	0	NIL-DOWHILE	++iteration < $
5495	214	4	FuzzyKMeansClusterer.java	cluster	difference	double	0	NIL-DOWHILE	$ > epsilon
5496	237	8	FuzzyKMeansClusterer.java	updateClusterCenters	THIS	FuzzyKMeansClusterer	0	NIL-FOR	idx < arr.$.length
5496	237	8	FuzzyKMeansClusterer.java	updateClusterCenters	idx	int	0	NIL-FOR	$ < arr.length
5496	237	8	FuzzyKMeansClusterer.java	updateClusterCenters	arr	double[]	0	NIL-FOR	idx < $.length
5497	254	4	FuzzyKMeansClusterer.java	updateMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.points.size()
5497	254	4	FuzzyKMeansClusterer.java	updateMembershipMatrix	i	int	0	NIL-FOR	$ < points.size()
5498	258	6	FuzzyKMeansClusterer.java	updateMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	j < $.clusters.size()
5498	258	6	FuzzyKMeansClusterer.java	updateMembershipMatrix	j	int	0	NIL-FOR	$ < clusters.size()
1660	266	8	FuzzyKMeansClusterer.java	updateMembershipMatrix	THIS	FuzzyKMeansClusterer	0	DEF	$.membershipMatrix[i][j] > maxMembership
1660	266	8	FuzzyKMeansClusterer.java	updateMembershipMatrix	j	int	0	DEF	membershipMatrix[i][$] > maxMembership
1660	266	8	FuzzyKMeansClusterer.java	updateMembershipMatrix	maxMembership	double	0	DEF	membershipMatrix[i][j] > $
1660	266	8	FuzzyKMeansClusterer.java	updateMembershipMatrix	i	int	0	DEF	membershipMatrix[$][j] > maxMembership
5499	278	4	FuzzyKMeansClusterer.java	initializeMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.points.size()
5499	278	4	FuzzyKMeansClusterer.java	initializeMembershipMatrix	i	int	0	NIL-FOR	$ < points.size()
5500	279	6	FuzzyKMeansClusterer.java	initializeMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	j < $.k
5500	279	6	FuzzyKMeansClusterer.java	initializeMembershipMatrix	j	int	0	NIL-FOR	$ < k
5501	292	4	FuzzyKMeansClusterer.java	calculateMaxMembershipChange	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.points.size()
5501	292	4	FuzzyKMeansClusterer.java	calculateMaxMembershipChange	i	int	0	NIL-FOR	$ < points.size()
5502	293	6	FuzzyKMeansClusterer.java	calculateMaxMembershipChange	THIS	FuzzyKMeansClusterer	0	NIL-FOR	j < $.clusters.size()
5502	293	6	FuzzyKMeansClusterer.java	calculateMaxMembershipChange	j	int	0	NIL-FOR	$ < clusters.size()
5503	305	4	FuzzyKMeansClusterer.java	saveMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.points.size()
5503	305	4	FuzzyKMeansClusterer.java	saveMembershipMatrix	i	int	0	NIL-FOR	$ < points.size()
66	46	4	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
381	28	4	GTest.java	g	THIS	GTest	0	DimensionMismatchException	expected.$.length < 2
381	28	4	GTest.java	g	expected	double[]	0	DimensionMismatchException	$.length < 2
382	31	4	GTest.java	g	THIS	GTest	0	DimensionMismatchException	expected.$.length != observed.$.length
382	31	4	GTest.java	g	expected	double[]	0	DimensionMismatchException	$.length != observed.length
382	31	4	GTest.java	g	observed	long[]	0	DimensionMismatchException	expected.length != $.length
4441	38	4	GTest.java	g	THIS	GTest	0	NIL-FOR	i < observed.$.length
4441	38	4	GTest.java	g	i	int	0	NIL-FOR	$ < observed.length
4441	38	4	GTest.java	g	observed	long[]	0	NIL-FOR	i < $.length
383	44	4	GTest.java	g	sumExpected	double	0	DEF	Math.abs($ - sumObserved) > 10E-6
383	44	4	GTest.java	g	sumObserved	double	0	DEF	Math.abs(sumExpected - $) > 10E-6
4442	49	4	GTest.java	g	THIS	GTest	0	NIL-FOR	i < observed.$.length
4442	49	4	GTest.java	g	i	int	0	NIL-FOR	$ < observed.length
4442	49	4	GTest.java	g	observed	long[]	0	NIL-FOR	i < $.length
384	96	4	GTest.java	gTest	alpha	double	0	OutOfRangeException	$ > 0.5
384	96	4	GTest.java	gTest	alpha	double	0	OutOfRangeException	$ <= 0
4443	109	4	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
4443	109	4	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
4443	109	4	GTest.java	entropy	k	long[][]	0	NIL-FOR	i < $.length
4444	110	6	GTest.java	entropy	THIS	GTest	0	NIL-FOR	j < k[i].length
4444	110	6	GTest.java	entropy	j	int	0	NIL-FOR	$ < k[i].length
4444	110	6	GTest.java	entropy	i	int	0	NIL-FOR	j < k[$].length
4444	110	6	GTest.java	entropy	k	long[][]	0	NIL-FOR	j < $[i].length
4445	114	4	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
4445	114	4	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
4445	114	4	GTest.java	entropy	k	long[][]	0	NIL-FOR	i < $.length
4446	115	6	GTest.java	entropy	THIS	GTest	0	NIL-FOR	j < k[i].length
4446	115	6	GTest.java	entropy	j	int	0	NIL-FOR	$ < k[i].length
4446	115	6	GTest.java	entropy	i	int	0	NIL-FOR	j < k[$].length
4446	115	6	GTest.java	entropy	k	long[][]	0	NIL-FOR	j < $[i].length
385	116	8	GTest.java	entropy	j	int	0	DEF	k[i][$] != 0
385	116	8	GTest.java	entropy	i	int	0	DEF	k[$][j] != 0
385	116	8	GTest.java	entropy	k	long[][]	0	DEF	$[i][j] != 0
4447	132	4	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
4447	132	4	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
4447	132	4	GTest.java	entropy	k	long[]	0	NIL-FOR	i < $.length
4448	135	4	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
4448	135	4	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
4448	135	4	GTest.java	entropy	k	long[]	0	NIL-FOR	i < $.length
386	136	6	GTest.java	entropy	i	int	0	DEF	k[$] != 0
386	136	6	GTest.java	entropy	k	long[]	0	DEF	$[i] != 0
387	153	4	GTest.java	gDataSetsComparison	THIS	GTest	0	DimensionMismatchException	observed1.$.length < 2
387	153	4	GTest.java	gDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length < 2
388	156	4	GTest.java	gDataSetsComparison	THIS	GTest	0	DimensionMismatchException	observed1.$.length != observed2.$.length
388	156	4	GTest.java	gDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length != observed2.length
388	156	4	GTest.java	gDataSetsComparison	observed2	long[]	0	DimensionMismatchException	observed1.length != $.length
4449	165	4	GTest.java	gDataSetsComparison	THIS	GTest	0	NIL-FOR	i < observed1.$.length
4449	165	4	GTest.java	gDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
4449	165	4	GTest.java	gDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
389	166	6	GTest.java	gDataSetsComparison	i	int	1	ZeroException	observed2[$] == 0
389	166	6	GTest.java	gDataSetsComparison	i	int	1	ZeroException	observed1[$] == 0
389	166	6	GTest.java	gDataSetsComparison	observed1	long[]	1	ZeroException	$[i] == 0
389	166	6	GTest.java	gDataSetsComparison	observed2	long[]	1	ZeroException	$[i] == 0
390	177	4	GTest.java	gDataSetsComparison	countSum1	long	0	ZeroException	$ == 0
390	177	4	GTest.java	gDataSetsComparison	countSum2	long	0	ZeroException	$ == 0
391	195	4	GTest.java	rootLogLikelihoodRatio	k11	long	0	DEF	(double)$ / ($ + k12) < (double)k21 / (k21 + k22)
391	195	4	GTest.java	rootLogLikelihoodRatio	k12	long	0	DEF	(double)k11 / (k11 + $) < (double)k21 / (k21 + k22)
391	195	4	GTest.java	rootLogLikelihoodRatio	k21	long	0	DEF	(double)k11 / (k11 + k12) < (double)$ / ($ + k22)
391	195	4	GTest.java	rootLogLikelihoodRatio	k22	long	0	DEF	(double)k11 / (k11 + k12) < (double)k21 / (k21 + $)
392	227	4	GTest.java	gTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ > 0.5
392	227	4	GTest.java	gTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ <= 0
2216	202	4	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
2216	202	4	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
2217	206	6	Gamma.java	logGamma	x	double	1	RET	$ < 0.5
2218	210	8	Gamma.java	logGamma	x	double	1	RET	$ <= 2.5
2219	214	10	Gamma.java	logGamma	x	double	1	RET	$ <= 8.0
5647	217	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ <= n
5647	217	12	Gamma.java	logGamma	n	int	0	NIL-FOR	i <= $
2220	253	4	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
2220	253	4	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
2220	253	4	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
2220	253	4	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
2221	257	6	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
2222	261	8	Gamma.java	regularizedGammaP	a	double	1	DEF	x >= $ + 1
2222	261	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ >= a + 1
5648	268	10	Gamma.java	regularizedGammaP	THIS	Gamma	0	NIL-WHILE	$.FastMath.abs(an / sum) > epsilon
5648	268	10	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
5648	268	10	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	FastMath.abs($ / sum) > epsilon
5648	268	10	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	FastMath.abs(an / $) > epsilon
5648	268	10	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	$ < Double.POSITIVE_INFINITY
5648	268	10	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	FastMath.abs(an / sum) > $
5648	268	10	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
2223	273	10	Gamma.java	regularizedGammaP	n	double	1	MaxCountExceededException	$ >= maxIterations
2223	273	10	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxCountExceededException	n >= $
2224	277	12	Gamma.java	regularizedGammaP	sum	double	1	DEF	Double.isInfinite($)
2225	310	4	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
2225	310	4	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
2225	310	4	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
2225	310	4	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
2226	314	6	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
2227	318	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $ + 1.0
2227	318	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a + 1.0
2228	347	4	Gamma.java	digamma	x	double	0	RET	$ <= S_LIMIT
2228	347	4	Gamma.java	digamma	x	double	0	RET	$ > 0
2229	350	4	Gamma.java	digamma	x	double	0	RET	$ >= C_LIMIT
2230	365	4	Gamma.java	trigamma	x	double	0	RET	$ <= S_LIMIT
2230	365	4	Gamma.java	trigamma	x	double	0	RET	$ > 0
2231	368	4	Gamma.java	trigamma	x	double	0	RET	$ >= C_LIMIT
5649	383	4	Gamma.java	lanczos	i	int	0	NIL-FOR	$ > 0
2232	397	4	Gamma.java	invGamma1pm1	x	double	0	NumberIsTooSmallException	$ < -0.5
2233	400	4	Gamma.java	invGamma1pm1	x	double	0	NumberIsTooLargeException	$ > 1.5
2234	405	4	Gamma.java	invGamma1pm1	t	double	1	DEF	$ < 0.0
2235	430	6	Gamma.java	invGamma1pm1	x	double	1	DEF	$ > 0.5
2236	464	6	Gamma.java	invGamma1pm1	x	double	1	DEF	$ > 0.5
2237	482	4	Gamma.java	logGamma1p	x	double	0	NumberIsTooSmallException	$ < -0.5
2238	485	4	Gamma.java	logGamma1p	x	double	0	NumberIsTooLargeException	$ > 1.5
2239	497	4	Gamma.java	gamma	THIS	Gamma	0	RET	x == $.FastMath.rint(x)
2239	497	4	Gamma.java	gamma	x	double	0	RET	$ <= 0.0
2239	497	4	Gamma.java	gamma	x	double	0	RET	$ == FastMath.rint($)
2240	502	4	Gamma.java	gamma	absX	double	1	DEF	$ <= 20.0
2241	503	6	Gamma.java	gamma	x	double	1	DEF	$ >= 1.0
5650	506	8	Gamma.java	gamma	t	double	0	NIL-WHILE	$ > 2.5
5651	515	8	Gamma.java	gamma	t	double	0	NIL-WHILE	$ < -0.5
2242	525	6	Gamma.java	gamma	x	double	1	DEF	$ > 0.0
1746	87	4	GammaDistribution.java	GammaDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1747	90	4	GammaDistribution.java	GammaDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1748	139	4	GammaDistribution.java	density	x	double	0	RET	$ < 0
1749	143	4	GammaDistribution.java	density	THIS	GammaDistribution	0	RET	$.FastMath.log(y) >= $.maxLogY
1749	143	4	GammaDistribution.java	density	THIS	GammaDistribution	0	RET	y <= $.minY
1749	143	4	GammaDistribution.java	density	y	double	0	RET	FastMath.log($) >= maxLogY
1749	143	4	GammaDistribution.java	density	y	double	0	RET	$ <= minY
1750	156	4	GammaDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
1751	221	4	GammaDistribution.java	sample	THIS	GammaDistribution	0	RET	$.shape < 1
1752	226	8	GammaDistribution.java	sample	p	double	1	RET	$ <= 1
1753	229	10	GammaDistribution.java	sample	THIS	GammaDistribution	1	DEF	u2 > $.FastMath.exp(-x)
1753	229	10	GammaDistribution.java	sample	x	double	1	DEF	u2 > FastMath.exp(-$)
1753	229	10	GammaDistribution.java	sample	u2	double	1	DEF	$ > FastMath.exp(-x)
1754	239	10	GammaDistribution.java	sample	THIS	GammaDistribution	1	DEF	u2 > $.FastMath.pow(x,$.shape - 1)
1754	239	10	GammaDistribution.java	sample	x	double	1	DEF	u2 > FastMath.pow($,shape - 1)
1754	239	10	GammaDistribution.java	sample	u2	double	1	DEF	$ > FastMath.pow(x,shape - 1)
1755	253	6	GammaDistribution.java	sample	v	double	0	DEF	$ <= 0
1756	258	6	GammaDistribution.java	sample	x2	double	0	RET	u < 1 - 0.0331 * $ * $
1756	258	6	GammaDistribution.java	sample	u	double	0	RET	$ < 1 - 0.0331 * x2 * x2
1757	261	6	GammaDistribution.java	sample	THIS	GammaDistribution	0	RET	$.FastMath.log(u) < 0.5 * x2 + d * (1 - v + $.FastMath.log(v))
1757	261	6	GammaDistribution.java	sample	v	double	0	RET	FastMath.log(u) < 0.5 * x2 + d * (1 - $ + FastMath.log($))
1757	261	6	GammaDistribution.java	sample	x2	double	0	RET	FastMath.log(u) < 0.5 * $ + d * (1 - v + FastMath.log(v))
1757	261	6	GammaDistribution.java	sample	u	double	0	RET	FastMath.log($) < 0.5 * x2 + d * (1 - v + FastMath.log(v))
1757	261	6	GammaDistribution.java	sample	d	double	0	RET	FastMath.log(u) < 0.5 * x2 + $ * (1 - v + FastMath.log(v))
4292	29	4	GaussIntegrator.java	GaussIntegrator	THIS	GaussIntegrator	0	DimensionMismatchException	points.$.length != weights.$.length
4292	29	4	GaussIntegrator.java	GaussIntegrator	points	double[]	0	DimensionMismatchException	$.length != weights.length
4292	29	4	GaussIntegrator.java	GaussIntegrator	weights	double[]	0	DimensionMismatchException	points.length != $.length
6763	53	4	GaussIntegrator.java	integrate	THIS	GaussIntegrator	0	NIL-FOR	i < $.points.$.length
6763	53	4	GaussIntegrator.java	integrate	i	int	0	NIL-FOR	$ < points.length
6746	93	4	GaussIntegratorFactory.java	transform	THIS	GaussIntegratorFactory	0	NIL-FOR	i < points.$.length
6746	93	4	GaussIntegratorFactory.java	transform	i	int	0	NIL-FOR	$ < points.length
6746	93	4	GaussIntegratorFactory.java	transform	points	double[]	0	NIL-FOR	i < $.length
3097	47	4	GaussNewtonOptimizer.java	doOptimize	checker	ConvergenceChecker	0	NullArgumentException	$ == null
6221	54	4	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
6221	54	4	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
6222	60	4	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
6223	69	6	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
6223	69	6	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
6224	74	8	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
6224	74	8	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
6225	77	8	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
6225	77	8	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
6226	80	10	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < nC
6226	80	10	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	l < $
3098	85	6	GaussNewtonOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	$ != null
3099	87	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	RET	$
6227	96	8	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nC
6227	96	8	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	i < $
3100	110	4	GaussNewtonOptimizer.java	checkParameters	THIS	GaussNewtonOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
3100	110	4	GaussNewtonOptimizer.java	checkParameters	THIS	GaussNewtonOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
2883	62	4	GaussNewtonOptimizer.java	doOptimize	checker	ConvergenceChecker	0	NullArgumentException	$ == null
6103	69	4	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
6103	69	4	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
6104	76	4	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
6105	85	6	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
6105	85	6	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
6106	90	8	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
6106	90	8	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
6107	93	8	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
6107	93	8	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
6108	96	10	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < nC
6108	96	10	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	l < $
6109	105	8	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nC
6109	105	8	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	i < $
2884	112	6	GaussNewtonOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	$ != null
2885	114	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	RET	$
4085	44	4	Gaussian.java	Gaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
4086	158	4	Gaussian.java	value	THIS	Gaussian	1	DEF	coeff <= $.Precision.SAFE_MIN
4086	158	4	Gaussian.java	value	coeff	double	1	DEF	$ <= Precision.SAFE_MIN
6648	163	6	Gaussian.java	value	THIS	Gaussian	0	NIL-FOR	n < f.$.length
6648	163	6	Gaussian.java	value	n	int	0	NIL-FOR	$ < f.length
6648	163	6	Gaussian.java	value	f	double[]	0	NIL-FOR	n < $.length
6649	166	8	Gaussian.java	value	k	int	0	NIL-FOR	$ >= 0
4087	168	10	Gaussian.java	value	k	int	1	DEF	$ > 2
4088	172	12	Gaussian.java	value	k	int	0	DEF	$ == 2
4089	177	8	Gaussian.java	value	n	int	0	DEF	($ & 0x1) == 1
2937	50	4	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ > 1
2937	50	4	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ < 0
2938	53	4	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ > 1
2938	53	4	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ < 0
6135	85	4	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
6135	85	4	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
6136	99	4	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $.getPopulationLimit()
2939	101	6	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getCrossoverRate()
2939	101	6	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getCrossoverRate()
2940	104	6	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getMutationRate()
2940	104	6	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getMutationRate()
2941	108	6	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $.getPopulationLimit()
1814	39	4	GeometricDistribution.java	GeometricDistribution	p	double	0	OutOfRangeException	$ <= 0
1814	39	4	GeometricDistribution.java	GeometricDistribution	p	double	0	OutOfRangeException	$ > 1
1815	56	4	GeometricDistribution.java	probability	x	int	1	DEF	$ < 0
1816	70	4	GeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
226	65	4	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
227	128	4	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	MathIllegalStateException	$.getN() > 0
2390	52	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	1	DEF	$.previousState != null
2390	52	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
5731	59	6	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
5731	59	6	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
5732	75	6	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
5732	75	6	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
6736	25	4	GradientFunction.java	value	THIS	GradientFunction	0	NIL-FOR	i < point.$.length
6736	25	4	GradientFunction.java	value	i	int	0	NIL-FOR	$ < point.length
6736	25	4	GradientFunction.java	value	point	double[]	0	NIL-FOR	i < $.length
6737	31	4	GradientFunction.java	value	THIS	GradientFunction	0	NIL-FOR	i < point.$.length
6737	31	4	GradientFunction.java	value	i	int	0	NIL-FOR	$ < point.length
6737	31	4	GradientFunction.java	value	point	double[]	0	NIL-FOR	i < $.length
3352	47	6	GradientMultivariateOptimizer.java	parseOptimizationData	THIS	GradientMultivariateOptimizer	0	DEF	$.data instanceof ObjectiveFunctionGradient
2400	133	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ > 0.9999
2400	133	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ < 0.0001
2401	148	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ > 0.9999
2401	148	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ < 0.0001
2402	154	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ > 0.9999
2402	154	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ < 0.0001
2403	160	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ > 0.9999
2403	160	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ < 0.0001
2404	166	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ < 1.0001
2404	166	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ > 999.9
2405	180	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ % 2 != 0
2405	180	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ <= 6
2406	183	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ > 0.9999
2406	183	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ < 0.0001
2407	189	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ < 0.0001
2407	189	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ > 0.9999
2408	216	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
2408	216	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
2408	216	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
5750	223	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
5750	223	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
5751	227	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
5751	227	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
5752	230	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
5752	230	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
5753	232	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
5753	232	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
2409	245	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ <= 0
2409	245	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ >= 7
2410	259	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
5754	260	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
5754	260	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
5754	260	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
5755	266	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
5755	266	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
5755	266	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
5756	292	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
5756	292	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
5756	292	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
5757	297	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
5757	297	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
2411	298	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
2411	298	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
5758	302	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
5758	302	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
5758	302	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
2412	308	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
2412	308	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
2412	308	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
2412	308	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
2412	308	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
5759	310	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
5759	310	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
5759	310	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
5760	315	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
5760	315	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
5760	315	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
2413	319	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	deltaNorm > 4 * $.FastMath.max(1.0e-15,initialNorm)
2413	319	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * FastMath.max(1.0e-15,$)
2413	319	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * FastMath.max(1.0e-15,initialNorm)
5761	324	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
5761	324	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
5761	324	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
5762	337	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
5762	337	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
5763	338	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
5763	338	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
5763	338	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
5764	342	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
5764	342	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
5764	342	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
5765	361	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length - 1
5765	361	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length - 1
5766	366	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
5766	366	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
5767	369	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
5767	369	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
5767	369	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
2414	373	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
2414	373	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
5768	395	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-DOWHILE	$.isLastStep
2415	398	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
2416	400	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
2417	403	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2418	409	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
2418	409	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
2418	409	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2418	409	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2418	409	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
2418	409	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
5769	415	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
2419	417	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep($.stepStart,y,$.stepSize,k,scale,fk[k],(k == 0) ? yMidDots[0] : diagonal[k - 1],(k == 0) ? y1 : y1Diag[k - 1],yTmp)
2419	417	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(stepStart,y,stepSize,$,scale,fk[$],($ == 0) ? yMidDots[0] : diagonal[$ - 1],($ == 0) ? y1 : y1Diag[$ - 1],yTmp)
2419	417	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(stepStart,$,stepSize,k,scale,fk[k],(k == 0) ? yMidDots[0] : diagonal[k - 1],(k == 0) ? y1 : y1Diag[k - 1],yTmp)
2419	417	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(stepStart,y,stepSize,k,scale,fk[k],(k == 0) ? yMidDots[0] : diagonal[k - 1],(k == 0) ? $ : y1Diag[k - 1],yTmp)
2419	417	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(stepStart,y,stepSize,k,scale,fk[k],(k == 0) ? yMidDots[0] : diagonal[k - 1],(k == 0) ? y1 : y1Diag[k - 1],$)
2419	417	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(stepStart,y,stepSize,k,scale,fk[k],(k == 0) ? yMidDots[0] : $[k - 1],(k == 0) ? y1 : y1Diag[k - 1],yTmp)
2419	417	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(stepStart,y,stepSize,k,scale,fk[k],(k == 0) ? yMidDots[0] : diagonal[k - 1],(k == 0) ? y1 : $[k - 1],yTmp)
2419	417	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(stepStart,y,stepSize,k,scale,$[k],(k == 0) ? yMidDots[0] : diagonal[k - 1],(k == 0) ? y1 : y1Diag[k - 1],yTmp)
2419	417	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(stepStart,y,stepSize,k,scale,fk[k],(k == 0) ? $[0] : diagonal[k - 1],(k == 0) ? y1 : y1Diag[k - 1],yTmp)
2419	417	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(stepStart,y,stepSize,k,$,fk[k],(k == 0) ? yMidDots[0] : diagonal[k - 1],(k == 0) ? y1 : y1Diag[k - 1],yTmp)
2420	423	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
5770	427	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < $.mainSetDimension
5770	427	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < mainSetDimension
2421	432	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
2421	432	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
2421	432	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
2421	432	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
2422	447	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2422	447	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
2423	448	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
2424	453	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
2424	453	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
2425	457	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter - 1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2425	457	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$ - 1] < orderControl1 * costPerTimeUnit[$]
2425	457	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2426	466	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
2427	471	14	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
2427	471	14	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
2428	474	16	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter - 1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2428	474	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$ - 1] < orderControl1 * costPerTimeUnit[$]
2428	474	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2429	482	8	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
2430	484	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter - 1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2430	484	10	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2430	484	10	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$ - 1] < orderControl1 * costPerTimeUnit[$]
2431	492	2	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.isLastStep
2431	492	2	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
2431	492	2	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2432	501	0	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
2433	505	0	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
5771	506	0	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
5771	506	0	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
5772	510	0	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
5772	510	0	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
5773	514	0	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
5773	514	0	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
5773	514	0	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
5774	517	0	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
5774	517	0	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
5774	517	0	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
5775	520	0	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
5775	520	0	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
5775	520	0	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
5776	525	0	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
5776	525	0	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
5776	525	0	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
5777	528	0	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
5777	528	0	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
5778	529	0	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
5778	529	0	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
5779	530	0	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
5779	530	0	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
5779	530	0	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
2434	536	0	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
2435	539	0	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
2436	542	0	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
2437	549	0	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
2438	557	0	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
2439	559	0	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
2440	564	0	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
2440	564	0	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
2441	566	0	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k - 1] < $.orderControl1 * $.costPerTimeUnit[k]
2441	566	0	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$ - 1] < orderControl1 * costPerTimeUnit[$]
2442	570	0	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k - 1]
2442	570	0	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$ - 1]
2443	577	0	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k - 2] < $.orderControl1 * $.costPerTimeUnit[k - 1]
2443	577	0	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
2443	577	0	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$ - 2] < orderControl1 * costPerTimeUnit[$ - 1]
2444	580	0	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
2444	580	0	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
2444	580	0	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
2445	585	0	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
2446	590	0	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
2446	590	0	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
2447	594	0	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k - 1]
2447	594	0	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$ - 1]
2447	594	0	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
2447	594	0	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
2448	606	0	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2449	610	0	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
2376	88	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynomials == null
2376	88	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials == null
5708	94	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynomials.$.length
5708	94	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynomials.length
2377	106	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
2378	113	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials != null
5709	115	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
5709	115	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
5709	115	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
5710	120	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
5710	120	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
5710	120	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
2379	125	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
5711	130	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
5711	130	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
5712	134	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
5712	134	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
2380	154	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials.$.length <= (mu + 4)
2380	154	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials == null
2380	154	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynomials.length <= ($ + 4)
5713	158	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
5713	158	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
2381	168	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
2382	173	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
2383	176	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
2384	179	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
5714	182	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
5714	182	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
2385	199	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
5715	200	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < scale.$.length
5715	200	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < scale.length
5715	200	6	GraggBulirschStoerStepInterpolator.java	estimateError	scale	double[]	0	NIL-FOR	i < $.length
5716	221	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < dimension
5716	221	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	dimension	int	0	NIL-FOR	i < $
2386	228	6	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
5717	231	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ > 3
2387	240	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
5718	251	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
5718	251	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
5719	252	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
5719	252	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
5720	266	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
5720	266	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
5721	267	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
5721	267	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
521	59	4	HaltonSequenceGenerator.java	HaltonSequenceGenerator	THIS	HaltonSequenceGenerator	0	OutOfRangeException	dimension > bases.$.length
521	59	4	HaltonSequenceGenerator.java	HaltonSequenceGenerator	dimension	int	0	OutOfRangeException	$ > bases.length
521	59	4	HaltonSequenceGenerator.java	HaltonSequenceGenerator	dimension	int	0	OutOfRangeException	$ < 1
521	59	4	HaltonSequenceGenerator.java	HaltonSequenceGenerator	bases	int[]	0	OutOfRangeException	dimension > $.length
522	62	4	HaltonSequenceGenerator.java	HaltonSequenceGenerator	THIS	HaltonSequenceGenerator	0	DimensionMismatchException	weights.$.length != bases.$.length
522	62	4	HaltonSequenceGenerator.java	HaltonSequenceGenerator	bases	int[]	0	DimensionMismatchException	weights.length != $.length
522	62	4	HaltonSequenceGenerator.java	HaltonSequenceGenerator	weights	int[]	0	DimensionMismatchException	$.length != bases.length
522	62	4	HaltonSequenceGenerator.java	HaltonSequenceGenerator	weights	int[]	0	DimensionMismatchException	$ != null
4534	75	4	HaltonSequenceGenerator.java	nextVector	THIS	HaltonSequenceGenerator	0	NIL-FOR	i < $.dimension
4534	75	4	HaltonSequenceGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
4535	79	6	HaltonSequenceGenerator.java	nextVector	index	int	0	NIL-WHILE	$ > 0
4079	120	4	HarmonicOscillator.java	value	THIS	HarmonicOscillator	0	DEF	f.$.length > 1
4079	120	4	HarmonicOscillator.java	value	f	double[]	0	DEF	$.length > 1
6647	123	6	HarmonicOscillator.java	value	THIS	HarmonicOscillator	0	NIL-FOR	i < f.$.length
6647	123	6	HarmonicOscillator.java	value	i	int	0	NIL-FOR	$ < f.length
6647	123	6	HarmonicOscillator.java	value	f	double[]	0	NIL-FOR	i < $.length
6560	47	4	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	i < value.$.length
6560	47	4	HermiteInterpolator.java	addSamplePoint	i	int	0	NIL-FOR	$ < value.length
6560	47	4	HermiteInterpolator.java	addSamplePoint	value	double[]	0	NIL-FOR	i < $.length
3966	49	6	HermiteInterpolator.java	addSamplePoint	i	int	0	DEF	$ > 1
6561	51	8	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	j < y.$.length
6561	51	8	HermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < y.length
6561	51	8	HermiteInterpolator.java	addSamplePoint	y	double[]	0	NIL-FOR	j < $.length
6562	58	6	HermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < n
6562	58	6	HermiteInterpolator.java	addSamplePoint	n	int	0	NIL-FOR	j < $
3967	61	8	HermiteInterpolator.java	addSamplePoint	inv	double	0	ZeroException	Double.isInfinite($)
6563	64	8	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	k < y.$.length
6563	64	8	HermiteInterpolator.java	addSamplePoint	k	int	0	NIL-FOR	$ < y.length
6563	64	8	HermiteInterpolator.java	addSamplePoint	y	double[]	0	NIL-FOR	k < $.length
6564	82	4	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	i < polynomials.$.length
6564	82	4	HermiteInterpolator.java	getPolynomials	i	int	0	NIL-FOR	$ < polynomials.length
6564	82	4	HermiteInterpolator.java	getPolynomials	polynomials	PolynomialFunction[]	0	NIL-FOR	i < $.length
6565	86	4	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
6565	86	4	HermiteInterpolator.java	getPolynomials	i	int	0	NIL-FOR	$ < topDiagonal.size()
6566	88	6	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	k < polynomials.$.length
6566	88	6	HermiteInterpolator.java	getPolynomials	k	int	0	NIL-FOR	$ < polynomials.length
6566	88	6	HermiteInterpolator.java	getPolynomials	polynomials	PolynomialFunction[]	0	NIL-FOR	k < $.length
6567	105	4	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
6567	105	4	HermiteInterpolator.java	value	i	int	0	NIL-FOR	$ < topDiagonal.size()
6568	107	6	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	k < value.$.length
6568	107	6	HermiteInterpolator.java	value	k	int	0	NIL-FOR	$ < value.length
6568	107	6	HermiteInterpolator.java	value	value	double[]	0	NIL-FOR	k < $.length
6569	126	4	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
6569	126	4	HermiteInterpolator.java	value	i	int	0	NIL-FOR	$ < topDiagonal.size()
6570	128	6	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	k < value.$.length
6570	128	6	HermiteInterpolator.java	value	k	int	0	NIL-FOR	$ < value.length
6570	128	6	HermiteInterpolator.java	value	value	DerivativeStructure[]	0	NIL-FOR	k < $.length
3968	141	4	HermiteInterpolator.java	checkInterpolation	THIS	HermiteInterpolator	0	NoDataException	$.abscissae.isEmpty()
4284	27	4	HermiteRuleFactory.java	computeRule	numberOfPoints	int	0	RET	$ == 1
6753	37	4	HermiteRuleFactory.java	computeRule	i	int	0	NIL-FOR	$ < iMax
6753	37	4	HermiteRuleFactory.java	computeRule	iMax	int	0	NIL-FOR	i < $
6754	44	6	HermiteRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
6754	44	6	HermiteRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
6755	59	6	HermiteRuleFactory.java	computeRule	done	boolean	0	NIL-WHILE	$
6756	63	8	HermiteRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
6756	63	8	HermiteRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
4285	71	8	HermiteRuleFactory.java	computeRule	done	boolean	0	DEF	$
4286	72	10	HermiteRuleFactory.java	computeRule	ha	double	1	DEF	$ * hc < 0
4286	72	10	HermiteRuleFactory.java	computeRule	hc	double	1	DEF	ha * $ < 0
4287	93	4	HermiteRuleFactory.java	computeRule	numberOfPoints	int	0	DEF	$ % 2 != 0
6757	95	6	HermiteRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
6757	95	6	HermiteRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
1259	38	4	HessenbergTransformer.java	HessenbergTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1260	54	4	HessenbergTransformer.java	getP	THIS	HessenbergTransformer	0	DEF	$.cachedP == null
4875	58	6	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ < n
4875	58	6	HessenbergTransformer.java	getP	n	int	0	NIL-FOR	i < $
4876	59	8	HessenbergTransformer.java	getP	j	int	0	NIL-FOR	$ < n
4876	59	8	HessenbergTransformer.java	getP	n	int	0	NIL-FOR	j < $
4877	63	6	HessenbergTransformer.java	getP	m	int	0	NIL-FOR	$ >= 1
1261	64	8	HessenbergTransformer.java	getP	THIS	HessenbergTransformer	0	DEF	$.householderVectors[m][m - 1] != 0.0
1261	64	8	HessenbergTransformer.java	getP	m	int	0	DEF	householderVectors[$][$ - 1] != 0.0
4878	65	10	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
4878	65	10	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
4879	68	10	HessenbergTransformer.java	getP	j	int	0	NIL-FOR	$ <= high
4879	68	10	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	j <= $
4880	70	12	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
4880	70	12	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
4881	74	12	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
4881	74	12	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
1262	89	4	HessenbergTransformer.java	getPT	THIS	HessenbergTransformer	0	DEF	$.cachedPt == null
1263	99	4	HessenbergTransformer.java	getH	THIS	HessenbergTransformer	0	DEF	$.cachedH == null
4882	102	6	HessenbergTransformer.java	getH	i	int	0	NIL-FOR	$ < m
4882	102	6	HessenbergTransformer.java	getH	m	int	0	NIL-FOR	i < $
1264	103	8	HessenbergTransformer.java	getH	i	int	0	DEF	$ > 0
4883	106	8	HessenbergTransformer.java	getH	j	int	0	NIL-FOR	$ < m
4883	106	8	HessenbergTransformer.java	getH	m	int	0	NIL-FOR	j < $
4884	127	4	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	$ <= high - 1
4884	127	4	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	m <= $ - 1
4885	129	6	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
4885	129	6	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
1265	132	6	HessenbergTransformer.java	transform	THIS	HessenbergTransformer	0	DEF	$.Precision.equals(scale,0)
1265	132	6	HessenbergTransformer.java	transform	scale	double	0	DEF	Precision.equals($,0)
4886	134	8	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ >= m
4886	134	8	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	i >= $
4887	141	8	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ < n
4887	141	8	HessenbergTransformer.java	transform	n	int	0	NIL-FOR	j < $
4888	143	10	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ >= m
4888	143	10	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	i >= $
4889	147	10	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
4889	147	10	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
4890	151	8	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
4890	151	8	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
4891	153	10	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ >= m
4891	153	10	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	j >= $
4892	157	10	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ <= high
4892	157	10	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	j <= $
5729	60	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < $.mainSetDimension
5729	60	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
5730	62	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < STATIC_E.$.length
5730	62	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < STATIC_E.length
2469	42	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	1	DEF	$.previousState != null
2469	42	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
5800	49	6	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
5800	49	6	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
5801	66	6	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
5801	66	6	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1836	65	4	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NotStrictlyPositiveException	$ <= 0
1837	68	4	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NotPositiveException	$ < 0
1838	71	4	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NotPositiveException	$ < 0
1839	74	4	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	numberOfSuccesses > $
1839	74	4	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NumberIsTooLargeException	$ > populationSize
1840	77	4	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	sampleSize > $
1840	77	4	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NumberIsTooLargeException	$ > populationSize
1841	90	4	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
1841	90	4	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
1842	94	6	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
1842	94	6	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
1843	159	4	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x < $[0]
1843	159	4	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x > $[1]
1843	159	4	HypergeometricDistribution.java	probability	x	int	1	DEF	$ < domain[0]
1843	159	4	HypergeometricDistribution.java	probability	x	int	1	DEF	$ > domain[1]
1844	181	4	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x <= $[0]
1844	181	4	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ <= domain[0]
1845	185	6	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
1845	185	6	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
5552	203	4	HypergeometricDistribution.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
5552	203	4	HypergeometricDistribution.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
1846	219	4	HypergeometricDistribution.java	getNumericalVariance	THIS	HypergeometricDistribution	0	DEF	$.numericalVarianceIsCalculated
449	109	4	ISAACRandom.java	setSeed	seed	int[]	0	RET	$ == null
450	116	4	ISAACRandom.java	setSeed	seedLen	int	0	DEF	$ < rslLen
450	116	4	ISAACRandom.java	setSeed	rslLen	int	0	DEF	seedLen < $
4499	117	6	ISAACRandom.java	setSeed	j	int	0	NIL-FOR	$ < rslLen
4499	117	6	ISAACRandom.java	setSeed	rslLen	int	0	NIL-FOR	j < $
451	128	4	ISAACRandom.java	next	THIS	ISAACRandom	0	DEF	$.count < 0
4500	141	4	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacI < H_SIZE
4501	145	4	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacJ < H_SIZE
4502	185	4	ISAACRandom.java	initState	THIS	ISAACRandom	0	NIL-FOR	j < $.arr.$.length
4502	185	4	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < arr.length
4503	188	4	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < 4
4504	191	4	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
4505	203	4	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
660	50	4	Incrementor.java	Incrementor	cb	MaxCountExceededCallback	0	NullArgumentException	$ == null
4599	90	4	Incrementor.java	incrementCount	i	int	0	NIL-FOR	$ < value
4599	90	4	Incrementor.java	incrementCount	value	int	0	NIL-FOR	i < $
661	99	4	Incrementor.java	incrementCount	THIS	Incrementor	0	DEF	++$.count > $.maximalCount
3898	99	4	Interval.java	checkPoint	THIS	Interval	1	RET	point > $.upper + tolerance
3898	99	4	Interval.java	checkPoint	THIS	Interval	1	RET	point < $.lower - tolerance
3898	99	4	Interval.java	checkPoint	point	double	1	RET	$ > upper + tolerance
3898	99	4	Interval.java	checkPoint	point	double	1	RET	$ < lower - tolerance
3898	99	4	Interval.java	checkPoint	tolerance	double	1	RET	point > upper + $
3898	99	4	Interval.java	checkPoint	tolerance	double	1	RET	point < lower - $
3899	103	6	Interval.java	checkPoint	THIS	Interval	1	RET	point > $.lower + tolerance
3899	103	6	Interval.java	checkPoint	THIS	Interval	1	RET	point < $.upper - tolerance
3899	103	6	Interval.java	checkPoint	point	double	1	RET	$ > lower + tolerance
3899	103	6	Interval.java	checkPoint	point	double	1	RET	$ < upper - tolerance
3899	103	6	Interval.java	checkPoint	tolerance	double	1	RET	point > lower + $
3899	103	6	Interval.java	checkPoint	tolerance	double	1	RET	point < upper - $
3905	50	4	IntervalsSet.java	buildTree	lower	double	0	RET	Double.isInfinite($)
3905	50	4	IntervalsSet.java	buildTree	lower	double	0	RET	$ < 0
3906	51	6	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
3906	51	6	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
3907	58	4	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
3907	58	4	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
3908	74	4	IntervalsSet.java	computeGeometricalProperties	THIS	IntervalsSet	1	DEF	$.getTree(false).getCut() == null
3909	86	6	IntervalsSet.java	computeGeometricalProperties	size	double	1	DEF	Double.isInfinite($)
3910	90	8	IntervalsSet.java	computeGeometricalProperties	THIS	IntervalsSet	1	DEF	size >= $.Precision.SAFE_MIN
3910	90	8	IntervalsSet.java	computeGeometricalProperties	size	double	1	DEF	$ >= Precision.SAFE_MIN
6496	106	4	IntervalsSet.java	getInf	node	BSPTree	0	NIL-WHILE	$.getCut() != null
6497	120	4	IntervalsSet.java	getSup	node	BSPTree	0	NIL-WHILE	$.getCut() != null
3911	144	4	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	1	DEF	$.getCut() == null
3912	145	6	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	0	DEF	(Boolean)$.getAttribute()
3913	156	6	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(low,loc) == $.Location.INSIDE
3913	156	6	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(high,loc) == $.Location.INSIDE
3913	156	6	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(low,$) == Location.INSIDE
3913	156	6	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(high,$) == Location.INSIDE
3913	156	6	IntervalsSet.java	recurseList	low	BSPTree	0	DEF	checkPoint($,loc) == Location.INSIDE
3913	156	6	IntervalsSet.java	recurseList	high	BSPTree	0	DEF	checkPoint($,loc) == Location.INSIDE
4267	38	4	IterativeLegendreGaussIntegrator.java	IterativeLegendreGaussIntegrator	n	int	0	NotStrictlyPositiveException	$ <= 0
4268	75	6	IterativeLegendreGaussIntegrator.java	doIntegrate	THIS	IterativeLegendreGaussIntegrator	0	RET	$.iterations.getCount() + 1 >= $.getMinimalIterationCount()
4268	75	6	IterativeLegendreGaussIntegrator.java	doIntegrate	delta	double	0	RET	$ <= limit
4268	75	6	IterativeLegendreGaussIntegrator.java	doIntegrate	limit	double	0	RET	delta <= $
6741	101	4	IterativeLegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
6741	101	4	IterativeLegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
1274	46	4	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != $.getColumnDimension()
1275	49	4	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	b.getDimension() != $.getRowDimension()
1275	49	4	IterativeLinearSolver.java	checkParameters	b	RealVector	0	DimensionMismatchException	$.getDimension() != a.getRowDimension()
1276	52	4	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	x0.getDimension() != $.getColumnDimension()
1276	52	4	IterativeLinearSolver.java	checkParameters	x0	RealVector	0	DimensionMismatchException	$.getDimension() != a.getColumnDimension()
1323	30	4	JacobiPreconditioner.java	create	n	int	0	NonSquareOperatorException	a.getRowDimension() != $
1323	30	4	JacobiPreconditioner.java	create	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != n
1324	34	4	JacobiPreconditioner.java	create	a	RealLinearOperator	1	DEF	$ instanceof AbstractRealMatrix
4945	36	6	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
4945	36	6	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
4946	42	6	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
4946	42	6	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
6738	25	4	JacobianFunction.java	value	THIS	JacobianFunction	0	NIL-FOR	i < point.$.length
6738	25	4	JacobianFunction.java	value	i	int	0	NIL-FOR	$ < point.length
6738	25	4	JacobianFunction.java	value	point	double[]	0	NIL-FOR	i < $.length
6739	31	4	JacobianFunction.java	value	THIS	JacobianFunction	0	NIL-FOR	i < dsY.$.length
6739	31	4	JacobianFunction.java	value	i	int	0	NIL-FOR	$ < dsY.length
6739	31	4	JacobianFunction.java	value	dsY	DerivativeStructure[]	0	NIL-FOR	i < $.length
6740	32	6	JacobianFunction.java	value	THIS	JacobianFunction	0	NIL-FOR	j < point.$.length
6740	32	6	JacobianFunction.java	value	j	int	0	NIL-FOR	$ < point.length
6740	32	6	JacobianFunction.java	value	point	double[]	0	NIL-FOR	j < $.length
2272	82	4	JacobianMatrices.java	JacobianMatrices	parameters	String	1	DEF	$ == null
5659	88	6	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < parameters.$.length
5659	88	6	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < parameters.length
5659	88	6	JacobianMatrices.java	JacobianMatrices	parameters	String	0	NIL-FOR	i < $.length
5660	96	4	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
5660	96	4	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < stateDim
2273	109	4	JacobianMatrices.java	registerVariationalEquations	ode	FirstOrderDifferentialEquations	0	MismatchedEquations	expandable.getPrimary() != $
2273	109	4	JacobianMatrices.java	registerVariationalEquations	expandable	ExpandableStatefulODE	0	MismatchedEquations	$.getPrimary() != ode
2274	140	6	JacobianMatrices.java	setParameterStep	THIS	JacobianMatrices	0	RET	parameter.equals($.param.getParameterName())
2274	140	6	JacobianMatrices.java	setParameterStep	parameter	String	0	RET	$.equals(param.getParameterName())
2275	161	4	JacobianMatrices.java	setInitialMainStateJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
2276	176	6	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	RET	pName.equals($.param.getParameterName())
2276	176	6	JacobianMatrices.java	setInitialParameterJacobian	pName	String	0	RET	$.equals(param.getParameterName())
2277	178	8	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
5661	194	4	JacobianMatrices.java	getCurrentMainSetJacobian	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
5661	194	4	JacobianMatrices.java	getCurrentMainSetJacobian	i	int	0	NIL-FOR	$ < stateDim
2278	208	6	JacobianMatrices.java	getCurrentParameterJacobian	THIS	JacobianMatrices	0	RET	$.param.getParameterName().equals(pName)
2278	208	6	JacobianMatrices.java	getCurrentParameterJacobian	pName	String	0	RET	param.getParameterName().equals($)
2279	223	4	JacobianMatrices.java	checkDimension	arrayDimension	int	0	DimensionMismatchException	$ != expected
2279	223	4	JacobianMatrices.java	checkDimension	expected	int	0	DimensionMismatchException	arrayDimension != $
3062	49	6	JacobianMultivariateVectorOptimizer.java	parseOptimizationData	THIS	JacobianMultivariateVectorOptimizer	0	DEF	$.data instanceof ModelFunctionJacobian
1633	142	4	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	NumberIsTooSmallException	points.size() < $.k
1633	142	4	KMeansPlusPlusClusterer.java	cluster	points	Collection<T>	0	NumberIsTooSmallException	$.size() < k
5484	149	4	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
5484	149	4	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
1634	154	8	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	1	ConvergenceException	$.cluster.getPoints().isEmpty()
1635	177	0	KMeansPlusPlusClusterer.java	cluster	emptyCluster	boolean	0	RET	$
1635	177	0	KMeansPlusPlusClusterer.java	cluster	changes	int	0	RET	$ == 0
1636	195	0	KMeansPlusPlusClusterer.java	assignPointsToClusters	clusterIndex	int	0	DEF	$ != assignments[pointIndex]
1636	195	0	KMeansPlusPlusClusterer.java	assignPointsToClusters	pointIndex	int	0	DEF	clusterIndex != assignments[$]
1636	195	0	KMeansPlusPlusClusterer.java	assignPointsToClusters	assignments	int[]	0	DEF	clusterIndex != $[pointIndex]
5485	219	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
5485	219	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
1637	220	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	$ != firstPointIndex
1637	220	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	firstPointIndex	int	0	DEF	i != $
5486	225	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	THIS	KMeansPlusPlusClusterer	0	NIL-WHILE	resultSet.size() < $.k
5486	225	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<CentroidCluster>	0	NIL-WHILE	$.size() < k
5487	227	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
5487	227	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
1638	228	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
1638	228	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
5488	235	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
5488	235	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
1639	236	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
1639	236	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
1640	238	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	sum >= $
1640	238	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	sum	double	0	DEF	$ >= r
1641	244	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	0	DEF	$ == -1
5489	245	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ >= 0
1642	246	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
1642	246	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
1643	252	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	1	DEF	$ >= 0
1644	256	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	THIS	KMeansPlusPlusClusterer	0	DEF	resultSet.size() < $.k
1644	256	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<CentroidCluster>	0	DEF	$.size() < k
5490	257	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	NIL-FOR	$ < numPoints
5490	257	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	j < $
1645	258	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	taken[$]
1645	258	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[j]
1646	261	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	d2	double	0	DEF	$ < minDistSquared[j]
1646	261	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	d2 < minDistSquared[$]
1646	261	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	minDistSquared	double[]	0	DEF	d2 < $[j]
1647	284	0	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
1648	291	0	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	variance	double	0	DEF	$ > maxVariance
1648	291	0	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	maxVariance	double	0	DEF	variance > $
1649	297	0	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	selected	Cluster	0	ConvergenceException	$ == null
1650	314	0	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	number	int	0	DEF	$ > maxNumber
1650	314	0	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	maxNumber	int	0	DEF	number > $
1651	319	0	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	selected	Cluster	0	ConvergenceException	$ == null
5491	338	0	KMeansPlusPlusClusterer.java	getFarthestPoint	i	int	0	NIL-FOR	$ < points.size()
5491	338	0	KMeansPlusPlusClusterer.java	getFarthestPoint	points	List<T>	0	NIL-FOR	i < $.size()
1652	340	0	KMeansPlusPlusClusterer.java	getFarthestPoint	distance	double	0	DEF	$ > maxDistance
1652	340	0	KMeansPlusPlusClusterer.java	getFarthestPoint	maxDistance	double	0	DEF	distance > $
1653	347	0	KMeansPlusPlusClusterer.java	getFarthestPoint	selectedCluster	Cluster	0	ConvergenceException	$ == null
1654	364	0	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
1654	364	0	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
5492	382	0	KMeansPlusPlusClusterer.java	centroidOf	THIS	KMeansPlusPlusClusterer	0	NIL-FOR	i < centroid.$.length
5492	382	0	KMeansPlusPlusClusterer.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
5492	382	0	KMeansPlusPlusClusterer.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
5493	386	0	KMeansPlusPlusClusterer.java	centroidOf	THIS	KMeansPlusPlusClusterer	0	NIL-FOR	i < centroid.$.length
5493	386	0	KMeansPlusPlusClusterer.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
5493	386	0	KMeansPlusPlusClusterer.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
4426	76	4	KMeansPlusPlusClusterer.java	cluster	i	int	0	NIL-FOR	$ < numTrials
4426	76	4	KMeansPlusPlusClusterer.java	cluster	numTrials	int	0	NIL-FOR	i < $
334	80	8	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
335	89	6	KMeansPlusPlusClusterer.java	cluster	varianceSum	double	0	DEF	$ <= bestVarianceSum
335	89	6	KMeansPlusPlusClusterer.java	cluster	bestVarianceSum	double	0	DEF	varianceSum <= $
336	107	4	KMeansPlusPlusClusterer.java	cluster	points	Collection<T>	0	NumberIsTooSmallException	$.size() < k
336	107	4	KMeansPlusPlusClusterer.java	cluster	k	int	0	NumberIsTooSmallException	points.size() < $
4427	114	4	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
4427	114	4	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
337	119	8	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	1	ConvergenceException	$.cluster.getPoints().isEmpty()
338	142	0	KMeansPlusPlusClusterer.java	cluster	emptyCluster	boolean	0	RET	$
338	142	0	KMeansPlusPlusClusterer.java	cluster	changes	int	0	RET	$ == 0
339	161	0	KMeansPlusPlusClusterer.java	assignPointsToClusters	clusterIndex	int	0	DEF	$ != assignments[pointIndex]
339	161	0	KMeansPlusPlusClusterer.java	assignPointsToClusters	pointIndex	int	0	DEF	clusterIndex != assignments[$]
339	161	0	KMeansPlusPlusClusterer.java	assignPointsToClusters	assignments	int[]	0	DEF	clusterIndex != $[pointIndex]
4428	188	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
4428	188	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
340	189	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	$ != firstPointIndex
340	189	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	firstPointIndex	int	0	DEF	i != $
4429	194	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster>	0	NIL-WHILE	$.size() < k
4429	194	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	NIL-WHILE	resultSet.size() < $
4430	196	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
4430	196	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
341	197	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
341	197	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
4431	204	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
4431	204	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
342	205	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
342	205	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
343	207	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	sum >= $
343	207	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	sum	double	0	DEF	$ >= r
344	213	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	0	DEF	$ == -1
4432	214	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ >= 0
345	215	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
345	215	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
346	221	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	1	DEF	$ >= 0
347	225	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster>	0	DEF	$.size() < k
347	225	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	DEF	resultSet.size() < $
4433	226	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	NIL-FOR	$ < numPoints
4433	226	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	j < $
348	227	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	taken[$]
348	227	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[j]
349	230	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	d2	double	0	DEF	$ < minDistSquared[j]
349	230	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	d2 < minDistSquared[$]
349	230	0	KMeansPlusPlusClusterer.java	chooseInitialCenters	minDistSquared	double[]	0	DEF	d2 < $[j]
350	253	0	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
351	260	0	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	variance	double	0	DEF	$ > maxVariance
351	260	0	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	maxVariance	double	0	DEF	variance > $
352	266	0	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	selected	Cluster	0	ConvergenceException	$ == null
353	283	0	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	number	int	0	DEF	$ > maxNumber
353	283	0	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	maxNumber	int	0	DEF	number > $
354	288	0	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	selected	Cluster	0	ConvergenceException	$ == null
4434	307	0	KMeansPlusPlusClusterer.java	getFarthestPoint	i	int	0	NIL-FOR	$ < points.size()
4434	307	0	KMeansPlusPlusClusterer.java	getFarthestPoint	points	List<T>	0	NIL-FOR	i < $.size()
355	309	0	KMeansPlusPlusClusterer.java	getFarthestPoint	distance	double	0	DEF	$ > maxDistance
355	309	0	KMeansPlusPlusClusterer.java	getFarthestPoint	maxDistance	double	0	DEF	distance > $
356	316	0	KMeansPlusPlusClusterer.java	getFarthestPoint	selectedCluster	Cluster	0	ConvergenceException	$ == null
357	334	0	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
357	334	0	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
1621	82	4	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getControlMatrix() == null
1622	95	4	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialStateEstimate() == null
1623	101	4	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	DimensionMismatchException	$.transitionMatrix.getColumnDimension() != $.stateEstimation.getDimension()
1624	104	4	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialErrorCovariance() == null
1625	110	4	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	NonSquareMatrixException	$.transitionMatrix.isSquare()
1626	113	4	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() != $.transitionMatrix.getRowDimension()
1626	113	4	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() > 0
1626	113	4	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() != 1
1626	113	4	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix != null
1626	113	4	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() > 0
1627	117	4	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.measurementMatrix.getColumnDimension() != $.transitionMatrix.getRowDimension()
1628	120	4	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	measNoise.getRowDimension() != $.measurementMatrix.getRowDimension()
1628	120	4	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1628	120	4	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != measurementMatrix.getRowDimension()
1629	186	4	KalmanFilter.java	predict	THIS	KalmanFilter	0	DimensionMismatchException	u.getDimension() != $.controlMatrix.getColumnDimension()
1629	186	4	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$ != null
1629	186	4	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$.getDimension() != controlMatrix.getColumnDimension()
1630	190	4	KalmanFilter.java	predict	u	RealVector	0	DEF	$ != null
1631	214	4	KalmanFilter.java	correct	THIS	KalmanFilter	0	DimensionMismatchException	z.getDimension() != $.measurementMatrix.getRowDimension()
1631	214	4	KalmanFilter.java	correct	z	RealVector	0	DimensionMismatchException	$.getDimension() != measurementMatrix.getRowDimension()
1881	35	4	KolmogorovSmirnovDistribution.java	KolmogorovSmirnovDistribution	n	int	0	NotStrictlyPositiveException	$ <= 0
1882	68	4	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	d <= $
1882	68	4	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninvhalf
1883	72	6	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	d <= $
1883	72	6	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	$ < d
1883	72	6	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninv
1883	72	6	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	ninvhalf < $
5561	75	8	KolmogorovSmirnovDistribution.java	cdf	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
5561	75	8	KolmogorovSmirnovDistribution.java	cdf	i	int	0	NIL-FOR	$ <= n
1884	81	8	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	1 - $ <= d
1884	81	8	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	1 - ninv <= $
1884	81	8	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ < 1
1885	85	10	KolmogorovSmirnovDistribution.java	cdf	d	double	0	RET	1 <= $
5562	104	4	KolmogorovSmirnovDistribution.java	exactK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
5562	104	4	KolmogorovSmirnovDistribution.java	exactK	i	int	0	NIL-FOR	$ <= n
5563	120	4	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ < m
5563	120	4	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	i < $
5564	121	6	KolmogorovSmirnovDistribution.java	roundedK	j	int	0	NIL-FOR	$ < m
5564	121	6	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	j < $
5565	127	4	KolmogorovSmirnovDistribution.java	roundedK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
5565	127	4	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ <= n
1886	143	4	KolmogorovSmirnovDistribution.java	createH	hDouble	double	0	NumberIsTooLargeException	$ >= 1
5566	159	4	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
5566	159	4	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
5567	160	6	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < m
5567	160	6	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	j < $
1887	161	8	KolmogorovSmirnovDistribution.java	createH	j	int	1	DEF	i - $ + 1 < 0
1887	161	8	KolmogorovSmirnovDistribution.java	createH	i	int	1	DEF	$ - j + 1 < 0
5568	171	4	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
5568	171	4	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
5569	174	4	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
5569	174	4	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
1888	178	4	KolmogorovSmirnovDistribution.java	createH	THIS	KolmogorovSmirnovDistribution	0	DEF	h.compareTo($.BigFraction.ONE_HALF) == 1
1888	178	4	KolmogorovSmirnovDistribution.java	createH	h	BigFraction	0	DEF	$.compareTo(BigFraction.ONE_HALF) == 1
5570	181	4	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
5570	181	4	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
5571	182	6	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < i + 1
5571	182	6	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	j < $ + 1
1889	183	8	KolmogorovSmirnovDistribution.java	createH	j	int	0	DEF	i - $ + 1 > 0
1889	183	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	DEF	$ - j + 1 > 0
5572	184	10	KolmogorovSmirnovDistribution.java	createH	g	int	0	NIL-FOR	$ <= i - j + 1
5572	184	10	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	g <= i - $ + 1
5572	184	10	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	g <= $ - j + 1
236	52	4	Kurtosis.java	increment	THIS	Kurtosis	0	DEF	$.incMoment
237	61	4	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
238	63	6	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
238	63	6	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
239	77	4	Kurtosis.java	clear	THIS	Kurtosis	0	DEF	$.incMoment
240	97	4	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values,begin,length)
240	97	4	Kurtosis.java	evaluate	values	double[]	0	DEF	test($,begin,length)
240	97	4	Kurtosis.java	evaluate	begin	int	0	DEF	test(values,$,length)
240	97	4	Kurtosis.java	evaluate	length	int	0	DEF	test(values,begin,$)
240	97	4	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
4395	103	6	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
4395	103	6	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
4395	103	6	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1540	59	4	LUDecomposition.java	LUDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
5274	68	4	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
5274	68	4	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
5275	73	4	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	$ < m
5275	73	4	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	col < $
5276	74	6	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < col
5276	74	6	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	row < $
5277	77	8	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < row
5277	77	8	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	i < $
5278	84	6	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
5278	84	6	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
5279	87	8	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < col
5279	87	8	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	i < $
1541	91	8	LUDecomposition.java	LUDecomposition	THIS	LUDecomposition	0	DEF	$.FastMath.abs(sum) > largest
1541	91	8	LUDecomposition.java	LUDecomposition	sum	double	0	DEF	FastMath.abs($) > largest
1541	91	8	LUDecomposition.java	LUDecomposition	largest	double	0	DEF	FastMath.abs(sum) > $
1542	96	6	LUDecomposition.java	LUDecomposition	THIS	LUDecomposition	0	RET	$.FastMath.abs($.lu[max][col]) < singularityThreshold
1542	96	6	LUDecomposition.java	LUDecomposition	max	int	0	RET	FastMath.abs(lu[$][col]) < singularityThreshold
1542	96	6	LUDecomposition.java	LUDecomposition	col	int	0	RET	FastMath.abs(lu[max][$]) < singularityThreshold
1542	96	6	LUDecomposition.java	LUDecomposition	singularityThreshold	double	0	RET	FastMath.abs(lu[max][col]) < $
1543	100	6	LUDecomposition.java	LUDecomposition	max	int	0	DEF	$ != col
1543	100	6	LUDecomposition.java	LUDecomposition	col	int	0	DEF	max != $
5280	104	8	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < m
5280	104	8	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	i < $
5281	115	6	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
5281	115	6	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
1544	125	4	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.cachedL == null
1544	125	4	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.singular
5282	128	6	LUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
5282	128	6	LUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
5283	130	8	LUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
5283	130	8	LUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1545	143	4	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.cachedU == null
1545	143	4	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.singular
5284	146	6	LUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
5284	146	6	LUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
5285	148	8	LUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
5285	148	8	LUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1546	161	4	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.singular
1546	161	4	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.cachedP == null
5286	164	6	LUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
5286	164	6	LUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1547	183	4	LUDecomposition.java	getDeterminant	THIS	LUDecomposition	1	RET	$.singular
5287	189	6	LUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
5287	189	6	LUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
4113	66	4	LaguerreSolver.java	doSolve	THIS	LaguerreSolver	0	RET	$.FastMath.abs(yInitial) <= functionValueAccuracy
4113	66	4	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
4113	66	4	LaguerreSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4114	70	4	LaguerreSolver.java	doSolve	THIS	LaguerreSolver	0	RET	$.FastMath.abs(yMin) <= functionValueAccuracy
4114	70	4	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
4114	70	4	LaguerreSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4115	73	4	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
4115	73	4	LaguerreSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
4116	77	4	LaguerreSolver.java	doSolve	THIS	LaguerreSolver	0	RET	$.FastMath.abs(yMax) <= functionValueAccuracy
4116	77	4	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
4116	77	4	LaguerreSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4117	80	4	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
4117	80	4	LaguerreSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
4118	98	4	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	1	RET	$.complexSolver.isRoot(lo,hi,z)
4118	98	4	LaguerreSolver.java	laguerre	z	Complex	1	RET	complexSolver.isRoot(lo,hi,$)
4118	98	4	LaguerreSolver.java	laguerre	lo	double	1	RET	complexSolver.isRoot($,hi,z)
4118	98	4	LaguerreSolver.java	laguerre	hi	double	1	RET	complexSolver.isRoot(lo,$,z)
6652	104	6	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
6652	104	6	LaguerreSolver.java	laguerre	i	int	0	NIL-FOR	$ < root.length
6652	104	6	LaguerreSolver.java	laguerre	root	Complex[]	0	NIL-FOR	i < $.length
4119	105	8	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	DEF	$.complexSolver.isRoot(lo,hi,root[i])
4119	105	8	LaguerreSolver.java	laguerre	i	int	0	DEF	complexSolver.isRoot(lo,hi,root[$])
4119	105	8	LaguerreSolver.java	laguerre	root	Complex[]	0	DEF	complexSolver.isRoot(lo,hi,$[i])
4119	105	8	LaguerreSolver.java	laguerre	lo	double	0	DEF	complexSolver.isRoot($,hi,root[i])
4119	105	8	LaguerreSolver.java	laguerre	hi	double	0	DEF	complexSolver.isRoot(lo,$,root[i])
3353	49	4	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != weights.$.length
3353	49	4	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != weights.length
3353	49	4	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DimensionMismatchException	observations.length != $.length
3354	65	4	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != scale.getColumnDimension()
3354	65	4	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != scale.getColumnDimension()
3354	65	4	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DimensionMismatchException	observations.length != $.getColumnDimension()
3355	78	4	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	DimensionMismatchException	residuals.$.length != $.observations.$.length
3355	78	4	LeastSquaresConverter.java	value	residuals	double[]	0	DimensionMismatchException	$.length != observations.length
6437	81	4	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
6437	81	4	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
6437	81	4	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
3356	85	4	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
6438	86	6	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
6438	86	6	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
6438	86	6	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
3357	92	6	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
2838	50	4	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != weights.$.length
2838	50	4	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != weights.length
2838	50	4	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DimensionMismatchException	observations.length != $.length
2839	66	4	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != scale.getColumnDimension()
2839	66	4	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != scale.getColumnDimension()
2839	66	4	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DimensionMismatchException	observations.length != $.getColumnDimension()
2840	79	4	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	DimensionMismatchException	residuals.$.length != $.observations.$.length
2840	79	4	LeastSquaresConverter.java	value	residuals	double[]	0	DimensionMismatchException	$.length != observations.length
6042	82	4	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
6042	82	4	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
6042	82	4	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
2841	86	4	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
6043	87	6	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
6043	87	6	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
6043	87	6	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
2842	93	6	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
4269	122	0	LegendreGaussIntegrator.java	doIntegrate	THIS	LegendreGaussIntegrator	0	RET	$.iterations.getCount() + 1 >= $.getMinimalIterationCount()
4269	122	0	LegendreGaussIntegrator.java	doIntegrate	delta	double	0	RET	$ <= limit
4269	122	0	LegendreGaussIntegrator.java	doIntegrate	limit	double	0	RET	delta <= $
6742	142	0	LegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
6742	142	0	LegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
6743	143	0	LegendreGaussIntegrator.java	stage	THIS	LegendreGaussIntegrator	0	NIL-FOR	j < $.abscissas.$.length
6743	143	0	LegendreGaussIntegrator.java	stage	j	int	0	NIL-FOR	$ < abscissas.length
4276	47	4	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	RET	$ == 1
6747	54	4	LegendreHighPrecisionRuleFactory.java	computeRule	i	int	0	NIL-FOR	$ < iMax
6747	54	4	LegendreHighPrecisionRuleFactory.java	computeRule	iMax	int	0	NIL-FOR	i < $
6748	61	6	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
6748	61	6	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
6749	84	6	LegendreHighPrecisionRuleFactory.java	computeRule	done	boolean	0	NIL-WHILE	$
6750	90	8	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
6750	90	8	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
4277	102	8	LegendreHighPrecisionRuleFactory.java	computeRule	done	boolean	0	DEF	$
4278	103	10	LegendreHighPrecisionRuleFactory.java	computeRule	pa	BigDecimal	1	DEF	$.signum() * pc.signum() <= 0
4278	103	10	LegendreHighPrecisionRuleFactory.java	computeRule	pc	BigDecimal	1	DEF	pa.signum() * $.signum() <= 0
4279	130	4	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	DEF	$ % 2 != 0
6751	132	6	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
6751	132	6	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
4288	14	4	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	RET	$ == 1
6758	21	4	LegendreRuleFactory.java	computeRule	i	int	0	NIL-FOR	$ < iMax
6758	21	4	LegendreRuleFactory.java	computeRule	iMax	int	0	NIL-FOR	i < $
6759	28	6	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
6759	28	6	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
6760	42	6	LegendreRuleFactory.java	computeRule	done	boolean	0	NIL-WHILE	$
6761	46	8	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
6761	46	8	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
4289	51	8	LegendreRuleFactory.java	computeRule	done	boolean	0	DEF	$
4290	52	10	LegendreRuleFactory.java	computeRule	pa	double	1	DEF	$ * pc <= 0
4290	52	10	LegendreRuleFactory.java	computeRule	pc	double	1	DEF	pa * $ <= 0
4291	73	4	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	DEF	$ % 2 != 0
6762	75	6	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
6762	75	6	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
6170	173	6	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
6170	173	6	LevenbergMarquardtOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
6171	177	6	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
6171	177	6	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
3063	181	6	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
6172	183	8	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
6172	183	8	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
3064	185	10	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
3065	196	6	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	$ != 0
6173	197	8	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6173	197	8	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3066	200	10	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
6174	202	12	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
6174	202	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
3067	209	6	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
3067	209	6	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
6175	213	6	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
6175	213	6	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
6176	216	6	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
6177	217	8	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6177	217	8	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
6178	230	8	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6178	230	8	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3068	238	8	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
3069	246	8	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost < $
3069	246	8	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ < previousCost
6179	250	8	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6179	250	8	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
6180	254	10	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
6180	254	10	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
6181	259	8	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6181	259	8	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3070	268	8	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
3071	270	10	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
3071	270	10	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost >= $
3071	270	10	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ >= previousCost
3072	277	10	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
3072	277	10	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
3073	282	8	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	RET	$ >= 1.0e-4
6182	285	10	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
6182	285	10	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
3074	290	10	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	checker.converged($.getIterations(),previous,current)
3074	290	10	LevenbergMarquardtOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	checker.converged(getIterations(),$,current)
3074	290	10	LevenbergMarquardtOptimizer.java	doOptimize	current	PointVectorValuePair	0	RET	checker.converged(getIterations(),previous,$)
3074	290	10	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker	0	RET	$ != null
3074	290	10	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker	0	RET	$.converged(getIterations(),previous,current)
6183	297	10	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6183	297	10	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3075	309	8	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	$.FastMath.abs(actRed) <= $.costRelativeTolerance
3075	309	8	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
3075	309	8	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
3075	309	8	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
3075	309	8	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
3075	309	8	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
3075	309	8	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
3075	309	8	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
3076	313	8	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	1	ConvergenceException	$.FastMath.abs(actRed) <= TWO_EPS
3076	313	8	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	ConvergenceException	FastMath.abs($) <= TWO_EPS
3076	313	8	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	ConvergenceException	$ <= TWO_EPS
3076	313	8	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	ConvergenceException	$ <= 2.0
3077	317	10	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	ConvergenceException	$ <= TWO_EPS * xNorm
3077	317	10	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	ConvergenceException	delta <= TWO_EPS * $
3078	321	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	ConvergenceException	$ <= TWO_EPS
6184	340	4	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
6184	340	4	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
6185	343	4	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < nC
6185	343	4	LevenbergMarquardtOptimizer.java	determineLMParameter	nC	int	0	NIL-FOR	j < $
6186	346	4	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
6187	349	6	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
6187	349	6	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
6188	355	4	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6188	355	4	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
3079	363	4	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
3079	363	4	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
3080	369	4	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
6189	370	6	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6189	370	6	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
6190	375	6	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6190	375	6	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
6191	378	8	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
6191	378	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
6192	388	4	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6192	388	4	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
6193	391	6	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
6193	391	6	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
3081	399	4	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
3082	403	4	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
6194	406	4	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
3083	407	6	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
6195	411	6	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6195	411	6	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
6196	417	6	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6196	417	6	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
3084	426	6	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	RET	$.FastMath.abs(fp) <= 0.1 * delta
3084	426	6	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
3084	426	6	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
3084	426	6	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
3084	426	6	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
3084	426	6	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
3084	426	6	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
6197	429	6	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6197	429	6	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
6198	433	6	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6198	433	6	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
6199	437	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
6199	437	8	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
6200	442	6	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6200	442	6	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
3085	447	6	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
3086	451	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
6201	466	4	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6201	466	4	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
6202	468	6	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
6202	468	6	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
6203	474	4	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6203	474	4	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
3087	477	6	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
6204	482	6	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
6204	482	6	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
3088	484	8	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
3088	484	8	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
3089	488	10	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	1	DEF	$.FastMath.abs(rkk) < $.FastMath.abs(lmDiag[k])
3089	488	10	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
3089	488	10	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
3089	488	10	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
6205	502	10	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
6205	502	10	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
6206	514	4	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6206	514	4	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
3090	515	6	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
3090	515	6	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
3090	515	6	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
3090	515	6	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
3091	518	6	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
3091	518	6	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
3092	522	4	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
6207	523	6	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
6208	526	8	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
6208	526	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
6209	532	4	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
6209	532	4	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
6210	545	4	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
6210	545	4	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
6211	548	6	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nR
6211	548	6	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	i < $
6212	554	4	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
6212	554	4	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
6213	557	6	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nC
6213	557	6	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	i < $
6214	559	8	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
6214	559	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
3093	563	8	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isNaN($)
3093	563	8	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isInfinite($)
3094	566	8	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
3094	566	8	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
3095	571	6	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	RET	ak2 <= $.qrRankingThreshold
3095	571	6	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ <= qrRankingThreshold
6215	584	6	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
6216	586	8	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
6216	586	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
6217	590	8	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
6217	590	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
6218	604	4	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < nC
6218	604	4	LevenbergMarquardtOptimizer.java	qTy	nC	int	0	NIL-FOR	k < $
6219	607	6	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
6219	607	6	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
6220	611	6	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
6220	611	6	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
3096	620	4	LevenbergMarquardtOptimizer.java	checkParameters	THIS	LevenbergMarquardtOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
3096	620	4	LevenbergMarquardtOptimizer.java	checkParameters	THIS	LevenbergMarquardtOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
6052	169	6	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
6052	169	6	LevenbergMarquardtOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
6053	173	6	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
6053	173	6	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
2850	177	6	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
6054	179	8	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
6054	179	8	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
2851	181	10	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
2852	192	6	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	$ != 0
6055	193	8	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6055	193	8	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
2853	196	10	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
6056	198	12	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
6056	198	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
2854	205	6	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
2854	205	6	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
6057	210	6	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
6057	210	6	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
6058	213	6	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
6059	214	8	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6059	214	8	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
6060	227	8	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6060	227	8	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
2855	235	8	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
2856	243	8	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost < $
2856	243	8	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ < previousCost
6061	247	8	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6061	247	8	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
6062	251	10	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
6062	251	10	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
6063	256	8	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6063	256	8	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
2857	265	8	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
2858	267	10	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
2858	267	10	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost >= $
2858	267	10	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ >= previousCost
2859	274	10	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
2859	274	10	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
2860	279	8	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	RET	$ >= 1.0e-4
6064	282	10	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
6064	282	10	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
2861	287	10	LevenbergMarquardtOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	checker.converged(iter,$,current)
2861	287	10	LevenbergMarquardtOptimizer.java	doOptimize	current	PointVectorValuePair	0	RET	checker.converged(iter,previous,$)
2861	287	10	LevenbergMarquardtOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($,previous,current)
2861	287	10	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker	0	RET	$ != null
2861	287	10	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker	0	RET	$.converged(iter,previous,current)
6065	295	10	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6065	295	10	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
2862	307	8	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
2862	307	8	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
2862	307	8	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	$.FastMath.abs(actRed) <= $.costRelativeTolerance
2862	307	8	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
2862	307	8	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
2862	307	8	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
2862	307	8	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
2862	307	8	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
2863	312	8	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	1	ConvergenceException	$.FastMath.abs(actRed) <= 2.2204e-16
2863	312	8	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	ConvergenceException	FastMath.abs($) <= 2.2204e-16
2863	312	8	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	ConvergenceException	$ <= 2.2204e-16
2863	312	8	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	ConvergenceException	$ <= 2.0
2864	316	10	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	ConvergenceException	$ <= 2.2204e-16 * xNorm
2864	316	10	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	ConvergenceException	delta <= 2.2204e-16 * $
2865	320	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	ConvergenceException	$ <= 2.2204e-16
6066	339	4	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
6066	339	4	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
6067	342	4	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < nC
6067	342	4	LevenbergMarquardtOptimizer.java	determineLMParameter	nC	int	0	NIL-FOR	j < $
6068	345	4	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
6069	348	6	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
6069	348	6	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
6070	354	4	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6070	354	4	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
2866	362	4	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
2866	362	4	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
2867	368	4	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
6071	369	6	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6071	369	6	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
6072	374	6	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6072	374	6	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
6073	377	8	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
6073	377	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
6074	387	4	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6074	387	4	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
6075	390	6	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
6075	390	6	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
2868	398	4	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
2869	402	4	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
6076	405	4	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
2870	406	6	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
6077	410	6	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6077	410	6	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
6078	416	6	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6078	416	6	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
2871	425	6	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	RET	$.FastMath.abs(fp) <= 0.1 * delta
2871	425	6	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
2871	425	6	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
2871	425	6	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
2871	425	6	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
2871	425	6	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
2871	425	6	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
6079	428	6	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6079	428	6	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
6080	432	6	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6080	432	6	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
6081	436	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
6081	436	8	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
6082	441	6	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6082	441	6	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
2872	446	6	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
2873	450	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
6083	465	4	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6083	465	4	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
6084	467	6	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
6084	467	6	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
6085	473	4	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6085	473	4	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
2874	476	6	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
6086	481	6	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
6086	481	6	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
2875	483	8	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
2875	483	8	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
2876	487	10	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	1	DEF	$.FastMath.abs(rkk) < $.FastMath.abs(lmDiag[k])
2876	487	10	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
2876	487	10	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
2876	487	10	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
6087	501	10	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
6087	501	10	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
6088	513	4	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
6088	513	4	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
2877	514	6	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
2877	514	6	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
2877	514	6	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
2877	514	6	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
2878	517	6	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
2878	517	6	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
2879	521	4	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
6089	522	6	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
6090	525	8	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
6090	525	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
6091	531	4	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
6091	531	4	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
6092	544	4	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
6092	544	4	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
6093	547	6	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nR
6093	547	6	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	i < $
6094	553	4	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
6094	553	4	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
6095	556	6	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nC
6095	556	6	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	i < $
6096	558	8	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
6096	558	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
2880	562	8	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isNaN($)
2880	562	8	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isInfinite($)
2881	565	8	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
2881	565	8	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
2882	570	6	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	RET	ak2 <= $.qrRankingThreshold
2882	570	6	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ <= qrRankingThreshold
6097	583	6	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
6098	585	8	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
6098	585	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
6099	589	8	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
6099	589	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
6100	603	4	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < nC
6100	603	4	LevenbergMarquardtOptimizer.java	qTy	nC	int	0	NIL-FOR	k < $
6101	606	6	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
6101	606	6	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
6102	610	6	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
6102	610	6	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
1833	44	4	LevyDistribution.java	density	THIS	LevyDistribution	0	RET	x < $.mu
1833	44	4	LevyDistribution.java	density	x	double	0	RET	$ < mu
1834	55	4	LevyDistribution.java	cumulativeProbability	THIS	LevyDistribution	0	RET	x < $.mu
1834	55	4	LevyDistribution.java	cumulativeProbability	x	double	0	RET	$ < mu
1835	64	4	LevyDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1835	64	4	LevyDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
3887	51	4	Line.java	reset	norm2	double	0	MathIllegalArgumentException	$ == 0.0
3888	145	4	Line.java	distance	THIS	Line	0	RET	n < $.Precision.SAFE_MIN
3888	145	4	Line.java	distance	n	double	0	RET	$ < Precision.SAFE_MIN
3889	159	4	Line.java	closestPoint	THIS	Line	0	RET	n < $.Precision.EPSILON
3889	159	4	Line.java	closestPoint	n	double	0	RET	$ < Precision.EPSILON
3753	92	4	Line.java	reset	d	double	1	DEF	$ == 0.0
3754	120	4	Line.java	revertSelf	THIS	Line	1	DEF	$.angle < $.FastMath.PI
3755	158	4	Line.java	intersection	THIS	Line	0	RET	$.FastMath.abs(d) < 1.0e-10
3755	158	4	Line.java	intersection	d	double	0	RET	FastMath.abs($) < 1.0e-10
6150	61	4	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
6150	61	4	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
6150	61	4	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
2970	103	4	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
2970	103	4	LinearConstraint.java	equals	other	Object	0	RET	this == $
2971	106	4	LinearConstraint.java	equals	other	Object	0	RET	$ instanceof LinearConstraint
6024	62	4	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
6024	62	4	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
6024	62	4	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
2761	104	4	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
2761	104	4	LinearConstraint.java	equals	other	Object	0	RET	this == $
2762	107	4	LinearConstraint.java	equals	other	Object	0	RET	$ instanceof LinearConstraint
3957	24	4	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
3957	24	4	LinearInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
3957	24	4	LinearInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
3958	27	4	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	NumberIsTooSmallException	x.$.length < 2
3958	27	4	LinearInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 2
6547	33	4	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
6547	33	4	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
6548	38	4	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
6548	38	4	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
2998	75	4	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
2998	75	4	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
2999	78	4	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ instanceof LinearObjectiveFunction
2787	74	4	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
2787	74	4	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
2788	77	4	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ instanceof LinearObjectiveFunction
2972	66	6	LinearOptimizer.java	parseOptimizationData	THIS	LinearOptimizer	0	DEF	$.data instanceof LinearObjectiveFunction
2973	70	6	LinearOptimizer.java	parseOptimizationData	THIS	LinearOptimizer	0	DEF	$.data instanceof LinearConstraintSet
2974	74	6	LinearOptimizer.java	parseOptimizationData	THIS	LinearOptimizer	0	DEF	$.data instanceof NonNegativeConstraint
2898	43	4	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NullArgumentException	$ == null
2899	46	4	ListPopulation.java	ListPopulation	populationLimit	int	0	NotPositiveException	$ <= 0
2900	49	4	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
2900	49	4	ListPopulation.java	ListPopulation	populationLimit	int	0	NumberIsTooLargeException	chromosomes.size() > $
2901	64	4	ListPopulation.java	setChromosomes	chromosomes	List<Chromosome>	0	NullArgumentException	$ == null
2902	67	4	ListPopulation.java	setChromosomes	THIS	ListPopulation	0	NumberIsTooLargeException	chromosomes.size() > $.populationLimit
2902	67	4	ListPopulation.java	setChromosomes	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
2903	80	4	ListPopulation.java	addChromosomes	THIS	ListPopulation	0	NumberIsTooLargeException	$.chromosomes.size() + chromosomeColl.size() > $.populationLimit
2903	80	4	ListPopulation.java	addChromosomes	chromosomeColl	Collection<Chromosome>	0	NumberIsTooLargeException	chromosomes.size() + $.size() > populationLimit
2904	106	4	ListPopulation.java	addChromosome	THIS	ListPopulation	0	NumberIsTooLargeException	$.chromosomes.size() >= $.populationLimit
2905	118	6	ListPopulation.java	getFittestChromosome	THIS	ListPopulation	0	DEF	$.chromosome.compareTo(bestChromosome) > 0
2905	118	6	ListPopulation.java	getFittestChromosome	bestChromosome	Chromosome	0	DEF	chromosome.compareTo($) > 0
2906	138	4	ListPopulation.java	setPopulationLimit	populationLimit	int	0	NotPositiveException	$ <= 0
2907	141	4	ListPopulation.java	setPopulationLimit	THIS	ListPopulation	0	NumberIsTooSmallException	populationLimit < $.chromosomes.size()
2907	141	4	ListPopulation.java	setPopulationLimit	populationLimit	int	0	NumberIsTooSmallException	$ < chromosomes.size()
4009	79	4	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ < 0
4009	79	4	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ > 1
4010	83	4	LoessInterpolator.java	LoessInterpolator	robustnessIters	int	0	NotPositiveException	$ < 0
4011	117	4	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
4011	117	4	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
4011	117	4	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
4012	121	4	LoessInterpolator.java	smooth	n	int	0	NoDataException	$ == 0
4013	128	4	LoessInterpolator.java	smooth	n	int	0	RET	$ == 1
4014	131	4	LoessInterpolator.java	smooth	n	int	0	RET	$ == 2
4015	135	4	LoessInterpolator.java	smooth	bandwidthInPoints	int	0	NumberIsTooSmallException	$ < 2
6597	143	4	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	NIL-FOR	iter <= $.robustnessIters
6597	143	4	LoessInterpolator.java	smooth	iter	int	0	NIL-FOR	$ <= robustnessIters
6598	145	6	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
6598	145	6	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
4016	147	8	LoessInterpolator.java	smooth	i	int	0	DEF	$ > 0
4017	153	8	LoessInterpolator.java	smooth	ileft	int	1	DEF	xval[i] - xval[$] > xval[iright] - xval[i]
4017	153	8	LoessInterpolator.java	smooth	iright	int	1	DEF	xval[i] - xval[ileft] > xval[$] - xval[i]
4017	153	8	LoessInterpolator.java	smooth	i	int	1	DEF	xval[$] - xval[ileft] > xval[iright] - xval[$]
4017	153	8	LoessInterpolator.java	smooth	xval	double[]	1	DEF	$[i] - $[ileft] > $[iright] - $[i]
6599	165	8	LoessInterpolator.java	smooth	k	int	0	NIL-FOR	$ <= iright
6599	165	8	LoessInterpolator.java	smooth	iright	int	0	NIL-FOR	k <= $
4018	182	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	1	DEF	$.FastMath.sqrt($.FastMath.abs(meanXSquared - meanX * meanX)) < $.accuracy
4018	182	8	LoessInterpolator.java	smooth	meanX	double	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
4018	182	8	LoessInterpolator.java	smooth	meanXSquared	double	1	DEF	FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
4019	192	6	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	iter == $.robustnessIters
4019	192	6	LoessInterpolator.java	smooth	iter	int	0	DEF	$ == robustnessIters
4020	198	6	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	$.FastMath.abs(medianResidual) < $.accuracy
4020	198	6	LoessInterpolator.java	smooth	medianResidual	double	0	DEF	FastMath.abs($) < accuracy
6600	201	6	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
6600	201	6	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
4021	203	8	LoessInterpolator.java	smooth	arg	double	1	DEF	$ >= 1
4022	226	4	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
4022	226	4	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
4022	226	4	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
4023	244	4	LoessInterpolator.java	updateBandwidthInterval	THIS	LoessInterpolator	0	DEF	nextRight < xval.$.length
4023	244	4	LoessInterpolator.java	updateBandwidthInterval	left	int	0	DEF	xval[nextRight] - xval[i] < xval[i] - xval[$]
4023	244	4	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	xval[$] - xval[i] < xval[i] - xval[left]
4023	244	4	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	$ < xval.length
4023	244	4	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	$[nextRight] - $[i] < $[i] - $[left]
4023	244	4	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	nextRight < $.length
4023	244	4	LoessInterpolator.java	updateBandwidthInterval	i	int	0	DEF	xval[nextRight] - xval[$] < xval[$] - xval[left]
6601	258	4	LoessInterpolator.java	nextNonzero	THIS	LoessInterpolator	0	NIL-WHILE	j < weights.$.length
6601	258	4	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	$ < weights.length
6601	258	4	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	weights[$] == 0
6601	258	4	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	j < $.length
6601	258	4	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	$[j] == 0
4024	270	4	LoessInterpolator.java	tricube	absX	double	0	RET	$ >= 1.0
6602	282	4	LoessInterpolator.java	checkAllFiniteReal	THIS	LoessInterpolator	0	NIL-FOR	i < values.$.length
6602	282	4	LoessInterpolator.java	checkAllFiniteReal	i	int	0	NIL-FOR	$ < values.length
6602	282	4	LoessInterpolator.java	checkAllFiniteReal	values	double[]	0	NIL-FOR	i < $.length
1764	83	4	LogNormalDistribution.java	LogNormalDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1765	108	4	LogNormalDistribution.java	density	x	double	0	RET	$ <= 0
1766	119	4	LogNormalDistribution.java	cumulativeProbability	x	double	0	RET	$ <= 0
1767	123	4	LogNormalDistribution.java	cumulativeProbability	THIS	LogNormalDistribution	0	RET	$.FastMath.abs(dev) > 40 * $.shape
1767	123	4	LogNormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * shape
1768	139	4	LogNormalDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1768	139	4	LogNormalDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
1769	142	4	LogNormalDistribution.java	probability	x0	double	0	RET	$ <= 0
1769	142	4	LogNormalDistribution.java	probability	x1	double	0	RET	$ <= 0
4078	52	4	Logistic.java	Logistic	n	double	0	NotStrictlyPositiveException	$ <= 0
4072	107	4	Logit.java	value	x	double	0	OutOfRangeException	$ > hi
4072	107	4	Logit.java	value	x	double	0	OutOfRangeException	$ < lo
4072	107	4	Logit.java	value	lo	double	0	OutOfRangeException	x < $
4072	107	4	Logit.java	value	hi	double	0	OutOfRangeException	x > $
4073	119	4	Logit.java	value	THIS	Logit	0	OutOfRangeException	x < $.lo
4073	119	4	Logit.java	value	THIS	Logit	0	OutOfRangeException	x > $.hi
4073	119	4	Logit.java	value	x	double	0	OutOfRangeException	$ < lo
4073	119	4	Logit.java	value	x	double	0	OutOfRangeException	$ > hi
4074	124	4	Logit.java	value	f	double[]	1	DEF	Double.isInfinite($[0])
4075	125	6	Logit.java	value	THIS	Logit	0	DEF	f.$.length > 1
4075	125	6	Logit.java	value	f	double[]	0	DEF	$.length > 1
6643	128	6	Logit.java	value	THIS	Logit	0	NIL-FOR	i < f.$.length
6643	128	6	Logit.java	value	i	int	0	NIL-FOR	$ < f.length
6643	128	6	Logit.java	value	f	double[]	0	NIL-FOR	i < $.length
6644	137	6	Logit.java	value	THIS	Logit	0	NIL-FOR	i < f.$.length
6644	137	6	Logit.java	value	i	int	0	NIL-FOR	$ < f.length
6644	137	6	Logit.java	value	f	double[]	0	NIL-FOR	i < $.length
413	42	4	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
413	42	4	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
414	45	4	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	y.$.length == 0
414	45	4	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	x.$.length == 0
414	45	4	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
414	45	4	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
4458	74	4	MannWhitneyUTest.java	mannWhitneyU	THIS	MannWhitneyUTest	0	NIL-FOR	i < x.$.length
4458	74	4	MannWhitneyUTest.java	mannWhitneyU	i	int	0	NIL-FOR	$ < x.length
4458	74	4	MannWhitneyUTest.java	mannWhitneyU	x	double[]	0	NIL-FOR	i < $.length
4562	62	4	MathArrays.java	scale	THIS	MathArrays	0	NIL-FOR	i < arr.$.length
4562	62	4	MathArrays.java	scale	i	int	0	NIL-FOR	$ < arr.length
4562	62	4	MathArrays.java	scale	arr	double[]	0	NIL-FOR	i < $.length
4563	74	4	MathArrays.java	scaleInPlace	THIS	MathArrays	0	NIL-FOR	i < arr.$.length
4563	74	4	MathArrays.java	scaleInPlace	i	int	0	NIL-FOR	$ < arr.length
4563	74	4	MathArrays.java	scaleInPlace	arr	double[]	0	NIL-FOR	i < $.length
602	87	4	MathArrays.java	ebeAdd	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
602	87	4	MathArrays.java	ebeAdd	a	double[]	0	DimensionMismatchException	$.length != b.length
602	87	4	MathArrays.java	ebeAdd	b	double[]	0	DimensionMismatchException	a.length != $.length
4564	91	4	MathArrays.java	ebeAdd	THIS	MathArrays	0	NIL-FOR	i < a.$.length
4564	91	4	MathArrays.java	ebeAdd	i	int	0	NIL-FOR	$ < a.length
4564	91	4	MathArrays.java	ebeAdd	a	double[]	0	NIL-FOR	i < $.length
603	105	4	MathArrays.java	ebeSubtract	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
603	105	4	MathArrays.java	ebeSubtract	a	double[]	0	DimensionMismatchException	$.length != b.length
603	105	4	MathArrays.java	ebeSubtract	b	double[]	0	DimensionMismatchException	a.length != $.length
4565	109	4	MathArrays.java	ebeSubtract	THIS	MathArrays	0	NIL-FOR	i < a.$.length
4565	109	4	MathArrays.java	ebeSubtract	i	int	0	NIL-FOR	$ < a.length
4565	109	4	MathArrays.java	ebeSubtract	a	double[]	0	NIL-FOR	i < $.length
604	123	4	MathArrays.java	ebeMultiply	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
604	123	4	MathArrays.java	ebeMultiply	a	double[]	0	DimensionMismatchException	$.length != b.length
604	123	4	MathArrays.java	ebeMultiply	b	double[]	0	DimensionMismatchException	a.length != $.length
4566	127	4	MathArrays.java	ebeMultiply	THIS	MathArrays	0	NIL-FOR	i < a.$.length
4566	127	4	MathArrays.java	ebeMultiply	i	int	0	NIL-FOR	$ < a.length
4566	127	4	MathArrays.java	ebeMultiply	a	double[]	0	NIL-FOR	i < $.length
605	141	4	MathArrays.java	ebeDivide	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
605	141	4	MathArrays.java	ebeDivide	a	double[]	0	DimensionMismatchException	$.length != b.length
605	141	4	MathArrays.java	ebeDivide	b	double[]	0	DimensionMismatchException	a.length != $.length
4567	145	4	MathArrays.java	ebeDivide	THIS	MathArrays	0	NIL-FOR	i < a.$.length
4567	145	4	MathArrays.java	ebeDivide	i	int	0	NIL-FOR	$ < a.length
4567	145	4	MathArrays.java	ebeDivide	a	double[]	0	NIL-FOR	i < $.length
4568	158	4	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
4568	158	4	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
4568	158	4	MathArrays.java	distance1	p1	double[]	0	NIL-FOR	i < $.length
4569	171	4	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
4569	171	4	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
4569	171	4	MathArrays.java	distance1	p1	int[]	0	NIL-FOR	i < $.length
4570	184	4	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
4570	184	4	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
4570	184	4	MathArrays.java	distance	p1	double[]	0	NIL-FOR	i < $.length
4571	198	4	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
4571	198	4	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
4571	198	4	MathArrays.java	distance	p1	int[]	0	NIL-FOR	i < $.length
4572	212	4	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
4572	212	4	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
4572	212	4	MathArrays.java	distanceInf	p1	double[]	0	NIL-FOR	i < $.length
4573	225	4	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
4573	225	4	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
4573	225	4	MathArrays.java	distanceInf	p1	int[]	0	NIL-FOR	i < $.length
4574	251	4	MathArrays.java	isMonotonic	i	int	0	NIL-FOR	$ < max
4574	251	4	MathArrays.java	isMonotonic	max	int	0	NIL-FOR	i < $
606	256	6	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
607	257	8	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
608	262	8	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
609	269	0	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
610	270	2	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
611	275	2	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
4575	310	6	MathArrays.java	checkOrder	max	int	0	NIL-FOR	index < $
4575	310	6	MathArrays.java	checkOrder	index	int	0	NIL-FOR	$ < max
612	313	0	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
613	314	0	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] <= $
613	314	0	MathArrays.java	checkOrder	index	int	0	DEF	val[$] <= previous
613	314	0	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] <= previous
614	319	0	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] < $
614	319	0	MathArrays.java	checkOrder	index	int	0	DEF	val[$] < previous
614	319	0	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] < previous
615	325	0	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
616	326	0	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] >= $
616	326	0	MathArrays.java	checkOrder	index	int	0	DEF	val[$] >= previous
616	326	0	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] >= previous
617	331	0	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] > $
617	331	0	MathArrays.java	checkOrder	index	int	0	DEF	val[$] > previous
617	331	0	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] > previous
618	341	0	MathArrays.java	checkOrder	max	int	0	RET	index == $
618	341	0	MathArrays.java	checkOrder	index	int	0	RET	$ == max
619	344	0	MathArrays.java	checkOrder	abort	boolean	1	NonMonotonicSequenceException	$
4576	380	0	MathArrays.java	checkRectangular	THIS	MathArrays	0	NIL-FOR	i < in.$.length
4576	380	0	MathArrays.java	checkRectangular	i	int	0	NIL-FOR	$ < in.length
4576	380	0	MathArrays.java	checkRectangular	in	long[][]	0	NIL-FOR	i < $.length
620	381	0	MathArrays.java	checkRectangular	THIS	MathArrays	0	DimensionMismatchException	in[i].length != in[0].length
620	381	0	MathArrays.java	checkRectangular	i	int	0	DimensionMismatchException	in[$].length != in[0].length
620	381	0	MathArrays.java	checkRectangular	in	long[][]	0	DimensionMismatchException	$[i].length != $[0].length
4577	393	0	MathArrays.java	checkPositive	THIS	MathArrays	0	NIL-FOR	i < in.$.length
4577	393	0	MathArrays.java	checkPositive	i	int	0	NIL-FOR	$ < in.length
4577	393	0	MathArrays.java	checkPositive	in	double[]	0	NIL-FOR	i < $.length
621	394	0	MathArrays.java	checkPositive	i	int	0	NotStrictlyPositiveException	in[$] <= 0
621	394	0	MathArrays.java	checkPositive	in	double[]	0	NotStrictlyPositiveException	$[i] <= 0
4578	406	0	MathArrays.java	checkNonNegative	THIS	MathArrays	0	NIL-FOR	i < in.$.length
4578	406	0	MathArrays.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
4578	406	0	MathArrays.java	checkNonNegative	in	long[]	0	NIL-FOR	i < $.length
622	407	0	MathArrays.java	checkNonNegative	i	int	0	NotPositiveException	in[$] < 0
622	407	0	MathArrays.java	checkNonNegative	in	long[]	0	NotPositiveException	$[i] < 0
4579	419	0	MathArrays.java	checkNonNegative	THIS	MathArrays	0	NIL-FOR	i < in.$.length
4579	419	0	MathArrays.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
4579	419	0	MathArrays.java	checkNonNegative	in	long[][]	0	NIL-FOR	i < $.length
4580	420	0	MathArrays.java	checkNonNegative	THIS	MathArrays	0	NIL-FOR	j < in[i].length
4580	420	0	MathArrays.java	checkNonNegative	j	int	0	NIL-FOR	$ < in[i].length
4580	420	0	MathArrays.java	checkNonNegative	i	int	0	NIL-FOR	j < in[$].length
4580	420	0	MathArrays.java	checkNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
623	421	0	MathArrays.java	checkNonNegative	j	int	0	NotPositiveException	in[i][$] < 0
623	421	0	MathArrays.java	checkNonNegative	i	int	0	NotPositiveException	in[$][j] < 0
623	421	0	MathArrays.java	checkNonNegative	in	long[][]	0	NotPositiveException	$[i][j] < 0
4581	443	0	MathArrays.java	safeNorm	THIS	MathArrays	0	NIL-FOR	i < v.$.length
4581	443	0	MathArrays.java	safeNorm	i	int	0	NIL-FOR	$ < v.length
4581	443	0	MathArrays.java	safeNorm	v	double[]	0	NIL-FOR	i < $.length
624	445	0	MathArrays.java	safeNorm	xabs	double	1	DEF	$ < rdwarf
624	445	0	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > agiant
624	445	0	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs < $
624	445	0	MathArrays.java	safeNorm	agiant	double	1	DEF	xabs > $
625	446	0	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > rdwarf
625	446	0	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs > $
626	447	0	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x1max
626	447	0	MathArrays.java	safeNorm	x1max	double	1	DEF	xabs > $
627	458	0	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x3max
627	458	0	MathArrays.java	safeNorm	x3max	double	1	DEF	xabs > $
628	464	0	MathArrays.java	safeNorm	xabs	double	0	DEF	$ != 0
629	476	0	MathArrays.java	safeNorm	s1	double	1	DEF	$ != 0
630	480	0	MathArrays.java	safeNorm	s2	double	1	DEF	$ == 0
631	484	0	MathArrays.java	safeNorm	s2	double	1	DEF	$ >= x3max
631	484	0	MathArrays.java	safeNorm	x3max	double	1	DEF	s2 >= $
632	515	0	MathArrays.java	sortInPlace	x	double[]	0	NullArgumentException	$ == null
4582	520	0	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
4582	520	0	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
633	522	0	MathArrays.java	sortInPlace	y	double[]	0	NullArgumentException	$ == null
634	525	0	MathArrays.java	sortInPlace	THIS	MathArrays	0	DimensionMismatchException	y.$.length != len
634	525	0	MathArrays.java	sortInPlace	y	double[]	0	DimensionMismatchException	$.length != len
634	525	0	MathArrays.java	sortInPlace	len	int	0	DimensionMismatchException	y.length != $
4583	530	0	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
4583	530	0	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
4584	546	0	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
4584	546	0	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
4585	551	0	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
4585	551	0	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
4586	554	0	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
4586	554	0	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
635	606	0	MathArrays.java	linearCombination	THIS	MathArrays	0	DimensionMismatchException	len != b.$.length
635	606	0	MathArrays.java	linearCombination	len	int	0	DimensionMismatchException	$ != b.length
635	606	0	MathArrays.java	linearCombination	b	double[]	0	DimensionMismatchException	len != $.length
4587	611	0	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
4587	611	0	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
4588	630	0	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < lenMinusOne
4588	630	0	MathArrays.java	linearCombination	lenMinusOne	int	0	NIL-FOR	i < $
636	638	0	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
4589	640	0	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
4589	640	0	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
637	677	0	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
638	726	0	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
639	788	0	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
640	800	0	MathArrays.java	equals	x	float[]	0	RET	$ == null
640	800	0	MathArrays.java	equals	y	float[]	0	RET	$ == null
641	803	0	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
641	803	0	MathArrays.java	equals	x	float[]	0	RET	$.length != y.length
641	803	0	MathArrays.java	equals	y	float[]	0	RET	x.length != $.length
4590	806	0	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
4590	806	0	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
4590	806	0	MathArrays.java	equals	x	float[]	0	NIL-FOR	i < $.length
642	807	0	MathArrays.java	equals	THIS	MathArrays	0	RET	$.Precision.equals(x[i],y[i])
642	807	0	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$],y[$])
642	807	0	MathArrays.java	equals	x	float[]	0	RET	Precision.equals($[i],y[i])
642	807	0	MathArrays.java	equals	y	float[]	0	RET	Precision.equals(x[i],$[i])
643	821	0	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$ == null
643	821	0	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	$ == null
644	824	0	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
644	824	0	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$.length != y.length
644	824	0	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	x.length != $.length
4591	827	0	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
4591	827	0	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
4591	827	0	MathArrays.java	equalsIncludingNaN	x	float[]	0	NIL-FOR	i < $.length
645	828	0	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	$.Precision.equalsIncludingNaN(x[i],y[i])
645	828	0	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$],y[$])
645	828	0	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	Precision.equalsIncludingNaN($[i],y[i])
645	828	0	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	Precision.equalsIncludingNaN(x[i],$[i])
646	841	0	MathArrays.java	equals	x	double[]	0	RET	$ == null
646	841	0	MathArrays.java	equals	y	double[]	0	RET	$ == null
647	844	0	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
647	844	0	MathArrays.java	equals	x	double[]	0	RET	$.length != y.length
647	844	0	MathArrays.java	equals	y	double[]	0	RET	x.length != $.length
4592	847	0	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
4592	847	0	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
4592	847	0	MathArrays.java	equals	x	double[]	0	NIL-FOR	i < $.length
648	848	0	MathArrays.java	equals	THIS	MathArrays	0	RET	$.Precision.equals(x[i],y[i])
648	848	0	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$],y[$])
648	848	0	MathArrays.java	equals	x	double[]	0	RET	Precision.equals($[i],y[i])
648	848	0	MathArrays.java	equals	y	double[]	0	RET	Precision.equals(x[i],$[i])
649	862	0	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$ == null
649	862	0	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	$ == null
650	865	0	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
650	865	0	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$.length != y.length
650	865	0	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	x.length != $.length
4593	868	0	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
4593	868	0	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
4593	868	0	MathArrays.java	equalsIncludingNaN	x	double[]	0	NIL-FOR	i < $.length
651	869	0	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	$.Precision.equalsIncludingNaN(x[i],y[i])
651	869	0	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$],y[$])
651	869	0	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	Precision.equalsIncludingNaN($[i],y[i])
651	869	0	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	Precision.equalsIncludingNaN(x[i],$[i])
652	885	0	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isInfinite($)
653	888	0	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isNaN($)
4594	894	0	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
4594	894	0	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
654	895	0	MathArrays.java	normalizeArray	i	int	0	MathIllegalArgumentException	Double.isInfinite(values[$])
654	895	0	MathArrays.java	normalizeArray	values	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
655	898	0	MathArrays.java	normalizeArray	i	int	0	DEF	Double.isNaN(values[$])
655	898	0	MathArrays.java	normalizeArray	values	double[]	0	DEF	Double.isNaN($[i])
656	902	0	MathArrays.java	normalizeArray	sum	double	0	MathArithmeticException	$ == 0
4595	905	0	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
4595	905	0	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
657	906	0	MathArrays.java	normalizeArray	i	int	1	DEF	Double.isNaN(values[$])
657	906	0	MathArrays.java	normalizeArray	values	double[]	1	DEF	Double.isNaN($[i])
658	939	0	MathArrays.java	buildArray	columns	int	1	DEF	$ < 0
4596	945	0	MathArrays.java	buildArray	i	int	0	NIL-FOR	$ < rows
4596	945	0	MathArrays.java	buildArray	rows	int	0	NIL-FOR	i < $
659	965	0	MathArrays.java	convolve	xLen	int	0	NoDataException	$ == 0
659	965	0	MathArrays.java	convolve	hLen	int	0	NoDataException	$ == 0
4597	970	0	MathArrays.java	convolve	n	int	0	NIL-FOR	$ < totalLength
4597	970	0	MathArrays.java	convolve	totalLength	int	0	NIL-FOR	n < $
4598	974	0	MathArrays.java	convolve	k	int	0	NIL-WHILE	$ < hLen
4598	974	0	MathArrays.java	convolve	j	int	0	NIL-WHILE	$ >= 0
4598	974	0	MathArrays.java	convolve	hLen	int	0	NIL-WHILE	k < $
590	72	4	MathUtils.java	copySign	magnitude	byte	1	RET	$ >= 0
590	72	4	MathUtils.java	copySign	magnitude	byte	1	RET	$ < 0
590	72	4	MathUtils.java	copySign	sign	byte	1	RET	$ < 0
590	72	4	MathUtils.java	copySign	sign	byte	1	RET	$ >= 0
591	76	6	MathUtils.java	copySign	magnitude	byte	1	MathArithmeticException	$ == Byte.MIN_VALUE
591	76	6	MathUtils.java	copySign	sign	byte	1	MathArithmeticException	$ >= 0
592	92	4	MathUtils.java	copySign	magnitude	short	1	RET	$ < 0
592	92	4	MathUtils.java	copySign	magnitude	short	1	RET	$ >= 0
592	92	4	MathUtils.java	copySign	sign	short	1	RET	$ >= 0
592	92	4	MathUtils.java	copySign	sign	short	1	RET	$ < 0
593	96	6	MathUtils.java	copySign	magnitude	short	1	MathArithmeticException	$ == Short.MIN_VALUE
593	96	6	MathUtils.java	copySign	sign	short	1	MathArithmeticException	$ >= 0
594	112	4	MathUtils.java	copySign	magnitude	int	1	RET	$ < 0
594	112	4	MathUtils.java	copySign	magnitude	int	1	RET	$ >= 0
594	112	4	MathUtils.java	copySign	sign	int	1	RET	$ >= 0
594	112	4	MathUtils.java	copySign	sign	int	1	RET	$ < 0
595	116	6	MathUtils.java	copySign	magnitude	int	1	MathArithmeticException	$ == Integer.MIN_VALUE
595	116	6	MathUtils.java	copySign	sign	int	1	MathArithmeticException	$ >= 0
596	132	4	MathUtils.java	copySign	magnitude	long	1	RET	$ < 0
596	132	4	MathUtils.java	copySign	magnitude	long	1	RET	$ >= 0
596	132	4	MathUtils.java	copySign	sign	long	1	RET	$ >= 0
596	132	4	MathUtils.java	copySign	sign	long	1	RET	$ < 0
597	136	6	MathUtils.java	copySign	magnitude	long	1	MathArithmeticException	$ == Long.MIN_VALUE
597	136	6	MathUtils.java	copySign	sign	long	1	MathArithmeticException	$ >= 0
598	150	4	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
598	150	4	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
4561	160	4	MathUtils.java	checkFinite	THIS	MathUtils	0	NIL-FOR	i < val.$.length
4561	160	4	MathUtils.java	checkFinite	i	int	0	NIL-FOR	$ < val.length
4561	160	4	MathUtils.java	checkFinite	val	double[]	0	NIL-FOR	i < $.length
599	162	6	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
599	162	6	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
600	175	4	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
601	185	4	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
1503	76	4	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$[0] == null
1503	76	4	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$ == null
1504	93	4	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$[0] == null
1504	93	4	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$ == null
5254	107	4	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
5254	107	4	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
5255	125	4	MatrixUtils.java	createFieldIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
5255	125	4	MatrixUtils.java	createFieldIdentityMatrix	dimension	int	0	NIL-FOR	row < $
5256	140	4	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
5256	140	4	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
5256	140	4	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
5257	154	4	MatrixUtils.java	createFieldDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
5257	154	4	MatrixUtils.java	createFieldDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
5257	154	4	MatrixUtils.java	createFieldDiagonalMatrix	diagonal	T[]	0	NIL-FOR	i < $.length
1505	167	4	MatrixUtils.java	createRealVector	data	double[]	0	NullArgumentException	$ == null
1506	182	4	MatrixUtils.java	createFieldVector	data	T[]	0	NullArgumentException	$ == null
1507	185	4	MatrixUtils.java	createFieldVector	THIS	MatrixUtils	0	ZeroException	data.$.length == 0
1507	185	4	MatrixUtils.java	createFieldVector	data	T[]	0	ZeroException	$.length == 0
1508	198	4	MatrixUtils.java	createRowRealMatrix	rowData	double[]	0	NullArgumentException	$ == null
5258	203	4	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
5258	203	4	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
1509	217	4	MatrixUtils.java	createRowFieldMatrix	rowData	T[]	0	NullArgumentException	$ == null
1510	221	4	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
5259	225	4	MatrixUtils.java	createRowFieldMatrix	i	int	0	NIL-FOR	$ < nCols
5259	225	4	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NIL-FOR	i < $
1511	238	4	MatrixUtils.java	createColumnRealMatrix	columnData	double[]	0	NullArgumentException	$ == null
5260	243	4	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
5260	243	4	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
1512	257	4	MatrixUtils.java	createColumnFieldMatrix	columnData	T[]	0	NullArgumentException	$ == null
1513	261	4	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NoDataException	$ == 0
5261	265	4	MatrixUtils.java	createColumnFieldMatrix	i	int	0	NIL-FOR	$ < nRows
5261	265	4	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NIL-FOR	i < $
1514	281	4	MatrixUtils.java	isSymmetricInternal	rows	int	0	NonSquareMatrixException:RET	$ != matrix.getColumnDimension()
1514	281	4	MatrixUtils.java	isSymmetricInternal	matrix	RealMatrix	0	NonSquareMatrixException:RET	rows != $.getColumnDimension()
1515	282	6	MatrixUtils.java	isSymmetricInternal	raiseException	boolean	1	NonSquareMatrixException	$
5262	289	4	MatrixUtils.java	isSymmetricInternal	i	int	0	NIL-FOR	$ < rows
5262	289	4	MatrixUtils.java	isSymmetricInternal	rows	int	0	NIL-FOR	i < $
5263	290	6	MatrixUtils.java	isSymmetricInternal	j	int	0	NIL-FOR	$ < rows
5263	290	6	MatrixUtils.java	isSymmetricInternal	rows	int	0	NIL-FOR	j < $
1516	293	8	MatrixUtils.java	isSymmetricInternal	THIS	MatrixUtils	0	NonSymmetricMatrixException:RET	$.FastMath.abs(mij - mji) > $.FastMath.max($.FastMath.abs(mij),$.FastMath.abs(mji)) * relativeTolerance
1516	293	8	MatrixUtils.java	isSymmetricInternal	mij	double	0	NonSymmetricMatrixException:RET	FastMath.abs($ - mji) > FastMath.max(FastMath.abs($),FastMath.abs(mji)) * relativeTolerance
1516	293	8	MatrixUtils.java	isSymmetricInternal	mji	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - $) > FastMath.max(FastMath.abs(mij),FastMath.abs($)) * relativeTolerance
1516	293	8	MatrixUtils.java	isSymmetricInternal	relativeTolerance	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - mji) > FastMath.max(FastMath.abs(mij),FastMath.abs(mji)) * $
1517	294	10	MatrixUtils.java	isSymmetricInternal	raiseException	boolean	1	NonSymmetricMatrixException	$
1518	344	4	MatrixUtils.java	checkRowIndex	m	AnyMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1518	344	4	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= m.getRowDimension()
1518	344	4	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1519	355	4	MatrixUtils.java	checkColumnIndex	m	AnyMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1519	355	4	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1519	355	4	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= m.getColumnDimension()
1520	372	4	MatrixUtils.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1520	372	4	MatrixUtils.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1521	377	4	MatrixUtils.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1521	377	4	MatrixUtils.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1522	391	4	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1523	394	4	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1524	397	4	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedRows.$.length == 0
1524	397	4	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1525	400	4	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedColumns.$.length == 0
1525	400	4	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1526	417	4	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1526	417	4	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1526	417	4	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1526	417	4	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1527	428	4	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1527	428	4	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1527	428	4	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1527	428	4	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1528	439	4	MatrixUtils.java	checkMultiplicationCompatible	left	AnyMatrix	0	DimensionMismatchException	$.getColumnDimension() != right.getRowDimension()
1528	439	4	MatrixUtils.java	checkMultiplicationCompatible	right	AnyMatrix	0	DimensionMismatchException	left.getColumnDimension() != $.getRowDimension()
5264	541	4	MatrixUtils.java	serializeRealVector	i	int	0	NIL-FOR	$ < n
5264	541	4	MatrixUtils.java	serializeRealVector	n	int	0	NIL-FOR	i < $
5265	558	6	MatrixUtils.java	deserializeRealVector	i	int	0	NIL-FOR	$ < n
5265	558	6	MatrixUtils.java	deserializeRealVector	n	int	0	NIL-FOR	i < $
5266	589	4	MatrixUtils.java	serializeRealMatrix	i	int	0	NIL-FOR	$ < n
5266	589	4	MatrixUtils.java	serializeRealMatrix	n	int	0	NIL-FOR	i < $
5267	590	6	MatrixUtils.java	serializeRealMatrix	j	int	0	NIL-FOR	$ < m
5267	590	6	MatrixUtils.java	serializeRealMatrix	m	int	0	NIL-FOR	j < $
5268	609	6	MatrixUtils.java	deserializeRealMatrix	i	int	0	NIL-FOR	$ < n
5268	609	6	MatrixUtils.java	deserializeRealMatrix	n	int	0	NIL-FOR	i < $
5269	611	8	MatrixUtils.java	deserializeRealMatrix	j	int	0	NIL-FOR	$ < m
5269	611	8	MatrixUtils.java	deserializeRealMatrix	m	int	0	NIL-FOR	j < $
1529	640	4	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$.getRowDimension() != b.getDimension()
1529	640	4	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$ == null
1529	640	4	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	DimensionMismatchException	rm.getRowDimension() != $.getDimension()
1529	640	4	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	DimensionMismatchException	$ == null
1530	643	4	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
5270	647	4	MatrixUtils.java	solveLowerTriangularSystem	i	int	0	NIL-FOR	$ < rows
5270	647	4	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	i < $
1531	649	6	MatrixUtils.java	solveLowerTriangularSystem	THIS	MatrixUtils	0	MathArithmeticException	$.FastMath.abs(diag) < $.Precision.SAFE_MIN
1531	649	6	MatrixUtils.java	solveLowerTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
5271	654	6	MatrixUtils.java	solveLowerTriangularSystem	j	int	0	NIL-FOR	$ < rows
5271	654	6	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	j < $
1532	668	4	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$ == null
1532	668	4	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$.getRowDimension() != b.getDimension()
1532	668	4	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	DimensionMismatchException	$ == null
1532	668	4	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	DimensionMismatchException	rm.getRowDimension() != $.getDimension()
1533	671	4	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
5272	675	4	MatrixUtils.java	solveUpperTriangularSystem	i	int	0	NIL-FOR	$ > -1
1534	677	6	MatrixUtils.java	solveUpperTriangularSystem	THIS	MatrixUtils	0	MathArithmeticException	$.FastMath.abs(diag) < $.Precision.SAFE_MIN
1534	677	6	MatrixUtils.java	solveUpperTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
5273	682	6	MatrixUtils.java	solveUpperTriangularSystem	j	int	0	NIL-FOR	$ > -1
1535	696	4	MatrixUtils.java	blockInverse	n	int	0	NonSquareMatrixException	m.getColumnDimension() != $
1535	696	4	MatrixUtils.java	blockInverse	m	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != n
1536	706	4	MatrixUtils.java	blockInverse	aSolver	DecompositionSolver	0	SingularMatrixException	$.isNonSingular()
1537	712	4	MatrixUtils.java	blockInverse	dSolver	DecompositionSolver	0	SingularMatrixException	$.isNonSingular()
1538	719	4	MatrixUtils.java	blockInverse	tmp1Solver	DecompositionSolver	0	SingularMatrixException	$.isNonSingular()
1539	726	4	MatrixUtils.java	blockInverse	tmp2Solver	DecompositionSolver	0	SingularMatrixException	$.isNonSingular()
180	43	4	Max.java	increment	THIS	Max	0	DEF	d > $.value
180	43	4	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
180	43	4	Max.java	increment	d	double	0	DEF	$ > value
181	77	4	Max.java	evaluate	THIS	Max	0	DEF	$.test(values,begin,length)
181	77	4	Max.java	evaluate	values	double[]	0	DEF	test($,begin,length)
181	77	4	Max.java	evaluate	begin	int	0	DEF	test(values,$,length)
181	77	4	Max.java	evaluate	length	int	0	DEF	test(values,begin,$)
4383	79	6	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
4383	79	6	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
4383	79	6	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
182	80	8	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
182	80	8	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
3378	18	4	MaxEval.java	MaxEval	max	int	0	NotStrictlyPositiveException	$ <= 0
3379	18	4	MaxIter.java	MaxIter	max	int	0	NotStrictlyPositiveException	$ <= 0
254	53	4	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
255	61	4	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
256	86	4	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values,begin,length)
256	86	4	Mean.java	evaluate	values	double[]	0	RET	test($,begin,length)
256	86	4	Mean.java	evaluate	begin	int	0	RET	test(values,$,length)
256	86	4	Mean.java	evaluate	length	int	0	RET	test(values,begin,$)
4401	91	6	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
4401	91	6	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
4401	91	6	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
257	109	4	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values,weights,begin,length)
257	109	4	Mean.java	evaluate	values	double[]	0	RET	test($,weights,begin,length)
257	109	4	Mean.java	evaluate	weights	double[]	0	RET	test(values,$,begin,length)
257	109	4	Mean.java	evaluate	begin	int	0	RET	test(values,weights,$,length)
257	109	4	Mean.java	evaluate	length	int	0	RET	test(values,weights,begin,$)
4402	114	6	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
4402	114	6	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
4402	114	6	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
4529	72	4	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	NIL-FOR	$.mti < N
516	83	4	MersenneTwister.java	setSeed	seed	int[]	0	RET	$ == null
4530	90	4	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
517	97	6	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
518	101	6	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	DEF	j >= seed.$.length
518	101	6	MersenneTwister.java	setSeed	j	int	0	DEF	$ >= seed.length
518	101	6	MersenneTwister.java	setSeed	seed	int[]	0	DEF	j >= $.length
4531	105	4	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
519	111	6	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
520	133	4	MersenneTwister.java	next	THIS	MersenneTwister	0	DEF	$.mti >= N
4532	135	6	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - M
4533	141	6	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - 1
3925	108	4	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$ == null
3925	108	4	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	NullArgumentException	$ == null
3926	111	4	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NoDataException	xval.$.length == 0
3926	111	4	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NoDataException	$.length == 0
3927	114	4	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xval.$.length != yval.$.length
3927	114	4	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	DimensionMismatchException	$.length != yval.length
3927	114	4	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3928	117	4	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$[0] == null
6523	123	4	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NIL-FOR	i < xval.$.length
6523	123	4	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < xval.length
6523	123	4	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NIL-FOR	i < $.length
3929	125	6	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	NullArgumentException	$ == null
3930	128	6	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xvalI.$.length != $.dimension
3930	128	6	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	DimensionMismatchException	$.length != dimension
6524	134	4	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < microsphereElements
6524	134	4	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	microsphereElements	int	0	NIL-FOR	i < $
3931	151	6	MicrosphereInterpolatingFunction.java	value	THIS	MicrosphereInterpolatingFunction	0	RET	$.FastMath.abs(diffNorm) < $.FastMath.ulp(1d)
3931	151	6	MicrosphereInterpolatingFunction.java	value	diffNorm	double	0	RET	FastMath.abs($) < FastMath.ulp(1d)
3932	164	6	MicrosphereInterpolatingFunction.java	value	sd	Entry<RealVector,Double>	0	DEF	$ != null
3964	45	4	MicrosphereInterpolator.java	MicrosphereInterpolator	exponent	int	0	NotPositiveException	$ < 0
3965	48	4	MicrosphereInterpolator.java	MicrosphereInterpolator	elements	int	0	NotStrictlyPositiveException	$ <= 0
4300	31	4	MidPointIntegrator.java	MidPointIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > MIDPOINT_MAX_ITERATIONS_COUNT
4301	45	4	MidPointIntegrator.java	MidPointIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > MIDPOINT_MAX_ITERATIONS_COUNT
6765	69	4	MidPointIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
6765	69	4	MidPointIntegrator.java	stage	np	long	0	NIL-FOR	i < $
4302	87	6	MidPointIntegrator.java	doIntegrate	THIS	MidPointIntegrator	0	RET	i >= $.getMinimalIterationCount()
4302	87	6	MidPointIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
4303	90	8	MidPointIntegrator.java	doIntegrate	THIS	MidPointIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
4303	90	8	MidPointIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
4303	90	8	MidPointIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
4303	90	8	MidPointIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
2374	38	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	1	DEF	$.previousState != null
2374	38	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
5704	41	6	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
5704	41	6	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
5705	51	6	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
5705	51	6	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
67	103	4	MillerUpdatingRegression.java	MillerUpdatingRegression	numberOfVariables	int	0	ModelSpecificationException	$ < 1
68	106	4	MillerUpdatingRegression.java	MillerUpdatingRegression	includeConstant	boolean	1	DEF	$
4320	124	4	MillerUpdatingRegression.java	MillerUpdatingRegression	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
4320	124	4	MillerUpdatingRegression.java	MillerUpdatingRegression	i	int	0	NIL-FOR	$ < this.nvars
69	127	4	MillerUpdatingRegression.java	MillerUpdatingRegression	errorTolerance	double	1	DEF	$ > 0
70	164	4	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != $.nvars
70	164	4	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
70	164	4	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
70	164	4	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length + 1 != $.nvars
70	164	4	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length != nvars
70	164	4	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length + 1 != nvars
71	167	4	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
72	185	4	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != y.$.length
72	185	4	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
72	185	4	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
72	185	4	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
72	185	4	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
73	188	4	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length == 0
73	188	4	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length == 0
74	191	4	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x[0].length + 1 > x.$.length
74	191	4	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$[0].length + 1 > $.length
4321	194	4	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
4321	194	4	MillerUpdatingRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
4321	194	4	MillerUpdatingRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
4322	217	4	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
4322	217	4	MillerUpdatingRegression.java	include	i	int	0	NIL-FOR	$ < x.length
4322	217	4	MillerUpdatingRegression.java	include	x	double[]	0	NIL-FOR	i < $.length
75	218	6	MillerUpdatingRegression.java	include	w	double	0	RET	$ == 0.0
76	222	6	MillerUpdatingRegression.java	include	xi	double	0	DEF	$ == 0.0
77	229	6	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
78	232	8	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	DEF	$.FastMath.abs(tmp) > $.Precision.EPSILON
78	232	8	MillerUpdatingRegression.java	include	tmp	double	0	DEF	FastMath.abs($) > Precision.EPSILON
4323	241	6	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	k < $.nvars
4323	241	6	MillerUpdatingRegression.java	include	k	int	0	NIL-FOR	$ < nvars
79	244	8	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
80	254	6	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
81	272	4	MillerUpdatingRegression.java	smartAdd	_a	double	1	RET	$ > _b
81	272	4	MillerUpdatingRegression.java	smartAdd	_b	double	1	RET	_a > $
82	274	6	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_b > $
82	274	6	MillerUpdatingRegression.java	smartAdd	_b	double	0	RET	$ > eps
83	281	6	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_a > $
83	281	6	MillerUpdatingRegression.java	smartAdd	_a	double	0	RET	$ > eps
4324	300	4	MillerUpdatingRegression.java	clear	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
4324	300	4	MillerUpdatingRegression.java	clear	i	int	0	NIL-FOR	$ < nvars
4325	317	4	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
4325	317	4	MillerUpdatingRegression.java	tolset	i	int	0	NIL-FOR	$ < nvars
4326	321	4	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
4326	321	4	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	$ < nvars
4327	324	6	MillerUpdatingRegression.java	tolset	row	int	0	NIL-FOR	$ < col
4327	324	6	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	row < $
84	340	4	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ < 1
85	343	4	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	ModelSpecificationException	nreq > $.nvars
85	343	4	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ > this.nvars
86	346	4	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.tol_set
4328	351	4	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ > -1
87	352	6	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[i]) < $.tol[i]
87	352	6	MillerUpdatingRegression.java	regcf	i	int	1	DEF	Math.sqrt(d[$]) < tol[$]
4329	360	8	MillerUpdatingRegression.java	regcf	j	int	0	NIL-FOR	$ < nreq
4329	360	8	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	j < $
88	366	4	MillerUpdatingRegression.java	regcf	rankProblem	boolean	0	DEF	$
4330	367	6	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ < nreq
4330	367	6	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	i < $
89	368	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
89	368	8	MillerUpdatingRegression.java	regcf	i	int	0	DEF	this.lindep[$]
4331	380	4	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
4331	380	4	MillerUpdatingRegression.java	singcheck	i	int	0	NIL-FOR	$ < nvars
4332	383	4	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
4332	383	4	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	$ < nvars
4333	386	6	MillerUpdatingRegression.java	singcheck	row	int	0	NIL-FOR	$ < col - 1
4333	386	6	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	row < $ - 1
90	387	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	Math.abs($.r[pos]) * $.work_sing[row] < temp
90	387	8	MillerUpdatingRegression.java	singcheck	row	int	0	DEF	Math.abs(r[pos]) * work_sing[$] < temp
90	387	8	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	Math.abs(r[pos]) * work_sing[row] < $
90	387	8	MillerUpdatingRegression.java	singcheck	pos	int	0	DEF	Math.abs(r[$]) * work_sing[row] < temp
91	393	6	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	$.work_sing[col] < temp
91	393	6	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	work_sing[col] < $
91	393	6	MillerUpdatingRegression.java	singcheck	col	int	0	DEF	work_sing[$] < temp
92	395	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	1	DEF	col < $.nvars - 1
92	395	8	MillerUpdatingRegression.java	singcheck	col	int	1	DEF	$ < nvars - 1
4334	398	10	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	_xi < $.nvars
4334	398	10	MillerUpdatingRegression.java	singcheck	_xi	int	0	NIL-FOR	$ < nvars
4335	420	4	MillerUpdatingRegression.java	ss	i	int	0	NIL-FOR	$ > 0
93	432	4	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	RET	$.nobs <= nreq
93	432	4	MillerUpdatingRegression.java	cov	nreq	int	0	RET	this.nobs <= $
4336	436	4	MillerUpdatingRegression.java	cov	i	int	0	NIL-FOR	$ < nreq
4336	436	4	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	i < $
94	437	6	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
94	437	6	MillerUpdatingRegression.java	cov	i	int	0	DEF	this.lindep[$]
4337	450	4	MillerUpdatingRegression.java	cov	row	int	0	NIL-FOR	$ < nreq
4337	450	4	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	row < $
95	452	6	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[row]
95	452	6	MillerUpdatingRegression.java	cov	row	int	0	DEF	this.lindep[$]
4338	453	8	MillerUpdatingRegression.java	cov	col	int	0	NIL-FOR	$ < nreq
4338	453	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	col < $
96	454	10	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	1	DEF	$.lindep[col]
96	454	10	MillerUpdatingRegression.java	cov	col	int	1	DEF	this.lindep[$]
97	456	12	MillerUpdatingRegression.java	cov	col	int	1	DEF	row == $
97	456	12	MillerUpdatingRegression.java	cov	row	int	1	DEF	$ == col
4339	462	12	MillerUpdatingRegression.java	cov	k	int	0	NIL-FOR	$ < nreq
4339	462	12	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	k < $
98	463	14	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
98	463	14	MillerUpdatingRegression.java	cov	k	int	0	DEF	this.lindep[$]
4340	491	4	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	$ > 0
99	492	6	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	1	DEF	$.lindep[row]
99	492	6	MillerUpdatingRegression.java	inverse	row	int	1	DEF	this.lindep[$]
4341	494	8	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	$ > row
4341	494	8	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	col > $
4342	498	10	MillerUpdatingRegression.java	inverse	k	int	0	NIL-FOR	$ < col - 1
4342	498	10	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	k < $ - 1
100	500	12	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
100	500	12	MillerUpdatingRegression.java	inverse	k	int	0	DEF	this.lindep[$]
101	532	4	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	RET	in >= $.nvars
101	532	4	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ < -1
101	532	4	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ >= nvars
102	537	4	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	DEF	$.d[in] > 0.0
102	537	4	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	DEF	d[$] > 0.0
4343	540	4	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
4343	540	4	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	$ < nvars
4344	543	6	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col
4344	543	6	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	row < $
103	547	6	MillerUpdatingRegression.java	getPartialCorrelations	sumxx	double	1	DEF	$ > 0.0
4345	555	4	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	row < $.nvars
4345	555	4	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < nvars
104	558	4	MillerUpdatingRegression.java	getPartialCorrelations	sumyy	double	0	DEF	$ > 0.0
4346	562	4	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col1 < $.nvars
4346	562	4	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	$ < nvars
4347	566	6	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col1
4347	566	6	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	row < $
4348	568	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
4348	568	8	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
4349	576	6	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
4349	576	6	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
105	608	4	MillerUpdatingRegression.java	vmove	from	int	0	RET	$ == to
105	608	4	MillerUpdatingRegression.java	vmove	to	int	0	RET	from == $
106	611	4	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	$.rss_set
107	615	4	MillerUpdatingRegression.java	vmove	from	int	1	DEF	$ < to
107	615	4	MillerUpdatingRegression.java	vmove	to	int	1	DEF	from < $
4350	627	4	MillerUpdatingRegression.java	vmove	count	int	0	NIL-WHILE	idx < $
4350	627	4	MillerUpdatingRegression.java	vmove	idx	int	0	NIL-WHILE	$ < count
108	633	6	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 > $.epsilon
108	633	6	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d1 > $.epsilon
108	633	6	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	$ > this.epsilon
108	633	6	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ > this.epsilon
109	635	8	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	Math.abs(X) * Math.sqrt(d1) < $.tol[mp1]
109	635	8	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	Math.abs(X) * Math.sqrt($) < tol[mp1]
109	635	8	MillerUpdatingRegression.java	vmove	mp1	int	0	DEF	Math.abs(X) * Math.sqrt(d1) < tol[$]
110	638	8	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	d1 < $.epsilon
110	638	8	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	Math.abs(X) < $.epsilon
110	638	8	MillerUpdatingRegression.java	vmove	d1	double	1	DEF	$ < this.epsilon
4351	642	10	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
4351	642	10	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
111	655	10	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 < $.epsilon
111	655	10	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ < this.epsilon
4352	658	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	_i < m1 + $.nvars - m - 1
4352	658	12	MillerUpdatingRegression.java	vmove	_i	int	0	NIL-FOR	$ < m1 + nvars - m - 1
4352	658	12	MillerUpdatingRegression.java	vmove	m1	int	0	NIL-FOR	_i < $ + nvars - m - 1
4352	658	12	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	_i < m1 + nvars - $ - 1
112	665	8	MillerUpdatingRegression.java	vmove	bSkipTo40	boolean	0	DEF	$
4353	673	10	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
4353	673	10	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
113	685	6	MillerUpdatingRegression.java	vmove	m	int	0	DEF	$ > 0
4354	687	8	MillerUpdatingRegression.java	vmove	row	int	0	NIL-FOR	$ < m
4354	687	8	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	row < $
114	715	4	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length > $.nvars + 1 - pos1
114	715	4	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length < 1
114	715	4	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length > nvars + 1 - pos1
114	715	4	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length < 1
114	715	4	MillerUpdatingRegression.java	reorderRegressors	pos1	int	0	RET	list.length > nvars + 1 - $
4355	720	4	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-WHILE	i < $.nvars
4355	720	4	MillerUpdatingRegression.java	reorderRegressors	i	int	0	NIL-WHILE	$ < nvars
4356	722	6	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-FOR	j < list.$.length
4356	722	6	MillerUpdatingRegression.java	reorderRegressors	j	int	0	NIL-FOR	$ < list.length
4356	722	6	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	NIL-FOR	j < $.length
115	723	8	MillerUpdatingRegression.java	reorderRegressors	j	int	0	RET	l == list[$]
115	723	8	MillerUpdatingRegression.java	reorderRegressors	next	int	0	RET	i > $
115	723	8	MillerUpdatingRegression.java	reorderRegressors	i	int	0	RET	$ > next
115	723	8	MillerUpdatingRegression.java	reorderRegressors	l	int	0	RET	$ == list[j]
115	723	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	l == $[j]
116	726	10	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	1	RET	next >= list.$.length + pos1
116	726	10	MillerUpdatingRegression.java	reorderRegressors	next	int	1	RET	$ >= list.length + pos1
116	726	10	MillerUpdatingRegression.java	reorderRegressors	list	int[]	1	RET	next >= $.length + pos1
116	726	10	MillerUpdatingRegression.java	reorderRegressors	pos1	int	1	RET	next >= list.length + $
117	747	4	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	RET	row_data.$.length > $.nvars
117	747	4	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row_data	double[]	0	RET	$.length > nvars
118	751	4	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
4357	760	4	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	NIL-FOR	col < xrow.$.length
4357	760	4	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	$ < xrow.length
4357	760	4	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	xrow	double[]	0	NIL-FOR	col < $.length
119	761	6	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[col]) < $.tol[col]
119	761	6	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	1	DEF	Math.sqrt(d[$]) < tol[$]
4358	767	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row	int	0	NIL-FOR	$ < col
4358	767	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	row < $
120	799	4	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= numberOfRegressors
120	799	4	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	this.nobs <= $
121	802	4	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	numberOfRegressors > $.nvars
121	802	4	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	$ > this.nvars
4359	811	4	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
4359	811	4	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
122	812	6	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
122	812	6	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
4360	817	4	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < numberOfRegressors
4360	817	4	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	i < $
123	818	6	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != i
123	818	6	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != $
124	823	4	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
4361	830	6	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
4361	830	6	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < nvars
4362	831	8	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < numberOfRegressors
4362	831	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	j < $
125	832	10	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == i
125	832	10	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == i
125	832	10	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == $
4363	842	6	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
4363	842	6	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
4363	842	6	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
4364	844	8	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
4364	844	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
126	846	10	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
126	846	10	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
127	865	4	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	variablesToInclude.$.length > $.nvars
127	865	4	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > this.nvars
128	868	4	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= $.nvars
4365	873	4	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
4365	873	4	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
4365	873	4	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
129	874	6	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	i >= $.nvars
129	874	6	MillerUpdatingRegression.java	regress	i	int	0	ModelSpecificationException	$ >= this.nvars
130	877	6	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] == variablesToInclude[$ - 1]
130	877	6	MillerUpdatingRegression.java	regress	i	int	0	DEF	$ > 0
130	877	6	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] == $[i - 1]
131	883	4	MillerUpdatingRegression.java	regress	iExclude	int	1	DEF	$ > 0
4366	886	6	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
4366	886	6	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
4366	886	6	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
132	887	8	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] > -1
132	887	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] > -1
4367	903	4	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
4367	903	4	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
133	904	6	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
133	904	6	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
4368	909	4	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
4368	909	4	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.nvars
134	910	6	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != series[i]
134	910	6	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != series[$]
134	910	6	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[i] != $[i]
135	915	4	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
4369	921	6	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < series.$.length
4369	921	6	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < series.length
4369	921	6	MillerUpdatingRegression.java	regress	series	int[]	0	NIL-FOR	i < $.length
4370	922	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	j < $.vorder.length
4370	922	8	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < this.vorder.length
136	923	10	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == series[i]
136	923	10	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == series[i]
136	923	10	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == series[$]
136	923	10	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[j] == $[i]
4371	934	6	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
4371	934	6	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
4371	934	6	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
4372	936	8	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
4372	936	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
137	938	10	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
137	938	10	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
202	43	4	Min.java	increment	THIS	Min	0	DEF	d < $.value
202	43	4	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
202	43	4	Min.java	increment	d	double	0	DEF	$ < value
203	77	4	Min.java	evaluate	THIS	Min	0	DEF	$.test(values,begin,length)
203	77	4	Min.java	evaluate	values	double[]	0	DEF	test($,begin,length)
203	77	4	Min.java	evaluate	begin	int	0	DEF	test(values,$,length)
203	77	4	Min.java	evaluate	length	int	0	DEF	test(values,begin,$)
4390	79	6	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
4390	79	6	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
4390	79	6	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
204	80	8	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
204	80	8	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
5551	49	4	MixtureMultivariateNormalDistribution.java	createComponents	THIS	MixtureMultivariateNormalDistribution	0	NIL-FOR	i < weights.$.length
5551	49	4	MixtureMultivariateNormalDistribution.java	createComponents	i	int	0	NIL-FOR	$ < weights.length
5551	49	4	MixtureMultivariateNormalDistribution.java	createComponents	weights	double[]	0	NIL-FOR	i < $.length
5545	45	4	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	i	int	0	NIL-FOR	$ < numComp
5545	45	4	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	numComp	int	0	NIL-FOR	i < $
1828	47	6	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	comp	Pair	0	DimensionMismatchException	$.getSecond().getDimension() != dim
1828	47	6	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	dim	int	0	DimensionMismatchException	comp.getSecond().getDimension() != $
1829	50	6	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	comp	Pair	0	NotPositiveException	$.getFirst() < 0
1830	55	4	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	weightSum	double	0	MathArithmeticException	Double.isInfinite($)
5546	60	4	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	i	int	0	NIL-FOR	$ < numComp
5546	60	4	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	numComp	int	0	NIL-FOR	i < $
5547	71	4	MixtureMultivariateRealDistribution.java	density	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.weight.$.length
5547	71	4	MixtureMultivariateRealDistribution.java	density	i	int	0	NIL-FOR	$ < weight.length
5548	83	4	MixtureMultivariateRealDistribution.java	sample	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.weight.$.length
5548	83	4	MixtureMultivariateRealDistribution.java	sample	i	int	0	NIL-FOR	$ < weight.length
1831	85	6	MixtureMultivariateRealDistribution.java	sample	randomValue	double	0	DEF	$ <= sum
1831	85	6	MixtureMultivariateRealDistribution.java	sample	sum	double	0	DEF	randomValue <= $
1832	90	4	MixtureMultivariateRealDistribution.java	sample	vals	double[]	0	DEF	$ == null
5549	100	4	MixtureMultivariateRealDistribution.java	reseedRandomGenerator	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.distribution.size()
5549	100	4	MixtureMultivariateRealDistribution.java	reseedRandomGenerator	i	int	0	NIL-FOR	$ < distribution.size()
5550	110	4	MixtureMultivariateRealDistribution.java	getComponents	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.weight.$.length
5550	110	4	MixtureMultivariateRealDistribution.java	getComponents	i	int	0	NIL-FOR	$ < weight.length
4179	48	4	MullerSolver.java	doSolve	THIS	MullerSolver	0	RET	$.FastMath.abs(fMin) < functionValueAccuracy
4179	48	4	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMin) < $
4179	48	4	MullerSolver.java	doSolve	fMin	double	0	RET	FastMath.abs($) < functionValueAccuracy
4180	52	4	MullerSolver.java	doSolve	THIS	MullerSolver	0	RET	$.FastMath.abs(fMax) < functionValueAccuracy
4180	52	4	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMax) < $
4180	52	4	MullerSolver.java	doSolve	fMax	double	0	RET	FastMath.abs($) < functionValueAccuracy
4181	56	4	MullerSolver.java	doSolve	THIS	MullerSolver	0	RET	$.FastMath.abs(fInitial) < functionValueAccuracy
4181	56	4	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fInitial) < $
4181	56	4	MullerSolver.java	doSolve	fInitial	double	0	RET	FastMath.abs($) < functionValueAccuracy
4182	60	4	MullerSolver.java	doSolve	THIS	MullerSolver	1	RET	$.isBracketing(min,initial)
4182	60	4	MullerSolver.java	doSolve	min	double	1	RET	isBracketing($,initial)
4182	60	4	MullerSolver.java	doSolve	initial	double	1	RET	isBracketing(min,$)
4183	98	6	MullerSolver.java	solve	THIS	MullerSolver	0	RET	$.FastMath.abs(y) <= functionValueAccuracy
4183	98	6	MullerSolver.java	solve	THIS	MullerSolver	0	RET	$.FastMath.abs(x - oldx) <= tolerance
4183	98	6	MullerSolver.java	solve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
4183	98	6	MullerSolver.java	solve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4183	98	6	MullerSolver.java	solve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
4183	98	6	MullerSolver.java	solve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
4183	98	6	MullerSolver.java	solve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
4184	102	6	MullerSolver.java	solve	bisect	boolean	1	DEF	$
4185	114	8	MullerSolver.java	solve	THIS	MullerSolver	1	DEF	$.FastMath.signum(y0) + $.FastMath.signum(ym) == 0.0
4185	114	8	MullerSolver.java	solve	ym	double	1	DEF	FastMath.signum(y0) + FastMath.signum($) == 0.0
4185	114	8	MullerSolver.java	solve	y0	double	1	DEF	FastMath.signum($) + FastMath.signum(ym) == 0.0
4173	50	4	MullerSolver2.java	doSolve	THIS	MullerSolver2	0	RET	$.FastMath.abs(y0) < functionValueAccuracy
4173	50	4	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y0) < $
4173	50	4	MullerSolver2.java	doSolve	y0	double	0	RET	FastMath.abs($) < functionValueAccuracy
4174	55	4	MullerSolver2.java	doSolve	THIS	MullerSolver2	0	RET	$.FastMath.abs(y1) < functionValueAccuracy
4174	55	4	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y1) < $
4174	55	4	MullerSolver2.java	doSolve	y1	double	0	RET	FastMath.abs($) < functionValueAccuracy
4175	58	4	MullerSolver2.java	doSolve	y0	double	0	NoBracketingException	$ * y1 > 0
4175	58	4	MullerSolver2.java	doSolve	y1	double	0	NoBracketingException	y0 * $ > 0
4176	72	6	MullerSolver2.java	doSolve	delta	double	1	DEF	$ >= 0.0
4177	80	6	MullerSolver2.java	doSolve	denominator	double	1	DEF	$ != 0
6657	82	8	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x1
6657	82	8	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x2
6657	82	8	MullerSolver2.java	doSolve	x1	double	0	NIL-WHILE	x == $
6657	82	8	MullerSolver2.java	doSolve	x2	double	0	NIL-WHILE	x == $
4178	92	6	MullerSolver2.java	doSolve	THIS	MullerSolver2	0	RET	$.FastMath.abs(x - oldx) <= tolerance
4178	92	6	MullerSolver2.java	doSolve	THIS	MullerSolver2	0	RET	$.FastMath.abs(y) <= functionValueAccuracy
4178	92	6	MullerSolver2.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
4178	92	6	MullerSolver2.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4178	92	6	MullerSolver2.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
4178	92	6	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
4178	92	6	MullerSolver2.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
3339	108	4	MultiDirectionalSimplex.java	iterate	best	PointValuePair	0	RET	comparator.compare(reflected,$) < 0
3339	108	4	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare($,best) < 0
3339	108	4	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(reflected,best) < 0
3340	111	6	MultiDirectionalSimplex.java	iterate	expanded	PointValuePair	0	DEF	comparator.compare(reflected,$) <= 0
3340	111	6	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	DEF	comparator.compare($,expanded) <= 0
3340	111	6	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	DEF	$.compare(reflected,expanded) <= 0
6428	131	4	MultiDirectionalSimplex.java	evaluateNewSimplex	THIS	MultiDirectionalSimplex	0	NIL-FOR	i < $.getSize()
6428	131	4	MultiDirectionalSimplex.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ < getSize()
6429	134	6	MultiDirectionalSimplex.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < dim
6429	134	6	MultiDirectionalSimplex.java	evaluateNewSimplex	dim	int	0	NIL-FOR	j < $
2741	109	4	MultiDirectionalSimplex.java	iterate	best	PointValuePair	0	RET	comparator.compare(reflected,$) < 0
2741	109	4	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare($,best) < 0
2741	109	4	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(reflected,best) < 0
2742	112	6	MultiDirectionalSimplex.java	iterate	expanded	PointValuePair	0	DEF	comparator.compare(reflected,$) <= 0
2742	112	6	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	DEF	comparator.compare($,expanded) <= 0
2742	112	6	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	DEF	$.compare(reflected,expanded) <= 0
6014	132	4	MultiDirectionalSimplex.java	evaluateNewSimplex	THIS	MultiDirectionalSimplex	0	NIL-FOR	i < $.getSize()
6014	132	4	MultiDirectionalSimplex.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ < getSize()
6015	135	6	MultiDirectionalSimplex.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < dim
6015	135	6	MultiDirectionalSimplex.java	evaluateNewSimplex	dim	int	0	NIL-FOR	j < $
5504	56	4	MultiKMeansPlusPlusClusterer.java	cluster	THIS	MultiKMeansPlusPlusClusterer	0	NIL-FOR	i < $.numTrials
5504	56	4	MultiKMeansPlusPlusClusterer.java	cluster	i	int	0	NIL-FOR	$ < numTrials
1661	60	8	MultiKMeansPlusPlusClusterer.java	cluster	THIS	MultiKMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
1662	69	6	MultiKMeansPlusPlusClusterer.java	cluster	varianceSum	double	0	DEF	$ <= bestVarianceSum
1662	69	6	MultiKMeansPlusPlusClusterer.java	cluster	bestVarianceSum	double	0	DEF	varianceSum <= $
3036	58	4	MultiStartUnivariateOptimizer.java	MultiStartUnivariateOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
3037	77	4	MultiStartUnivariateOptimizer.java	getOptima	THIS	MultiStartUnivariateOptimizer	0	MathIllegalStateException	$.optima == null
6166	94	4	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	NIL-FOR	i < $.optimData.$.length
6166	94	4	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < optimData.length
3038	95	6	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	DEF	$.optimData[i] instanceof MaxEval
3038	95	6	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof MaxEval
3039	100	6	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	DEF	$.optimData[i] instanceof SearchInterval
3039	100	6	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof SearchInterval
3040	106	4	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	MathIllegalStateException	$.maxEvalIndex == -1
3041	109	4	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	MathIllegalStateException	$.searchIntervalIndex == -1
6167	119	4	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	NIL-FOR	i < $.starts
6167	119	4	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < starts
3042	133	4	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	DEF	$.optima[0] == null
4604	117	4	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
4604	117	4	MultidimensionalCounter.java	MultidimensionalCounter	i	int	0	NIL-FOR	$ < last
4605	119	6	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	j < $.dimension
4605	119	6	MultidimensionalCounter.java	MultidimensionalCounter	j	int	0	NIL-FOR	$ < dimension
705	126	4	MultidimensionalCounter.java	MultidimensionalCounter	tS	int	0	NotStrictlyPositiveException	$ <= 0
706	152	4	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.totalSize
706	152	4	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ < 0
706	152	4	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ >= totalSize
4606	157	4	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
4606	157	4	MultidimensionalCounter.java	getCounts	i	int	0	NIL-FOR	$ < last
4607	160	6	MultidimensionalCounter.java	getCounts	count	int	0	NIL-WHILE	$ <= index
4607	160	6	MultidimensionalCounter.java	getCounts	index	int	0	NIL-WHILE	count <= $
707	179	4	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	DimensionMismatchException	c.$.length != $.dimension
707	179	4	MultidimensionalCounter.java	getCount	c	int	0	DimensionMismatchException	$.length != dimension
4608	183	4	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
4608	183	4	MultidimensionalCounter.java	getCount	i	int	0	NIL-FOR	$ < dimension
708	185	6	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.size[i]
708	185	6	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ < 0
708	185	6	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ >= size[i]
708	185	6	MultidimensionalCounter.java	getCount	i	int	0	OutOfRangeException	index >= size[$]
4609	211	4	MultidimensionalCounter.java	toString	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
4609	211	4	MultidimensionalCounter.java	toString	i	int	0	NIL-FOR	$ < dimension
2471	66	4	MultistepIntegrator.java	MultistepIntegrator	nSteps	int	0	NumberIsTooSmallException	$ < 2
2472	124	6	MultistepIntegrator.java	start	THIS	MultistepIntegrator	1	DEF	$.starter instanceof AbstractIntegrator
3347	35	4	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
3347	35	4	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
3347	35	4	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
6433	38	4	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < lower.$.length
6433	38	4	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < lower.length
6433	38	4	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NIL-FOR	i < $.length
3348	39	6	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
3348	39	6	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
3348	39	6	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
6434	45	4	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
6434	45	4	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < mappers.length
3349	46	6	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(lower[$])
3349	46	6	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	1	DEF	Double.isInfinite($[i])
3350	47	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
3350	47	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
3351	55	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
3351	55	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
6435	71	4	MultivariateFunctionMappingAdapter.java	unboundedToBounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
6435	71	4	MultivariateFunctionMappingAdapter.java	unboundedToBounded	i	int	0	NIL-FOR	$ < mappers.length
6436	83	4	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
6436	83	4	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	i	int	0	NIL-FOR	$ < mappers.length
2520	36	4	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
2520	36	4	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
2520	36	4	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
5825	39	4	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < lower.$.length
5825	39	4	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < lower.length
5825	39	4	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NIL-FOR	i < $.length
2521	40	6	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
2521	40	6	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
2521	40	6	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
5826	46	4	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
5826	46	4	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < mappers.length
2522	47	6	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(lower[$])
2522	47	6	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	1	DEF	Double.isInfinite($[i])
2523	48	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
2523	48	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
2524	56	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
2524	56	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
5827	72	4	MultivariateFunctionMappingAdapter.java	unboundedToBounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
5827	72	4	MultivariateFunctionMappingAdapter.java	unboundedToBounded	i	int	0	NIL-FOR	$ < mappers.length
5828	84	4	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
5828	84	4	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	i	int	0	NIL-FOR	$ < mappers.length
3341	47	4	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
3341	47	4	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
3341	47	4	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
3342	50	4	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != scale.$.length
3342	50	4	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != scale.length
3342	50	4	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	scale	double[]	0	DimensionMismatchException	lower.length != $.length
6430	53	4	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < lower.$.length
6430	53	4	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NIL-FOR	$ < lower.length
6430	53	4	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NIL-FOR	i < $.length
3343	54	6	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
3343	54	6	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
3343	54	6	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
6431	70	4	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < $.scale.$.length
6431	70	4	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	NIL-FOR	$ < scale.length
3344	71	6	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] > $.upper[i]
3344	71	6	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] < $.lower[i]
3344	71	6	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] > upper[$]
3344	71	6	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] < lower[$]
3344	71	6	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] > upper[i]
3344	71	6	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] < lower[i]
6432	73	8	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	j < $.scale.$.length
6432	73	8	MultivariateFunctionPenaltyAdapter.java	value	j	int	0	NIL-FOR	$ < scale.length
3345	75	10	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] < $.lower[j]
3345	75	10	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] < lower[$]
3345	75	10	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] < lower[j]
3346	79	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] > $.upper[j]
3346	79	12	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] > upper[$]
3346	79	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] > upper[j]
2480	48	4	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
2480	48	4	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
2480	48	4	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
2481	51	4	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != scale.$.length
2481	51	4	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != scale.length
2481	51	4	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	scale	double[]	0	DimensionMismatchException	lower.length != $.length
5806	54	4	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < lower.$.length
5806	54	4	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NIL-FOR	$ < lower.length
5806	54	4	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NIL-FOR	i < $.length
2482	55	6	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
2482	55	6	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
2482	55	6	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
5807	71	4	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < $.scale.$.length
5807	71	4	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	NIL-FOR	$ < scale.length
2483	72	6	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] < $.lower[i]
2483	72	6	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] > $.upper[i]
2483	72	6	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] < lower[$]
2483	72	6	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] > upper[$]
2483	72	6	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] < lower[i]
2483	72	6	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] > upper[i]
5808	74	8	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	j < $.scale.$.length
5808	74	8	MultivariateFunctionPenaltyAdapter.java	value	j	int	0	NIL-FOR	$ < scale.length
2484	76	10	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] < $.lower[j]
2484	76	10	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] < lower[$]
2484	76	10	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] < lower[j]
2485	80	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] > $.upper[j]
2485	80	12	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] > upper[$]
2485	80	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] > upper[j]
1810	65	4	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	covariances.$.length != dim
1810	65	4	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	DimensionMismatchException	covariances.length != $
1810	65	4	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covariances	double[][]	0	DimensionMismatchException	$.length != dim
5532	68	4	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NIL-FOR	$ < dim
5532	68	4	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	i < $
1811	69	6	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	dim != covariances[i].length
1811	69	6	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	DimensionMismatchException	dim != covariances[$].length
1811	69	6	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	DimensionMismatchException	$ != covariances[i].length
1811	69	6	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covariances	double[][]	0	DimensionMismatchException	dim != $[i].length
5533	79	4	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < covMatEigenvalues.$.length
5533	79	4	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NIL-FOR	$ < covMatEigenvalues.length
5533	79	4	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covMatEigenvalues	double[]	0	NIL-FOR	i < $.length
1812	80	6	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NonPositiveDefiniteMatrixException	covMatEigenvalues[$] < 0
1812	80	6	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covMatEigenvalues	double[]	0	NonPositiveDefiniteMatrixException	$[i] < 0
5534	85	4	MultivariateNormalDistribution.java	MultivariateNormalDistribution	v	int	0	NIL-FOR	$ < dim
5534	85	4	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	v < $
5535	90	4	MultivariateNormalDistribution.java	MultivariateNormalDistribution	row	int	0	NIL-FOR	$ < dim
5535	90	4	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	row < $
5536	92	6	MultivariateNormalDistribution.java	MultivariateNormalDistribution	col	int	0	NIL-FOR	$ < dim
5536	92	6	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	col < $
1813	117	4	MultivariateNormalDistribution.java	density	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	vals.$.length != dim
1813	117	4	MultivariateNormalDistribution.java	density	dim	int	0	DimensionMismatchException	vals.length != $
1813	117	4	MultivariateNormalDistribution.java	density	vals	double[]	0	DimensionMismatchException	$.length != dim
5537	130	4	MultivariateNormalDistribution.java	getStandardDeviations	i	int	0	NIL-FOR	$ < dim
5537	130	4	MultivariateNormalDistribution.java	getStandardDeviations	dim	int	0	NIL-FOR	i < $
5538	141	4	MultivariateNormalDistribution.java	sample	i	int	0	NIL-FOR	$ < dim
5538	141	4	MultivariateNormalDistribution.java	sample	dim	int	0	NIL-FOR	i < $
5539	145	4	MultivariateNormalDistribution.java	sample	i	int	0	NIL-FOR	$ < dim
5539	145	4	MultivariateNormalDistribution.java	sample	dim	int	0	NIL-FOR	i < $
5540	157	4	MultivariateNormalDistribution.java	getExponentTerm	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < centered.$.length
5540	157	4	MultivariateNormalDistribution.java	getExponentTerm	i	int	0	NIL-FOR	$ < centered.length
5540	157	4	MultivariateNormalDistribution.java	getExponentTerm	centered	double[]	0	NIL-FOR	i < $.length
5541	162	4	MultivariateNormalDistribution.java	getExponentTerm	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < preMultiplied.$.length
5541	162	4	MultivariateNormalDistribution.java	getExponentTerm	i	int	0	NIL-FOR	$ < preMultiplied.length
5541	162	4	MultivariateNormalDistribution.java	getExponentTerm	preMultiplied	double[]	0	NIL-FOR	i < $.length
1704	53	4	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	NotStrictlyPositiveException	data.$.length < 1
1704	53	4	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	NotStrictlyPositiveException	$.length < 1
5508	57	4	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	NIL-FOR	i < data.$.length
5508	57	4	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	i	int	0	NIL-FOR	$ < data.length
5508	57	4	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	NIL-FOR	i < $.length
1705	58	6	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	DimensionMismatchException	data[i].length != data[0].length
1705	58	6	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	i	int	0	DimensionMismatchException	data[$].length != data[0].length
1705	58	6	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	DimensionMismatchException	$[i].length != $[0].length
1706	61	6	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	NumberIsTooSmallException	data[i].length < 2
1706	61	6	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	i	int	0	NumberIsTooSmallException	data[$].length < 2
1706	61	6	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	NumberIsTooSmallException	$[i].length < 2
1707	77	4	MultivariateNormalMixtureExpectationMaximization.java	fit	maxIterations	int	0	NotStrictlyPositiveException	$ < 1
1708	80	4	MultivariateNormalMixtureExpectationMaximization.java	fit	threshold	double	0	NotStrictlyPositiveException	$ < Double.MIN_VALUE
1709	87	4	MultivariateNormalMixtureExpectationMaximization.java	fit	numCols	int	0	DimensionMismatchException	numMeanColumns != $
1709	87	4	MultivariateNormalMixtureExpectationMaximization.java	fit	numMeanColumns	int	0	DimensionMismatchException	$ != numCols
5509	94	4	MultivariateNormalMixtureExpectationMaximization.java	fit	THIS	MultivariateNormalMixtureExpectationMaximization	0	NIL-WHILE	Math.abs(previousLogLikelihood - $.logLikelihood) > threshold
5509	94	4	MultivariateNormalMixtureExpectationMaximization.java	fit	numIterations	int	0	NIL-WHILE	$++ <= maxIterations
5509	94	4	MultivariateNormalMixtureExpectationMaximization.java	fit	previousLogLikelihood	double	0	NIL-WHILE	Math.abs($ - logLikelihood) > threshold
5509	94	4	MultivariateNormalMixtureExpectationMaximization.java	fit	maxIterations	int	0	NIL-WHILE	numIterations++ <= $
5509	94	4	MultivariateNormalMixtureExpectationMaximization.java	fit	threshold	double	0	NIL-WHILE	Math.abs(previousLogLikelihood - logLikelihood) > $
5510	100	6	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
5510	100	6	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
5511	107	6	MultivariateNormalMixtureExpectationMaximization.java	fit	i	int	0	NIL-FOR	$ < n
5511	107	6	MultivariateNormalMixtureExpectationMaximization.java	fit	n	int	0	NIL-FOR	i < $
5512	110	8	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
5512	110	8	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
5513	113	10	MultivariateNormalMixtureExpectationMaximization.java	fit	col	int	0	NIL-FOR	$ < numCols
5513	113	10	MultivariateNormalMixtureExpectationMaximization.java	fit	numCols	int	0	NIL-FOR	col < $
5514	121	6	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
5514	121	6	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
5515	123	8	MultivariateNormalMixtureExpectationMaximization.java	fit	col	int	0	NIL-FOR	$ < numCols
5515	123	8	MultivariateNormalMixtureExpectationMaximization.java	fit	numCols	int	0	NIL-FOR	col < $
5516	128	6	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
5516	128	6	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
5517	131	6	MultivariateNormalMixtureExpectationMaximization.java	fit	i	int	0	NIL-FOR	$ < n
5517	131	6	MultivariateNormalMixtureExpectationMaximization.java	fit	n	int	0	NIL-FOR	i < $
5518	132	8	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
5518	132	8	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
5519	139	6	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
5519	139	6	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
1710	145	4	MultivariateNormalMixtureExpectationMaximization.java	fit	THIS	MultivariateNormalMixtureExpectationMaximization	0	ConvergenceException	Math.abs(previousLogLikelihood - $.logLikelihood) > threshold
1710	145	4	MultivariateNormalMixtureExpectationMaximization.java	fit	previousLogLikelihood	double	0	ConvergenceException	Math.abs($ - logLikelihood) > threshold
1710	145	4	MultivariateNormalMixtureExpectationMaximization.java	fit	threshold	double	0	ConvergenceException	Math.abs(previousLogLikelihood - logLikelihood) > $
1711	169	4	MultivariateNormalMixtureExpectationMaximization.java	estimate	THIS	MultivariateNormalMixtureExpectationMaximization	0	NotStrictlyPositiveException	data.$.length < 2
1711	169	4	MultivariateNormalMixtureExpectationMaximization.java	estimate	data	double[][]	0	NotStrictlyPositiveException	$.length < 2
1712	172	4	MultivariateNormalMixtureExpectationMaximization.java	estimate	numComponents	int	0	NumberIsTooSmallException	$ < 2
1713	175	4	MultivariateNormalMixtureExpectationMaximization.java	estimate	THIS	MultivariateNormalMixtureExpectationMaximization	0	NumberIsTooLargeException	numComponents > data.$.length
1713	175	4	MultivariateNormalMixtureExpectationMaximization.java	estimate	data	double[][]	0	NumberIsTooLargeException	numComponents > $.length
1713	175	4	MultivariateNormalMixtureExpectationMaximization.java	estimate	numComponents	int	0	NumberIsTooLargeException	$ > data.length
5520	181	4	MultivariateNormalMixtureExpectationMaximization.java	estimate	i	int	0	NIL-FOR	$ < numRows
5520	181	4	MultivariateNormalMixtureExpectationMaximization.java	estimate	numRows	int	0	NIL-FOR	i < $
5521	187	4	MultivariateNormalMixtureExpectationMaximization.java	estimate	binIndex	int	0	NIL-FOR	$ < numComponents
5521	187	4	MultivariateNormalMixtureExpectationMaximization.java	estimate	numComponents	int	0	NIL-FOR	binIndex < $
5522	193	6	MultivariateNormalMixtureExpectationMaximization.java	estimate	i	int	0	NIL-FOR	$ < maxIndex
5522	193	6	MultivariateNormalMixtureExpectationMaximization.java	estimate	maxIndex	int	0	NIL-FOR	i < $
5523	194	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	j	int	0	NIL-FOR	$ < numCols
5523	194	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	numCols	int	0	NIL-FOR	j < $
3365	44	6	MultivariateOptimizer.java	parseOptimizationData	THIS	MultivariateOptimizer	0	DEF	$.data instanceof GoalType
3366	48	6	MultivariateOptimizer.java	parseOptimizationData	THIS	MultivariateOptimizer	0	DEF	$.data instanceof ObjectiveFunction
4410	84	4	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
4410	84	4	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
4411	102	4	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
4411	102	4	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
4412	136	4	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
4412	136	4	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
4412	136	4	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
310	175	4	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
311	179	6	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
4413	184	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
4413	184	8	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
4414	249	4	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
4414	249	4	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
4414	249	4	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
312	250	6	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
4415	262	4	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
4415	262	4	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
313	279	4	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
313	279	4	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
314	282	4	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
315	434	4	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	MathIllegalStateException	$.n > 0
316	444	4	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
316	444	4	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
3057	82	6	MultivariateVectorOptimizer.java	parseOptimizationData	THIS	MultivariateVectorOptimizer	0	DEF	$.data instanceof ModelFunction
3058	86	6	MultivariateVectorOptimizer.java	parseOptimizationData	THIS	MultivariateVectorOptimizer	0	DEF	$.data instanceof Target
3059	90	6	MultivariateVectorOptimizer.java	parseOptimizationData	THIS	MultivariateVectorOptimizer	0	DEF	$.data instanceof Weight
3060	102	4	MultivariateVectorOptimizer.java	checkParameters	THIS	MultivariateVectorOptimizer	0	DimensionMismatchException	$.target.$.length != $.weightMatrix.getColumnDimension()
2908	27	4	NPointCrossover.java	NPointCrossover	crossoverPoints	int	0	NotStrictlyPositiveException	$ <= 0
2909	48	4	NPointCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2909	48	4	NPointCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2910	63	4	NPointCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
2910	63	4	NPointCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
2911	66	4	NPointCrossover.java	mate	THIS	NPointCrossover	0	NumberIsTooLargeException	$.crossoverPoints >= length
2911	66	4	NPointCrossover.java	mate	length	int	0	NumberIsTooLargeException	crossoverPoints >= $
6120	78	4	NPointCrossover.java	mate	THIS	NPointCrossover	0	NIL-FOR	i < $.crossoverPoints
6120	78	4	NPointCrossover.java	mate	i	int	0	NIL-FOR	$ < crossoverPoints
6121	80	6	NPointCrossover.java	mate	j	int	0	NIL-FOR	$ < crossoverIndex
6121	80	6	NPointCrossover.java	mate	crossoverIndex	int	0	NIL-FOR	j < $
6122	89	4	NPointCrossover.java	mate	j	int	0	NIL-FOR	$ < length
6122	89	4	NPointCrossover.java	mate	length	int	0	NIL-FOR	j < $
4484	120	4	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < data.$.length
4484	120	4	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < data.length
4484	120	4	NaturalRanking.java	rank	data	double[]	0	NIL-FOR	i < $.length
436	139	0	NaturalRanking.java	rank	nanPositions	List<Integer>	0	NotANumberException	$.size() > 0
4485	152	0	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
4485	152	0	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < ranks.length
4485	152	0	NaturalRanking.java	rank	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
437	153	0	NaturalRanking.java	rank	i	int	1	DEF	Double.compare(ranks[$].getValue(),ranks[$ - 1].getValue()) > 0
437	153	0	NaturalRanking.java	rank	ranks	IntDoublePair[]	1	DEF	Double.compare($[i].getValue(),$[i - 1].getValue()) > 0
438	155	0	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
439	166	0	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
440	169	0	NaturalRanking.java	rank	THIS	NaturalRanking	0	DEF	$.nanStrategy == $.NaNStrategy.FIXED
441	180	0	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	RET	$.containsNaNs(ranks)
441	180	0	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	RET	containsNaNs($)
4486	185	0	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
4486	185	0	NaturalRanking.java	removeNaNs	i	int	0	NIL-FOR	$ < ranks.length
4486	185	0	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
442	186	0	NaturalRanking.java	removeNaNs	i	int	1	DEF	Double.isNaN(ranks[$].getValue())
442	186	0	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	1	DEF	Double.isNaN($[i].getValue())
4487	187	0	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	k < ranks.$.length
4487	187	0	NaturalRanking.java	removeNaNs	k	int	0	NIL-FOR	$ < ranks.length
4487	187	0	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	k < $.length
4488	206	0	NaturalRanking.java	recodeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
4488	206	0	NaturalRanking.java	recodeNaNs	i	int	0	NIL-FOR	$ < ranks.length
4488	206	0	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
443	207	0	NaturalRanking.java	recodeNaNs	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
443	207	0	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
4489	218	0	NaturalRanking.java	containsNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
4489	218	0	NaturalRanking.java	containsNaNs	i	int	0	NIL-FOR	$ < ranks.length
4489	218	0	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
444	219	0	NaturalRanking.java	containsNaNs	i	int	0	RET	Double.isNaN(ranks[$].getValue())
444	219	0	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	RET	Double.isNaN($[i].getValue())
4490	246	0	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
4491	254	0	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
4492	270	0	NaturalRanking.java	fill	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
445	280	0	NaturalRanking.java	restoreNaNs	nanPositions	List<Integer>	0	RET	$.size() == 0
4493	284	0	NaturalRanking.java	restoreNaNs	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
4494	295	0	NaturalRanking.java	getNanPositions	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
4494	295	0	NaturalRanking.java	getNanPositions	i	int	0	NIL-FOR	$ < ranks.length
4494	295	0	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
446	296	0	NaturalRanking.java	getNanPositions	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
446	296	0	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
6419	142	4	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ < n
6419	142	4	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i < $
6420	144	6	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
6420	144	6	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
6421	149	4	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
6421	149	4	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
6422	153	4	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
6422	153	4	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3333	157	4	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare($,reflected) <= 0
3333	157	4	NelderMeadSimplex.java	iterate	secondBest	PointValuePair	1	DEF	comparator.compare(reflected,$) < 0
3333	157	4	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($,secondBest) < 0
3333	157	4	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(best,$) <= 0
3333	157	4	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected,secondBest) < 0
3333	157	4	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(best,reflected) <= 0
3334	161	6	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare(reflected,$) < 0
3334	161	6	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($,best) < 0
3334	161	6	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected,best) < 0
6423	163	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
6423	163	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3335	167	8	NelderMeadSimplex.java	iterate	expanded	PointValuePair	1	DEF	comparator.compare($,reflected) < 0
3335	167	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(expanded,$) < 0
3335	167	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(expanded,reflected) < 0
3336	175	8	NelderMeadSimplex.java	iterate	worst	PointValuePair	1	RET	comparator.compare(reflected,$) < 0
3336	175	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	RET	comparator.compare($,worst) < 0
3336	175	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	RET	$.compare(reflected,worst) < 0
6424	177	10	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
6424	177	10	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3337	181	10	NelderMeadSimplex.java	iterate	outContracted	PointValuePair	0	RET	comparator.compare($,reflected) <= 0
3337	181	10	NelderMeadSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare(outContracted,$) <= 0
3337	181	10	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(outContracted,reflected) <= 0
6425	188	10	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
6425	188	10	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3338	192	10	NelderMeadSimplex.java	iterate	inContracted	PointValuePair	0	RET	comparator.compare($,worst) < 0
3338	192	10	NelderMeadSimplex.java	iterate	worst	PointValuePair	0	RET	comparator.compare(inContracted,$) < 0
3338	192	10	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(inContracted,worst) < 0
6426	198	8	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ <= n
6426	198	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i <= $
6427	200	10	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
6427	200	10	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
6005	143	4	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ < n
6005	143	4	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i < $
6006	145	6	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
6006	145	6	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
6007	150	4	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
6007	150	4	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
6008	154	4	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
6008	154	4	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2735	158	4	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare($,reflected) <= 0
2735	158	4	NelderMeadSimplex.java	iterate	secondBest	PointValuePair	1	DEF	comparator.compare(reflected,$) < 0
2735	158	4	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($,secondBest) < 0
2735	158	4	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(best,$) <= 0
2735	158	4	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected,secondBest) < 0
2735	158	4	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(best,reflected) <= 0
2736	162	6	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare(reflected,$) < 0
2736	162	6	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($,best) < 0
2736	162	6	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected,best) < 0
6009	164	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
6009	164	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2737	168	8	NelderMeadSimplex.java	iterate	expanded	PointValuePair	1	DEF	comparator.compare($,reflected) < 0
2737	168	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(expanded,$) < 0
2737	168	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(expanded,reflected) < 0
2738	176	8	NelderMeadSimplex.java	iterate	worst	PointValuePair	1	RET	comparator.compare(reflected,$) < 0
2738	176	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	RET	comparator.compare($,worst) < 0
2738	176	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	RET	$.compare(reflected,worst) < 0
6010	178	10	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
6010	178	10	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2739	182	10	NelderMeadSimplex.java	iterate	outContracted	PointValuePair	0	RET	comparator.compare($,reflected) <= 0
2739	182	10	NelderMeadSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare(outContracted,$) <= 0
2739	182	10	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(outContracted,reflected) <= 0
6011	189	10	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
6011	189	10	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2740	193	10	NelderMeadSimplex.java	iterate	inContracted	PointValuePair	0	RET	comparator.compare($,worst) < 0
2740	193	10	NelderMeadSimplex.java	iterate	worst	PointValuePair	0	RET	comparator.compare(inContracted,$) < 0
2740	193	10	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(inContracted,worst) < 0
6012	199	8	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ <= n
6012	199	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i <= $
6013	201	10	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
6013	201	10	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3705	44	4	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	MathIllegalArgumentException	$[0] == null
6482	51	4	NestedLoops.java	NestedLoops	THIS	NestedLoops	0	NIL-FOR	i < loop.$.length
6482	51	4	NestedLoops.java	NestedLoops	i	int	0	NIL-FOR	$ < loop.length
6482	51	4	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	NIL-FOR	i < $.length
3706	59	4	NestedLoops.java	NestedLoops	THIS	NestedLoops	1	DEF	Double.isInfinite($.polygon.getSize())
3707	82	6	NestedLoops.java	add	THIS	NestedLoops	0	RET	$.child.$.polygon.contains(node.$.polygon)
3707	82	6	NestedLoops.java	add	node	NestedLoops	0	RET	child.polygon.contains($.polygon)
6483	87	4	NestedLoops.java	add	iterator	Iterator<NestedLoops>	0	NIL-FOR	$.hasNext()
3708	89	6	NestedLoops.java	add	THIS	NestedLoops	0	DEF	node.$.polygon.contains(child.$.polygon)
3708	89	6	NestedLoops.java	add	child	NestedLoops	0	DEF	node.polygon.contains($.polygon)
3708	89	6	NestedLoops.java	add	node	NestedLoops	0	DEF	$.polygon.contains(child.polygon)
3709	96	6	NestedLoops.java	add	THIS	NestedLoops	0	MathIllegalArgumentException	factory.intersection(node.$.polygon,$.child.$.polygon).isEmpty()
3709	96	6	NestedLoops.java	add	factory	RegionFactory	0	MathIllegalArgumentException	$.intersection(node.polygon,child.polygon).isEmpty()
3709	96	6	NestedLoops.java	add	node	NestedLoops	0	MathIllegalArgumentException	factory.intersection($.polygon,child.polygon).isEmpty()
3710	115	4	NestedLoops.java	setClockWise	THIS	NestedLoops	0	DEF	$.originalIsClockwise ^ clockwise
3710	115	4	NestedLoops.java	setClockWise	clockwise	boolean	0	DEF	originalIsClockwise ^ $
6484	118	6	NestedLoops.java	setClockWise	min	int	0	NIL-WHILE	++$ < --max
6484	118	6	NestedLoops.java	setClockWise	max	int	0	NIL-WHILE	++min < --$
4107	53	6	NewtonRaphsonSolver.java	doSolve	THIS	NewtonRaphsonSolver	0	RET	$.FastMath.abs(x1 - x0) <= absoluteAccuracy
4107	53	6	NewtonRaphsonSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(x1 - x0) <= $
4107	53	6	NewtonRaphsonSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) <= absoluteAccuracy
4107	53	6	NewtonRaphsonSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) <= absoluteAccuracy
4120	51	6	NewtonSolver.java	doSolve	THIS	NewtonSolver	0	RET	$.FastMath.abs(x1 - x0) <= absoluteAccuracy
4120	51	6	NewtonSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(x1 - x0) <= $
4120	51	6	NewtonSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) <= absoluteAccuracy
4120	51	6	NewtonSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) <= absoluteAccuracy
3358	120	4	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
3358	120	4	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
6439	121	6	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
6439	121	6	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
6440	128	4	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
6440	128	4	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3359	138	6	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	RET	checker.converged($.getIterations(),previous,current)
3359	138	6	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	checker.converged(getIterations(),$,current)
3359	138	6	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	$ != null
3359	138	6	NonLinearConjugateGradientOptimizer.java	doOptimize	checker	ConvergenceChecker	0	RET	$.converged(getIterations(),previous,current)
3359	138	6	NonLinearConjugateGradientOptimizer.java	doOptimize	current	PointValuePair	0	RET	checker.converged(getIterations(),previous,$)
6441	145	6	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < point.$.length
6441	145	6	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
6441	145	6	NonLinearConjugateGradientOptimizer.java	doOptimize	point	double[]	0	NIL-FOR	i < $.length
3360	149	6	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
3360	149	6	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
6442	150	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
6442	150	8	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
6443	157	6	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
6443	157	6	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
6444	167	2	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
6444	167	2	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
6444	167	2	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
3361	176	0	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.getIterations() % n == 0
3361	176	0	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
3361	176	0	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	getIterations() % $ == 0
6445	180	0	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
6445	180	0	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3362	193	0	NonLinearConjugateGradientOptimizer.java	parseOptimizationData	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.data instanceof BracketingStep
6446	211	0	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
3363	214	0	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
3363	214	0	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
3364	271	0	NonLinearConjugateGradientOptimizer.java	checkParameters	THIS	NonLinearConjugateGradientOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
3364	271	0	NonLinearConjugateGradientOptimizer.java	checkParameters	THIS	NonLinearConjugateGradientOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
2843	82	4	NonLinearConjugateGradientOptimizer.java	setInitialStep	initialStep	double	1	DEF	$ <= 0
2844	98	4	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
2844	98	4	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
6044	99	6	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
6044	99	6	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
6045	106	4	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
6045	106	4	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
2845	117	6	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	$ != null
2845	117	6	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	checker.converged(iter,$,current)
2845	117	6	NonLinearConjugateGradientOptimizer.java	doOptimize	checker	ConvergenceChecker	0	RET	$.converged(iter,previous,current)
2845	117	6	NonLinearConjugateGradientOptimizer.java	doOptimize	current	PointValuePair	0	RET	checker.converged(iter,previous,$)
2845	117	6	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($,previous,current)
6046	124	6	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < $.point.$.length
6046	124	6	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
2846	128	6	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
2846	128	6	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
6047	129	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
6047	129	8	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
6048	136	6	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
6048	136	6	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
2847	140	6	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.updateFormula == $.ConjugateGradientFormula.FLETCHER_REEVES
6049	145	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
6049	145	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
6049	145	8	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
2848	151	6	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
2848	151	6	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	iter % $ == 0
2848	151	6	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	1	DEF	$ % n == 0
6050	155	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
6050	155	8	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
6051	172	4	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
2849	175	6	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
2849	175	6	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
2343	55	4	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.scaled != null
2343	55	4	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.scaled != null
2344	58	4	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.nordsieck != null
2344	58	4	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.nordsieck != null
2345	61	4	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.stateVariation != null
2345	61	4	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.stateVariation != null
5675	102	4	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < $.scaled.$.length
5675	102	4	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < scaled.length
5676	107	4	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < nData.$.length
5676	107	4	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < nData.length
5676	107	4	NordsieckStepInterpolator.java	rescale	nData	double[][]	0	NIL-FOR	i < $.length
5677	110	6	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
5677	110	6	NordsieckStepInterpolator.java	rescale	j	int	0	NIL-FOR	$ < nDataI.length
5677	110	6	NordsieckStepInterpolator.java	rescale	nDataI	double[]	0	NIL-FOR	j < $.length
5678	135	4	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ >= 0
5679	139	6	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
5679	139	6	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < nDataI.length
5679	139	6	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	nDataI	double[]	0	NIL-FOR	j < $.length
5680	145	4	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < $.currentState.$.length
5680	145	4	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < currentState.length
2346	159	4	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.scaled == null
5681	164	6	NordsieckStepInterpolator.java	writeExternal	j	int	0	NIL-FOR	$ < n
5681	164	6	NordsieckStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	j < $
2347	168	4	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.nordsieck == null
2348	185	4	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
5682	187	6	NordsieckStepInterpolator.java	readExternal	j	int	0	NIL-FOR	$ < n
5682	187	6	NordsieckStepInterpolator.java	readExternal	n	int	0	NIL-FOR	j < $
2349	195	4	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
2350	201	4	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
2350	201	4	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
1867	83	4	NormalDistribution.java	NormalDistribution	sd	double	0	NotStrictlyPositiveException	$ <= 0
1868	117	4	NormalDistribution.java	cumulativeProbability	THIS	NormalDistribution	0	RET	$.FastMath.abs(dev) > 40 * $.standardDeviation
1868	117	4	NormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * standardDeviation
1869	127	4	NormalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1869	127	4	NormalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1870	143	4	NormalDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1870	143	4	NormalDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
4314	48	4	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
4314	48	4	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
4315	49	6	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
4315	49	6	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
22	50	8	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
22	50	8	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
22	50	8	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
22	50	8	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
23	68	4	OLSMultipleLinearRegression.java	calculateTotalSumOfSquares	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
24	102	4	OLSMultipleLinearRegression.java	calculateAdjustedRSquared	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
2948	23	4	OnePointCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2948	23	4	OnePointCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2949	37	4	OnePointCrossover.java	crossover	length	int	0	DimensionMismatchException	$ != second.getLength()
2949	37	4	OnePointCrossover.java	crossover	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
6139	45	4	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < crossoverIndex
6139	45	4	OnePointCrossover.java	crossover	crossoverIndex	int	0	NIL-FOR	i < $
6140	49	4	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < length
6140	49	4	OnePointCrossover.java	crossover	length	int	0	NIL-FOR	i < $
377	96	4	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ <= 0
377	96	4	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ > 0.5
378	111	4	OneWayAnova.java	anovaStats	allowOneElementData	boolean	0	DimensionMismatchException	$
379	112	6	OneWayAnova.java	anovaStats	categoryData	Collection<SummaryStatistics>	0	DimensionMismatchException	$.size() < 2
380	116	8	OneWayAnova.java	anovaStats	THIS	OneWayAnova	0	DimensionMismatchException	$.array.getN() <= 1
549	129	4	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
550	134	4	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
550	134	4	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
551	155	4	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key,index)
551	155	4	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key,$)
551	155	4	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($,index)
552	158	4	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
552	158	4	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
4553	162	4	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
4553	162	4	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
553	165	6	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key,index)
553	165	6	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key,$)
553	165	6	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($,index)
554	179	4	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key,index)
554	179	4	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key,$)
554	179	4	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($,index)
555	182	4	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
555	182	4	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
4554	186	4	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
4554	186	4	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
556	189	6	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key,index)
556	189	6	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key,$)
556	189	6	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($,index)
557	229	4	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
557	229	4	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
558	233	6	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
558	233	6	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
558	233	6	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
558	233	6	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
558	233	6	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
559	239	4	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
559	239	4	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
560	244	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
560	244	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
560	244	8	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
560	244	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
560	244	8	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
561	249	4	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
561	249	4	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
562	253	6	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
562	253	6	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
563	261	6	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
563	261	6	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
564	265	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
564	265	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
564	265	8	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
564	265	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
564	265	8	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
565	304	4	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key,index)
565	304	4	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key,$)
565	304	4	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($,index)
566	307	4	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
566	307	4	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
4555	311	4	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
4555	311	4	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
567	314	6	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key,index)
567	314	6	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key,$)
567	314	6	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($,index)
568	353	4	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
569	361	4	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
570	363	6	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
4556	383	4	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
4556	383	4	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
571	384	6	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
571	384	6	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
682	143	4	OpenIntToFieldHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
683	148	4	OpenIntToFieldHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
683	148	4	OpenIntToFieldHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
684	169	4	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key,index)
684	169	4	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key,$)
684	169	4	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($,index)
685	172	4	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
685	172	4	OpenIntToFieldHashMap.java	get	index	int	0	RET	states[$] == FREE
4600	176	4	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
4600	176	4	OpenIntToFieldHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
686	179	6	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key,index)
686	179	6	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key,$)
686	179	6	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($,index)
687	193	4	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key,index)
687	193	4	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key,$)
687	193	4	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($,index)
688	196	4	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
688	196	4	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
4601	200	4	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
4601	200	4	OpenIntToFieldHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
689	203	6	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key,index)
689	203	6	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key,$)
689	203	6	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($,index)
690	243	4	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
690	243	4	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
691	247	6	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
691	247	6	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
691	247	6	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
691	247	6	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
691	247	6	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
692	253	4	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
692	253	4	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
693	258	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
693	258	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
693	258	8	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
693	258	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
693	258	8	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
694	263	4	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
694	263	4	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
695	267	6	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
695	267	6	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
696	275	6	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
696	275	6	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
697	279	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
697	279	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
697	279	8	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
697	279	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
697	279	8	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
698	318	4	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key,index)
698	318	4	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key,$)
698	318	4	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($,index)
699	321	4	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
699	321	4	OpenIntToFieldHashMap.java	remove	index	int	0	RET	states[$] == FREE
4602	325	4	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
4602	325	4	OpenIntToFieldHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
700	328	6	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key,index)
700	328	6	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key,$)
700	328	6	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($,index)
701	367	4	OpenIntToFieldHashMap.java	put	index	int	0	DEF	$ < 0
702	375	4	OpenIntToFieldHashMap.java	put	newMapping	boolean	0	DEF	$
703	377	6	OpenIntToFieldHashMap.java	put	THIS	OpenIntToFieldHashMap	0	DEF	$.shouldGrowTable()
4603	397	4	OpenIntToFieldHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
4603	397	4	OpenIntToFieldHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
704	398	6	OpenIntToFieldHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
704	398	6	OpenIntToFieldHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
1477	42	4	OpenMapRealMatrix.java	OpenMapRealMatrix	lRow	long	0	NumberIsTooLargeException	$ * lCol >= Integer.MAX_VALUE
1477	42	4	OpenMapRealMatrix.java	OpenMapRealMatrix	lCol	long	0	NumberIsTooLargeException	lRow * $ >= Integer.MAX_VALUE
5218	86	4	OpenMapRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
5219	114	4	OpenMapRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
5220	134	6	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
5221	140	8	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
5221	140	8	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
5222	158	4	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
5223	164	6	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
5223	164	6	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
1478	166	8	OpenMapRealMatrix.java	multiply	THIS	OpenMapRealMatrix	0	DEF	m.$.entries.containsKey(rightKey)
1478	166	8	OpenMapRealMatrix.java	multiply	rightKey	int	0	DEF	m.entries.containsKey($)
1478	166	8	OpenMapRealMatrix.java	multiply	m	OpenMapRealMatrix	0	DEF	$.entries.containsKey(rightKey)
1479	169	10	OpenMapRealMatrix.java	multiply	outValue	double	1	DEF	$ == 0.0
1480	200	4	OpenMapRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
1481	215	4	OpenMapRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
1482	230	4	OpenMapRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
5009	106	4	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
5009	106	4	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
5009	106	4	OpenMapRealVector.java	OpenMapRealVector	values	double[]	0	NIL-FOR	key < $.length
1355	108	6	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1355	108	6	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
5010	129	4	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
5010	129	4	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
5010	129	4	OpenMapRealVector.java	OpenMapRealVector	values	Double[]	0	NIL-FOR	key < $.length
1356	131	6	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1356	131	6	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
5011	153	4	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < $.virtualSize
5011	153	4	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < virtualSize
1357	155	6	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1357	155	6	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
1358	181	4	OpenMapRealVector.java	add	v	RealVector	1	RET	$ instanceof OpenMapRealVector
5012	200	4	OpenMapRealVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1359	203	6	OpenMapRealVector.java	add	key	int	1	DEF	randomAccess.containsKey($)
1359	203	6	OpenMapRealVector.java	add	randomAccess	OpenIntToDoubleHashMap	1	DEF	$.containsKey(key)
5013	220	4	OpenMapRealVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1360	230	4	OpenMapRealVector.java	append	v	RealVector	1	RET	$ instanceof OpenMapRealVector
5014	235	6	OpenMapRealVector.java	append	i	int	0	NIL-FOR	$ < v.getDimension()
5014	235	6	OpenMapRealVector.java	append	v	RealVector	0	NIL-FOR	i < $.getDimension()
5015	273	4	OpenMapRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < n
5015	273	4	OpenMapRealVector.java	ebeDivide	n	int	0	NIL-FOR	i < $
5016	285	4	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
1361	289	4	OpenMapRealVector.java	ebeMultiply	v	RealVector	0	DEF	$.isNaN()
1361	289	4	OpenMapRealVector.java	ebeMultiply	v	RealVector	0	DEF	$.isInfinite()
5017	291	6	OpenMapRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < n
5017	291	6	OpenMapRealVector.java	ebeMultiply	n	int	0	NIL-FOR	i < $
1362	293	8	OpenMapRealVector.java	ebeMultiply	y	double	1	DEF	Double.isNaN($)
1363	297	10	OpenMapRealVector.java	ebeMultiply	y	double	0	DEF	Double.isInfinite($)
1364	311	4	OpenMapRealVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
5018	318	4	OpenMapRealVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1365	321	6	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ < end
1365	321	6	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ >= index
1365	321	6	OpenMapRealVector.java	getSubVector	end	int	0	DEF	key < $
1365	321	6	OpenMapRealVector.java	getSubVector	index	int	0	DEF	key >= $
5019	343	4	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
5020	351	4	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1366	354	6	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1366	354	6	OpenMapRealVector.java	getDistance	key	int	0	DEF	entries.containsKey($)
1367	366	4	OpenMapRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
5021	390	4	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
5022	396	4	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1368	399	6	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1368	399	6	OpenMapRealVector.java	getL1Distance	key	int	0	DEF	entries.containsKey($)
1369	411	4	OpenMapRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
5023	428	4	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1370	431	6	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
1370	431	6	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
5024	436	4	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1371	439	6	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1371	439	6	OpenMapRealVector.java	getLInfDistance	key	int	0	DEF	entries.containsKey($)
1371	439	6	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	iter.value() > $
1371	439	6	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	DEF	$.value() > max
1372	450	4	OpenMapRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
5025	463	4	OpenMapRealVector.java	isInfinite	iter	Iterator	0	NIL-WHILE	$.hasNext()
1373	466	6	OpenMapRealVector.java	isInfinite	value	double	0	RET	Double.isNaN($)
1374	469	6	OpenMapRealVector.java	isInfinite	value	double	0	DEF	Double.isInfinite($)
5026	480	4	OpenMapRealVector.java	isNaN	iter	Iterator	0	NIL-WHILE	$.hasNext()
1375	482	6	OpenMapRealVector.java	isNaN	iter	Iterator	0	RET	Double.isNaN($.value())
5027	498	4	OpenMapRealVector.java	mapAddToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
5027	498	4	OpenMapRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
1376	508	4	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	1	DEF	$.isDefaultValue(value)
1376	508	4	OpenMapRealVector.java	setEntry	value	double	1	DEF	isDefaultValue($)
1377	512	6	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(index)
1377	512	6	OpenMapRealVector.java	setEntry	index	int	0	DEF	entries.containsKey($)
5028	523	4	OpenMapRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.getDimension()
5028	523	4	OpenMapRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < $.getDimension()
5029	531	4	OpenMapRealVector.java	set	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
5029	531	4	OpenMapRealVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
5030	545	4	OpenMapRealVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1378	548	6	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
1378	548	6	OpenMapRealVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1379	562	4	OpenMapRealVector.java	subtract	v	RealVector	1	RET	$ instanceof OpenMapRealVector
1380	582	4	OpenMapRealVector.java	unitize	THIS	OpenMapRealVector	0	MathArithmeticException	$.isDefaultValue(norm)
1380	582	4	OpenMapRealVector.java	unitize	norm	double	0	MathArithmeticException	isDefaultValue($)
5031	586	4	OpenMapRealVector.java	unitize	iter	Iterator	0	NIL-WHILE	$.hasNext()
5032	597	4	OpenMapRealVector.java	toArray	iter	Iterator	0	NIL-WHILE	$.hasNext()
5033	614	4	OpenMapRealVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1381	625	4	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$ == obj
1381	625	4	OpenMapRealVector.java	equals	obj	Object	0	RET	this == $
1382	628	4	OpenMapRealVector.java	equals	obj	Object	0	RET	$ instanceof OpenMapRealVector
1383	632	4	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$.virtualSize != other.$.virtualSize
1383	632	4	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	virtualSize != $.virtualSize
1384	635	4	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits($.epsilon) != Double.doubleToLongBits(other.$.epsilon)
1384	635	4	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	Double.doubleToLongBits(epsilon) != Double.doubleToLongBits($.epsilon)
5034	639	4	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1385	642	6	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(iter.value())
1385	642	6	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.value())
5035	647	4	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1386	650	6	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.getEntry(iter.key()))
1386	650	6	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(getEntry(iter.key()))
1386	650	6	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry($.key()))
2894	27	4	OrderedCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2894	27	4	OrderedCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2895	41	4	OrderedCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
2895	41	4	OrderedCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
6118	53	4	OrderedCrossover.java	mate	a	int	0	NIL-DOWHILE	$ == b
6118	53	4	OrderedCrossover.java	mate	b	int	0	NIL-DOWHILE	a == $
6119	63	4	OrderedCrossover.java	mate	i	int	0	NIL-FOR	$ <= length
6119	63	4	OrderedCrossover.java	mate	length	int	0	NIL-FOR	i <= $
2896	67	6	OrderedCrossover.java	mate	item2	T	0	DEF	child1Set.contains($)
2896	67	6	OrderedCrossover.java	mate	child1Set	Set<T>	0	DEF	$.contains(item2)
2897	71	6	OrderedCrossover.java	mate	item1	T	0	DEF	child2Set.contains($)
2897	71	6	OrderedCrossover.java	mate	child2Set	Set<T>	0	DEF	$.contains(item1)
6472	65	4	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	NIL-FOR	i < components.$.length
6472	65	4	OrderedTuple.java	OrderedTuple	i	int	0	NIL-FOR	$ < components.length
6472	65	4	OrderedTuple.java	OrderedTuple	components	double	0	NIL-FOR	i < $.length
3649	66	6	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isInfinite(components[$])
3649	66	6	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isInfinite($[i])
3650	67	8	OrderedTuple.java	OrderedTuple	i	int	1	DEF	components[$] < 0
3650	67	8	OrderedTuple.java	OrderedTuple	components	double	1	DEF	$[i] < 0
3651	75	8	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isNaN(components[$])
3651	75	8	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isNaN($[i])
3652	81	10	OrderedTuple.java	OrderedTuple	m	long	0	DEF	$ != 0
3653	89	4	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.posInf
3653	89	4	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.negInf
3654	94	4	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	1	DEF	$.lsb <= msb
3654	94	4	OrderedTuple.java	OrderedTuple	msb	int	1	DEF	lsb <= $
3655	108	4	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding != null
3655	108	4	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding.$.length == 1
3655	108	4	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding[0] == 0x0L
6473	117	4	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	eIndex < $.encoding.$.length
6473	117	4	OrderedTuple.java	encode	eIndex	int	0	NIL-FOR	$ < encoding.length
6474	118	6	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	vIndex < $.components.$.length
6474	118	6	OrderedTuple.java	encode	vIndex	int	0	NIL-FOR	$ < components.length
3656	119	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	DEF	$.getBit(vIndex,k) != 0
3656	119	8	OrderedTuple.java	encode	vIndex	int	0	DEF	getBit($,k) != 0
3656	119	8	OrderedTuple.java	encode	k	int	0	DEF	getBit(vIndex,$) != 0
3657	122	8	OrderedTuple.java	encode	shift	int	0	DEF	$-- == 0
3658	136	4	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.components.$.length == ot.$.components.$.length
3658	136	4	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	components.length == $.components.length
3659	137	6	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.nan
3660	141	8	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.nan
3660	141	8	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.nan
3661	145	10	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.negInf
3661	145	10	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.posInf
3661	145	10	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.posInf
3662	149	12	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.posInf
3662	149	12	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.negInf
3662	149	12	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.negInf
3663	153	14	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	DEF	$.offset < ot.$.offset
3663	153	14	OrderedTuple.java	compareTo	ot	OrderedTuple	1	DEF	offset < $.offset
3664	157	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	DEF	$.offset > ot.$.offset
3664	157	16	OrderedTuple.java	compareTo	ot	OrderedTuple	0	DEF	offset > $.offset
6475	162	14	OrderedTuple.java	compareTo	i	int	0	NIL-FOR	$ < limit
6475	162	14	OrderedTuple.java	compareTo	limit	int	0	NIL-FOR	i < $
3665	163	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding[i] < ot.$.encoding[i]
3665	163	16	OrderedTuple.java	compareTo	i	int	1	RET	encoding[$] < ot.encoding[$]
3665	163	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding[i] < $.encoding[i]
3666	167	18	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.encoding[i] > ot.$.encoding[i]
3666	167	18	OrderedTuple.java	compareTo	i	int	0	RET	encoding[$] > ot.encoding[$]
3666	167	18	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	encoding[i] > $.encoding[i]
3667	172	14	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length < ot.$.encoding.$.length
3667	172	14	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length < $.encoding.length
3668	176	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length > ot.$.encoding.$.length
3668	176	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length > $.encoding.length
3669	194	4	OrderedTuple.java	equals	THIS	OrderedTuple	1	RET	$ == other
3669	194	4	OrderedTuple.java	equals	other	Object	1	RET	this == $
3670	198	6	OrderedTuple.java	equals	other	Object	1	RET	$ instanceof OrderedTuple
6476	263	4	OrderedTuple.java	computeMSB	scale	int	0	NIL-WHILE	$ != 0
3671	264	6	OrderedTuple.java	computeMSB	ll	long	0	DEF	($ & mask) != $
3671	264	6	OrderedTuple.java	computeMSB	mask	long	0	DEF	(ll & $) != ll
6477	284	4	OrderedTuple.java	computeLSB	scale	int	0	NIL-WHILE	$ != 0
3672	285	6	OrderedTuple.java	computeLSB	ll	long	0	DEF	($ & mask) == $
3672	285	6	OrderedTuple.java	computeLSB	mask	long	0	DEF	(ll & $) == ll
3673	303	4	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k > $.offset
3673	303	4	OrderedTuple.java	getBit	e	int	1	RET	k < $
3673	303	4	OrderedTuple.java	getBit	k	int	1	RET	$ < e
3673	303	4	OrderedTuple.java	getBit	k	int	1	RET	$ > offset
3674	307	6	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k == $.offset
3674	307	6	OrderedTuple.java	getBit	k	int	1	RET	$ == offset
3675	311	8	OrderedTuple.java	getBit	e	int	1	RET	k > ($ + 52)
3675	311	8	OrderedTuple.java	getBit	k	int	1	RET	$ > (e + 52)
6493	51	4	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	NIL-FOR	i < outline.$.length
6493	51	4	OutlineExtractor.java	getOutline	i	int	0	NIL-FOR	$ < outline.length
6493	51	4	OutlineExtractor.java	getOutline	outline	Vector2D[][]	0	NIL-FOR	i < $.length
6494	55	6	OutlineExtractor.java	getOutline	end	int	0	NIL-WHILE	j < $
6494	55	6	OutlineExtractor.java	getOutline	j	int	0	NIL-WHILE	$ < end
3894	56	8	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	1	DEF	$.pointIsBetween(rawLoop,end,j)
3894	56	8	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	1	DEF	pointIsBetween($,end,j)
3894	56	8	OutlineExtractor.java	getOutline	end	int	1	DEF	pointIsBetween(rawLoop,$,j)
3894	56	8	OutlineExtractor.java	getOutline	j	int	1	DEF	pointIsBetween(rawLoop,end,$)
6495	57	10	OutlineExtractor.java	getOutline	k	int	0	NIL-FOR	$ < (end - 1)
6495	57	10	OutlineExtractor.java	getOutline	end	int	0	NIL-FOR	k < ($ - 1)
3895	66	6	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	DEF	end != rawLoop.$.length
3895	66	6	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	0	DEF	end != $.length
3895	66	6	OutlineExtractor.java	getOutline	end	int	0	DEF	$ != rawLoop.length
662	70	4	Pair.java	equals	THIS	Pair	0	RET	$ == o
662	70	4	Pair.java	equals	o	Object	0	RET	this == $
663	73	4	Pair.java	equals	o	Object	1	RET	$ instanceof Pair
2328	39	6	ParameterJacobianWrapper.java	ParameterJacobianWrapper	name	String	0	DEF	pode.isSupported($)
2328	39	6	ParameterJacobianWrapper.java	ParameterJacobianWrapper	pode	ParameterizedODE	0	DEF	$.isSupported(name)
2329	61	4	ParameterJacobianWrapper.java	computeParameterJacobian	THIS	ParameterJacobianWrapper	1	DEF	$.pode.isSupported(paramName)
2329	61	4	ParameterJacobianWrapper.java	computeParameterJacobian	paramName	String	1	DEF	pode.isSupported($)
5669	67	6	ParameterJacobianWrapper.java	computeParameterJacobian	i	int	0	NIL-FOR	$ < n
5669	67	6	ParameterJacobianWrapper.java	computeParameterJacobian	n	int	0	NIL-FOR	i < $
2330	57	4	ParameterizedWrapper.java	getParameter	THIS	ParameterizedWrapper	0	UnknownParameterException	$.isSupported(name)
2330	57	4	ParameterizedWrapper.java	getParameter	name	String	0	UnknownParameterException	isSupported($)
1714	73	4	ParetoDistribution.java	ParetoDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1715	76	4	ParetoDistribution.java	ParetoDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1716	101	4	ParetoDistribution.java	density	THIS	ParetoDistribution	0	RET	x < $.scale
1716	101	4	ParetoDistribution.java	density	x	double	0	RET	$ < scale
1717	110	4	ParetoDistribution.java	cumulativeProbability	THIS	ParetoDistribution	0	RET	x <= $.scale
1717	110	4	ParetoDistribution.java	cumulativeProbability	x	double	0	RET	$ <= scale
1718	132	4	ParetoDistribution.java	getNumericalMean	THIS	ParetoDistribution	0	RET	$.shape <= 1
1719	141	4	ParetoDistribution.java	getNumericalVariance	THIS	ParetoDistribution	0	RET	$.shape <= 2
1856	53	4	PascalDistribution.java	PascalDistribution	r	int	0	NotStrictlyPositiveException	$ <= 0
1857	56	4	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ > 1
1857	56	4	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ < 0
1858	81	4	PascalDistribution.java	probability	x	int	1	DEF	$ < 0
1859	94	4	PascalDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
417	56	4	PearsonsCorrelation.java	PearsonsCorrelation	covarianceMatrix	RealMatrix	0	NullArgumentException	$ == null
4467	85	4	PearsonsCorrelation.java	getCorrelationStandardErrors	i	int	0	NIL-FOR	$ < nVars
4467	85	4	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	i < $
4468	86	6	PearsonsCorrelation.java	getCorrelationStandardErrors	j	int	0	NIL-FOR	$ < nVars
4468	86	6	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	j < $
4469	102	4	PearsonsCorrelation.java	getCorrelationPValues	i	int	0	NIL-FOR	$ < nVars
4469	102	4	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	i < $
4470	103	6	PearsonsCorrelation.java	getCorrelationPValues	j	int	0	NIL-FOR	$ < nVars
4470	103	6	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	j < $
418	104	8	PearsonsCorrelation.java	getCorrelationPValues	j	int	1	DEF	i == $
418	104	8	PearsonsCorrelation.java	getCorrelationPValues	i	int	1	DEF	$ == j
4471	124	4	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	$ < nVars
4471	124	4	PearsonsCorrelation.java	computeCorrelationMatrix	nVars	int	0	NIL-FOR	i < $
4472	125	6	PearsonsCorrelation.java	computeCorrelationMatrix	j	int	0	NIL-FOR	$ < i
4472	125	6	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	j < $
419	152	4	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
419	152	4	PearsonsCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
419	152	4	PearsonsCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
420	156	6	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
420	156	6	PearsonsCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
4473	160	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	0	NIL-FOR	i < xArray.$.length
4473	160	8	PearsonsCorrelation.java	correlation	i	int	0	NIL-FOR	$ < xArray.length
4473	160	8	PearsonsCorrelation.java	correlation	xArray	double[]	0	NIL-FOR	i < $.length
4474	175	4	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	$ < nVars
4474	175	4	PearsonsCorrelation.java	covarianceToCorrelation	nVars	int	0	NIL-FOR	i < $
4475	178	6	PearsonsCorrelation.java	covarianceToCorrelation	j	int	0	NIL-FOR	$ < i
4475	178	6	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	j < $
421	194	4	PearsonsCorrelation.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
421	194	4	PearsonsCorrelation.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 2
183	63	4	Percentile.java	setData	values	double[]	1	DEF	$ == null
184	76	4	Percentile.java	setData	values	double[]	1	DEF	$ == null
185	127	4	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ > 100
185	127	4	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ <= 0
186	130	4	Percentile.java	evaluate	length	int	0	RET	$ == 0
187	133	4	Percentile.java	evaluate	length	int	0	RET	$ == 1
188	143	4	Percentile.java	evaluate	THIS	Percentile	1	DEF	values == $.getDataRef()
188	143	4	Percentile.java	evaluate	values	double[]	1	DEF	$ == getDataRef()
189	153	4	Percentile.java	evaluate	pos	double	0	RET	$ < 1
190	156	4	Percentile.java	evaluate	n	double	0	RET	pos >= $
190	156	4	Percentile.java	evaluate	pos	double	0	RET	$ >= n
4384	174	4	Percentile.java	select	begin	int	0	NIL-WHILE	end - $ > MIN_SELECT_SIZE
4384	174	4	Percentile.java	select	end	int	0	NIL-WHILE	$ - begin > MIN_SELECT_SIZE
191	176	6	Percentile.java	select	THIS	Percentile	1	DEF	node < pivotsHeap.$.length
191	176	6	Percentile.java	select	node	int	1	DEF	$ < pivotsHeap.length
191	176	6	Percentile.java	select	node	int	1	DEF	pivotsHeap[$] >= 0
191	176	6	Percentile.java	select	pivotsHeap	int[]	1	DEF	node < $.length
191	176	6	Percentile.java	select	pivotsHeap	int[]	1	DEF	$[node] >= 0
192	181	8	Percentile.java	select	THIS	Percentile	0	DEF	node < pivotsHeap.$.length
192	181	8	Percentile.java	select	node	int	0	DEF	$ < pivotsHeap.length
192	181	8	Percentile.java	select	pivotsHeap	int[]	0	DEF	node < $.length
193	185	6	Percentile.java	select	pivot	int	1	RET	k == $
193	185	6	Percentile.java	select	k	int	1	RET	$ == pivot
194	189	8	Percentile.java	select	pivot	int	1	DEF	k < $
194	189	8	Percentile.java	select	k	int	1	DEF	$ < pivot
195	215	4	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wMiddle
195	215	4	Percentile.java	medianOf3	wMiddle	double	1	RET	wBegin < $
196	216	6	Percentile.java	medianOf3	wMiddle	double	1	RET	$ < wEnd
196	216	6	Percentile.java	medianOf3	wEnd	double	1	RET	wMiddle < $
197	224	6	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wEnd
197	224	6	Percentile.java	medianOf3	wEnd	double	1	RET	wBegin < $
4385	245	4	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
4385	245	4	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
4386	246	6	Percentile.java	partition	value	double	0	NIL-WHILE	work[j] > $
4386	246	6	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
4386	246	6	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
4386	246	6	Percentile.java	partition	j	int	0	NIL-WHILE	work[$] > value
4386	246	6	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[j] > value
4387	249	6	Percentile.java	partition	value	double	0	NIL-WHILE	work[i] < $
4387	249	6	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
4387	249	6	Percentile.java	partition	i	int	0	NIL-WHILE	work[$] < value
4387	249	6	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
4387	249	6	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[i] < value
198	252	6	Percentile.java	partition	i	int	0	DEF	$ < j
198	252	6	Percentile.java	partition	j	int	0	DEF	i < $
199	258	4	Percentile.java	partition	value	double	0	DEF	work[i] > $
199	258	4	Percentile.java	partition	i	int	0	DEF	$ >= end
199	258	4	Percentile.java	partition	i	int	0	DEF	work[$] > value
199	258	4	Percentile.java	partition	work	double[]	0	DEF	$[i] > value
199	258	4	Percentile.java	partition	end	int	0	DEF	i >= $
4388	272	4	Percentile.java	insertionSort	j	int	0	NIL-FOR	$ < end
4388	272	4	Percentile.java	insertionSort	end	int	0	NIL-FOR	j < $
4389	275	6	Percentile.java	insertionSort	saved	double	0	NIL-WHILE	$ < work[i]
4389	275	6	Percentile.java	insertionSort	i	int	0	NIL-WHILE	$ >= begin
4389	275	6	Percentile.java	insertionSort	i	int	0	NIL-WHILE	saved < work[$]
4389	275	6	Percentile.java	insertionSort	work	double[]	0	NIL-WHILE	saved < $[i]
4389	275	6	Percentile.java	insertionSort	begin	int	0	NIL-WHILE	i >= $
200	295	4	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ <= 0
200	295	4	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ > 100
201	318	4	Percentile.java	copy	THIS	Percentile	0	DEF	source.$.cachedPivots != null
201	318	4	Percentile.java	copy	source	Percentile	0	DEF	$.cachedPivots != null
3890	116	4	Plane.java	setNormal	norm	double	0	MathArithmeticException	$ < 1.0e-10
3891	242	4	Plane.java	intersection	THIS	Plane	0	RET	$.FastMath.abs(dot) < 1.0e-10
3891	242	4	Plane.java	intersection	dot	double	0	RET	FastMath.abs($) < 1.0e-10
3892	256	4	Plane.java	intersection	direction	Vector3D	0	RET	$.getNorm() < 1.0e-10
3893	286	4	Plane.java	intersection	THIS	Plane	0	RET	$.FastMath.abs(determinant) < 1.0e-10
3893	286	4	Plane.java	intersection	determinant	double	0	RET	FastMath.abs($) < 1.0e-10
1792	81	4	PoissonDistribution.java	PoissonDistribution	p	double	0	NotStrictlyPositiveException	$ <= 0
1793	121	4	PoissonDistribution.java	probability	x	int	1	DEF	$ < 0
1793	121	4	PoissonDistribution.java	probability	x	int	1	DEF	$ == Integer.MAX_VALUE
1794	125	6	PoissonDistribution.java	probability	x	int	1	DEF	$ == 0
1795	138	4	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ < 0
1796	141	4	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
1797	201	4	PoissonDistribution.java	nextPoisson	pivot	double	1	RET	meanPoisson < $
1797	201	4	PoissonDistribution.java	nextPoisson	meanPoisson	double	1	RET	$ < pivot
5530	206	6	PoissonDistribution.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * meanPoisson
5530	206	6	PoissonDistribution.java	nextPoisson	meanPoisson	double	0	NIL-WHILE	n < 1000 * $
1798	209	8	PoissonDistribution.java	nextPoisson	p	double	1	DEF	r >= $
1798	209	8	PoissonDistribution.java	nextPoisson	r	double	1	DEF	$ >= p
1799	242	8	PoissonDistribution.java	nextPoisson	u	double	1	DEF	$ <= p1
1799	242	8	PoissonDistribution.java	nextPoisson	p1	double	1	DEF	u <= $
1800	245	10	PoissonDistribution.java	nextPoisson	lambda	double	0	DEF	x < -$
1800	245	10	PoissonDistribution.java	nextPoisson	delta	double	0	DEF	x > $
1800	245	10	PoissonDistribution.java	nextPoisson	x	double	0	DEF	$ < -lambda
1800	245	10	PoissonDistribution.java	nextPoisson	x	double	0	DEF	$ > delta
1801	253	10	PoissonDistribution.java	nextPoisson	u	double	1	DEF	$ > p1 + p2
1801	253	10	PoissonDistribution.java	nextPoisson	p1	double	1	DEF	u > $ + p2
1801	253	10	PoissonDistribution.java	nextPoisson	p2	double	1	DEF	u > p1 + $
1802	265	8	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < -t
1802	265	8	PoissonDistribution.java	nextPoisson	a	int	0	DEF	$ == 0
1802	265	8	PoissonDistribution.java	nextPoisson	t	double	0	DEF	v < -$
1803	271	8	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < qa
1803	271	8	PoissonDistribution.java	nextPoisson	qa	double	0	DEF	v < $
1804	275	8	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ > qr
1804	275	8	PoissonDistribution.java	nextPoisson	qr	double	0	DEF	v > $
1805	278	8	PoissonDistribution.java	nextPoisson	THIS	PoissonDistribution	0	DEF	v < y * logLambda - $.ArithmeticUtils.factorialLog((int)(y + lambda)) + logLambdaFactorial
1805	278	8	PoissonDistribution.java	nextPoisson	lambda	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int)(y + $)) + logLambdaFactorial
1805	278	8	PoissonDistribution.java	nextPoisson	logLambda	double	0	DEF	v < y * $ - ArithmeticUtils.factorialLog((int)(y + lambda)) + logLambdaFactorial
1805	278	8	PoissonDistribution.java	nextPoisson	logLambdaFactorial	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int)(y + lambda)) + $
1805	278	8	PoissonDistribution.java	nextPoisson	y	double	0	DEF	v < $ * logLambda - ArithmeticUtils.factorialLog((int)($ + lambda)) + logLambdaFactorial
1805	278	8	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < y * logLambda - ArithmeticUtils.factorialLog((int)(y + lambda)) + logLambdaFactorial
3507	24	4	PollardRho.java	primeFactors	n	int	0	RET	1 == $
3508	27	4	PollardRho.java	primeFactors	THIS	PollardRho	0	RET	$.SmallPrimes.millerRabinPrimeTest(n)
3508	27	4	PollardRho.java	primeFactors	n	int	0	RET	SmallPrimes.millerRabinPrimeTest($)
6460	49	6	PollardRho.java	rhoBrent	i	int	0	NIL-FOR	$ < r
6460	49	6	PollardRho.java	rhoBrent	r	int	0	NIL-FOR	i < $
6461	54	6	PollardRho.java	rhoBrent	k	int	0	NIL-DOWHILE	$ < r
6461	54	6	PollardRho.java	rhoBrent	r	int	0	NIL-DOWHILE	k < $
6462	57	8	PollardRho.java	rhoBrent	i	int	0	NIL-FOR	$ < bound
6462	57	8	PollardRho.java	rhoBrent	bound	int	0	NIL-FOR	i < $
3509	61	10	PollardRho.java	rhoBrent	divisor	long	0	DEF	0 == $
3510	70	10	PollardRho.java	rhoBrent	q	int	0	RET	0 == $
3511	75	8	PollardRho.java	rhoBrent	out	int	0	RET	1 != $
3512	92	4	PollardRho.java	gcdPositive	a	int	1	RET	$ == 0
3513	96	6	PollardRho.java	gcdPositive	b	int	0	RET	$ == 0
6463	105	4	PollardRho.java	gcdPositive	a	int	0	NIL-WHILE	$ != b
6463	105	4	PollardRho.java	gcdPositive	b	int	0	NIL-WHILE	a != $
3719	92	4	PolygonsSet.java	verticesToTree	n	int	0	RET	$ == 0
6485	96	4	PolygonsSet.java	verticesToTree	i	int	0	NIL-FOR	$ < n
6485	96	4	PolygonsSet.java	verticesToTree	n	int	0	NIL-FOR	i < $
6486	100	4	PolygonsSet.java	verticesToTree	i	int	0	NIL-FOR	$ < n
6486	100	4	PolygonsSet.java	verticesToTree	n	int	0	NIL-FOR	i < $
3720	104	6	PolygonsSet.java	verticesToTree	line	Line	0	DEF	$ == null
3721	109	8	PolygonsSet.java	verticesToTree	THIS	PolygonsSet	0	DEF	$.vertex != end
3721	109	8	PolygonsSet.java	verticesToTree	THIS	PolygonsSet	0	DEF	$.vertex != start
3721	109	8	PolygonsSet.java	verticesToTree	THIS	PolygonsSet	0	DEF	$.FastMath.abs(line.getOffset($.vertex.getLocation())) <= hyperplaneThickness
3721	109	8	PolygonsSet.java	verticesToTree	start	Vertex	0	DEF	vertex != $
3721	109	8	PolygonsSet.java	verticesToTree	end	Vertex	0	DEF	vertex != $
3721	109	8	PolygonsSet.java	verticesToTree	line	Line	0	DEF	FastMath.abs($.getOffset(vertex.getLocation())) <= hyperplaneThickness
3721	109	8	PolygonsSet.java	verticesToTree	hyperplaneThickness	double	0	DEF	FastMath.abs(line.getOffset(vertex.getLocation())) <= $
6487	127	4	PolygonsSet.java	insertEdges	index	int	0	NIL-WHILE	$ < edges.size()
6487	127	4	PolygonsSet.java	insertEdges	inserted	Edge	0	NIL-WHILE	$ == null
6487	127	4	PolygonsSet.java	insertEdges	edges	List<Edge>	0	NIL-WHILE	index < $.size()
3722	129	6	PolygonsSet.java	insertEdges	inserted	Edge	1	DEF	$.getNode() == null
3723	130	8	PolygonsSet.java	insertEdges	inserted	Edge	1	DEF	node.insertCut($.getLine())
3723	130	8	PolygonsSet.java	insertEdges	node	BSPTree<Euclidean2D>	1	DEF	$.insertCut(inserted.getLine())
3724	141	4	PolygonsSet.java	insertEdges	inserted	Edge	0	RET	$ == null
3725	143	6	PolygonsSet.java	insertEdges	parent	BSPTree	1	DEF	$ == null
3725	143	6	PolygonsSet.java	insertEdges	parent	BSPTree	1	DEF	node == $.getMinus()
3725	143	6	PolygonsSet.java	insertEdges	node	BSPTree<Euclidean2D>	1	DEF	$ == parent.getMinus()
3726	154	6	PolygonsSet.java	insertEdges	THIS	PolygonsSet	0	DEF	$.edge != inserted
3726	154	6	PolygonsSet.java	insertEdges	inserted	Edge	0	DEF	edge != $
3727	161	10	PolygonsSet.java	insertEdges	THIS	PolygonsSet	1	DEF	endSide == $.Side.MINUS
3727	161	10	PolygonsSet.java	insertEdges	endSide	Side	1	DEF	$ == Side.MINUS
3728	171	6	PolygonsSet.java	insertEdges	THIS	PolygonsSet	1	DEF	endSide == $.Side.PLUS
3728	171	6	PolygonsSet.java	insertEdges	endSide	Side	1	DEF	$ == Side.PLUS
3729	181	2	PolygonsSet.java	insertEdges	THIS	PolygonsSet	1	DEF	endSide == $.Side.PLUS
3729	181	2	PolygonsSet.java	insertEdges	endSide	Side	1	DEF	$ == Side.PLUS
3730	185	4	PolygonsSet.java	insertEdges	THIS	PolygonsSet	0	DEF	endSide == $.Side.MINUS
3730	185	4	PolygonsSet.java	insertEdges	endSide	Side	0	DEF	$ == Side.MINUS
3731	193	0	PolygonsSet.java	insertEdges	plusList	List<Edge>	1	DEF	$.isEmpty()
3732	199	0	PolygonsSet.java	insertEdges	minusList	List<Edge>	1	DEF	$.isEmpty()
3733	391	0	PolygonsSet.java	computeGeometricalProperties	THIS	PolygonsSet	1	DEF	v.$.length == 0
3733	391	0	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$.length == 0
3734	393	0	PolygonsSet.java	computeGeometricalProperties	tree	BSPTree	1	DEF	$.getCut() == null
3734	393	0	PolygonsSet.java	computeGeometricalProperties	tree	BSPTree	1	DEF	(Boolean)$.getAttribute()
3735	403	0	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$[0][0] == null
3736	425	0	PolygonsSet.java	computeGeometricalProperties	sum	double	1	DEF	$ < 0
3737	441	0	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	$.vertices == null
3738	442	0	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.getTree(false).getCut() == null
6488	450	0	PolygonsSet.java	getVertices	sorted	AVLTree	0	NIL-WHILE	$.isEmpty()
3739	453	0	PolygonsSet.java	getVertices	loop	List<ComparableSegment>	0	DEF	$ != null
3740	460	0	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.size() < 2
3741	465	0	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.get(0).getStart() == null
3742	469	4	PolygonsSet.java	getVertices	j	int	0	DEF	$ == 0
3743	475	4	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j < (array.$.length - 1)
3743	475	4	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j < ($.length - 1)
3743	475	4	PolygonsSet.java	getVertices	j	int	0	DEF	$ < (array.length - 1)
3744	478	4	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j == (array.$.length - 1)
3744	478	4	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j == ($.length - 1)
3744	478	4	PolygonsSet.java	getVertices	j	int	0	DEF	$ == (array.length - 1)
6489	514	0	PolygonsSet.java	followLoop	globalStart	Vector2D	0	NIL-WHILE	$.distance(end) > 1.0e-10
6489	514	0	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	globalStart.distance($) > 1.0e-10
6489	514	0	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	$ != null
6489	514	0	PolygonsSet.java	followLoop	open	boolean	0	NIL-WHILE	$
6490	520	0	PolygonsSet.java	followLoop	THIS	PolygonsSet	0	NIL-FOR	$.n.getElement().compareTo(upperRight) <= 0
6490	520	0	PolygonsSet.java	followLoop	THIS	PolygonsSet	0	NIL-FOR	$.n != null
6490	520	0	PolygonsSet.java	followLoop	upperRight	ComparableSegment	0	NIL-FOR	n.getElement().compareTo($) <= 0
3745	523	0	PolygonsSet.java	followLoop	distance	double	0	DEF	$ < selectedDistance
3745	523	0	PolygonsSet.java	followLoop	selectedDistance	double	0	DEF	distance < $
3746	529	0	PolygonsSet.java	followLoop	selectedDistance	double	0	RET	$ > 1.0e-10
3747	536	0	PolygonsSet.java	followLoop	loop	ArrayList<ComparableSegment>	0	RET	$.size() == 2
3747	536	0	PolygonsSet.java	followLoop	open	boolean	0	RET	$
3748	539	0	PolygonsSet.java	followLoop	end	Vector2D	0	MathInternalError	$ == null
3748	539	0	PolygonsSet.java	followLoop	open	boolean	0	MathInternalError	$
3813	88	4	PolyhedronsSet.java	computeGeometricalProperties	THIS	PolyhedronsSet	1	DEF	$.getSize() < 0
3814	173	4	PolyhedronsSet.java	recurseFirstIntersection	cut	SubHyperplane	0	RET	$ == null
3815	183	4	PolyhedronsSet.java	recurseFirstIntersection	offset	double	1	DEF	$ < 0
3816	191	4	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
3817	193	6	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane	0	RET	$ != null
3818	198	4	PolyhedronsSet.java	recurseFirstIntersection	crossed	SubHyperplane	0	RET	$ != null
3819	201	4	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
3820	203	6	PolyhedronsSet.java	recurseFirstIntersection	hit3D	Vector3D	0	RET	$ != null
3821	205	8	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane	0	RET	$ != null
3822	221	4	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane)attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
3822	221	4	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane)attribute.getPlusOutside()).getRemainingRegion().checkPoint($) == Location.INSIDE
3822	221	4	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute	0	RET	$.getPlusOutside() != null
3822	221	4	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute	0	RET	((SubPlane)$.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
3823	224	4	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane)attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
3823	224	4	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane)attribute.getPlusInside()).getRemainingRegion().checkPoint($) == Location.INSIDE
3823	224	4	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute	0	RET	$.getPlusInside() != null
3823	224	4	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute	0	RET	((SubPlane)$.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
4049	37	4	PolynomialFunction.java	PolynomialFunction	n	int	0	NoDataException	$ == 0
6628	40	4	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	$ > 1
6628	40	4	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	c[$ - 1] == 0
6628	40	4	PolynomialFunction.java	PolynomialFunction	c	double	0	NIL-WHILE	$[n - 1] == 0
4050	80	4	PolynomialFunction.java	evaluate	n	int	0	NoDataException	$ == 0
6629	84	4	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >= 0
4051	98	4	PolynomialFunction.java	value	n	int	0	NoDataException	$ == 0
6630	102	4	PolynomialFunction.java	value	j	int	0	NIL-FOR	$ >= 0
6631	116	4	PolynomialFunction.java	add	i	int	0	NIL-FOR	$ < lowLength
6631	116	4	PolynomialFunction.java	add	lowLength	int	0	NIL-FOR	i < $
6632	131	4	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < lowLength
6632	131	4	PolynomialFunction.java	subtract	lowLength	int	0	NIL-FOR	i < $
4052	134	4	PolynomialFunction.java	subtract	THIS	PolynomialFunction	1	DEF	$.coefficients.$.length < p.$.coefficients.$.length
4052	134	4	PolynomialFunction.java	subtract	p	PolynomialFunction	1	DEF	coefficients.length < $.coefficients.length
6633	135	6	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < highLength
6633	135	6	PolynomialFunction.java	subtract	highLength	int	0	NIL-FOR	i < $
6634	150	4	PolynomialFunction.java	negate	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
6634	150	4	PolynomialFunction.java	negate	i	int	0	NIL-FOR	$ < coefficients.length
6635	162	4	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	i < newCoefficients.$.length
6635	162	4	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	$ < newCoefficients.length
6635	162	4	PolynomialFunction.java	multiply	newCoefficients	double[]	0	NIL-FOR	i < $.length
6636	164	6	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	j < $.FastMath.min($.coefficients.$.length,i + 1)
6636	164	6	PolynomialFunction.java	multiply	j	int	0	NIL-FOR	$ < FastMath.min(coefficients.length,i + 1)
6636	164	6	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	j < FastMath.min(coefficients.length,$ + 1)
4053	180	4	PolynomialFunction.java	differentiate	n	int	0	NoDataException	$ == 0
4054	183	4	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
6637	187	4	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
4055	212	4	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	RET	$.coefficients[0] == 0.0
4056	213	6	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	RET	$.coefficients.$.length == 1
6638	220	4	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
6638	220	4	PolynomialFunction.java	toString	i	int	0	NIL-FOR	$ < coefficients.length
4057	221	6	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] != 0
4057	221	6	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] != 0
4058	222	8	PolynomialFunction.java	toString	s	StringBuilder	1	DEF	$.length() > 0
4059	223	10	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	DEF	$.coefficients[i] < 0
4059	223	10	PolynomialFunction.java	toString	i	int	1	DEF	coefficients[$] < 0
4060	231	10	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] < 0
4060	231	10	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] < 0
4061	236	8	PolynomialFunction.java	toString	absAi	double	0	DEF	($ - 1) != 0
4062	241	8	PolynomialFunction.java	toString	i	int	0	DEF	$ > 1
4063	256	4	PolynomialFunction.java	toString	c	String	1	RET	$.endsWith(".0")
4064	276	4	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	$ == obj
4064	276	4	PolynomialFunction.java	equals	obj	Object	0	RET	this == $
4065	279	4	PolynomialFunction.java	equals	obj	Object	0	RET	$ instanceof PolynomialFunction
4066	283	4	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	Arrays.equals($.coefficients,other.$.coefficients)
4066	283	4	PolynomialFunction.java	equals	other	PolynomialFunction	0	RET	Arrays.equals(coefficients,$.coefficients)
4041	45	4	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.verifyInterpolationArray(x,y,false)
4041	45	4	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	x	double	0	DEF	verifyInterpolationArray($,y,false)
4041	45	4	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	y	double	0	DEF	verifyInterpolationArray(x,$,false)
4042	91	4	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
4043	109	4	PolynomialFunctionLagrangeForm.java	evaluate	THIS	PolynomialFunctionLagrangeForm	0	RET	$.verifyInterpolationArray(x,y,false)
4043	109	4	PolynomialFunctionLagrangeForm.java	evaluate	x	double	0	RET	verifyInterpolationArray($,y,false)
4043	109	4	PolynomialFunctionLagrangeForm.java	evaluate	y	double	0	RET	verifyInterpolationArray(x,$,false)
6619	136	4	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
6619	136	4	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
4044	140	6	PolynomialFunctionLagrangeForm.java	evaluateInternal	dist	double	0	DEF	$ < min_dist
4044	140	6	PolynomialFunctionLagrangeForm.java	evaluateInternal	min_dist	double	0	DEF	dist < $
6620	146	4	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
6620	146	4	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
6621	147	6	PolynomialFunctionLagrangeForm.java	evaluateInternal	j	int	0	NIL-FOR	$ < n - i
6621	147	6	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	j < n - $
6621	147	6	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	j < $ - i
4045	155	6	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	1	DEF	nearest < 0.5 * (n - $ + 1)
4045	155	6	PolynomialFunctionLagrangeForm.java	evaluateInternal	nearest	int	1	DEF	$ < 0.5 * (n - i + 1)
4045	155	6	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	1	DEF	nearest < 0.5 * ($ - i + 1)
6622	171	4	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
6622	171	4	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
6623	176	4	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
6623	176	4	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
6624	177	6	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
6625	184	4	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
6625	184	4	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
6626	186	6	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
6626	186	6	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
4046	187	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
4046	187	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
6627	194	6	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
4047	214	4	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DimensionMismatchException	x.$.length != y.$.length
4047	214	4	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DimensionMismatchException	$.length != y.length
4047	214	4	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	DimensionMismatchException	x.length != $.length
4048	217	4	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	NumberIsTooSmallException	x.$.length < 2
4048	217	4	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	NumberIsTooSmallException	$.length < 2
6606	63	4	PolynomialFunctionNewtonForm.java	value	i	int	0	NIL-FOR	$ >= 0
4036	98	4	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
6607	119	4	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
6608	130	4	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
6608	130	4	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
6609	134	4	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
6610	135	6	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
4037	154	4	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	c.$.length == 0
4037	154	4	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	a.$.length == 0
4037	154	4	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	NoDataException	$.length == 0
4037	154	4	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	NoDataException	$.length == 0
4038	157	4	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DimensionMismatchException	a.$.length != c.$.length + 1
4038	157	4	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DimensionMismatchException	$.length != c.length + 1
4038	157	4	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DimensionMismatchException	a.length != $.length + 1
4026	41	4	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NullArgumentException	$ == null
4026	41	4	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	NullArgumentException	$ == null
4027	44	4	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	NumberIsTooSmallException	knots.$.length < 2
4027	44	4	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NumberIsTooSmallException	$.length < 2
4028	47	4	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DimensionMismatchException	knots.$.length - 1 != polynomials.$.length
4028	47	4	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DimensionMismatchException	$.length - 1 != polynomials.length
4028	47	4	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	DimensionMismatchException	knots.length - 1 != $.length
4029	64	4	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v < $.knots[0]
4029	64	4	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v > $.knots[$.n]
4029	64	4	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ < knots[0]
4029	64	4	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ > knots[n]
4030	68	4	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
4031	71	4	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
4031	71	4	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
6605	89	4	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
6605	89	4	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
4032	100	4	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	t0 < $.knots[0]
4032	100	4	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	t0 > $.knots[$.n]
4032	100	4	PolynomialSplineFunction.java	value	t0	double	0	OutOfRangeException	$ < knots[0]
4032	100	4	PolynomialSplineFunction.java	value	t0	double	0	OutOfRangeException	$ > knots[n]
4033	104	4	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
4034	107	4	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
4034	107	4	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
4035	143	4	PolynomialSplineFunction.java	isValidPoint	THIS	PolynomialSplineFunction	1	RET	x < $.knots[0]
4035	143	4	PolynomialSplineFunction.java	isValidPoint	THIS	PolynomialSplineFunction	1	RET	x > $.knots[$.n]
4035	143	4	PolynomialSplineFunction.java	isValidPoint	x	double	1	RET	$ < knots[0]
4035	143	4	PolynomialSplineFunction.java	isValidPoint	x	double	1	RET	$ > knots[n]
4039	135	4	PolynomialsUtils.java	createJacobiPolynomial	key	JacobiKey	0	DEF	JACOBI_COEFFICIENTS.containsKey($)
6611	209	4	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
6611	209	4	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
6612	210	6	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ <= i
6612	210	6	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	j <= $
6613	214	4	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
6613	214	4	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
6614	218	4	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < d
6614	218	4	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	i < $
6615	219	6	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ < d
6615	219	6	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	j < $
4040	235	6	PolynomialsUtils.java	buildPolynomial	maxDegree	int	0	DEF	degree > $
4040	235	6	PolynomialsUtils.java	buildPolynomial	degree	int	0	DEF	$ > maxDegree
6616	241	4	PolynomialsUtils.java	buildPolynomial	i	int	0	NIL-FOR	$ <= degree
6616	241	4	PolynomialsUtils.java	buildPolynomial	degree	int	0	NIL-FOR	i <= $
6617	255	4	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	$ < degree
6617	255	4	PolynomialsUtils.java	computeUpToDegree	degree	int	0	NIL-FOR	k < $
6618	262	6	PolynomialsUtils.java	computeUpToDegree	i	int	0	NIL-FOR	$ < k
6618	262	6	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	i < $
3161	65	4	PowellOptimizer.java	PowellOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
3162	68	4	PowellOptimizer.java	PowellOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
6291	106	4	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
6291	106	4	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
6292	120	6	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
6292	120	6	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3163	128	8	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	($ - fVal) > delta
3163	128	8	PowellOptimizer.java	doOptimize	delta	double	0	DEF	(fX2 - fVal) > $
3163	128	8	PowellOptimizer.java	doOptimize	fVal	double	0	DEF	(fX2 - $) > delta
3164	136	6	PowellOptimizer.java	doOptimize	stop	boolean	0	DEF	$
3164	136	6	PowellOptimizer.java	doOptimize	checker	ConvergenceChecker	0	DEF	$ != null
3165	139	6	PowellOptimizer.java	doOptimize	stop	boolean	0	RET	$
3166	140	8	PowellOptimizer.java	doOptimize	THIS	PowellOptimizer	1	RET	goal == $.GoalType.MINIMIZE
3166	140	8	PowellOptimizer.java	doOptimize	goal	GoalType	1	RET	$ == GoalType.MINIMIZE
6293	149	6	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
6293	149	6	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3167	155	6	PowellOptimizer.java	doOptimize	fX	double	0	DEF	$ > fX2
3167	155	6	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	fX > $
3168	161	8	PowellOptimizer.java	doOptimize	t	double	0	DEF	$ < 0.0
6294	185	4	PowellOptimizer.java	newPointAndDirection	i	int	0	NIL-FOR	$ < n
6294	185	4	PowellOptimizer.java	newPointAndDirection	n	int	0	NIL-FOR	i < $
3169	247	4	PowellOptimizer.java	checkParameters	THIS	PowellOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
3169	247	4	PowellOptimizer.java	checkParameters	THIS	PowellOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
2564	62	4	PowellOptimizer.java	PowellOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
2565	65	4	PowellOptimizer.java	PowellOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
5877	103	4	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
5877	103	4	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
5878	118	6	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
5878	118	6	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
2566	126	8	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	($ - fVal) > delta
2566	126	8	PowellOptimizer.java	doOptimize	delta	double	0	DEF	(fX2 - fVal) > $
2566	126	8	PowellOptimizer.java	doOptimize	fVal	double	0	DEF	(fX2 - $) > delta
2567	134	6	PowellOptimizer.java	doOptimize	stop	boolean	0	DEF	$
2567	134	6	PowellOptimizer.java	doOptimize	checker	ConvergenceChecker	0	DEF	$ != null
2568	137	6	PowellOptimizer.java	doOptimize	stop	boolean	0	RET	$
2569	138	8	PowellOptimizer.java	doOptimize	THIS	PowellOptimizer	1	RET	goal == $.GoalType.MINIMIZE
2569	138	8	PowellOptimizer.java	doOptimize	goal	GoalType	1	RET	$ == GoalType.MINIMIZE
5879	147	6	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
5879	147	6	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
2570	153	6	PowellOptimizer.java	doOptimize	fX	double	0	DEF	$ > fX2
2570	153	6	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	fX > $
2571	159	8	PowellOptimizer.java	doOptimize	t	double	0	DEF	$ < 0.0
5880	183	4	PowellOptimizer.java	newPointAndDirection	i	int	0	NIL-FOR	$ < n
5880	183	4	PowellOptimizer.java	newPointAndDirection	n	int	0	NIL-FOR	i < $
664	50	4	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x,y,eps)
664	50	4	Precision.java	compareTo	x	double	1	RET	equals($,y,eps)
664	50	4	Precision.java	compareTo	y	double	1	RET	equals(x,$,eps)
664	50	4	Precision.java	compareTo	eps	double	1	RET	equals(x,y,$)
665	54	6	Precision.java	compareTo	x	double	0	RET	$ < y
665	54	6	Precision.java	compareTo	y	double	0	RET	x < $
666	68	4	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x,y,maxUlps)
666	68	4	Precision.java	compareTo	x	double	1	RET	equals($,y,maxUlps)
666	68	4	Precision.java	compareTo	y	double	1	RET	equals(x,$,maxUlps)
666	68	4	Precision.java	compareTo	maxUlps	int	1	RET	equals(x,y,$)
667	72	6	Precision.java	compareTo	x	double	0	RET	$ < y
667	72	6	Precision.java	compareTo	y	double	0	RET	x < $
668	130	4	Precision.java	equals	xInt	int	0	DEF	$ < 0
669	133	4	Precision.java	equals	yInt	int	0	DEF	$ < 0
670	188	4	Precision.java	equalsWithRelativeTolerance	THIS	Precision	0	RET	$.equals(x,y,1)
670	188	4	Precision.java	equalsWithRelativeTolerance	x	double	0	RET	equals($,y,1)
670	188	4	Precision.java	equalsWithRelativeTolerance	y	double	0	RET	equals(x,$,1)
671	216	4	Precision.java	equals	xInt	long	0	DEF	$ < 0
672	219	4	Precision.java	equals	yInt	long	0	DEF	$ < 0
673	261	6	Precision.java	round	x	double	1	RET	Double.isInfinite($)
674	307	6	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
675	318	0	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
676	329	0	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
677	340	0	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
678	344	0	Precision.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
679	348	0	Precision.java	roundUnscaled	THIS	Precision	1	DEF	$.FastMath.floor(unscaled) / 2.0 == $.FastMath.floor(Math.floor(unscaled) / 2.0)
679	348	0	Precision.java	roundUnscaled	unscaled	double	1	DEF	FastMath.floor($) / 2.0 == FastMath.floor(Math.floor($) / 2.0)
680	362	0	Precision.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
681	371	0	Precision.java	roundUnscaled	THIS	Precision	0	MathArithmeticException	unscaled != $.FastMath.floor(unscaled)
681	371	0	Precision.java	roundUnscaled	unscaled	double	0	MathArithmeticException	$ != FastMath.floor($)
1320	72	4	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$ != null
1321	73	6	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	NonSquareOperatorException	$.getColumnDimension() != $.getRowDimension()
1322	76	6	PreconditionedIterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	m.getRowDimension() != $.getRowDimension()
1322	76	6	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$.getRowDimension() != a.getRowDimension()
3486	22	4	Primes.java	isPrime	n	int	0	RET	$ < 2
3487	26	6	Primes.java	isPrime	THIS	Primes	0	RET	0 == (n % $.p)
3487	26	6	Primes.java	isPrime	n	int	0	RET	0 == ($ % p)
3488	39	4	Primes.java	nextPrime	n	int	0	MathIllegalArgumentException	$ < 0
3489	42	4	Primes.java	nextPrime	n	int	0	RET	$ == 2
3490	46	4	Primes.java	nextPrime	n	int	0	RET	$ == 1
3491	49	4	Primes.java	nextPrime	THIS	Primes	0	RET	$.isPrime(n)
3491	49	4	Primes.java	nextPrime	n	int	0	RET	isPrime($)
3492	53	4	Primes.java	nextPrime	rem	int	1	DEF	0 == $
3493	57	6	Primes.java	nextPrime	rem	int	0	DEF	1 == $
3494	62	6	Primes.java	nextPrime	THIS	Primes	0	RET	$.isPrime(n)
3494	62	6	Primes.java	nextPrime	n	int	0	RET	isPrime($)
3495	66	6	Primes.java	nextPrime	THIS	Primes	0	RET	$.isPrime(n)
3495	66	6	Primes.java	nextPrime	n	int	0	RET	isPrime($)
3496	79	4	Primes.java	primeFactors	n	int	0	MathIllegalArgumentException	$ < 2
321	77	4	Product.java	evaluate	THIS	Product	0	DEF	$.test(values,begin,length,true)
321	77	4	Product.java	evaluate	values	double[]	0	DEF	test($,begin,length,true)
321	77	4	Product.java	evaluate	begin	int	0	DEF	test(values,$,length,true)
321	77	4	Product.java	evaluate	length	int	0	DEF	test(values,begin,$,true)
4420	79	6	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
4420	79	6	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
4420	79	6	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
322	97	4	Product.java	evaluate	THIS	Product	0	DEF	$.test(values,weights,begin,length,true)
322	97	4	Product.java	evaluate	values	double[]	0	DEF	test($,weights,begin,length,true)
322	97	4	Product.java	evaluate	weights	double[]	0	DEF	test(values,$,begin,length,true)
322	97	4	Product.java	evaluate	begin	int	0	DEF	test(values,weights,$,length,true)
322	97	4	Product.java	evaluate	length	int	0	DEF	test(values,weights,begin,$,true)
4421	99	6	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
4421	99	6	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
4421	99	6	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
3475	59	4	ProperBigFractionFormat.java	format	whole	BigInteger	0	DEF	BigInteger.ZERO.equals($)
3476	62	6	ProperBigFractionFormat.java	format	num	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
3477	86	4	ProperBigFractionFormat.java	parse	ret	BigFraction	0	RET	$ != null
3478	92	4	ProperBigFractionFormat.java	parse	whole	BigInteger	0	RET	$ == null
3479	98	4	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
3480	102	4	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
3481	120	0	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
3482	124	0	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
3483	129	0	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
3484	133	0	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
3485	144	0	ProperBigFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
3436	59	4	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
3437	84	4	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
3438	90	4	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
3439	96	4	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
3440	100	4	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
3441	118	0	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
3442	122	0	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
3443	137	0	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
4861	72	4	QRDecomposition.java	decompose	THIS	QRDecomposition	0	NIL-FOR	minor < $.FastMath.min($.qrt.$.length,$.qrt[0].length)
4861	72	4	QRDecomposition.java	decompose	minor	int	0	NIL-FOR	$ < FastMath.min(qrt.length,qrt[0].length)
4862	85	4	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	row < qrtMinor.$.length
4862	85	4	QRDecomposition.java	performHouseholderReflection	row	int	0	NIL-FOR	$ < qrtMinor.length
4862	85	4	QRDecomposition.java	performHouseholderReflection	qrtMinor	double[]	0	NIL-FOR	row < $.length
1246	91	4	QRDecomposition.java	performHouseholderReflection	a	double	0	DEF	$ != 0.0
4863	93	6	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	col < $.qrt.$.length
4863	93	6	QRDecomposition.java	performHouseholderReflection	col	int	0	NIL-FOR	$ < qrt.length
4864	96	8	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	row < qrtCol.$.length
4864	96	8	QRDecomposition.java	performHouseholderReflection	row	int	0	NIL-FOR	$ < qrtCol.length
4864	96	8	QRDecomposition.java	performHouseholderReflection	qrtCol	double[]	0	NIL-FOR	row < $.length
4865	100	8	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	row < qrtCol.$.length
4865	100	8	QRDecomposition.java	performHouseholderReflection	row	int	0	NIL-FOR	$ < qrtCol.length
4865	100	8	QRDecomposition.java	performHouseholderReflection	qrtCol	double[]	0	NIL-FOR	row < $.length
1247	111	4	QRDecomposition.java	getR	THIS	QRDecomposition	0	DEF	$.cachedR == null
4866	115	6	QRDecomposition.java	getR	row	int	0	NIL-FOR	$ >= 0
4867	117	8	QRDecomposition.java	getR	col	int	0	NIL-FOR	$ < n
4867	117	8	QRDecomposition.java	getR	n	int	0	NIL-FOR	col < $
1248	130	4	QRDecomposition.java	getQ	THIS	QRDecomposition	0	DEF	$.cachedQ == null
1249	140	4	QRDecomposition.java	getQT	THIS	QRDecomposition	0	DEF	$.cachedQT == null
4868	144	6	QRDecomposition.java	getQT	THIS	QRDecomposition	0	NIL-FOR	minor >= $.FastMath.min(m,n)
4868	144	6	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= FastMath.min(m,n)
4868	144	6	QRDecomposition.java	getQT	n	int	0	NIL-FOR	minor >= FastMath.min(m,$)
4868	144	6	QRDecomposition.java	getQT	m	int	0	NIL-FOR	minor >= FastMath.min($,n)
4869	147	6	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= 0
1250	150	8	QRDecomposition.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
1250	150	8	QRDecomposition.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
4870	151	10	QRDecomposition.java	getQT	col	int	0	NIL-FOR	$ < m
4870	151	10	QRDecomposition.java	getQT	m	int	0	NIL-FOR	col < $
4871	153	12	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
4871	153	12	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
4872	157	12	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
4872	157	12	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
1251	172	4	QRDecomposition.java	getH	THIS	QRDecomposition	0	DEF	$.cachedH == null
4873	176	6	QRDecomposition.java	getH	i	int	0	NIL-FOR	$ < m
4873	176	6	QRDecomposition.java	getH	m	int	0	NIL-FOR	i < $
4874	177	8	QRDecomposition.java	getH	THIS	QRDecomposition	0	NIL-FOR	j < $.FastMath.min(i + 1,n)
4874	177	8	QRDecomposition.java	getH	j	int	0	NIL-FOR	$ < FastMath.min(i + 1,n)
4874	177	8	QRDecomposition.java	getH	i	int	0	NIL-FOR	j < FastMath.min($ + 1,n)
4874	177	8	QRDecomposition.java	getH	n	int	0	NIL-FOR	j < FastMath.min(i + 1,$)
3569	75	4	Quaternion.java	Quaternion	THIS	Quaternion	0	DimensionMismatchException	v.$.length != 3
3569	75	4	Quaternion.java	Quaternion	v	double[]	0	DimensionMismatchException	$.length != 3
3570	191	4	Quaternion.java	normalize	THIS	Quaternion	0	ZeroException	norm < $.Precision.SAFE_MIN
3570	191	4	Quaternion.java	normalize	norm	double	0	ZeroException	$ < Precision.SAFE_MIN
3571	200	4	Quaternion.java	equals	THIS	Quaternion	0	RET	$ == other
3571	200	4	Quaternion.java	equals	other	Object	0	RET	this == $
3572	203	4	Quaternion.java	equals	other	Object	0	RET	$ instanceof Quaternion
3573	250	4	Quaternion.java	getPositivePolarForm	THIS	Quaternion	1	RET	$.getQ0() < 0
3574	265	4	Quaternion.java	getInverse	THIS	Quaternion	0	ZeroException	squareNorm < $.Precision.SAFE_MIN
3574	265	4	Quaternion.java	getInverse	squareNorm	double	0	ZeroException	$ < Precision.SAFE_MIN
4788	42	4	RRQRDecomposition.java	decompose	THIS	RRQRDecomposition	0	NIL-FOR	i < $.p.$.length
4788	42	4	RRQRDecomposition.java	decompose	i	int	0	NIL-FOR	$ < p.length
4789	55	4	RRQRDecomposition.java	performHouseholderReflection	THIS	RRQRDecomposition	0	NIL-FOR	i < qrt.$.length
4789	55	4	RRQRDecomposition.java	performHouseholderReflection	i	int	0	NIL-FOR	$ < qrt.length
4789	55	4	RRQRDecomposition.java	performHouseholderReflection	qrt	double[][]	0	NIL-FOR	i < $.length
4790	57	6	RRQRDecomposition.java	performHouseholderReflection	THIS	RRQRDecomposition	0	NIL-FOR	j < qrt[i].length
4790	57	6	RRQRDecomposition.java	performHouseholderReflection	j	int	0	NIL-FOR	$ < qrt[i].length
4790	57	6	RRQRDecomposition.java	performHouseholderReflection	i	int	0	NIL-FOR	j < qrt[$].length
4790	57	6	RRQRDecomposition.java	performHouseholderReflection	qrt	double[][]	0	NIL-FOR	j < $[i].length
1202	60	6	RRQRDecomposition.java	performHouseholderReflection	l2NormSquared	double	0	DEF	$ > l2NormSquaredMax
1202	60	6	RRQRDecomposition.java	performHouseholderReflection	l2NormSquaredMax	double	0	DEF	l2NormSquared > $
1203	65	4	RRQRDecomposition.java	performHouseholderReflection	l2NormSquaredMaxIndex	int	0	DEF	$ != minor
1203	65	4	RRQRDecomposition.java	performHouseholderReflection	minor	int	0	DEF	l2NormSquaredMaxIndex != $
1204	80	4	RRQRDecomposition.java	getP	THIS	RRQRDecomposition	0	DEF	$.cachedP == null
4791	83	6	RRQRDecomposition.java	getP	i	int	0	NIL-FOR	$ < n
4791	83	6	RRQRDecomposition.java	getP	n	int	0	NIL-FOR	i < $
4792	101	4	RRQRDecomposition.java	getRank	THIS	RRQRDecomposition	0	NIL-WHILE	rank < $.FastMath.min(rows,columns)
4792	101	4	RRQRDecomposition.java	getRank	rows	int	0	NIL-WHILE	rank < FastMath.min($,columns)
4792	101	4	RRQRDecomposition.java	getRank	columns	int	0	NIL-WHILE	rank < FastMath.min(rows,$)
4792	101	4	RRQRDecomposition.java	getRank	rank	int	0	NIL-WHILE	$ < FastMath.min(rows,columns)
1205	103	6	RRQRDecomposition.java	getRank	thisNorm	double	0	DEF	($ / lastNorm) * rNorm < dropThreshold
1205	103	6	RRQRDecomposition.java	getRank	thisNorm	double	0	DEF	$ == 0
1205	103	6	RRQRDecomposition.java	getRank	lastNorm	double	0	DEF	(thisNorm / $) * rNorm < dropThreshold
1205	103	6	RRQRDecomposition.java	getRank	rNorm	double	0	DEF	(thisNorm / lastNorm) * $ < dropThreshold
1205	103	6	RRQRDecomposition.java	getRank	dropThreshold	double	0	DEF	(thisNorm / lastNorm) * rNorm < $
476	100	4	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
477	108	4	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
478	116	4	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
484	66	4	RandomDataGenerator.java	nextHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
4519	73	4	RandomDataGenerator.java	nextHexString	THIS	RandomDataGenerator	0	NIL-FOR	i < randomBytes.$.length
4519	73	4	RandomDataGenerator.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
4519	73	4	RandomDataGenerator.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
485	76	6	RandomDataGenerator.java	nextHexString	hex	String	0	DEF	$.length() == 1
486	87	4	RandomDataGenerator.java	nextInt	lower	int	0	NumberIsTooLargeException	$ >= upper
486	87	4	RandomDataGenerator.java	nextInt	upper	int	0	NumberIsTooLargeException	lower >= $
487	91	4	RandomDataGenerator.java	nextInt	max	int	1	RET	$ <= 0
488	95	8	RandomDataGenerator.java	nextInt	r	int	0	RET	$ >= lower
488	95	8	RandomDataGenerator.java	nextInt	r	int	0	RET	$ <= upper
488	95	8	RandomDataGenerator.java	nextInt	lower	int	0	RET	r >= $
488	95	8	RandomDataGenerator.java	nextInt	upper	int	0	RET	r <= $
489	108	4	RandomDataGenerator.java	nextLong	lower	long	0	NumberIsTooLargeException	$ >= upper
489	108	4	RandomDataGenerator.java	nextLong	upper	long	0	NumberIsTooLargeException	lower >= $
490	112	4	RandomDataGenerator.java	nextLong	max	long	1	RET	$ <= 0
491	116	8	RandomDataGenerator.java	nextLong	r	long	0	RET	$ >= lower
491	116	8	RandomDataGenerator.java	nextLong	r	long	0	RET	$ <= upper
491	116	8	RandomDataGenerator.java	nextLong	lower	long	0	RET	r >= $
491	116	8	RandomDataGenerator.java	nextLong	upper	long	0	RET	r <= $
492	122	6	RandomDataGenerator.java	nextLong	max	long	1	RET	$ < Integer.MAX_VALUE
493	138	4	RandomDataGenerator.java	nextLong	n	long	0	RET	$ > 0
4520	142	6	RandomDataGenerator.java	nextLong	bits	long	0	NIL-DOWHILE	$ - val + (n - 1) < 0
4520	142	6	RandomDataGenerator.java	nextLong	val	long	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
4520	142	6	RandomDataGenerator.java	nextLong	n	long	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
494	161	4	RandomDataGenerator.java	nextSecureHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
4521	175	4	RandomDataGenerator.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
4521	175	4	RandomDataGenerator.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
4522	180	6	RandomDataGenerator.java	nextSecureHexString	THIS	RandomDataGenerator	0	NIL-FOR	i < hash.$.length
4522	180	6	RandomDataGenerator.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
4522	180	6	RandomDataGenerator.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
495	183	8	RandomDataGenerator.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
496	195	4	RandomDataGenerator.java	nextSecureInt	lower	int	0	NumberIsTooLargeException	$ >= upper
496	195	4	RandomDataGenerator.java	nextSecureInt	upper	int	0	NumberIsTooLargeException	lower >= $
497	199	4	RandomDataGenerator.java	nextSecureInt	max	int	1	RET	$ <= 0
498	203	8	RandomDataGenerator.java	nextSecureInt	r	int	0	RET	$ >= lower
498	203	8	RandomDataGenerator.java	nextSecureInt	r	int	0	RET	$ <= upper
498	203	8	RandomDataGenerator.java	nextSecureInt	lower	int	0	RET	r >= $
498	203	8	RandomDataGenerator.java	nextSecureInt	upper	int	0	RET	r <= $
499	216	4	RandomDataGenerator.java	nextSecureLong	lower	long	0	NumberIsTooLargeException	$ >= upper
499	216	4	RandomDataGenerator.java	nextSecureLong	upper	long	0	NumberIsTooLargeException	lower >= $
500	220	4	RandomDataGenerator.java	nextSecureLong	max	long	1	RET	$ <= 0
501	224	8	RandomDataGenerator.java	nextSecureLong	r	long	0	RET	$ >= lower
501	224	8	RandomDataGenerator.java	nextSecureLong	r	long	0	RET	$ <= upper
501	224	8	RandomDataGenerator.java	nextSecureLong	lower	long	0	RET	r >= $
501	224	8	RandomDataGenerator.java	nextSecureLong	upper	long	0	RET	r <= $
502	230	6	RandomDataGenerator.java	nextSecureLong	max	long	1	RET	$ < Integer.MAX_VALUE
503	246	4	RandomDataGenerator.java	nextLong	n	long	0	RET	$ > 0
4523	250	6	RandomDataGenerator.java	nextLong	bits	long	0	NIL-DOWHILE	$ - val + (n - 1) < 0
4523	250	6	RandomDataGenerator.java	nextLong	val	long	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
4523	250	6	RandomDataGenerator.java	nextLong	n	long	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
504	275	4	RandomDataGenerator.java	nextGaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
505	410	4	RandomDataGenerator.java	nextUniform	lower	double	0	NumberIsTooLargeException	$ >= upper
505	410	4	RandomDataGenerator.java	nextUniform	upper	double	0	NumberIsTooLargeException	lower >= $
506	413	4	RandomDataGenerator.java	nextUniform	lower	double	0	NotFiniteNumberException	Double.isInfinite($)
507	416	4	RandomDataGenerator.java	nextUniform	upper	double	0	NotFiniteNumberException	Double.isInfinite($)
508	419	4	RandomDataGenerator.java	nextUniform	lower	double	0	NotANumberException	Double.isNaN($)
508	419	4	RandomDataGenerator.java	nextUniform	upper	double	0	NotANumberException	Double.isNaN($)
4524	424	4	RandomDataGenerator.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
4524	424	4	RandomDataGenerator.java	nextUniform	lowerInclusive	boolean	0	NIL-WHILE	$
509	435	4	RandomDataGenerator.java	nextPermutation	n	int	0	NumberIsTooLargeException	k > $
509	435	4	RandomDataGenerator.java	nextPermutation	k	int	0	NumberIsTooLargeException	$ > n
510	438	4	RandomDataGenerator.java	nextPermutation	k	int	0	NotStrictlyPositiveException	$ <= 0
4525	444	4	RandomDataGenerator.java	nextPermutation	i	int	0	NIL-FOR	$ < k
4525	444	4	RandomDataGenerator.java	nextPermutation	k	int	0	NIL-FOR	i < $
511	454	4	RandomDataGenerator.java	nextSample	len	int	0	NumberIsTooLargeException	k > $
511	454	4	RandomDataGenerator.java	nextSample	k	int	0	NumberIsTooLargeException	$ > len
512	457	4	RandomDataGenerator.java	nextSample	k	int	0	NotStrictlyPositiveException	$ <= 0
4526	463	4	RandomDataGenerator.java	nextSample	i	int	0	NIL-FOR	$ < k
4526	463	4	RandomDataGenerator.java	nextSample	k	int	0	NIL-FOR	i < $
513	510	4	RandomDataGenerator.java	getRandomGenerator	THIS	RandomDataGenerator	0	DEF	$.rand == null
514	526	4	RandomDataGenerator.java	getSecRan	THIS	RandomDataGenerator	0	DEF	$.secRand == null
4527	539	4	RandomDataGenerator.java	shuffle	i	int	0	NIL-FOR	$ >= end
4527	539	4	RandomDataGenerator.java	shuffle	end	int	0	NIL-FOR	i >= $
515	540	6	RandomDataGenerator.java	shuffle	i	int	1	DEF	$ == 0
4528	558	4	RandomDataGenerator.java	getNatural	i	int	0	NIL-FOR	$ < n
4528	558	4	RandomDataGenerator.java	getNatural	n	int	0	NIL-FOR	i < $
2925	62	4	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	representation.size() != $
2925	62	4	RandomKey.java	decodeGeneric	representation	List<Double>	0	DimensionMismatchException	$.size() != l
2926	65	4	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	sortedRepr.size() != $
2926	65	4	RandomKey.java	decodeGeneric	sortedRepr	List<Double>	0	DimensionMismatchException	$.size() != l
6128	70	4	RandomKey.java	decodeGeneric	i	int	0	NIL-FOR	$ < l
6128	70	4	RandomKey.java	decodeGeneric	l	int	0	NIL-FOR	i < $
2927	83	4	RandomKey.java	isSame	another	Chromosome	0	RET	$ instanceof RandomKey<?>
2928	87	4	RandomKey.java	isSame	THIS	RandomKey	0	RET	$.getLength() != anotherRk.getLength()
2928	87	4	RandomKey.java	isSame	anotherRk	RandomKey<?>	0	RET	getLength() != $.getLength()
6129	92	4	RandomKey.java	isSame	THIS	RandomKey	0	NIL-FOR	i < $.getLength()
6129	92	4	RandomKey.java	isSame	i	int	0	NIL-FOR	$ < getLength()
2929	93	6	RandomKey.java	isSame	i	int	0	RET	thisPerm.get($) != anotherPerm.get($)
2929	93	6	RandomKey.java	isSame	thisPerm	List<Integer>	0	RET	$.get(i) != anotherPerm.get(i)
2929	93	6	RandomKey.java	isSame	anotherPerm	List<Integer>	0	RET	thisPerm.get(i) != $.get(i)
2930	104	6	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val < 0
2930	104	6	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val > 1
6130	116	4	RandomKey.java	randomPermutation	i	int	0	NIL-FOR	$ < l
6130	116	4	RandomKey.java	randomPermutation	l	int	0	NIL-FOR	i < $
6131	128	4	RandomKey.java	identityPermutation	i	int	0	NIL-FOR	$ < l
6131	128	4	RandomKey.java	identityPermutation	l	int	0	NIL-FOR	i < $
2931	155	4	RandomKey.java	inducedPermutation	originalData	List<S>	0	DimensionMismatchException	$.size() != permutedData.size()
2931	155	4	RandomKey.java	inducedPermutation	permutedData	List<S>	0	DimensionMismatchException	originalData.size() != $.size()
6132	161	4	RandomKey.java	inducedPermutation	i	int	0	NIL-FOR	$ < l
6132	161	4	RandomKey.java	inducedPermutation	l	int	0	NIL-FOR	i < $
2932	163	6	RandomKey.java	inducedPermutation	index	int	0	MathIllegalArgumentException	$ == -1
6133	181	4	RandomKey.java	baseSequence	i	int	0	NIL-FOR	$ < l
6133	181	4	RandomKey.java	baseSequence	l	int	0	NIL-FOR	i < $
2913	17	4	RandomKeyMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof RandomKey<?>
5214	204	4	RealMatrixFormat.java	format	i	int	0	NIL-FOR	$ < rows
5214	204	4	RealMatrixFormat.java	format	rows	int	0	NIL-FOR	i < $
5215	206	6	RealMatrixFormat.java	format	j	int	0	NIL-FOR	$ < matrix.getColumnDimension()
5215	206	6	RealMatrixFormat.java	format	matrix	RealMatrix	0	NIL-FOR	j < $.getColumnDimension()
1462	207	8	RealMatrixFormat.java	format	j	int	0	DEF	$ > 0
1463	213	6	RealMatrixFormat.java	format	i	int	0	DEF	$ < rows - 1
1463	213	6	RealMatrixFormat.java	format	rows	int	0	DEF	i < $ - 1
1464	229	4	RealMatrixFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1465	249	4	RealMatrixFormat.java	parse	THIS	RealMatrixFormat	0	RET	$.CompositeFormat.parseFixedstring(source,trimmedPrefix,pos)
1465	249	4	RealMatrixFormat.java	parse	trimmedPrefix	String	0	RET	CompositeFormat.parseFixedstring(source,$,pos)
1465	249	4	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($,trimmedPrefix,pos)
1465	249	4	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source,trimmedPrefix,$)
5216	254	4	RealMatrixFormat.java	parse	loop	boolean	0	NIL-FOR	$
1466	255	6	RealMatrixFormat.java	parse	rowComponents	List<Number>	1	RET	$.isEmpty()
1467	257	8	RealMatrixFormat.java	parse	THIS	RealMatrixFormat	0	RET	$.CompositeFormat.parseFixedstring(source,trimmedColumnSeparator,pos)
1467	257	8	RealMatrixFormat.java	parse	trimmedColumnSeparator	String	0	RET	CompositeFormat.parseFixedstring(source,$,pos)
1467	257	8	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($,trimmedColumnSeparator,pos)
1467	257	8	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source,trimmedColumnSeparator,$)
1468	258	10	RealMatrixFormat.java	parse	THIS	RealMatrixFormat	1	RET	$.CompositeFormat.parseFixedstring(source,trimmedRowSuffix,pos)
1468	258	10	RealMatrixFormat.java	parse	trimmedRowSuffix	String	1	RET	$.length() != 0
1468	258	10	RealMatrixFormat.java	parse	trimmedRowSuffix	String	1	RET	CompositeFormat.parseFixedstring(source,$,pos)
1468	258	10	RealMatrixFormat.java	parse	source	String	1	RET	CompositeFormat.parseFixedstring($,trimmedRowSuffix,pos)
1468	258	10	RealMatrixFormat.java	parse	pos	ParsePosition	1	RET	CompositeFormat.parseFixedstring(source,trimmedRowSuffix,$)
1469	263	12	RealMatrixFormat.java	parse	THIS	RealMatrixFormat	1	DEF	$.CompositeFormat.parseFixedstring(source,trimmedRowSeparator,pos)
1469	263	12	RealMatrixFormat.java	parse	trimmedRowSeparator	String	1	DEF	CompositeFormat.parseFixedstring(source,$,pos)
1469	263	12	RealMatrixFormat.java	parse	source	String	1	DEF	CompositeFormat.parseFixedstring($,trimmedRowSeparator,pos)
1469	263	12	RealMatrixFormat.java	parse	pos	ParsePosition	1	DEF	CompositeFormat.parseFixedstring(source,trimmedRowSeparator,$)
1470	276	8	RealMatrixFormat.java	parse	THIS	RealMatrixFormat	0	RET	$.CompositeFormat.parseFixedstring(source,trimmedRowPrefix,pos)
1470	276	8	RealMatrixFormat.java	parse	trimmedRowPrefix	String	0	RET	CompositeFormat.parseFixedstring(source,$,pos)
1470	276	8	RealMatrixFormat.java	parse	trimmedRowPrefix	String	0	RET	$.length() != 0
1470	276	8	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($,trimmedRowPrefix,pos)
1470	276	8	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source,trimmedRowPrefix,$)
1471	280	6	RealMatrixFormat.java	parse	loop	boolean	0	RET	$
1472	283	8	RealMatrixFormat.java	parse	component	Number	1	DEF	$ != null
1473	287	10	RealMatrixFormat.java	parse	rowComponents	List<Number>	1	DEF	$.isEmpty()
1474	297	4	RealMatrixFormat.java	parse	rowComponents	List<Number>	0	DEF	$.isEmpty()
1475	301	4	RealMatrixFormat.java	parse	THIS	RealMatrixFormat	0	RET	$.CompositeFormat.parseFixedstring(source,trimmedSuffix,pos)
1475	301	4	RealMatrixFormat.java	parse	trimmedSuffix	String	0	RET	CompositeFormat.parseFixedstring(source,$,pos)
1475	301	4	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($,trimmedSuffix,pos)
1475	301	4	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source,trimmedSuffix,$)
1476	304	4	RealMatrixFormat.java	parse	matrix	List<List<Number>>	0	RET	$.isEmpty()
5217	312	6	RealMatrixFormat.java	parse	THIS	RealMatrixFormat	0	NIL-FOR	i < $.rowList.size()
5217	312	6	RealMatrixFormat.java	parse	i	int	0	NIL-FOR	$ < rowList.size()
1567	107	4	RealVector.java	checkVectorDimensions	d	int	0	DimensionMismatchException	$ != n
1567	107	4	RealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	d != $
1568	117	4	RealVector.java	checkIndex	THIS	RealVector	0	OutOfRangeException	index >= $.getDimension()
1568	117	4	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1568	117	4	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1569	131	4	RealVector.java	checkIndices	dim	int	0	OutOfRangeException	start >= $
1569	131	4	RealVector.java	checkIndices	start	int	0	OutOfRangeException	$ < 0
1569	131	4	RealVector.java	checkIndices	start	int	0	OutOfRangeException	$ >= dim
1570	134	4	RealVector.java	checkIndices	dim	int	0	OutOfRangeException	end >= $
1570	134	4	RealVector.java	checkIndices	end	int	0	OutOfRangeException	$ < 0
1570	134	4	RealVector.java	checkIndices	end	int	0	OutOfRangeException	$ >= dim
1571	137	4	RealVector.java	checkIndices	start	int	0	NumberIsTooSmallException	end < $
1571	137	4	RealVector.java	checkIndices	end	int	0	NumberIsTooSmallException	$ < start
5402	151	4	RealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
5403	168	4	RealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1572	189	4	RealVector.java	mapAddToSelf	d	double	0	RET	$ != 0
5404	209	4	RealVector.java	dotProduct	i	int	0	NIL-FOR	$ < n
5404	209	4	RealVector.java	dotProduct	n	int	0	NIL-FOR	i < $
1573	224	4	RealVector.java	cosine	norm	double	0	MathArithmeticException	$ == 0
1573	224	4	RealVector.java	cosine	vNorm	double	0	MathArithmeticException	$ == 0
5405	258	4	RealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
5406	275	4	RealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
5407	292	4	RealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
5408	308	4	RealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
5409	324	4	RealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
5410	343	4	RealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
5411	357	4	RealVector.java	getMinIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1574	359	6	RealVector.java	getMinIndex	entry	Entry	0	DEF	$.getValue() <= minValue
1574	359	6	RealVector.java	getMinIndex	minValue	double	0	DEF	entry.getValue() <= $
5412	382	4	RealVector.java	getMaxIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1575	384	6	RealVector.java	getMaxIndex	entry	Entry	0	DEF	$.getValue() >= maxValue
1575	384	6	RealVector.java	getMaxIndex	maxValue	double	0	DEF	entry.getValue() >= $
1576	456	4	RealVector.java	outerProduct	v	RealVector	1	DEF	$ instanceof SparseRealVector
5413	462	4	RealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
5413	462	4	RealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
5414	463	6	RealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
5414	463	6	RealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1577	478	4	RealVector.java	projection	norm2	double	0	MathArithmeticException	$ == 0.0
5415	489	4	RealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
5416	501	4	RealVector.java	toArray	i	int	0	NIL-FOR	$ < dim
5416	501	4	RealVector.java	toArray	dim	int	0	NIL-FOR	i < $
1578	513	4	RealVector.java	unitVector	norm	double	0	MathArithmeticException	$ == 0
1579	524	4	RealVector.java	unitize	norm	double	0	MathArithmeticException	$ == 0
5417	595	4	RealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
5418	622	4	RealVector.java	combineToSelf	THIS	RealVector	0	NIL-FOR	i < $.getDimension()
5418	622	4	RealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < getDimension()
5419	638	4	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < dim
5419	638	4	RealVector.java	walkInDefaultOrder	dim	int	0	NIL-FOR	i < $
5420	656	4	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
5420	656	4	RealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
5421	692	4	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < dim
5421	692	4	RealVector.java	walkInDefaultOrder	dim	int	0	NIL-FOR	i < $
5422	710	4	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
5422	710	4	RealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
5251	163	4	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
5251	163	4	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
1495	164	6	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
1496	181	4	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1497	195	4	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	$.CompositeFormat.parseFixedstring(source,$.trimmedPrefix,pos)
1497	195	4	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($,trimmedPrefix,pos)
1497	195	4	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source,trimmedPrefix,$)
5252	199	4	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
1498	200	6	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
1499	202	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	$.CompositeFormat.parseFixedstring(source,$.trimmedSeparator,pos)
1499	202	8	RealVectorFormat.java	parse	source	String	0	DEF	CompositeFormat.parseFixedstring($,trimmedSeparator,pos)
1499	202	8	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	CompositeFormat.parseFixedstring(source,trimmedSeparator,$)
1500	206	6	RealVectorFormat.java	parse	loop	boolean	0	RET	$
1501	209	8	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
1502	219	4	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	$.CompositeFormat.parseFixedstring(source,$.trimmedSuffix,pos)
1502	219	4	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($,trimmedSuffix,pos)
1502	219	4	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source,trimmedSuffix,$)
5253	223	4	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
5253	223	4	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
5253	223	4	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
5423	41	4	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
5423	41	4	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
5424	45	4	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	loop	boolean	0	NIL-FOR	$
5425	47	6	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
5425	47	6	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1580	50	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ii	int	0	DEF	c[$][$] > c[isr][isr]
1580	50	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	isr	int	0	DEF	c[ii][ii] > c[$][$]
1580	50	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	DEF	$[ii][ii] > $[isr][isr]
1581	54	6	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	swapR	int	0	DEF	$ != r
1581	54	6	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	DEF	swapR != $
1582	63	6	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ir	int	1	NonPositiveDefiniteMatrixException	c[$][$] <= small
1582	63	6	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	1	NonPositiveDefiniteMatrixException	$[ir][ir] <= small
1582	63	6	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	1	NonPositiveDefiniteMatrixException	c[ir][ir] <= $
1583	64	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NonPositiveDefiniteMatrixException	$ == 0
5426	67	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
5426	67	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1584	68	10	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
1584	68	10	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	NonPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
1584	68	10	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	index	int[]	0	NonPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
1584	68	10	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	0	NonPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
5427	79	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
5427	79	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
5428	84	10	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < i
5428	84	10	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	j < $
5429	96	4	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
5429	96	4	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
5430	97	6	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < r
5430	97	6	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NIL-FOR	j < $
3634	26	4	RegionFactory.java	buildConvex	THIS	RegionFactory	0	RET	hyperplanes.$.length == 0
3634	26	4	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$.length == 0
3634	26	4	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$ == null
3635	33	6	RegionFactory.java	buildConvex	THIS	RegionFactory	0	DEF	node.insertCut($.hyperplane)
3635	33	6	RegionFactory.java	buildConvex	node	BSPTree	0	DEF	$.insertCut(hyperplane)
3636	100	4	RegionFactory.java	recurseComplement	node	BSPTree<S>	0	RET	$.getCut() == null
3637	104	4	RegionFactory.java	recurseComplement	attribute	BoundaryAttribute	0	DEF	$ != null
138	91	4	RegressionResults.java	RegressionResults	copyData	boolean	1	DEF	$
4373	94	6	RegressionResults.java	RegressionResults	THIS	RegressionResults	0	NIL-FOR	i < varcov.$.length
4373	94	6	RegressionResults.java	RegressionResults	i	int	0	NIL-FOR	$ < varcov.length
4373	94	6	RegressionResults.java	RegressionResults	varcov	double[][]	0	NIL-FOR	i < $.length
139	108	4	RegressionResults.java	RegressionResults	rank	int	0	DEF	$ > 0
140	114	4	RegressionResults.java	RegressionResults	containsConstant	boolean	1	DEF	$
141	128	4	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	RET	$.parameters == null
142	131	4	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
142	131	4	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
142	131	4	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ < 0
143	141	4	RegressionResults.java	getParameterEstimates	THIS	RegressionResults	0	RET	$.parameters == null
144	153	4	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	RET	$.parameters == null
145	156	4	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
145	156	4	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
145	156	4	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ < 0
146	160	4	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	$ > Double.MIN_VALUE
146	160	4	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	Double.isNaN($)
147	170	4	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	RET	$.parameters == null
4374	174	4	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	NIL-FOR	i < $.parameters.length
4374	174	4	RegressionResults.java	getStdErrorOfEstimates	i	int	0	NIL-FOR	$ < this.parameters.length
148	176	6	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	$ > Double.MIN_VALUE
148	176	6	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	Double.isNaN($)
149	192	4	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
150	195	4	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	i >= $.parameters.length
150	195	4	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ >= this.parameters.length
150	195	4	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ < 0
151	198	4	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	j >= $.parameters.length
151	198	4	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ >= this.parameters.length
151	198	4	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ < 0
152	208	4	RegressionResults.java	getNumberOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
153	276	4	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.isSymmetricVCD
154	277	6	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.varCovData.length > 1
155	278	8	RegressionResults.java	getVcvElement	i	int	1	RET	$ == j
155	278	8	RegressionResults.java	getVcvElement	j	int	1	RET	i == $
156	282	10	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	i >= $.varCovData[j].length
156	282	10	RegressionResults.java	getVcvElement	i	int	1	RET	$ >= varCovData[j].length
156	282	10	RegressionResults.java	getVcvElement	j	int	1	RET	i >= varCovData[$].length
157	291	8	RegressionResults.java	getVcvElement	i	int	1	RET	$ > j
157	291	8	RegressionResults.java	getVcvElement	j	int	1	RET	i > $
793	164	4	ResizableDoubleArray.java	ResizableDoubleArray	initialCapacity	int	0	NotStrictlyPositiveException	$ <= 0
794	174	4	ResizableDoubleArray.java	ResizableDoubleArray	data	double	0	DEF	$ != null
795	193	4	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.internalArray.$.length <= $.startIndex + $.numElements
796	218	4	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
797	223	4	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
798	236	4	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	MathIllegalStateException	$.numElements < 1
799	264	4	ResizableDoubleArray.java	checkContractExpand	contraction	double	0	DEF	$ < expansion
799	264	4	ResizableDoubleArray.java	checkContractExpand	expansion	double	0	DEF	contraction < $
800	269	4	ResizableDoubleArray.java	checkContractExpand	contraction	double	0	DEF	$ <= 1
801	274	4	ResizableDoubleArray.java	checkContractExpand	expansion	double	0	DEF	$ <= 1
802	322	4	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	MathIllegalArgumentException	i > $.numElements
802	322	4	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ > numElements
803	326	6	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ < 0
804	331	8	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
805	336	4	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
806	345	4	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == $.ExpansionMode.MULTIPLICATIVE
807	387	4	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	ArrayIndexOutOfBoundsException	index >= $.numElements
807	387	4	ResizableDoubleArray.java	getElement	index	int	1	ArrayIndexOutOfBoundsException	$ >= numElements
808	391	6	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
809	515	0	ResizableDoubleArray.java	setElement	index	int	0	ArrayIndexOutOfBoundsException	$ < 0
810	518	0	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
810	518	0	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
811	521	0	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
811	521	0	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
812	545	0	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != MULTIPLICATIVE_MODE
812	545	0	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != ADDITIVE_MODE
813	549	0	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	1	DEF	$ == MULTIPLICATIVE_MODE
814	552	6	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ == ADDITIVE_MODE
815	579	0	ResizableDoubleArray.java	setNumElements	i	int	0	MathIllegalArgumentException	$ < 0
816	583	0	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	newSize > $.internalArray.$.length
816	583	0	ResizableDoubleArray.java	setNumElements	newSize	int	0	DEF	$ > internalArray.length
817	593	0	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == $.ExpansionMode.MULTIPLICATIVE
818	647	0	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
818	647	0	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
819	650	0	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
820	662	2	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
4135	46	4	RiddersSolver.java	doSolve	y1	double	0	RET	$ == 0
4136	49	4	RiddersSolver.java	doSolve	y2	double	0	RET	$ == 0
4137	60	6	RiddersSolver.java	doSolve	THIS	RiddersSolver	0	RET	$.FastMath.abs(y3) <= functionValueAccuracy
4137	60	6	RiddersSolver.java	doSolve	y3	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4137	60	6	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y3) <= $
4138	68	6	RiddersSolver.java	doSolve	THIS	RiddersSolver	0	RET	$.FastMath.abs(x - oldx) <= tolerance
4138	68	6	RiddersSolver.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
4138	68	6	RiddersSolver.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
4138	68	6	RiddersSolver.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
4139	71	6	RiddersSolver.java	doSolve	THIS	RiddersSolver	0	RET	$.FastMath.abs(y) <= functionValueAccuracy
4139	71	6	RiddersSolver.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4139	71	6	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
4140	74	6	RiddersSolver.java	doSolve	correction	double	1	DEF	$ > 0.0
4141	75	8	RiddersSolver.java	doSolve	THIS	RiddersSolver	1	DEF	$.FastMath.signum(y1) + $.FastMath.signum(y) == 0.0
4141	75	8	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y1) + FastMath.signum($) == 0.0
4141	75	8	RiddersSolver.java	doSolve	y1	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
4142	87	8	RiddersSolver.java	doSolve	THIS	RiddersSolver	1	DEF	$.FastMath.signum(y2) + $.FastMath.signum(y) == 0.0
4142	87	8	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y2) + FastMath.signum($) == 0.0
4142	87	8	RiddersSolver.java	doSolve	y2	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
4270	30	4	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
4271	44	4	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
6744	72	6	RombergIntegrator.java	doIntegrate	j	int	0	NIL-FOR	$ <= i
6744	72	6	RombergIntegrator.java	doIntegrate	i	int	0	NIL-FOR	j <= $
4272	78	6	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	i >= $.getMinimalIterationCount()
4272	78	6	RombergIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
4273	81	8	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
4273	81	8	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
4273	81	8	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
4273	81	8	RombergIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
3575	55	4	RootsOfUnity.java	isCounterClockWise	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
3576	66	4	RootsOfUnity.java	computeRoots	n	int	0	ZeroException	$ == 0
3577	71	4	RootsOfUnity.java	computeRoots	THIS	RootsOfUnity	0	RET	absN == $.omegaCount
3577	71	4	RootsOfUnity.java	computeRoots	absN	int	0	RET	$ == omegaCount
6465	83	4	RootsOfUnity.java	computeRoots	i	int	0	NIL-FOR	$ < absN
6465	83	4	RootsOfUnity.java	computeRoots	absN	int	0	NIL-FOR	i < $
3578	98	4	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
3579	101	4	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
3579	101	4	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ >= omegaCount
3579	101	4	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ < 0
3580	114	4	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
3581	117	4	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
3581	117	4	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ < 0
3581	117	4	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ >= omegaCount
3764	49	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
3765	69	4	Rotation.java	Rotation	norm	double	0	MathIllegalArgumentException	$ == 0
3766	86	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
3766	86	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
3766	86	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
3766	86	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
3766	86	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
3766	86	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
3766	86	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
3766	86	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
3767	91	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
3768	130	4	Rotation.java	Rotation	normProduct	double	0	MathArithmeticException	$ == 0
3769	134	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
3769	134	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
3770	175	4	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
3771	184	6	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
3772	193	8	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
3773	254	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
3774	258	6	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
3775	272	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
3775	272	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
3776	276	6	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
3777	289	4	Rotation.java	getAngles	THIS	Rotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.XYZ
3777	289	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
3778	292	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
3778	292	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
3779	298	6	Rotation.java	getAngles	THIS	Rotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.XZY
3779	298	6	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
3780	301	8	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
3780	301	8	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
3781	307	8	Rotation.java	getAngles	THIS	Rotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.YXZ
3781	307	8	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
3782	310	10	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
3782	310	10	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
3783	316	10	Rotation.java	getAngles	THIS	Rotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.YZX
3783	316	10	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
3784	319	12	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
3784	319	12	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
3785	325	12	Rotation.java	getAngles	THIS	Rotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.ZXY
3785	325	12	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
3786	328	14	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
3786	328	14	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
3787	334	14	Rotation.java	getAngles	THIS	Rotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.ZYX
3787	334	14	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
3788	337	16	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
3788	337	16	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
3789	343	16	Rotation.java	getAngles	THIS	Rotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.XYX
3789	343	16	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
3790	346	18	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
3790	346	18	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
3791	352	18	Rotation.java	getAngles	THIS	Rotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.XZX
3791	352	18	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
3792	355	20	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
3792	355	20	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
3793	361	20	Rotation.java	getAngles	THIS	Rotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.YXY
3793	361	20	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
3794	364	22	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
3794	364	22	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
3795	370	22	Rotation.java	getAngles	THIS	Rotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.YZY
3795	370	22	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
3796	373	24	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
3796	373	24	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
3797	379	24	Rotation.java	getAngles	THIS	Rotation	1	CardanEulerSingularityException:RET	order == $.RotationOrder.ZXZ
3797	379	24	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
3798	382	26	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
3798	382	26	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
3799	390	26	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
3799	390	26	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
6491	533	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
3800	562	6	Rotation.java	orthogonalizeMatrix	THIS	Rotation	0	RET	$.FastMath.abs(fn1 - fn) <= threshold
3800	562	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	FastMath.abs(fn1 - $) <= threshold
3800	562	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	FastMath.abs($ - fn) <= threshold
3800	562	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	FastMath.abs(fn1 - fn) <= $
5722	67	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
5722	67	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
5723	79	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
5724	82	6	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
5724	82	6	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
5725	83	8	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
5725	83	8	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
5725	83	8	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
5726	85	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
5726	85	10	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
5727	92	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
5727	92	6	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
5727	92	6	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
5728	94	8	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
5728	94	8	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
2388	103	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	$.isLastStep
2389	107	8	RungeKuttaIntegrator.java	integrate	nextIsLast	boolean	0	DEF	$
2361	42	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
2361	42	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
5688	45	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
5688	45	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
5688	45	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
5689	83	4	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
5689	83	4	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
5690	88	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < kMax
5690	88	4	RungeKuttaStepInterpolator.java	writeExternal	kMax	int	0	NIL-FOR	k < $
5691	89	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
5691	89	6	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
2362	100	4	RungeKuttaStepInterpolator.java	readExternal	n	int	1	DEF	$ < 0
5692	105	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
5692	105	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
5693	111	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
5693	111	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
5694	113	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
5694	113	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
2363	118	4	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
1676	32	4	SaddlePointExpansion.java	getStirlingError	z	double	1	DEF	$ < 15.0
1677	34	6	SaddlePointExpansion.java	getStirlingError	THIS	SaddlePointExpansion	1	DEF	$.FastMath.floor(z2) == z2
1677	34	6	SaddlePointExpansion.java	getStirlingError	z2	double	1	DEF	FastMath.floor($) == $
1678	55	4	SaddlePointExpansion.java	getDeviancePart	THIS	SaddlePointExpansion	1	DEF	$.FastMath.abs(x - mu) < 0.1 * (x + mu)
1678	55	4	SaddlePointExpansion.java	getDeviancePart	x	double	1	DEF	FastMath.abs($ - mu) < 0.1 * ($ + mu)
1678	55	4	SaddlePointExpansion.java	getDeviancePart	mu	double	1	DEF	FastMath.abs(x - $) < 0.1 * (x + $)
5507	63	6	SaddlePointExpansion.java	getDeviancePart	s1	double	0	NIL-WHILE	$ != s
5507	63	6	SaddlePointExpansion.java	getDeviancePart	s	double	0	NIL-WHILE	s1 != $
1679	86	4	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == 0
1680	87	6	SaddlePointExpansion.java	logBinomialProbability	p	double	1	DEF	$ < 0.1
1681	95	6	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == n
1681	95	6	SaddlePointExpansion.java	logBinomialProbability	n	int	1	DEF	x == $
1682	96	8	SaddlePointExpansion.java	logBinomialProbability	q	double	1	DEF	$ < 0.1
1155	49	4	SchurTransformer.java	SchurTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1156	65	4	SchurTransformer.java	getP	THIS	SchurTransformer	0	DEF	$.cachedP == null
1157	75	4	SchurTransformer.java	getPT	THIS	SchurTransformer	0	DEF	$.cachedPt == null
1158	85	4	SchurTransformer.java	getT	THIS	SchurTransformer	0	DEF	$.cachedT == null
4735	100	4	SchurTransformer.java	transform	iu	int	0	NIL-WHILE	$ >= 0
1159	102	6	SchurTransformer.java	transform	il	int	1	DEF	$ == iu
1159	102	6	SchurTransformer.java	transform	iu	int	1	DEF	il == $
1160	108	8	SchurTransformer.java	transform	il	int	1	DEF	$ == iu - 1
1160	108	8	SchurTransformer.java	transform	iu	int	1	DEF	il == $ - 1
1161	113	10	SchurTransformer.java	transform	q	double	0	DEF	$ >= 0
1162	115	12	SchurTransformer.java	transform	p	double	1	DEF	$ >= 0
4736	128	12	SchurTransformer.java	transform	j	int	0	NIL-FOR	$ < n
4736	128	12	SchurTransformer.java	transform	n	int	0	NIL-FOR	j < $
4737	133	12	SchurTransformer.java	transform	i	int	0	NIL-FOR	$ <= iu
4737	133	12	SchurTransformer.java	transform	iu	int	0	NIL-FOR	i <= $
4738	138	12	SchurTransformer.java	transform	i	int	0	NIL-FOR	$ <= n - 1
4738	138	12	SchurTransformer.java	transform	n	int	0	NIL-FOR	i <= $ - 1
1163	149	10	SchurTransformer.java	transform	iteration	int	0	MaxCountExceededException	++$ > MAX_ITERATIONS
4739	165	4	SchurTransformer.java	getNorm	THIS	SchurTransformer	0	NIL-FOR	i < $.matrixT.$.length
4739	165	4	SchurTransformer.java	getNorm	i	int	0	NIL-FOR	$ < matrixT.length
4740	166	6	SchurTransformer.java	getNorm	THIS	SchurTransformer	0	NIL-FOR	j < $.matrixT.$.length
4740	166	6	SchurTransformer.java	getNorm	j	int	0	NIL-FOR	$ < matrixT.length
4741	180	4	SchurTransformer.java	findSmallSubDiagonalElement	l	int	0	NIL-WHILE	$ > 0
1164	182	6	SchurTransformer.java	findSmallSubDiagonalElement	s	double	0	DEF	$ == 0.0
1165	185	6	SchurTransformer.java	findSmallSubDiagonalElement	THIS	SchurTransformer	0	DEF	$.FastMath.abs($.matrixT[l][l - 1]) < $.epsilon * s
1165	185	6	SchurTransformer.java	findSmallSubDiagonalElement	s	double	0	DEF	FastMath.abs(matrixT[l][l - 1]) < epsilon * $
1165	185	6	SchurTransformer.java	findSmallSubDiagonalElement	l	int	0	DEF	FastMath.abs(matrixT[$][$ - 1]) < epsilon * s
1166	202	4	SchurTransformer.java	computeShift	l	int	0	DEF	$ < idx
1166	202	4	SchurTransformer.java	computeShift	idx	int	0	DEF	l < $
1167	206	4	SchurTransformer.java	computeShift	iteration	int	0	DEF	$ == 10
4742	208	6	SchurTransformer.java	computeShift	i	int	0	NIL-FOR	$ <= idx
4742	208	6	SchurTransformer.java	computeShift	idx	int	0	NIL-FOR	i <= $
1168	216	4	SchurTransformer.java	computeShift	iteration	int	0	DEF	$ == 30
1169	219	6	SchurTransformer.java	computeShift	s	double	0	DEF	$ > 0.0
1170	221	8	SchurTransformer.java	computeShift	THIS	SchurTransformer	0	DEF	shift.$.y < shift.$.x
1170	221	8	SchurTransformer.java	computeShift	shift	ShiftInfo	0	DEF	$.y < $.x
4743	225	8	SchurTransformer.java	computeShift	i	int	0	NIL-FOR	$ <= idx
4743	225	8	SchurTransformer.java	computeShift	idx	int	0	NIL-FOR	i <= $
4744	243	4	SchurTransformer.java	initQRStep	im	int	0	NIL-WHILE	$ >= il
4744	243	4	SchurTransformer.java	initQRStep	il	int	0	NIL-WHILE	im >= $
1171	250	6	SchurTransformer.java	initQRStep	im	int	0	DEF	$ == il
1171	250	6	SchurTransformer.java	initQRStep	il	int	0	DEF	im == $
1172	255	6	SchurTransformer.java	initQRStep	THIS	SchurTransformer	0	DEF	lhs < $.epsilon * rhs
1172	255	6	SchurTransformer.java	initQRStep	lhs	double	0	DEF	$ < epsilon * rhs
1172	255	6	SchurTransformer.java	initQRStep	rhs	double	0	DEF	lhs < epsilon * $
4745	275	4	SchurTransformer.java	performDoubleQRStep	k	int	0	NIL-FOR	$ <= iu - 1
4745	275	4	SchurTransformer.java	performDoubleQRStep	iu	int	0	NIL-FOR	k <= $ - 1
1173	277	6	SchurTransformer.java	performDoubleQRStep	k	int	0	DEF	$ != im
1173	277	6	SchurTransformer.java	performDoubleQRStep	im	int	0	DEF	k != $
1174	282	8	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	DEF	$.Precision.equals(shift.$.x,0.0,$.epsilon)
1174	282	8	SchurTransformer.java	performDoubleQRStep	shift	ShiftInfo	0	DEF	Precision.equals($.x,0.0,epsilon)
1175	288	6	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	DEF	shift.$.x == 0.0
1175	288	6	SchurTransformer.java	performDoubleQRStep	shift	ShiftInfo	0	DEF	$.x == 0.0
1176	292	6	SchurTransformer.java	performDoubleQRStep	p	double	0	DEF	$ < 0.0
1177	295	6	SchurTransformer.java	performDoubleQRStep	s	double	0	DEF	$ != 0.0
1178	296	8	SchurTransformer.java	performDoubleQRStep	k	int	1	DEF	$ != im
1178	296	8	SchurTransformer.java	performDoubleQRStep	im	int	1	DEF	k != $
1179	300	10	SchurTransformer.java	performDoubleQRStep	il	int	0	DEF	$ != im
1179	300	10	SchurTransformer.java	performDoubleQRStep	im	int	0	DEF	il != $
4746	310	8	SchurTransformer.java	performDoubleQRStep	j	int	0	NIL-FOR	$ < n
4746	310	8	SchurTransformer.java	performDoubleQRStep	n	int	0	NIL-FOR	j < $
1180	312	10	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
4747	319	8	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	NIL-FOR	i <= $.FastMath.min(iu,k + 3)
4747	319	8	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= FastMath.min(iu,k + 3)
4747	319	8	SchurTransformer.java	performDoubleQRStep	k	int	0	NIL-FOR	i <= FastMath.min(iu,$ + 3)
4747	319	8	SchurTransformer.java	performDoubleQRStep	iu	int	0	NIL-FOR	i <= FastMath.min($,k + 3)
1181	321	10	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
4748	329	8	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= high
4748	329	8	SchurTransformer.java	performDoubleQRStep	high	int	0	NIL-FOR	i <= $
1182	331	10	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
4749	340	4	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= iu
4749	340	4	SchurTransformer.java	performDoubleQRStep	iu	int	0	NIL-FOR	i <= $
1183	342	6	SchurTransformer.java	performDoubleQRStep	i	int	0	DEF	$ > im + 2
1183	342	6	SchurTransformer.java	performDoubleQRStep	im	int	0	DEF	i > $ + 2
3046	31	4	SearchInterval.java	SearchInterval	lo	double	0	NumberIsTooLargeException	$ >= hi
3046	31	4	SearchInterval.java	SearchInterval	hi	double	0	NumberIsTooLargeException	lo >= $
3047	34	4	SearchInterval.java	SearchInterval	lo	double	0	OutOfRangeException	init < $
3047	34	4	SearchInterval.java	SearchInterval	hi	double	0	OutOfRangeException	init > $
3047	34	4	SearchInterval.java	SearchInterval	init	double	0	OutOfRangeException	$ < lo
3047	34	4	SearchInterval.java	SearchInterval	init	double	0	OutOfRangeException	$ > hi
4108	43	4	SecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
4109	46	4	SecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
4110	56	6	SecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
4111	63	6	SecantSolver.java	doSolve	THIS	SecantSolver	0	RET	$.FastMath.abs(f1) <= ftol
4111	63	6	SecantSolver.java	doSolve	f1	double	0	RET	FastMath.abs($) <= ftol
4111	63	6	SecantSolver.java	doSolve	ftol	double	0	RET	FastMath.abs(f1) <= $
4112	66	6	SecantSolver.java	doSolve	THIS	SecantSolver	0	RET	$.FastMath.abs(x1 - x0) < $.FastMath.max(rtol * $.FastMath.abs(x1),atol)
4112	66	6	SecantSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1),atol)
4112	66	6	SecantSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($),atol)
4112	66	6	SecantSolver.java	doSolve	atol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),$)
4112	66	6	SecantSolver.java	doSolve	rtol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1),atol)
241	38	4	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
3704	63	4	Segment.java	distance	r	double	1	RET	$ > 1
3704	63	4	Segment.java	distance	r	double	1	RET	$ < 0
258	147	4	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 0
258	147	4	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 0
259	151	6	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 1
259	151	6	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 1
4403	158	8	SemiVariance.java	evaluate	i	int	0	NIL-FOR	$ < length
4403	158	8	SemiVariance.java	evaluate	length	int	0	NIL-FOR	i < $
260	159	10	SemiVariance.java	evaluate	i	int	0	DEF	(values[$] > cutoff) == booleanDirection
260	159	10	SemiVariance.java	evaluate	booleanDirection	boolean	0	DEF	(values[i] > cutoff) == $
260	159	10	SemiVariance.java	evaluate	values	double[]	0	DEF	($[i] > cutoff) == booleanDirection
260	159	10	SemiVariance.java	evaluate	cutoff	double	0	DEF	(values[i] > $) == booleanDirection
261	164	8	SemiVariance.java	evaluate	corrected	boolean	1	RET	$
4076	114	4	Sigmoid.java	value	exp	double	1	DEF	Double.isInfinite($)
6645	122	6	Sigmoid.java	value	THIS	Sigmoid	0	NIL-FOR	n < f.$.length
6645	122	6	Sigmoid.java	value	n	int	0	NIL-FOR	$ < f.length
6645	122	6	Sigmoid.java	value	f	double[]	0	NIL-FOR	n < $.length
6646	125	8	Sigmoid.java	value	k	int	0	NIL-FOR	$ >= 0
4077	127	10	Sigmoid.java	value	k	int	1	DEF	$ > 1
2950	39	4	SimplePointChecker.java	SimplePointChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2951	52	4	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	iteration >= $.maxIterationCount
2951	52	4	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2951	52	4	SimplePointChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
6141	57	4	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	NIL-FOR	i < p.$.length
6141	57	4	SimplePointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
6141	57	4	SimplePointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
2952	62	6	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > size * $.getRelativeThreshold()
2952	62	6	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > $.getAbsoluteThreshold()
2952	62	6	SimplePointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
2952	62	6	SimplePointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
2952	62	6	SimplePointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
2473	47	4	SimplePointChecker.java	SimplePointChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2474	60	4	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	iteration >= $.maxIterationCount
2474	60	4	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2474	60	4	SimplePointChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
5804	65	4	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	NIL-FOR	i < p.$.length
5804	65	4	SimplePointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
5804	65	4	SimplePointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
2475	70	6	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > $.getAbsoluteThreshold()
2475	70	6	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > size * $.getRelativeThreshold()
2475	70	6	SimplePointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
2475	70	6	SimplePointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
2475	70	6	SimplePointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
25	75	4	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
26	80	6	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
27	92	4	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
28	106	4	SimpleRegression.java	append	THIS	SimpleRegression	1	DEF	$.n == 0
29	114	6	SimpleRegression.java	append	THIS	SimpleRegression	1	DEF	$.hasIntercept
30	141	4	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
31	142	6	SimpleRegression.java	removeData	THIS	SimpleRegression	1	DEF	$.hasIntercept
4316	172	4	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
4316	172	4	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
4316	172	4	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
32	173	6	SimpleRegression.java	addData	THIS	SimpleRegression	0	ModelSpecificationException	data[i].length < 2
32	173	6	SimpleRegression.java	addData	i	int	0	ModelSpecificationException	data[$].length < 2
32	173	6	SimpleRegression.java	addData	data	double[][]	0	ModelSpecificationException	$[i].length < 2
33	186	4	SimpleRegression.java	addObservation	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length == 0
33	186	4	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length == 0
33	186	4	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$ == null
34	198	4	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length != y.$.length
34	198	4	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
34	198	4	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
34	198	4	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
34	198	4	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
4317	202	4	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
4317	202	4	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
4317	202	4	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
35	203	6	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	DEF	x[i].length == 0
35	203	6	SimpleRegression.java	addObservations	i	int	0	DEF	x[$].length == 0
35	203	6	SimpleRegression.java	addObservations	i	int	0	DEF	x[$] == null
35	203	6	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i].length == 0
35	203	6	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i] == null
36	207	4	SimpleRegression.java	addObservations	obsOk	boolean	0	ModelSpecificationException	$
4318	210	4	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
4318	210	4	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
4318	210	4	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
4319	219	4	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
4319	219	4	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
4319	219	4	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
4319	219	4	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
37	248	4	SimpleRegression.java	predict	THIS	SimpleRegression	0	RET	$.hasIntercept
38	274	4	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
39	277	4	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.FastMath.abs($.sumXX) < 10 * Double.MIN_VALUE
40	294	4	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
41	304	4	SimpleRegression.java	getXSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
42	328	4	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
43	340	4	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
44	358	4	SimpleRegression.java	getInterceptStdErr	THIS	SimpleRegression	0	RET	$.hasIntercept
45	385	4	SimpleRegression.java	getSlopeConfidenceInterval	THIS	SimpleRegression	0	RET	$.n < 3
46	388	4	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ <= 0
46	388	4	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ >= 1
47	400	4	SimpleRegression.java	getSignificance	THIS	SimpleRegression	0	RET	$.n < 3
48	412	4	SimpleRegression.java	getIntercept	THIS	SimpleRegression	0	RET	$.hasIntercept
49	432	4	SimpleRegression.java	regress	THIS	SimpleRegression	1	NoDataException:RET	$.hasIntercept
50	433	6	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 3
51	436	6	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	$.FastMath.abs($.sumXX) > $.Precision.SAFE_MIN
52	450	6	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 2
53	453	6	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	Double.isNaN($.sumXX)
54	473	4	SimpleRegression.java	regress	THIS	SimpleRegression	0	MathIllegalArgumentException	variablesToInclude.$.length == 0
54	473	4	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$.length == 0
54	473	4	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$ == null
55	476	4	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 2
55	476	4	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 1
55	476	4	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	$.hasIntercept
55	476	4	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 2
55	476	4	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 1
56	479	4	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	$.hasIntercept
57	480	6	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	variablesToInclude.$.length == 2
57	480	6	SimpleRegression.java	regress	variablesToInclude	int[]	1	OutOfRangeException:RET	$.length == 2
58	481	8	SimpleRegression.java	regress	variablesToInclude	int[]	1	ModelSpecificationException	$[0] == 1
59	485	10	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
60	489	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[1] != 1
61	495	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 1
61	495	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
62	500	8	SimpleRegression.java	regress	variablesToInclude	int[]	1	RET	$[0] == 0
63	506	10	SimpleRegression.java	regress	variablesToInclude	int[]	0	RET	$[0] == 1
64	511	12	SimpleRegression.java	regress	_sxx	double	1	RET	Double.isNaN($)
65	526	6	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
3000	38	4	SimpleUnivariateValueChecker.java	SimpleUnivariateValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
3001	51	4	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
3001	51	4	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	iteration >= $.maxIterationCount
3001	51	4	SimpleUnivariateValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
2789	46	4	SimpleUnivariateValueChecker.java	SimpleUnivariateValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2790	59	4	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2790	59	4	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	iteration >= $.maxIterationCount
2790	59	4	SimpleUnivariateValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
3367	37	4	SimpleValueChecker.java	SimpleValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
3368	50	4	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	iteration >= $.maxIterationCount
3368	50	4	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
3368	50	4	SimpleValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
2831	45	4	SimpleValueChecker.java	SimpleValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2832	58	4	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	iteration >= $.maxIterationCount
2832	58	4	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2832	58	4	SimpleValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
2953	37	4	SimpleVectorValueChecker.java	SimpleVectorValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2954	50	4	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	iteration >= $.maxIterationCount
2954	50	4	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2954	50	4	SimpleVectorValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
6142	55	4	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	NIL-FOR	i < p.$.length
6142	55	4	SimpleVectorValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
6142	55	4	SimpleVectorValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
2955	60	6	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > $.getAbsoluteThreshold()
2955	60	6	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > size * $.getRelativeThreshold()
2955	60	6	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
2955	60	6	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
2955	60	6	SimpleVectorValueChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
2744	45	4	SimpleVectorValueChecker.java	SimpleVectorValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2745	58	4	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2745	58	4	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	iteration >= $.maxIterationCount
2745	58	4	SimpleVectorValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
6016	63	4	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	NIL-FOR	i < p.$.length
6016	63	4	SimpleVectorValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
6016	63	4	SimpleVectorValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
2746	68	6	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > size * $.getRelativeThreshold()
2746	68	6	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > $.getAbsoluteThreshold()
2746	68	6	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
2746	68	6	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
2746	68	6	SimpleVectorValueChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
3104	70	6	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	RET	$.getIterations() > 0
6231	72	8	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NIL-FOR	i < $.simplex.getSize()
6231	72	8	SimplexOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < simplex.getSize()
3105	76	8	SimplexOptimizer.java	doOptimize	converged	boolean	0	RET	$
3106	92	6	SimplexOptimizer.java	parseOptimizationData	THIS	SimplexOptimizer	0	DEF	$.data instanceof AbstractSimplex
3107	103	4	SimplexOptimizer.java	checkParameters	THIS	SimplexOptimizer	0	NullArgumentException	$.simplex == null
3108	106	4	SimplexOptimizer.java	checkParameters	THIS	SimplexOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
3108	106	4	SimplexOptimizer.java	checkParameters	THIS	SimplexOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
2476	73	6	SimplexOptimizer.java	parseOptimizationData	THIS	SimplexOptimizer	0	DEF	$.data instanceof AbstractSimplex
2477	83	4	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NullArgumentException	$.simplex == null
2478	107	6	SimplexOptimizer.java	doOptimize	iteration	int	0	RET	$ > 0
5805	109	8	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NIL-FOR	i < $.simplex.getSize()
5805	109	8	SimplexOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < simplex.getSize()
2479	113	8	SimplexOptimizer.java	doOptimize	converged	boolean	0	RET	$
6143	77	4	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
6143	77	4	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
2956	79	6	SimplexSolver.java	getPivotColumn	entry	double	0	DEF	$ < minValue
2956	79	6	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	entry < $
6144	95	4	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
6144	95	4	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
2957	98	6	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	$.Precision.compareTo(entry,0d,$.maxUlps) > 0
2957	98	6	SimplexSolver.java	getPivotRow	entry	double	0	DEF	Precision.compareTo($,0d,maxUlps) > 0
2958	101	8	SimplexSolver.java	getPivotRow	cmp	int	1	DEF	$ == 0
2959	105	10	SimplexSolver.java	getPivotRow	cmp	int	0	DEF	$ < 0
2960	113	4	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
2961	117	6	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
2962	118	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() > 0
6145	120	12	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
6145	120	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
2963	123	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
2963	123	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.Precision.equals(entry,1d,$.maxUlps)
2963	123	14	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
2963	123	14	SimplexSolver.java	getPivotRow	entry	double	0	RET	Precision.equals($,1d,maxUlps)
2963	123	14	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
2964	129	8	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.getEvaluations() < $.getMaxEvaluations() / 2
6146	135	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	NIL-FOR	$.row.equals(minRow)
6146	135	12	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < varEnd
6146	135	12	SimplexSolver.java	getPivotRow	minRow	Integer	0	NIL-FOR	row.equals($)
6146	135	12	SimplexSolver.java	getPivotRow	varEnd	int	0	NIL-FOR	i < $
2965	137	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	basicRow.equals($.row)
2965	137	14	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$.equals(row)
2965	137	14	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$ != null
2965	137	14	SimplexSolver.java	getPivotRow	i	int	0	DEF	$ < minIndex
2965	137	14	SimplexSolver.java	getPivotRow	minIndex	int	0	DEF	i < $
2966	159	4	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
6147	164	4	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
6147	164	4	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
2967	165	6	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
2967	165	6	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
2968	179	4	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
6148	182	4	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
2969	185	4	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	$.Precision.equals(tableau.getEntry(0,tableau.getRhsOffset()),0d,$.epsilon)
2969	185	4	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	Precision.equals($.getEntry(0,$.getRhsOffset()),0d,epsilon)
6149	196	4	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
6017	53	4	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
6017	53	4	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
2747	55	6	SimplexSolver.java	getPivotColumn	entry	double	0	DEF	$ < minValue
2747	55	6	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	entry < $
6018	71	4	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
6018	71	4	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
2748	74	6	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	$.Precision.compareTo(entry,0d,$.maxUlps) > 0
2748	74	6	SimplexSolver.java	getPivotRow	entry	double	0	DEF	Precision.compareTo($,0d,maxUlps) > 0
2749	77	8	SimplexSolver.java	getPivotRow	cmp	int	1	DEF	$ == 0
2750	81	10	SimplexSolver.java	getPivotRow	cmp	int	0	DEF	$ < 0
2751	89	4	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
2752	93	6	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
2753	94	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() > 0
6019	96	12	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
6019	96	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
2754	99	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
2754	99	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.Precision.equals(entry,1d,$.maxUlps)
2754	99	14	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
2754	99	14	SimplexSolver.java	getPivotRow	entry	double	0	RET	Precision.equals($,1d,maxUlps)
2754	99	14	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
2755	105	8	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.getIterations() < $.getMaxIterations() / 2
6020	111	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	NIL-FOR	$.row.equals(minRow)
6020	111	12	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < varEnd
6020	111	12	SimplexSolver.java	getPivotRow	minRow	Integer	0	NIL-FOR	row.equals($)
6020	111	12	SimplexSolver.java	getPivotRow	varEnd	int	0	NIL-FOR	i < $
2756	113	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	basicRow.equals($.row)
2756	113	14	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$ != null
2756	113	14	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$.equals(row)
2756	113	14	SimplexSolver.java	getPivotRow	i	int	0	DEF	$ < minIndex
2756	113	14	SimplexSolver.java	getPivotRow	minIndex	int	0	DEF	i < $
2757	135	4	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
6021	140	4	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
6021	140	4	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
2758	141	6	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
2758	141	6	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
2759	155	4	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
6022	158	4	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
2760	161	4	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	$.Precision.equals(tableau.getEntry(0,tableau.getRhsOffset()),0d,$.epsilon)
2760	161	4	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	Precision.equals($.getEntry(0,$.getRhsOffset()),0d,epsilon)
6023	172	4	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
2975	128	4	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
6151	132	4	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
6151	132	4	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
2976	135	4	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
6152	138	4	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
6152	138	4	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
6153	141	4	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
6153	141	4	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
2977	155	4	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
2978	163	4	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
6154	168	4	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
6154	168	4	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
2979	172	6	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
2980	176	6	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
2980	176	6	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
2981	180	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
2981	180	8	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
2982	184	6	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
2982	184	6	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
2982	184	6	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
2982	184	6	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
2983	210	4	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
2984	230	6	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
2984	230	6	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
6155	255	4	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
6155	255	4	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
2985	257	6	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	$.Precision.equals(entry,1d,$.maxUlps)
2985	257	6	SimplexTableau.java	getBasicRow	entry	double	1	DEF	Precision.equals($,1d,maxUlps)
2985	257	6	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
2986	261	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	$.Precision.equals(entry,0d,$.maxUlps)
2986	261	8	SimplexTableau.java	getBasicRow	entry	double	0	RET	Precision.equals($,0d,maxUlps)
2987	272	4	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
6156	277	4	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
6156	277	4	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
2988	279	6	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.Precision.compareTo(entry,0d,$.epsilon) > 0
2988	279	6	SimplexTableau.java	dropPhase1Objective	entry	double	0	DEF	Precision.compareTo($,0d,epsilon) > 0
6157	283	4	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
6157	283	4	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
2989	285	6	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
2989	285	6	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
6158	290	4	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
6158	290	4	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
6159	292	6	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
6159	292	6	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
2990	293	8	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
2990	293	8	SimplexTableau.java	dropPhase1Objective	columnsToDrop	Set<Integer>	0	DEF	$.contains(j)
6160	299	4	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
6161	317	4	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
6161	317	4	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
2991	319	6	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	$.Precision.compareTo(entry,0d,$.epsilon) < 0
2991	319	6	SimplexTableau.java	isOptimal	entry	double	0	RET	Precision.compareTo($,0d,epsilon) < 0
6162	335	4	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
6162	335	4	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
6162	335	4	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
2992	337	6	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
2993	342	6	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ != null
2993	342	6	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ == 0
2994	346	8	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
2994	346	8	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
6163	363	4	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
6163	363	4	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
6164	374	4	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth()
6164	374	4	SimplexTableau.java	subtractRow	i	int	0	NIL-FOR	$ < getWidth()
2995	376	6	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	DEF	$.FastMath.abs(result) < $.cutOff
2995	376	6	SimplexTableau.java	subtractRow	result	double	0	DEF	FastMath.abs($) < cutOff
2996	473	4	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
2996	473	4	SimplexTableau.java	equals	other	Object	0	RET	this == $
2997	476	4	SimplexTableau.java	equals	other	Object	0	RET	$ instanceof SimplexTableau
2763	119	4	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
6025	123	4	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
6025	123	4	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
2764	126	4	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
6026	129	4	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
6026	129	4	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
6027	132	4	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
6027	132	4	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
2765	146	4	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
2766	154	4	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
6028	159	4	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
6028	159	4	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
2767	163	6	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
2768	167	6	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
2768	167	6	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
2769	171	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
2769	171	8	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
2770	175	6	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
2770	175	6	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
2770	175	6	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
2770	175	6	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
2771	201	4	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
2772	221	6	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
2772	221	6	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
6029	246	4	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
6029	246	4	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
2773	248	6	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	$.Precision.equals(entry,1d,$.maxUlps)
2773	248	6	SimplexTableau.java	getBasicRow	entry	double	1	DEF	Precision.equals($,1d,maxUlps)
2773	248	6	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
2774	252	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	$.Precision.equals(entry,0d,$.maxUlps)
2774	252	8	SimplexTableau.java	getBasicRow	entry	double	0	RET	Precision.equals($,0d,maxUlps)
2775	263	4	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
6030	268	4	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
6030	268	4	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
2776	270	6	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.Precision.compareTo(entry,0d,$.epsilon) > 0
2776	270	6	SimplexTableau.java	dropPhase1Objective	entry	double	0	DEF	Precision.compareTo($,0d,epsilon) > 0
6031	274	4	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
6031	274	4	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
2777	276	6	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
2777	276	6	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
6032	281	4	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
6032	281	4	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
6033	283	6	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
6033	283	6	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
2778	284	8	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
2778	284	8	SimplexTableau.java	dropPhase1Objective	columnsToDrop	Set<Integer>	0	DEF	$.contains(j)
6034	290	4	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
6035	308	4	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
6035	308	4	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
2779	310	6	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	$.Precision.compareTo(entry,0d,$.epsilon) < 0
2779	310	6	SimplexTableau.java	isOptimal	entry	double	0	RET	Precision.compareTo($,0d,epsilon) < 0
6036	326	4	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
6036	326	4	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
6036	326	4	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
2780	328	6	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
2781	333	6	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ == 0
2781	333	6	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ != null
2782	337	8	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
2782	337	8	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
6037	354	4	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
6037	354	4	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
6038	365	4	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth()
6038	365	4	SimplexTableau.java	subtractRow	i	int	0	NIL-FOR	$ < getWidth()
2783	367	6	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	DEF	$.FastMath.abs(result) < CUTOFF_THRESHOLD
2783	367	6	SimplexTableau.java	subtractRow	result	double	0	DEF	FastMath.abs($) < CUTOFF_THRESHOLD
2784	464	4	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
2784	464	4	SimplexTableau.java	equals	other	Object	0	RET	this == $
2785	467	4	SimplexTableau.java	equals	other	Object	0	RET	$ instanceof SimplexTableau
4304	30	4	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
4305	44	4	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
4306	59	4	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.getMinimalIterationCount() == 1
4307	68	6	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.iterations.getCount() >= $.getMinimalIterationCount()
4308	71	8	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
4308	71	8	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
4308	71	8	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
4308	71	8	SimpsonIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
4067	41	4	Sinc.java	value	THIS	Sinc	1	RET	$.FastMath.abs(scaledX) <= SHORTCUT
4067	41	4	Sinc.java	value	scaledX	double	1	RET	FastMath.abs($) <= SHORTCUT
4068	64	4	Sinc.java	value	THIS	Sinc	1	DEF	$.FastMath.abs(scaledX) <= SHORTCUT
4068	64	4	Sinc.java	value	scaledX	double	1	DEF	FastMath.abs($) <= SHORTCUT
6639	65	6	Sinc.java	value	THIS	Sinc	0	NIL-FOR	i < f.$.length
6639	65	6	Sinc.java	value	i	int	0	NIL-FOR	$ < f.length
6639	65	6	Sinc.java	value	f	double[]	0	NIL-FOR	i < $.length
4069	67	8	Sinc.java	value	i	int	1	DEF	($ & 0x1) == 0
6640	83	6	Sinc.java	value	THIS	Sinc	0	NIL-FOR	n < f.$.length
6640	83	6	Sinc.java	value	n	int	0	NIL-FOR	$ < f.length
6640	83	6	Sinc.java	value	f	double[]	0	NIL-FOR	n < $.length
4070	87	8	Sinc.java	value	n	int	1	DEF	($ & 0x1) == 0
6641	96	8	Sinc.java	value	k	int	0	NIL-FOR	$ > 1
4071	108	4	Sinc.java	value	THIS	Sinc	0	DEF	$.normalized
6642	110	6	Sinc.java	value	THIS	Sinc	0	NIL-FOR	i < f.$.length
6642	110	6	Sinc.java	value	i	int	0	NIL-FOR	$ < f.length
6642	110	6	Sinc.java	value	f	double[]	0	NIL-FOR	i < $.length
1406	68	4	SingularValueDecomposition.java	SingularValueDecomposition	matrix	RealMatrix	1	DEF	$.getRowDimension() < $.getColumnDimension()
5061	87	4	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	k < $.FastMath.max(nct,nrt)
5061	87	4	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ < FastMath.max(nct,nrt)
5061	87	4	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	NIL-FOR	k < FastMath.max($,nrt)
5061	87	4	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	NIL-FOR	k < FastMath.max(nct,$)
1407	88	6	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1407	88	6	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
5062	90	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
5062	90	8	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1408	93	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1408	93	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1409	94	10	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	A[$][$] < 0
5063	97	10	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
5063	97	10	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
5064	104	6	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
5064	104	6	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
1410	105	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1410	105	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1410	105	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1410	105	8	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
5065	107	10	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
5065	107	10	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
5066	111	10	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
5066	111	10	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1411	117	6	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1411	117	6	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
5067	118	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
5067	118	8	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1412	122	6	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1412	122	6	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
5068	124	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
5068	124	8	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1413	127	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1413	127	8	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1414	128	10	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$ + 1] < 0
1414	128	10	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k + 1] < 0
5069	131	10	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
5069	131	10	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1415	137	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k + 1 < $.m
1415	137	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1415	137	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ + 1 < m
1415	137	8	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
5070	138	10	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
5070	138	10	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
5071	141	10	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
5071	141	10	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
5072	142	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
5072	142	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
5073	146	10	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
5073	146	10	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
5074	148	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
5074	148	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
5075	153	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
5075	153	8	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1416	159	4	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	nct < $.n
1416	159	4	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	$ < n
1417	162	4	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.m < p
1417	162	4	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	m < $
1418	165	4	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	$ + 1 < p
1418	165	4	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	nrt + 1 < $
5076	169	4	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
5076	169	4	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
5077	170	6	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
5077	170	6	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
5078	175	4	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1419	176	6	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.singularValues[k] != 0
1419	176	6	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	singularValues[$] != 0
5079	177	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
5079	177	8	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
5080	179	10	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
5080	179	10	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
5081	183	10	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
5081	183	10	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
5082	187	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
5082	187	8	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
5083	191	8	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < k - 1
5083	191	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	i < $ - 1
5084	196	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
5084	196	8	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
5085	202	4	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1420	203	6	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1420	203	6	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1420	203	6	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1420	203	6	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
5086	204	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
5086	204	8	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
5087	206	10	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
5087	206	10	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
5088	210	10	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
5088	210	10	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
5089	215	6	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
5089	215	6	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
5090	222	4	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-WHILE	$ > 0
5091	225	6	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1421	227	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.FastMath.abs(e[k]) > threshold
1421	227	8	SingularValueDecomposition.java	SingularValueDecomposition	threshold	double	0	DEF	FastMath.abs(e[k]) > $
1421	227	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	FastMath.abs(e[$]) > threshold
1421	227	8	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	FastMath.abs($[k]) > threshold
1422	232	6	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	$ == p - 2
1422	232	6	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	k == $ - 2
5092	237	8	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	NIL-FOR	$ >= k
5092	237	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	ks >= $
1423	238	10	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	$ == k
1423	238	10	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	ks == $
1424	242	10	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.FastMath.abs($.singularValues[ks]) <= TINY + EPS * t
1424	242	10	SingularValueDecomposition.java	SingularValueDecomposition	t	double	0	DEF	FastMath.abs(singularValues[ks]) <= TINY + EPS * $
1424	242	10	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	FastMath.abs(singularValues[$]) <= TINY + EPS * t
1425	247	8	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == k
1425	247	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	ks == $
1426	251	10	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == p - 1
1426	251	10	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	ks == $ - 1
5093	266	10	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ >= k
5093	266	10	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	j >= $
1427	271	12	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1427	271	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
5094	275	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
5094	275	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
5095	287	6	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p
5095	287	6	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $
5096	294	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
5096	294	8	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1428	314	2	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ != 0
1428	314	2	SingularValueDecomposition.java	SingularValueDecomposition	c	double	0	DEF	$ != 0
1429	316	4	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ < 0
5097	323	2	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p - 1
5097	323	2	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $ - 1
1430	327	4	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1430	327	4	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
5098	334	4	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
5098	334	4	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1431	347	4	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	j < $.m - 1
1431	347	4	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ < m - 1
5099	348	6	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
5099	348	6	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1432	361	0	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] <= 0
1432	361	0	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] <= 0
5100	363	0	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ <= pp
5100	363	0	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-FOR	i <= $
5101	367	0	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-WHILE	$ < pp
5101	367	0	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-WHILE	k < $
1433	368	0	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] >= $.singularValues[k + 1]
1433	368	0	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] >= singularValues[$ + 1]
1434	374	0	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.n - 1
1434	374	0	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < n - 1
5102	375	2	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
5102	375	2	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1435	381	0	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.m - 1
1435	381	0	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < m - 1
5103	382	2	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
5103	382	2	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1436	397	0	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.transposed
1437	420	0	SingularValueDecomposition.java	getUT	THIS	SingularValueDecomposition	0	DEF	$.cachedUt == null
1438	430	0	SingularValueDecomposition.java	getS	THIS	SingularValueDecomposition	0	DEF	$.cachedS == null
1439	456	0	SingularValueDecomposition.java	getVT	THIS	SingularValueDecomposition	0	DEF	$.cachedVt == null
5104	470	0	SingularValueDecomposition.java	getCovariance	THIS	SingularValueDecomposition	0	NIL-WHILE	$.singularValues[dimension] >= minSingularValue
5104	470	0	SingularValueDecomposition.java	getCovariance	p	int	0	NIL-WHILE	dimension < $
5104	470	0	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	$ < p
5104	470	0	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	singularValues[$] >= minSingularValue
5104	470	0	SingularValueDecomposition.java	getCovariance	minSingularValue	double	0	NIL-WHILE	singularValues[dimension] >= $
1440	473	0	SingularValueDecomposition.java	getCovariance	dimension	int	0	NumberIsTooLargeException	$ == 0
5105	516	0	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.singularValues.$.length
5105	516	0	SingularValueDecomposition.java	getRank	i	int	0	NIL-FOR	$ < singularValues.length
1441	517	0	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	DEF	$.singularValues[i] > $.tol
1441	517	0	SingularValueDecomposition.java	getRank	i	int	0	DEF	singularValues[$] > tol
247	52	4	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
248	61	4	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
249	65	4	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
250	83	4	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
251	97	4	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values,begin,length)
251	97	4	Skewness.java	evaluate	values	double[]	0	DEF	test($,begin,length)
251	97	4	Skewness.java	evaluate	begin	int	0	DEF	test(values,$,length)
251	97	4	Skewness.java	evaluate	length	int	0	DEF	test(values,begin,$)
251	97	4	Skewness.java	evaluate	length	int	0	DEF	$ > 2
4399	102	6	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
4399	102	6	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
4399	102	6	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
4400	109	6	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
4400	109	6	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
4400	109	6	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
6456	33	6	SmallPrimes.java	smallTrialDivision	THIS	SmallPrimes	0	NIL-WHILE	0 == n % $.p
6456	33	6	SmallPrimes.java	smallTrialDivision	n	int	0	NIL-WHILE	0 == $ % p
6457	49	4	SmallPrimes.java	boundedTrialDivision	f	int	0	NIL-WHILE	$ <= maxFactor
6457	49	4	SmallPrimes.java	boundedTrialDivision	maxFactor	int	0	NIL-WHILE	f <= $
3497	50	6	SmallPrimes.java	boundedTrialDivision	f	int	0	DEF	0 == n % $
3497	50	6	SmallPrimes.java	boundedTrialDivision	n	int	0	DEF	0 == $ % f
3498	56	6	SmallPrimes.java	boundedTrialDivision	f	int	0	DEF	0 == n % $
3498	56	6	SmallPrimes.java	boundedTrialDivision	n	int	0	DEF	0 == $ % f
3499	63	4	SmallPrimes.java	boundedTrialDivision	n	int	0	DEF	$ != 1
3500	76	4	SmallPrimes.java	trialDivision	n	int	0	RET	1 == $
3501	93	4	SmallPrimes.java	millerRabinPrimeTest	n	int	0	DEF	$ >= 2047
3502	96	4	SmallPrimes.java	millerRabinPrimeTest	n	int	0	DEF	$ >= 1373653
3503	99	4	SmallPrimes.java	millerRabinPrimeTest	n	int	0	DEF	$ >= 25326001
6458	104	4	SmallPrimes.java	millerRabinPrimeTest	i	int	0	NIL-FOR	$ < t
6458	104	4	SmallPrimes.java	millerRabinPrimeTest	t	int	0	NIL-FOR	i < $
3504	108	6	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	1 != $
3504	108	6	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	$ != nMinus1
3504	108	6	SmallPrimes.java	millerRabinPrimeTest	nMinus1	int	0	RET	y != $
6459	110	8	SmallPrimes.java	millerRabinPrimeTest	j	int	0	NIL-WHILE	$ <= s - 1
6459	110	8	SmallPrimes.java	millerRabinPrimeTest	y	int	0	NIL-WHILE	nMinus1 != $
6459	110	8	SmallPrimes.java	millerRabinPrimeTest	nMinus1	int	0	NIL-WHILE	$ != y
6459	110	8	SmallPrimes.java	millerRabinPrimeTest	s	int	0	NIL-WHILE	j <= $ - 1
3505	113	10	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	1 == $
3506	118	8	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	nMinus1 != $
3506	118	8	SmallPrimes.java	millerRabinPrimeTest	nMinus1	int	0	RET	$ != y
3959	54	4	SmoothingPolynomialBicubicSplineInterpolator.java	SmoothingPolynomialBicubicSplineInterpolator	xDegree	int	0	NotPositiveException	$ < 0
3960	57	4	SmoothingPolynomialBicubicSplineInterpolator.java	SmoothingPolynomialBicubicSplineInterpolator	yDegree	int	0	NotPositiveException	$ < 0
3961	71	4	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3961	71	4	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3961	71	4	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3961	71	4	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3961	71	4	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3961	71	4	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
3962	74	4	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3962	74	4	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3962	74	4	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
6549	79	4	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
6549	79	4	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3963	80	6	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3963	80	6	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3963	80	6	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3963	80	6	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
6550	87	4	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
6550	87	4	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
6551	89	6	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
6551	89	6	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
6552	95	4	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
6552	95	4	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
6553	97	6	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
6553	97	6	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
6554	102	4	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
6554	102	4	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
6555	104	6	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
6555	104	6	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
6556	110	4	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
6556	110	4	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
6557	112	6	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
6557	112	6	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
533	66	4	SobolSequenceGenerator.java	SobolSequenceGenerator	dimension	int	0	OutOfRangeException	$ < 1
533	66	4	SobolSequenceGenerator.java	SobolSequenceGenerator	dimension	int	0	OutOfRangeException	$ > MAX_DIMENSION
534	70	4	SobolSequenceGenerator.java	SobolSequenceGenerator	is	InputStream	0	MathInternalError	$ == null
535	103	4	SobolSequenceGenerator.java	SobolSequenceGenerator	dimension	int	0	NotStrictlyPositiveException	$ < 1
536	110	4	SobolSequenceGenerator.java	SobolSequenceGenerator	lastDimension	int	0	OutOfRangeException	$ < dimension
536	110	4	SobolSequenceGenerator.java	SobolSequenceGenerator	dimension	int	0	OutOfRangeException	lastDimension < $
4542	122	4	SobolSequenceGenerator.java	initFromStream	i	int	0	NIL-FOR	$ <= BITS
4543	133	6	SobolSequenceGenerator.java	initFromStream	line	String	0	NIL-WHILE	($=reader.readLine()) != null
4543	133	6	SobolSequenceGenerator.java	initFromStream	reader	BufferedReader	0	NIL-WHILE	(line=$.readLine()) != null
537	137	10	SobolSequenceGenerator.java	initFromStream	THIS	SobolSequenceGenerator	0	DEF	dim <= $.dimension
537	137	10	SobolSequenceGenerator.java	initFromStream	dim	int	0	DEF	$ <= dimension
537	137	10	SobolSequenceGenerator.java	initFromStream	dim	int	0	DEF	$ >= 2
4544	141	12	SobolSequenceGenerator.java	initFromStream	i	int	0	NIL-FOR	$ <= s
4544	141	12	SobolSequenceGenerator.java	initFromStream	s	int	0	NIL-FOR	i <= $
538	146	10	SobolSequenceGenerator.java	initFromStream	THIS	SobolSequenceGenerator	0	RET	dim > $.dimension
538	146	10	SobolSequenceGenerator.java	initFromStream	dim	int	0	RET	$ > dimension
4545	172	4	SobolSequenceGenerator.java	initDirectionVector	i	int	0	NIL-FOR	$ <= s
4545	172	4	SobolSequenceGenerator.java	initDirectionVector	s	int	0	NIL-FOR	i <= $
4546	175	4	SobolSequenceGenerator.java	initDirectionVector	i	int	0	NIL-FOR	$ <= BITS
4547	177	6	SobolSequenceGenerator.java	initDirectionVector	k	int	0	NIL-FOR	$ <= s - 1
4547	177	6	SobolSequenceGenerator.java	initDirectionVector	s	int	0	NIL-FOR	k <= $ - 1
539	187	4	SobolSequenceGenerator.java	nextVector	THIS	SobolSequenceGenerator	0	RET	$.count == 0
4548	193	4	SobolSequenceGenerator.java	nextVector	value	int	0	NIL-WHILE	($ & 1) == 1
4549	197	4	SobolSequenceGenerator.java	nextVector	THIS	SobolSequenceGenerator	0	NIL-FOR	i < $.dimension
4549	197	4	SobolSequenceGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
540	211	4	SobolSequenceGenerator.java	skipTo	index	int	1	DEF	$ == 0
4550	217	6	SobolSequenceGenerator.java	skipTo	THIS	SobolSequenceGenerator	0	NIL-FOR	j < $.dimension
4550	217	6	SobolSequenceGenerator.java	skipTo	j	int	0	NIL-FOR	$ < dimension
4551	219	8	SobolSequenceGenerator.java	skipTo	k	int	0	NIL-FOR	$ <= BITS
541	221	10	SobolSequenceGenerator.java	skipTo	shift	long	0	DEF	$ == 0
5437	67	4	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	i < $.rows
5437	67	4	SparseFieldMatrix.java	SparseFieldMatrix	i	int	0	NIL-FOR	$ < rows
5438	68	6	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	j < $.columns
5438	68	6	SparseFieldMatrix.java	SparseFieldMatrix	j	int	0	NIL-FOR	$ < columns
1591	81	4	SparseFieldMatrix.java	addToEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1591	81	4	SparseFieldMatrix.java	addToEntry	value	T	1	DEF	getField().getZero().equals($)
1592	128	4	SparseFieldMatrix.java	multiplyEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1592	128	4	SparseFieldMatrix.java	multiplyEntry	value	T	1	DEF	getField().getZero().equals($)
1593	141	4	SparseFieldMatrix.java	setEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1593	141	4	SparseFieldMatrix.java	setEntry	value	T	1	DEF	getField().getZero().equals($)
5036	87	4	SparseFieldVector.java	SparseFieldVector	THIS	SparseFieldVector	0	NIL-FOR	key < values.$.length
5036	87	4	SparseFieldVector.java	SparseFieldVector	key	int	0	NIL-FOR	$ < values.length
5036	87	4	SparseFieldVector.java	SparseFieldVector	values	T[]	0	NIL-FOR	key < $.length
5037	118	4	SparseFieldVector.java	add	THIS	SparseFieldVector	0	NIL-WHILE	$.iter.hasNext()
1387	122	6	SparseFieldVector.java	add	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1387	122	6	SparseFieldVector.java	add	key	int	1	DEF	entries.containsKey($)
5038	139	4	SparseFieldVector.java	append	THIS	SparseFieldVector	0	NIL-WHILE	$.iter.hasNext()
1388	149	4	SparseFieldVector.java	append	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
5039	155	6	SparseFieldVector.java	append	i	int	0	NIL-FOR	$ < n
5039	155	6	SparseFieldVector.java	append	n	int	0	NIL-FOR	i < $
5040	184	4	SparseFieldVector.java	dotProduct	THIS	SparseFieldVector	0	NIL-WHILE	$.iter.hasNext()
5041	197	4	SparseFieldVector.java	ebeDivide	THIS	SparseFieldVector	0	NIL-WHILE	$.iter.hasNext()
5042	210	4	SparseFieldVector.java	ebeMultiply	THIS	SparseFieldVector	0	NIL-WHILE	$.iter.hasNext()
1389	246	4	SparseFieldVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
5043	254	4	SparseFieldVector.java	getSubVector	THIS	SparseFieldVector	0	NIL-WHILE	$.iter.hasNext()
1390	257	6	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ >= index
1390	257	6	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ < end
1390	257	6	SparseFieldVector.java	getSubVector	end	int	0	DEF	key < $
1390	257	6	SparseFieldVector.java	getSubVector	index	int	0	DEF	key >= $
5044	273	4	SparseFieldVector.java	mapAddToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
5044	273	4	SparseFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
5045	289	4	SparseFieldVector.java	mapDivideToSelf	THIS	SparseFieldVector	0	NIL-WHILE	$.iter.hasNext()
5046	305	4	SparseFieldVector.java	mapInvToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
5046	305	4	SparseFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
5047	321	4	SparseFieldVector.java	mapMultiplyToSelf	THIS	SparseFieldVector	0	NIL-WHILE	$.iter.hasNext()
5048	348	4	SparseFieldVector.java	outerProduct	THIS	SparseFieldVector	0	NIL-WHILE	$.iter.hasNext()
5049	351	6	SparseFieldVector.java	outerProduct	THIS	SparseFieldVector	0	NIL-WHILE	$.iter2.hasNext()
1391	362	4	SparseFieldVector.java	outerProduct	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
5050	369	6	SparseFieldVector.java	outerProduct	THIS	SparseFieldVector	0	NIL-WHILE	$.iter.hasNext()
5051	373	8	SparseFieldVector.java	outerProduct	col	int	0	NIL-FOR	$ < n
5051	373	8	SparseFieldVector.java	outerProduct	n	int	0	NIL-FOR	col < $
5052	393	4	SparseFieldVector.java	set	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
5052	393	4	SparseFieldVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
5053	413	4	SparseFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < n
5053	413	4	SparseFieldVector.java	setSubVector	n	int	0	NIL-FOR	i < $
5054	427	4	SparseFieldVector.java	subtract	THIS	SparseFieldVector	0	NIL-WHILE	$.iter.hasNext()
1392	430	6	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1392	430	6	SparseFieldVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1393	443	4	SparseFieldVector.java	subtract	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
5055	450	6	SparseFieldVector.java	subtract	i	int	0	NIL-FOR	$ < n
5055	450	6	SparseFieldVector.java	subtract	n	int	0	NIL-FOR	i < $
1394	451	8	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(i)
1394	451	8	SparseFieldVector.java	subtract	i	int	1	DEF	entries.containsKey($)
5056	467	4	SparseFieldVector.java	toArray	THIS	SparseFieldVector	0	NIL-WHILE	$.iter.hasNext()
1395	479	4	SparseFieldVector.java	checkIndex	THIS	SparseFieldVector	0	OutOfRangeException	index >= $.getDimension()
1395	479	4	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1395	479	4	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1396	489	4	SparseFieldVector.java	checkVectorDimensions	THIS	SparseFieldVector	0	DimensionMismatchException	$.getDimension() != n
1396	489	4	SparseFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	getDimension() != $
1397	497	4	SparseFieldVector.java	add	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
5057	504	6	SparseFieldVector.java	add	i	int	0	NIL-FOR	$ < n
5057	504	6	SparseFieldVector.java	add	n	int	0	NIL-FOR	i < $
5058	519	4	SparseFieldVector.java	hashCode	THIS	SparseFieldVector	0	NIL-WHILE	$.iter.hasNext()
1398	530	4	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$ == obj
1398	530	4	SparseFieldVector.java	equals	obj	Object	0	RET	this == $
1399	533	4	SparseFieldVector.java	equals	obj	Object	0	RET	$ instanceof SparseFieldVector<?>
1400	537	4	SparseFieldVector.java	equals	THIS	SparseFieldVector	1	RET	$.field == null
1401	538	6	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	other.$.field != null
1401	538	6	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	$.field != null
1402	543	6	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.field.equals(other.$.field)
1402	543	6	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	field.equals($.field)
1403	547	4	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.virtualSize != other.$.virtualSize
1403	547	4	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	virtualSize != $.virtualSize
5059	551	4	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	NIL-WHILE	$.iter.hasNext()
1404	554	6	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	test.equals($.iter.value())
1404	554	6	SparseFieldVector.java	equals	test	T	0	RET	$.equals(iter.value())
5060	559	4	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	NIL-WHILE	$.iter.hasNext()
1405	562	6	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	test.equals($.getEntry($.iter.key()))
1405	562	6	SparseFieldVector.java	equals	test	T	0	RET	$.equals(getEntry(iter.key()))
427	105	4	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
427	105	4	SpearmansCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
427	105	4	SpearmansCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
428	109	6	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
428	109	6	SpearmansCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
429	115	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	0	DEF	$.rankingAlgorithm instanceof NaturalRanking
429	115	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	0	DEF	$.NaNStrategy.REMOVED == ((NaturalRanking)$.rankingAlgorithm).getNanStrategy()
430	133	4	SpearmansCorrelation.java	rankTransform	THIS	SpearmansCorrelation	0	DEF	$.rankingAlgorithm instanceof NaturalRanking
430	133	4	SpearmansCorrelation.java	rankTransform	THIS	SpearmansCorrelation	0	DEF	((NaturalRanking)$.rankingAlgorithm).getNanStrategy() == $.NaNStrategy.REMOVED
4479	135	6	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < matrix.getColumnDimension()
4479	135	6	SpearmansCorrelation.java	rankTransform	matrix	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
431	138	6	SpearmansCorrelation.java	rankTransform	nanPositions	Set<Integer>	0	DEF	$.isEmpty()
4480	140	8	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < transformed.getColumnDimension()
4480	140	8	SpearmansCorrelation.java	rankTransform	transformed	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
432	145	4	SpearmansCorrelation.java	rankTransform	transformed	RealMatrix	0	DEF	$ == null
4481	148	4	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < transformed.getColumnDimension()
4481	148	4	SpearmansCorrelation.java	rankTransform	transformed	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
4482	160	4	SpearmansCorrelation.java	getNaNPositions	THIS	SpearmansCorrelation	0	NIL-FOR	i < input.$.length
4482	160	4	SpearmansCorrelation.java	getNaNPositions	i	int	0	NIL-FOR	$ < input.length
4482	160	4	SpearmansCorrelation.java	getNaNPositions	input	double[]	0	NIL-FOR	i < $.length
433	161	6	SpearmansCorrelation.java	getNaNPositions	i	int	0	DEF	Double.isNaN(input[$])
433	161	6	SpearmansCorrelation.java	getNaNPositions	input	double[]	0	DEF	Double.isNaN($[i])
434	174	4	SpearmansCorrelation.java	removeValues	indices	Set<Integer>	0	RET	$.isEmpty()
4483	178	4	SpearmansCorrelation.java	removeValues	THIS	SpearmansCorrelation	0	NIL-FOR	i < input.$.length
4483	178	4	SpearmansCorrelation.java	removeValues	i	int	0	NIL-FOR	$ < input.length
4483	178	4	SpearmansCorrelation.java	removeValues	input	double[]	0	NIL-FOR	i < $.length
435	179	6	SpearmansCorrelation.java	removeValues	i	int	0	DEF	indices.contains($)
435	179	6	SpearmansCorrelation.java	removeValues	indices	Set<Integer>	0	DEF	$.contains(i)
3756	155	4	SphericalCoordinates.java	computeJacobian	THIS	SphericalCoordinates	0	DEF	$.jacobian == null
3757	177	4	SphericalCoordinates.java	computeHessians	THIS	SphericalCoordinates	0	DEF	$.rHessian == null
4007	24	4	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
4007	24	4	SplineInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
4007	24	4	SplineInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
4008	27	4	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	NumberIsTooSmallException	x.$.length < 3
4008	27	4	SplineInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 3
6593	33	4	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
6593	33	4	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
6594	41	4	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
6594	41	4	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
6595	51	4	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >= 0
6596	58	4	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
6596	58	4	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
452	37	4	StableRandomGenerator.java	StableRandomGenerator	generator	RandomGenerator	0	NullArgumentException	$ == null
453	40	4	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ > 0d
453	40	4	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ <= 2d
454	43	4	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ <= 1d
454	43	4	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ >= -1d
455	49	4	StableRandomGenerator.java	StableRandomGenerator	alpha	double	1	DEF	$ < 2d
455	49	4	StableRandomGenerator.java	StableRandomGenerator	beta	double	1	DEF	$ != 0d
456	63	4	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	RET	$.alpha == 2d
457	67	4	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.beta == 0d
458	68	6	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.alpha == 1d
459	77	6	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.FastMath.abs($.alpha - 1d) > 1e-8
460	85	8	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	DEF	$.alpha != 1d
174	345	4	StatUtils.java	sumDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
174	345	4	StatUtils.java	sumDifference	n	int	0	DimensionMismatchException	$ != sample2.length
174	345	4	StatUtils.java	sumDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
175	348	4	StatUtils.java	sumDifference	n	int	0	NoDataException	$ <= 0
4379	352	4	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
4379	352	4	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
176	383	4	StatUtils.java	varianceDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
176	383	4	StatUtils.java	varianceDifference	n	int	0	DimensionMismatchException	$ != sample2.length
176	383	4	StatUtils.java	varianceDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
177	386	4	StatUtils.java	varianceDifference	n	int	0	NumberIsTooSmallException	$ < 2
4380	389	4	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
4380	389	4	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
4381	404	4	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
4381	404	4	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
4381	404	4	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
4382	410	4	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
4382	410	4	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
4382	410	4	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
178	105	4	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
178	105	4	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
179	108	4	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
4080	33	4	StepFunction.java	StepFunction	x	double[]	0	NullArgumentException	$ == null
4080	33	4	StepFunction.java	StepFunction	y	double[]	0	NullArgumentException	$ == null
4081	36	4	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	x.$.length == 0
4081	36	4	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	y.$.length == 0
4081	36	4	StepFunction.java	StepFunction	x	double[]	0	NoDataException	$.length == 0
4081	36	4	StepFunction.java	StepFunction	y	double[]	0	NoDataException	$.length == 0
4082	39	4	StepFunction.java	StepFunction	THIS	StepFunction	0	DimensionMismatchException	y.$.length != x.$.length
4082	39	4	StepFunction.java	StepFunction	x	double[]	0	DimensionMismatchException	y.length != $.length
4082	39	4	StepFunction.java	StepFunction	y	double[]	0	DimensionMismatchException	$.length != x.length
4083	52	4	StepFunction.java	value	index	int	1	DEF	$ < -1
4084	56	6	StepFunction.java	value	index	int	1	DEF	$ >= 0
2351	116	4	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
2352	123	6	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
2353	128	4	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.Precision.equals(nextTime,$.lastTime,1)
2353	128	4	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.mode == $.StepNormalizerMode.MULTIPLES
2353	128	4	StepNormalizer.java	handleStep	nextTime	double	0	DEF	Precision.equals($,lastTime,1)
5683	132	4	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
2354	138	4	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
2355	141	6	StepNormalizer.java	handleStep	addLast	boolean	0	DEF	$
2356	161	4	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.bounds.firstIncluded()
2356	161	4	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.firstTime == $.lastTime
422	85	4	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	0	NumberIsTooSmallException	$.n < 2
423	88	4	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	1	RET	$.biasCorrected
4459	43	4	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
4459	43	4	StorelessCovariance.java	initializeMatrix	i	int	0	NIL-FOR	$ < dimension
4460	44	6	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
4460	44	6	StorelessCovariance.java	initializeMatrix	j	int	0	NIL-FOR	$ < dimension
415	93	4	StorelessCovariance.java	increment	THIS	StorelessCovariance	0	DimensionMismatchException	length != $.dimension
415	93	4	StorelessCovariance.java	increment	length	int	0	DimensionMismatchException	$ != dimension
4461	96	4	StorelessCovariance.java	increment	i	int	0	NIL-FOR	$ < length
4461	96	4	StorelessCovariance.java	increment	length	int	0	NIL-FOR	i < $
4462	97	6	StorelessCovariance.java	increment	j	int	0	NIL-FOR	$ < length
4462	97	6	StorelessCovariance.java	increment	length	int	0	NIL-FOR	j < $
416	108	4	StorelessCovariance.java	append	THIS	StorelessCovariance	0	DimensionMismatchException	sc.$.dimension != $.dimension
416	108	4	StorelessCovariance.java	append	sc	StorelessCovariance	0	DimensionMismatchException	$.dimension != dimension
4463	111	4	StorelessCovariance.java	append	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
4463	111	4	StorelessCovariance.java	append	i	int	0	NIL-FOR	$ < dimension
4464	112	6	StorelessCovariance.java	append	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
4464	112	6	StorelessCovariance.java	append	j	int	0	NIL-FOR	$ < dimension
4465	131	4	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
4465	131	4	StorelessCovariance.java	getData	i	int	0	NIL-FOR	$ < dimension
4466	132	6	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
4466	132	6	StorelessCovariance.java	getData	j	int	0	NIL-FOR	$ < dimension
3848	71	4	SubLine.java	intersection	v1D	Vector3D	0	RET	$ == null
3849	76	4	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
3749	71	4	SubLine.java	intersection	v2D	Vector2D	0	RET	$ == null
3750	76	4	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
3751	106	4	SubLine.java	side	crossing	Vector2D	0	RET	$ == null
3752	121	4	SubLine.java	split	crossing	Vector2D	0	RET	$ == null
3760	39	4	SubPlane.java	side	inter	Line	0	RET	$ == null
3761	46	4	SubPlane.java	side	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
3761	46	4	SubPlane.java	side	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
3762	63	4	SubPlane.java	split	inter	Line	0	RET	$ == null
3763	70	4	SubPlane.java	split	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
3763	70	4	SubPlane.java	split	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
319	74	4	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values,begin,length,true)
319	74	4	Sum.java	evaluate	values	double[]	0	DEF	test($,begin,length,true)
319	74	4	Sum.java	evaluate	begin	int	0	DEF	test(values,$,length,true)
319	74	4	Sum.java	evaluate	length	int	0	DEF	test(values,begin,$,true)
4418	76	6	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
4418	76	6	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
4418	76	6	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
320	94	4	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values,weights,begin,length,true)
320	94	4	Sum.java	evaluate	values	double[]	0	DEF	test($,weights,begin,length,true)
320	94	4	Sum.java	evaluate	weights	double[]	0	DEF	test(values,$,begin,length,true)
320	94	4	Sum.java	evaluate	begin	int	0	DEF	test(values,weights,$,length,true)
320	94	4	Sum.java	evaluate	length	int	0	DEF	test(values,weights,begin,$,true)
4419	96	6	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
4419	96	6	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
4419	96	6	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
318	76	4	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values,begin,length,true)
318	76	4	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($,begin,length,true)
318	76	4	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values,$,length,true)
318	76	4	SumOfLogs.java	evaluate	length	int	0	DEF	test(values,begin,$,true)
4417	78	6	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
4417	78	6	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
4417	78	6	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
317	74	4	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values,begin,length,true)
317	74	4	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($,begin,length,true)
317	74	4	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values,$,length,true)
317	74	4	SumOfSquares.java	evaluate	length	int	0	DEF	test(values,begin,$,true)
4416	76	6	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
4416	76	6	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
4416	76	6	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
205	130	4	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
206	133	4	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
207	136	4	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl != $.geoMean
208	175	4	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
209	176	6	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
210	270	4	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
211	273	4	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
212	283	4	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
212	283	4	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
213	286	4	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
214	458	4	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	MathIllegalStateException	$.n > 0
215	487	4	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getVarianceImpl() instanceof Variance
216	493	4	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.meanImpl instanceof Mean
216	493	4	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.meanImpl instanceof Mean
217	499	4	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
218	505	4	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
218	505	4	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
219	511	4	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
219	511	4	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
220	517	4	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
220	517	4	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
221	523	4	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
221	523	4	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
222	529	4	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
222	529	4	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
223	535	4	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
223	535	4	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
224	541	4	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
224	541	4	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
225	547	4	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
225	547	4	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
1594	628	4	SymmLQ.java	solveInPlace	state	State	0	RET	$.bEqualsNullVector()
1595	635	4	SymmLQ.java	solveInPlace	earlyStop	boolean	0	DEF	$
5439	636	6	SymmLQ.java	solveInPlace	state	State	0	NIL-DOWHILE	$.hasConverged()
4274	36	4	SymmetricGaussIntegrator.java	integrate	ruleLength	int	0	RET	$ == 1
6745	42	4	SymmetricGaussIntegrator.java	integrate	i	int	0	NIL-FOR	$ < iMax
6745	42	4	SymmetricGaussIntegrator.java	integrate	iMax	int	0	NIL-FOR	i < $
4275	52	4	SymmetricGaussIntegrator.java	integrate	ruleLength	int	0	DEF	$ % 2 == 1
1758	61	4	TDistribution.java	TDistribution	degreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1759	87	4	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ == 0
1760	92	6	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
1761	112	4	TDistribution.java	getNumericalMean	df	double	0	RET	$ > 1
1762	122	4	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 2
1763	125	4	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 1
1763	125	4	TDistribution.java	getNumericalVariance	df	double	0	RET	$ <= 2
408	407	4	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ <= 0
408	407	4	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ > 0.5
409	418	4	TTest.java	checkSampleData	data	double[]	0	NullArgumentException	$ == null
410	421	4	TTest.java	checkSampleData	THIS	TTest	0	NumberIsTooSmallException	data.$.length < 2
410	421	4	TTest.java	checkSampleData	data	double[]	0	NumberIsTooSmallException	$.length < 2
411	432	4	TTest.java	checkSampleData	stat	StatisticalSummary	0	NullArgumentException	$ == null
412	435	4	TTest.java	checkSampleData	stat	StatisticalSummary	0	NumberIsTooSmallException	$.getN() < 2
253	42	4	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
2470	40	4	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	1	DEF	$.previousState != null
2470	40	4	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
5802	47	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
5802	47	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
5803	63	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
5803	63	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2933	39	4	TournamentSelection.java	tournament	THIS	TournamentSelection	0	MathIllegalArgumentException	population.getPopulationSize() < $.arity
2933	39	4	TournamentSelection.java	tournament	population	ListPopulation	0	MathIllegalArgumentException	$.getPopulationSize() < this.arity
6134	49	4	TournamentSelection.java	tournament	THIS	TournamentSelection	0	NIL-FOR	i < $.arity
6134	49	4	TournamentSelection.java	tournament	i	int	0	NIL-FOR	$ < this.arity
4658	31	4	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
4658	31	4	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
4658	31	4	TransformUtils.java	scaleArray	f	double[]	0	NIL-FOR	i < $.length
4659	43	4	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
4659	43	4	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
4659	43	4	TransformUtils.java	scaleArray	f	Complex[]	0	NIL-FOR	i < $.length
4660	57	4	TransformUtils.java	createRealImaginaryArray	THIS	TransformUtils	0	NIL-FOR	i < dataC.$.length
4660	57	4	TransformUtils.java	createRealImaginaryArray	i	int	0	NIL-FOR	$ < dataC.length
4660	57	4	TransformUtils.java	createRealImaginaryArray	dataC	Complex[]	0	NIL-FOR	i < $.length
1096	71	4	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataRI.$.length != 2
1096	71	4	TransformUtils.java	createComplexArray	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
1097	76	4	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataR.$.length != dataI.$.length
1097	76	4	TransformUtils.java	createComplexArray	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
1097	76	4	TransformUtils.java	createComplexArray	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
4661	81	4	TransformUtils.java	createComplexArray	i	int	0	NIL-FOR	$ < n
4661	81	4	TransformUtils.java	createComplexArray	n	int	0	NIL-FOR	i < $
1098	94	4	TransformUtils.java	exactLog2	index	int	0	MathIllegalArgumentException	$ < 0
579	102	4	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
579	102	4	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
580	107	6	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
581	117	4	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$ == other
581	117	4	TransformerMap.java	equals	other	Object	0	RET	this == $
582	120	4	TransformerMap.java	equals	other	Object	0	RET	$ instanceof TransformerMap
583	122	6	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.defaultTransformer.equals(rhs.$.defaultTransformer)
583	122	6	TransformerMap.java	equals	rhs	TransformerMap	0	RET	defaultTransformer.equals($.defaultTransformer)
584	125	6	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.map.size() != rhs.$.map.size()
584	125	6	TransformerMap.java	equals	rhs	TransformerMap	0	RET	map.size() != $.map.size()
585	129	8	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.entry.getValue().equals(rhs.$.map.get($.entry.getKey()))
585	129	8	TransformerMap.java	equals	rhs	TransformerMap	0	RET	entry.getValue().equals($.map.get(entry.getKey()))
4295	35	4	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
4296	49	4	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
4297	67	4	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
6764	80	6	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
6764	80	6	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
4298	97	6	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	i >= $.getMinimalIterationCount()
4298	97	6	TrapezoidIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
4299	100	8	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
4299	100	8	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
4299	100	8	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
4299	100	8	TrapezoidIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
1596	40	4	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1597	57	4	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
1598	67	4	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
5440	70	6	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
1599	73	8	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
1599	73	8	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
5441	77	10	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
5441	77	10	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
5442	80	10	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
5442	80	10	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
5443	82	12	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
5443	82	12	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
5444	87	12	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
5444	87	12	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
1600	103	4	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
5445	106	6	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
5445	106	6	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
1601	108	8	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
1602	111	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1602	111	8	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
5446	146	4	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
5446	146	4	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
5447	150	6	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
5447	150	6	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1603	156	6	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
5448	160	8	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
5448	160	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
5449	164	10	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
5449	164	10	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
5450	172	8	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
5450	172	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
5451	176	8	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
5451	176	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
5452	179	8	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
5452	179	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
5453	181	10	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
5453	181	10	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1689	60	4	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooLargeException	$ >= b
1689	60	4	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	a >= $
1690	63	4	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooSmallException	c < $
1690	63	4	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooSmallException	$ < a
1691	66	4	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooLargeException	$ > b
1691	66	4	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	c > $
1692	91	4	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.a
1692	91	4	TriangularDistribution.java	density	x	double	0	RET	$ < a
1693	94	4	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.c
1693	94	4	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.a <= x
1693	94	4	TriangularDistribution.java	density	x	double	0	RET	$ < c
1693	94	4	TriangularDistribution.java	density	x	double	0	RET	a <= $
1694	99	4	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x == $.c
1694	99	4	TriangularDistribution.java	density	x	double	0	RET	$ == c
1695	102	4	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x <= $.b
1695	102	4	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.c < x
1695	102	4	TriangularDistribution.java	density	x	double	0	RET	$ <= b
1695	102	4	TriangularDistribution.java	density	x	double	0	RET	c < $
1696	113	4	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.a
1696	113	4	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < a
1697	116	4	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.a <= x
1697	116	4	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.c
1697	116	4	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	a <= $
1697	116	4	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < c
1698	121	4	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x == $.c
1698	121	4	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ == c
1699	124	4	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.c < x
1699	124	4	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x <= $.b
1699	124	4	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	c < $
1699	124	4	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ <= b
1700	177	4	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0
1700	177	4	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1
1701	180	4	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
1702	183	4	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
1703	186	4	TriangularDistribution.java	inverseCumulativeProbability	THIS	TriangularDistribution	0	RET	p < ($.c - $.a) / ($.b - $.a)
1703	186	4	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ < (c - a) / (b - a)
3974	54	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
3974	54	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
3974	54	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	z.$.length == 0
3974	54	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
3974	54	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
3974	54	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	z	double[]	0	NoDataException	$.length == 0
3974	54	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$.length == 0
3974	54	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$[0].length == 0
3975	57	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
3975	57	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
3975	57	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	xLen != $.length
3976	60	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
3976	60	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
3976	60	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	xLen != $.length
3977	63	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
3977	63	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
3977	63	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3978	66	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdZ.$.length
3978	66	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdZ.length
3978	66	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3979	69	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
3979	69	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
3979	69	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3980	72	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdZ.$.length
3980	72	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdZ.length
3980	72	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3981	75	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdYdZ.$.length
3981	75	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdYdZ.length
3981	75	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3982	78	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d3FdXdYdZ.$.length
3982	78	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d3FdXdYdZ.length
3982	78	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
6581	91	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
6581	91	4	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
3983	92	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
3983	92	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
3983	92	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
3983	92	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3984	95	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
3984	95	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
3984	95	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
3984	95	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3985	98	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
3985	98	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
3985	98	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
3985	98	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3986	101	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i].length != yLen
3986	101	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$].length != yLen
3986	101	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdZ[i].length != $
3986	101	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3987	104	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
3987	104	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
3987	104	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
3987	104	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3988	107	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i].length != yLen
3988	107	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$].length != yLen
3988	107	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdZ[i].length != $
3988	107	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3989	110	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i].length != yLen
3989	110	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$].length != yLen
3989	110	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdYdZ[i].length != $
3989	110	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3990	113	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i].length != yLen
3990	113	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$].length != yLen
3990	113	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d3FdXdYdZ[i].length != $
3990	113	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
6582	117	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
6582	117	6	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
3991	118	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i][j].length != zLen
3991	118	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	f[i][$].length != zLen
3991	118	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$][j].length != zLen
3991	118	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	f[i][j].length != $
3991	118	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3992	121	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i][j].length != zLen
3992	121	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdX[i][$].length != zLen
3992	121	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$][j].length != zLen
3992	121	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdX[i][j].length != $
3992	121	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3993	124	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i][j].length != zLen
3993	124	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdY[i][$].length != zLen
3993	124	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$][j].length != zLen
3993	124	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdY[i][j].length != $
3993	124	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3994	127	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i][j].length != zLen
3994	127	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdZ[i][$].length != zLen
3994	127	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$][j].length != zLen
3994	127	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdZ[i][j].length != $
3994	127	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3995	130	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i][j].length != zLen
3995	130	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdY[i][$].length != zLen
3995	130	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$][j].length != zLen
3995	130	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdY[i][j].length != $
3995	130	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3996	133	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i][j].length != zLen
3996	133	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdZ[i][$].length != zLen
3996	133	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$][j].length != zLen
3996	133	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdZ[i][j].length != $
3996	133	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3997	136	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i][j].length != zLen
3997	136	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdYdZ[i][$].length != zLen
3997	136	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$][j].length != zLen
3997	136	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdYdZ[i][j].length != $
3997	136	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3998	139	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != zLen
3998	139	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d3FdXdYdZ[i][$].length != zLen
3998	139	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$][j].length != zLen
3998	139	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != $
3998	139	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
6583	143	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	k	int	0	NIL-FOR	$ < lastK
6583	143	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastK	int	0	NIL-FOR	k < $
3999	157	4	TricubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
4000	161	4	TricubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
4001	165	4	TricubicSplineInterpolatingFunction.java	value	k	int	0	OutOfRangeException	$ == -1
4002	179	4	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
4002	179	4	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
6584	183	4	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
6584	183	4	TricubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
4003	184	6	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
4003	184	6	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
4003	184	6	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
6585	198	4	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < sz
6585	198	4	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	i < $
6586	201	6	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < sz
6586	201	6	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	j < $
6587	226	4	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	i	int	0	NIL-FOR	$ < N
6588	227	6	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	j	int	0	NIL-FOR	$ < N
6589	228	8	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	k	int	0	NIL-FOR	$ < N
4004	242	4	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
4004	242	4	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
4005	245	4	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
4005	245	4	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
4006	248	4	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ < 0
4006	248	4	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ > 1
6590	261	4	TricubicSplineInterpolatingFunction.java	value	i	int	0	NIL-FOR	$ < N
6591	262	6	TricubicSplineInterpolatingFunction.java	value	j	int	0	NIL-FOR	$ < N
6592	263	8	TricubicSplineInterpolatingFunction.java	value	k	int	0	NIL-FOR	$ < N
3921	17	4	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3921	17	4	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3921	17	4	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	zval.$.length == 0
3921	17	4	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3921	17	4	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3921	17	4	TricubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3921	17	4	TricubicSplineInterpolator.java	interpolate	zval	double[]	0	NoDataException	$.length == 0
3921	17	4	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	NoDataException	$.length == 0
3922	20	4	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3922	20	4	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3922	20	4	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	xval.length != $.length
6505	31	4	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
6505	31	4	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3923	32	6	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3923	32	6	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3923	32	6	TricubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3923	32	6	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i].length != yLen
6506	35	6	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
6506	35	6	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
3924	36	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i][j].length != zLen
3924	36	8	TricubicSplineInterpolator.java	interpolate	j	int	0	DimensionMismatchException	fval[i][$].length != zLen
3924	36	8	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$][j].length != zLen
3924	36	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	DimensionMismatchException	fval[i][j].length != $
3924	36	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
6507	39	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
6507	39	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
6508	48	4	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
6508	48	4	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
6509	52	4	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
6509	52	4	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
6510	56	4	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
6510	56	4	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
6511	62	4	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
6511	62	4	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
6512	64	6	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
6512	64	6	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
6513	66	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
6513	66	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
6514	76	4	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
6514	76	4	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
6515	78	6	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
6515	78	6	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
6516	80	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
6516	80	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
6517	88	4	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
6517	88	4	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
6518	90	6	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
6518	90	6	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
6519	92	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
6519	92	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
6520	99	4	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
6520	99	4	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
6521	102	6	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
6521	102	6	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
6522	105	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
6522	105	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
462	29	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != standardDeviation.$.length
462	29	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != standardDeviation.length
462	29	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	DimensionMismatchException	mean.length != $.length
4510	53	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
4510	53	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
4510	53	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
2917	29	4	UniformCrossover.java	UniformCrossover	ratio	double	0	OutOfRangeException	$ < 0.0d
2917	29	4	UniformCrossover.java	UniformCrossover	ratio	double	0	OutOfRangeException	$ > 1.0d
2918	47	4	UniformCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2918	47	4	UniformCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2919	61	4	UniformCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
2919	61	4	UniformCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
6124	69	4	UniformCrossover.java	mate	index	int	0	NIL-FOR	$ < length
6124	69	4	UniformCrossover.java	mate	length	int	0	NIL-FOR	index < $
2920	70	6	UniformCrossover.java	mate	THIS	UniformCrossover	1	DEF	random.nextDouble() < $.ratio
2920	70	6	UniformCrossover.java	mate	random	RandomGenerator	1	DEF	$.nextDouble() < ratio
1788	46	4	UniformIntegerDistribution.java	UniformIntegerDistribution	lower	int	0	NumberIsTooLargeException	$ >= upper
1788	46	4	UniformIntegerDistribution.java	UniformIntegerDistribution	upper	int	0	NumberIsTooLargeException	lower >= $
1789	56	4	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1789	56	4	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1789	56	4	UniformIntegerDistribution.java	probability	x	int	0	RET	$ < lower
1789	56	4	UniformIntegerDistribution.java	probability	x	int	0	RET	$ > upper
1790	65	4	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1790	65	4	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ < lower
1791	68	4	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1791	68	4	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ > upper
1770	81	4	UniformRealDistribution.java	UniformRealDistribution	lower	double	0	NumberIsTooLargeException	$ >= upper
1770	81	4	UniformRealDistribution.java	UniformRealDistribution	upper	double	0	NumberIsTooLargeException	lower >= $
1771	91	4	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x < $.lower
1771	91	4	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x > $.upper
1771	91	4	UniformRealDistribution.java	density	x	double	0	RET	$ < lower
1771	91	4	UniformRealDistribution.java	density	x	double	0	RET	$ > upper
1772	100	4	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x <= $.lower
1772	100	4	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ <= lower
1773	103	4	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x >= $.upper
1773	103	4	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ >= upper
1774	109	4	UniformRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1774	109	4	UniformRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
4497	38	4	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
4497	38	4	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
4498	44	4	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
4498	44	4	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
2825	53	4	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	optimizer	BaseUnivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
2825	53	4	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	generator	RandomGenerator	0	NullArgumentException	$ == null
2826	56	4	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
2827	87	4	UnivariateMultiStartOptimizer.java	getOptima	THIS	UnivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
6040	105	4	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
6040	105	4	UnivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
2828	117	4	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
3043	62	6	UnivariateOptimizer.java	parseOptimizationData	THIS	UnivariateOptimizer	0	DEF	$.data instanceof SearchInterval
3044	69	6	UnivariateOptimizer.java	parseOptimizationData	THIS	UnivariateOptimizer	0	DEF	$.data instanceof UnivariateObjectiveFunction
3045	73	6	UnivariateOptimizer.java	parseOptimizationData	THIS	UnivariateOptimizer	0	DEF	$.data instanceof GoalType
4025	53	4	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NumberIsTooSmallException	xval.$.length < $.extend
4025	53	4	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NumberIsTooSmallException	$.length < extend
6603	61	4	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < xval.$.length
6603	61	4	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xval.length
6603	61	4	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NIL-FOR	i < $.length
6604	66	4	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < $.extend
6604	66	4	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < extend
4090	29	4	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
4091	46	4	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
4092	65	4	UnivariateSolverUtils.java	forceSide	THIS	UnivariateSolverUtils	0	RET	allowedSolution == $.AllowedSolution.ANY_SIDE
4092	65	4	UnivariateSolverUtils.java	forceSide	allowedSolution	AllowedSolution	0	RET	$ == AllowedSolution.ANY_SIDE
6650	74	4	UnivariateSolverUtils.java	forceSide	remainingEval	int	0	NIL-WHILE	$ > 0
4093	75	6	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ <= 0
4093	75	6	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ >= 0
4093	75	6	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ <= 0
4093	75	6	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ >= 0
4094	80	6	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ < fHi
4094	80	6	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo < $
4095	81	8	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ >= 0
4096	89	8	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ > fHi
4096	89	8	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo > $
4097	90	10	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ <= 0
4098	102	6	UnivariateSolverUtils.java	forceSide	changeLo	boolean	0	DEF	$
4099	107	6	UnivariateSolverUtils.java	forceSide	changeHi	boolean	0	DEF	$
4100	142	4	UnivariateSolverUtils.java	bracket	function	UnivariateFunction	0	NullArgumentException	$ == null
4101	145	4	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NotStrictlyPositiveException	$ <= 0
6651	154	4	UnivariateSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
6651	154	4	UnivariateSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
6651	154	4	UnivariateSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
6651	154	4	UnivariateSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
6651	154	4	UnivariateSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
6651	154	4	UnivariateSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
6651	154	4	UnivariateSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
6651	154	4	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
4102	162	4	UnivariateSolverUtils.java	bracket	fa	double	0	NoBracketingException	$ * fb > 0.0
4102	162	4	UnivariateSolverUtils.java	bracket	fb	double	0	NoBracketingException	fa * $ > 0.0
4103	185	4	UnivariateSolverUtils.java	isBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
4104	209	4	UnivariateSolverUtils.java	verifyInterval	lower	double	0	NumberIsTooLargeException	$ >= upper
4104	209	4	UnivariateSolverUtils.java	verifyInterval	upper	double	0	NumberIsTooLargeException	lower >= $
4105	233	4	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
4106	237	4	UnivariateSolverUtils.java	verifyBracketing	THIS	UnivariateSolverUtils	0	NoBracketingException	$.isBracketing(function,lower,upper)
4106	237	4	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NoBracketingException	isBracketing($,lower,upper)
4106	237	4	UnivariateSolverUtils.java	verifyBracketing	lower	double	0	NoBracketingException	isBracketing(function,$,upper)
4106	237	4	UnivariateSolverUtils.java	verifyBracketing	upper	double	0	NoBracketingException	isBracketing(function,lower,$)
4536	125	0	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
4536	125	0	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
4536	125	0	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
4537	139	0	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
4537	139	0	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
523	214	0	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
524	229	0	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
525	275	0	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution.getBinStats().size() == 0
525	275	0	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution == null
526	289	0	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
527	292	0	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str=$.filePointer.readLine()) == null
527	292	0	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($=filePointer.readLine()) == null
528	295	0	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str=$.filePointer.readLine()) == null
528	295	0	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($=filePointer.readLine()) == null
262	74	4	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
263	82	4	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
264	86	6	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
265	90	8	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
266	109	4	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
267	120	4	Variance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
268	135	4	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values,begin,length)
268	135	4	Variance.java	evaluate	values	double[]	0	DEF	test($,begin,length)
268	135	4	Variance.java	evaluate	begin	int	0	DEF	test(values,$,length)
268	135	4	Variance.java	evaluate	length	int	0	DEF	test(values,begin,$)
269	137	6	Variance.java	evaluate	length	int	1	DEF	$ == 1
270	141	8	Variance.java	evaluate	length	int	0	DEF	$ > 1
271	162	4	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values,weights,begin,length)
271	162	4	Variance.java	evaluate	values	double[]	0	DEF	test($,weights,begin,length)
271	162	4	Variance.java	evaluate	weights	double[]	0	DEF	test(values,$,begin,length)
271	162	4	Variance.java	evaluate	begin	int	0	DEF	test(values,weights,$,length)
271	162	4	Variance.java	evaluate	length	int	0	DEF	test(values,weights,begin,$)
272	164	6	Variance.java	evaluate	length	int	1	DEF	$ == 1
273	168	8	Variance.java	evaluate	length	int	0	DEF	$ > 1
274	199	4	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values,begin,length)
274	199	4	Variance.java	evaluate	values	double[]	0	DEF	test($,begin,length)
274	199	4	Variance.java	evaluate	begin	int	0	DEF	test(values,$,length)
274	199	4	Variance.java	evaluate	length	int	0	DEF	test(values,begin,$)
275	200	6	Variance.java	evaluate	length	int	1	DEF	$ == 1
276	204	8	Variance.java	evaluate	length	int	0	DEF	$ > 1
4404	208	10	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
4404	208	10	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
4404	208	10	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
277	214	10	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
278	248	4	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values,weights,begin,length)
278	248	4	Variance.java	evaluate	values	double[]	0	DEF	test($,weights,begin,length)
278	248	4	Variance.java	evaluate	weights	double[]	0	DEF	test(values,$,begin,length)
278	248	4	Variance.java	evaluate	begin	int	0	DEF	test(values,weights,$,length)
278	248	4	Variance.java	evaluate	length	int	0	DEF	test(values,weights,begin,$)
279	249	6	Variance.java	evaluate	length	int	1	DEF	$ == 1
280	253	8	Variance.java	evaluate	length	int	0	DEF	$ > 1
4405	257	10	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
4405	257	10	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
4405	257	10	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
4406	263	10	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
4406	263	10	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
4406	263	10	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
281	266	10	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
3900	172	4	Vector1D.java	normalize	s	double	0	MathArithmeticException	$ == 0
3901	273	4	Vector1D.java	equals	THIS	Vector1D	0	RET	$ == other
3901	273	4	Vector1D.java	equals	other	Object	0	RET	this == $
3902	276	4	Vector1D.java	equals	other	Object	0	RET	$ instanceof Vector1D
3903	278	6	Vector1D.java	equals	rhs	Vector1D	0	RET	$.isNaN()
3904	290	4	Vector1D.java	hashCode	THIS	Vector1D	0	RET	$.isNaN()
3896	74	4	Vector1DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
3897	84	4	Vector1DFormat.java	parse	coordinates	double[]	0	RET	$ == null
3713	62	4	Vector2D.java	Vector2D	THIS	Vector2D	0	DimensionMismatchException	v.$.length != 2
3713	62	4	Vector2D.java	Vector2D	v	double[]	0	DimensionMismatchException	$.length != 2
3714	209	4	Vector2D.java	normalize	s	double	0	MathArithmeticException	$ == 0
3715	314	4	Vector2D.java	equals	THIS	Vector2D	0	RET	$ == other
3715	314	4	Vector2D.java	equals	other	Object	0	RET	this == $
3716	317	4	Vector2D.java	equals	other	Object	0	RET	$ instanceof Vector2D
3717	319	6	Vector2D.java	equals	rhs	Vector2D	0	RET	$.isNaN()
3718	331	4	Vector2D.java	hashCode	THIS	Vector2D	0	RET	$.isNaN()
3711	76	4	Vector2DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
3712	86	4	Vector2DFormat.java	parse	coordinates	double[]	0	RET	$ == null
3801	95	4	Vector3D.java	Vector3D	THIS	Vector3D	0	DimensionMismatchException	v.$.length != 3
3801	95	4	Vector3D.java	Vector3D	v	double[]	0	DimensionMismatchException	$.length != 3
3802	282	4	Vector3D.java	normalize	s	double	0	MathArithmeticException	$ == 0
3803	294	4	Vector3D.java	orthogonal	threshold	double	0	MathArithmeticException	$ == 0
3804	297	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.FastMath.abs($.x) <= threshold
3804	297	4	Vector3D.java	orthogonal	threshold	double	1	RET	FastMath.abs(x) <= $
3805	302	6	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.FastMath.abs($.y) <= threshold
3805	302	6	Vector3D.java	orthogonal	threshold	double	0	RET	FastMath.abs(y) <= $
3806	319	4	Vector3D.java	angle	normProduct	double	0	MathArithmeticException	$ == 0
3807	324	4	Vector3D.java	angle	dot	double	0	RET	$ > threshold
3807	324	4	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
3807	324	4	Vector3D.java	angle	threshold	double	0	RET	dot > $
3807	324	4	Vector3D.java	angle	threshold	double	0	RET	dot < -$
3808	326	6	Vector3D.java	angle	dot	double	0	RET	$ >= 0
3809	363	4	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
3809	363	4	Vector3D.java	equals	other	Object	0	RET	this == $
3810	366	4	Vector3D.java	equals	other	Object	0	RET	$ instanceof Vector3D
3811	368	6	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
3812	380	4	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
3758	82	4	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
3759	95	4	Vector3DFormat.java	parse	coordinates	double[]	0	RET	$ == null
6480	155	4	VectorFormat.java	format	THIS	VectorFormat	0	NIL-FOR	i < coordinates.$.length
6480	155	4	VectorFormat.java	format	i	int	0	NIL-FOR	$ < coordinates.length
6480	155	4	VectorFormat.java	format	coordinates	double	0	NIL-FOR	i < $.length
3699	156	6	VectorFormat.java	format	i	int	0	DEF	$ > 0
3700	189	4	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	$.CompositeFormat.parseFixedstring(source,$.trimmedPrefix,pos)
3700	189	4	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($,trimmedPrefix,pos)
3700	189	4	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source,trimmedPrefix,$)
6481	192	4	VectorFormat.java	parseCoordinates	i	int	0	NIL-FOR	$ < dimension
6481	192	4	VectorFormat.java	parseCoordinates	dimension	int	0	NIL-FOR	i < $
3701	194	6	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	$.CompositeFormat.parseFixedstring(source,$.trimmedSeparator,pos)
3701	194	6	VectorFormat.java	parseCoordinates	i	int	0	RET	$ > 0
3701	194	6	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($,trimmedSeparator,pos)
3701	194	6	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source,trimmedSeparator,$)
3702	199	6	VectorFormat.java	parseCoordinates	c	Number	0	RET	$ == null
3703	206	4	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	$.CompositeFormat.parseFixedstring(source,$.trimmedSuffix,pos)
3703	206	4	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($,trimmedSuffix,pos)
3703	206	4	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source,trimmedSuffix,$)
228	50	4	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
228	50	4	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
4391	54	4	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
4391	54	4	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
4391	54	4	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
4392	56	6	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
4392	56	6	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
229	69	4	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
4393	72	6	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
4393	72	6	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
4394	73	8	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
4394	73	8	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
230	113	4	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$ == obj
230	113	4	VectorialCovariance.java	equals	obj	Object	0	RET	this == $
231	116	4	VectorialCovariance.java	equals	obj	Object	0	RET	$ instanceof VectorialCovariance
232	120	4	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.isBiasCorrected != other.$.isBiasCorrected
232	120	4	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	isBiasCorrected != $.isBiasCorrected
233	123	4	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.n != other.$.n
233	123	4	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	n != $.n
234	126	4	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.productsSums,other.$.productsSums)
234	126	4	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(productsSums,$.productsSums)
235	129	4	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.sums,other.$.sums)
235	129	4	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(sums,$.sums)
4396	25	4	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
4396	25	4	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
242	35	4	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
242	35	4	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
4397	38	4	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
4397	38	4	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
4397	38	4	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
4398	48	4	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
4398	48	4	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
4398	48	4	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
243	73	4	VectorialMean.java	equals	THIS	VectorialMean	0	RET	$ == obj
243	73	4	VectorialMean.java	equals	obj	Object	0	RET	this == $
244	76	4	VectorialMean.java	equals	obj	Object	0	RET	$ instanceof VectorialMean
245	80	4	VectorialMean.java	equals	THIS	VectorialMean	0	RET	Arrays.equals($.means,other.$.means)
245	80	4	VectorialMean.java	equals	other	VectorialMean	0	RET	Arrays.equals(means,$.means)
1847	85	4	WeibullDistribution.java	WeibullDistribution	alpha	double	0	NotStrictlyPositiveException	$ <= 0
1848	88	4	WeibullDistribution.java	WeibullDistribution	beta	double	0	NotStrictlyPositiveException	$ <= 0
1849	113	4	WeibullDistribution.java	density	x	double	0	RET	$ < 0
1850	126	4	WeibullDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
1851	139	4	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
1851	139	4	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
1852	143	6	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
1853	147	8	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
1854	169	4	WeibullDistribution.java	getNumericalMean	THIS	WeibullDistribution	0	DEF	$.numericalMeanIsCalculated
1855	188	4	WeibullDistribution.java	getNumericalVariance	THIS	WeibullDistribution	0	DEF	$.numericalVarianceIsCalculated
3061	28	4	Weight.java	Weight	weight	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
2837	28	4	Weight.java	Weight	weight	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
367	45	4	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
367	45	4	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
368	48	4	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	x.$.length == 0
368	48	4	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	y.$.length == 0
368	48	4	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
368	48	4	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
369	51	4	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	DimensionMismatchException	y.$.length != x.$.length
369	51	4	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	DimensionMismatchException	y.length != $.length
369	51	4	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	DimensionMismatchException	$.length != x.length
4436	63	4	WilcoxonSignedRankTest.java	calculateDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < x.$.length
4436	63	4	WilcoxonSignedRankTest.java	calculateDifferences	i	int	0	NIL-FOR	$ < x.length
4436	63	4	WilcoxonSignedRankTest.java	calculateDifferences	x	double[]	0	NIL-FOR	i < $.length
370	76	4	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NullArgumentException	$ == null
371	79	4	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NoDataException	z.$.length == 0
371	79	4	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NoDataException	$.length == 0
4437	83	4	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
4437	83	4	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	i	int	0	NIL-FOR	$ < z.length
4437	83	4	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NIL-FOR	i < $.length
4438	103	4	WilcoxonSignedRankTest.java	wilcoxonSignedRank	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
4438	103	4	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	NIL-FOR	$ < z.length
4438	103	4	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	NIL-FOR	i < $.length
372	104	6	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	DEF	z[$] > 0
372	104	6	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	DEF	$[i] > 0
4439	121	4	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	NIL-FOR	$ < m
4439	121	4	WilcoxonSignedRankTest.java	calculateExactPValue	m	int	0	NIL-FOR	i < $
4440	123	6	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	NIL-FOR	$ < N
373	124	8	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	DEF	((i >> $) & 1) == 1
373	124	8	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	DEF	(($ >> j) & 1) == 1
374	128	6	WilcoxonSignedRankTest.java	calculateExactPValue	rankSum	int	0	DEF	$ >= Wmax
374	128	6	WilcoxonSignedRankTest.java	calculateExactPValue	Wmax	double	0	DEF	rankSum >= $
375	163	4	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	0	NumberIsTooLargeException	$
376	166	4	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	1	RET	$
1860	60	4	ZipfDistribution.java	ZipfDistribution	numberOfElements	int	0	NotStrictlyPositiveException	$ <= 0
1861	63	4	ZipfDistribution.java	ZipfDistribution	exponent	double	0	NotStrictlyPositiveException	$ <= 0
1862	87	4	ZipfDistribution.java	probability	THIS	ZipfDistribution	0	RET	x > $.numberOfElements
1862	87	4	ZipfDistribution.java	probability	x	int	0	RET	$ <= 0
1862	87	4	ZipfDistribution.java	probability	x	int	0	RET	$ > numberOfElements
1863	96	4	ZipfDistribution.java	cumulativeProbability	x	int	1	RET	$ <= 0
1864	100	6	ZipfDistribution.java	cumulativeProbability	THIS	ZipfDistribution	0	RET	x >= $.numberOfElements
1864	100	6	ZipfDistribution.java	cumulativeProbability	x	int	0	RET	$ >= numberOfElements
1865	110	4	ZipfDistribution.java	getNumericalMean	THIS	ZipfDistribution	0	DEF	$.numericalMeanIsCalculated
1866	131	4	ZipfDistribution.java	getNumericalVariance	THIS	ZipfDistribution	0	DEF	$.numericalVarianceIsCalculated
5553	157	4	ZipfDistribution.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
