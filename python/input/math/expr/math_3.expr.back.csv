id	line	column	filename	methodname	varname	vartype	else	return	right
554	62	8	AVLTree.java	insert	element	T	0	DEF	$ != null
555	63	12	AVLTree.java	insert	THIS	AVLTree	1	DEF	$.top == null
556	82	8	AVLTree.java	delete	element	T	0	RET	$ != null
12420	83	12	AVLTree.java	delete	node	Node	0	NIL-FOR	$ != null
557	86	16	AVLTree.java	delete	THIS	AVLTree	1	RET	node.$.element == element
557	86	16	AVLTree.java	delete	node	Node	1	RET	$.element == element
557	86	16	AVLTree.java	delete	element	T	1	RET	node.element == $
558	89	23	AVLTree.java	delete	THIS	AVLTree	0	RET	node.$.element.compareTo(element) > 0
558	89	23	AVLTree.java	delete	node	Node	0	RET	$.element.compareTo(element) > 0
558	89	23	AVLTree.java	delete	element	T	0	RET	node.element.compareTo($) > 0
12421	153	8	AVLTree.java	getNotSmaller	node	Node	0	NIL-FOR	$ != null
559	154	12	AVLTree.java	getNotSmaller	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) < 0
559	154	12	AVLTree.java	getNotSmaller	node	Node	1	RET	$.element.compareTo(reference) < 0
559	154	12	AVLTree.java	getNotSmaller	reference	T	1	RET	node.element.compareTo($) < 0
560	155	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.right == null
560	155	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.right == null
561	161	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.left == null
561	161	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.left == null
12422	184	8	AVLTree.java	getNotLarger	node	Node	0	NIL-FOR	$ != null
562	185	12	AVLTree.java	getNotLarger	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) > 0
562	185	12	AVLTree.java	getNotLarger	node	Node	1	RET	$.element.compareTo(reference) > 0
562	185	12	AVLTree.java	getNotLarger	reference	T	1	RET	node.element.compareTo($) > 0
563	186	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.left == null
563	186	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.left == null
564	192	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.right == null
564	192	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.right == null
1527	77	8	AbstractFieldMatrix.java	AbstractFieldMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ <= 0
1528	81	8	AbstractFieldMatrix.java	AbstractFieldMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ <= 0
1529	99	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NullArgumentException	$ == null
1530	102	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1530	102	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$.length == 0
1531	105	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d[0].length == 0
1531	105	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$[0].length == 0
1532	121	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1532	121	8	AbstractFieldMatrix.java	extractField	d	T[]	0	NoDataException	$.length == 0
12920	184	8	AbstractFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
12920	184	8	AbstractFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
12921	185	12	AbstractFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
12921	185	12	AbstractFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
12922	202	8	AbstractFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
12922	202	8	AbstractFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
12923	203	12	AbstractFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
12923	203	12	AbstractFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
12924	217	8	AbstractFieldMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
12924	217	8	AbstractFieldMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
12925	218	12	AbstractFieldMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
12925	218	12	AbstractFieldMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
12926	231	8	AbstractFieldMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
12926	231	8	AbstractFieldMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
12927	232	12	AbstractFieldMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
12927	232	12	AbstractFieldMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
12928	250	8	AbstractFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
12928	250	8	AbstractFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
12929	251	12	AbstractFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
12929	251	12	AbstractFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
12930	253	16	AbstractFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
12930	253	16	AbstractFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1533	272	8	AbstractFieldMatrix.java	power	p	int	0	NotPositiveException	$ < 0
1534	276	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NonSquareMatrixException	$.isSquare()
1535	280	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 0
1536	284	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 1
12931	301	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
12931	301	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
12931	301	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1537	302	12	AbstractFieldMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1537	302	12	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
12932	313	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
12932	313	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
12932	313	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
12933	332	8	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	i < data.$.length
12933	332	8	AbstractFieldMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
12933	332	8	AbstractFieldMatrix.java	getData	data	T[][]	0	NIL-FOR	i < $.length
12934	334	12	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	j < dataI.$.length
12934	334	12	AbstractFieldMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
12934	334	12	AbstractFieldMatrix.java	getData	dataI	T[]	0	NIL-FOR	j < $.length
12935	350	8	AbstractFieldMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
12935	350	8	AbstractFieldMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
12936	351	12	AbstractFieldMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
12936	351	12	AbstractFieldMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1538	395	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1538	395	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1538	395	8	AbstractFieldMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1538	395	8	AbstractFieldMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1538	395	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1538	395	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1539	436	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
1539	436	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1539	436	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1539	436	8	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
1539	436	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
1539	436	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
12937	445	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	i < selectedRows.$.length
12937	445	8	AbstractFieldMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
12937	445	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
12938	447	12	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	j < selectedColumns.$.length
12938	447	12	AbstractFieldMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
12938	447	12	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1540	459	8	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	NullArgumentException	$ == null
1541	463	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1542	468	8	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
12939	472	8	AbstractFieldMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
12939	472	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1543	473	12	AbstractFieldMatrix.java	setSubMatrix	THIS	AbstractFieldMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1543	473	12	AbstractFieldMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1543	473	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1543	473	12	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[r].length != nCols
12940	483	8	AbstractFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
12940	483	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
12941	484	12	AbstractFieldMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
12941	484	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
12942	495	8	AbstractFieldMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
12942	495	8	AbstractFieldMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1544	508	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1544	508	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1544	508	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
12943	514	8	AbstractFieldMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
12943	514	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
12944	527	8	AbstractFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
12944	527	8	AbstractFieldMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1545	540	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1545	540	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1545	540	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
12945	546	8	AbstractFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
12945	546	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1546	563	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1546	563	8	AbstractFieldMatrix.java	setRowVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nCols
12946	567	8	AbstractFieldMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
12946	567	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1547	585	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1547	585	8	AbstractFieldMatrix.java	setColumnVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nRows
12947	589	8	AbstractFieldMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
12947	589	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
12948	600	8	AbstractFieldMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
12948	600	8	AbstractFieldMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1548	613	8	AbstractFieldMatrix.java	setRow	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1548	613	8	AbstractFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1548	613	8	AbstractFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
12949	616	8	AbstractFieldMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
12949	616	8	AbstractFieldMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
12950	627	8	AbstractFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
12950	627	8	AbstractFieldMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1549	640	8	AbstractFieldMatrix.java	setColumn	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1549	640	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1549	640	8	AbstractFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
12951	643	8	AbstractFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
12951	643	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1550	691	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1550	691	8	AbstractFieldMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
12952	695	8	AbstractFieldMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
12952	695	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1551	706	8	AbstractFieldMatrix.java	operate	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1551	706	8	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1551	706	8	AbstractFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
12953	711	8	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
12953	711	8	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
12954	713	12	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
12954	713	12	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1552	730	12	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1552	730	12	AbstractFieldMatrix.java	operate	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nCols
12955	735	12	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
12955	735	12	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
12956	737	16	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
12956	737	16	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1553	752	8	AbstractFieldMatrix.java	preMultiply	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1553	752	8	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1553	752	8	AbstractFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
12957	757	8	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
12957	757	8	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
12958	759	12	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
12958	759	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1554	776	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1554	776	12	AbstractFieldMatrix.java	preMultiply	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nRows
12959	781	12	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
12959	781	12	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
12960	783	16	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
12960	783	16	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
12961	798	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
12961	798	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
12962	799	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
12962	799	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
12963	813	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
12963	813	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
12964	814	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
12964	814	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
12965	829	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
12965	829	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
12966	830	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
12966	830	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
12967	847	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
12967	847	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
12968	848	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
12968	848	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
12969	860	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
12969	860	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
12970	861	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
12970	861	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
12971	875	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
12971	875	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
12972	876	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
12972	876	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
12973	891	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
12973	891	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
12974	892	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
12974	892	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
12975	909	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
12975	909	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
12976	910	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
12976	910	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
12977	956	8	AbstractFieldMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
12977	956	8	AbstractFieldMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
1555	957	12	AbstractFieldMatrix.java	toString	i	int	0	DEF	$ > 0
12978	961	12	AbstractFieldMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
12978	961	12	AbstractFieldMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
1556	962	16	AbstractFieldMatrix.java	toString	j	int	0	DEF	$ > 0
1557	984	8	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	object == $
1557	984	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ == this
1558	987	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ instanceof FieldMatrix<?> == false
1559	993	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getColumnDimension() != nCols
1559	993	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getRowDimension() != nRows
1559	993	8	AbstractFieldMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1559	993	8	AbstractFieldMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
12979	996	8	AbstractFieldMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
12979	996	8	AbstractFieldMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
12980	997	12	AbstractFieldMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
12980	997	12	AbstractFieldMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1560	998	16	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	$.getEntry(row, col).equals(m.getEntry(row, col))
1560	998	16	AbstractFieldMatrix.java	equals	col	int	0	RET	getEntry(row, $).equals(m.getEntry(row, $))
1560	998	16	AbstractFieldMatrix.java	equals	row	int	0	RET	getEntry($, col).equals(m.getEntry($, col))
1560	998	16	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	getEntry(row, col).equals($.getEntry(row, col))
12981	1018	8	AbstractFieldMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
12981	1018	8	AbstractFieldMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
12982	1019	12	AbstractFieldMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
12982	1019	12	AbstractFieldMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
1561	1033	8	AbstractFieldMatrix.java	checkRowIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1561	1033	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1561	1033	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= getRowDimension()
1562	1047	8	AbstractFieldMatrix.java	checkColumnIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1562	1047	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= getColumnDimension()
1562	1047	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1563	1070	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1563	1070	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1564	1077	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1564	1077	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1565	1095	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1565	1095	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1566	1099	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedColumns.$.length == 0
1566	1099	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedRows.$.length == 0
1566	1099	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1566	1099	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1567	1121	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1567	1121	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1567	1121	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1567	1121	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1568	1137	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1568	1137	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1568	1137	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1568	1137	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1569	1153	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	THIS	AbstractFieldMatrix	0	DimensionMismatchException	$.getColumnDimension() != m.getRowDimension()
1569	1153	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	m	FieldMatrix<T>	0	DimensionMismatchException	getColumnDimension() != $.getRowDimension()
1007	120	8	AbstractFormat.java	setDenominatorFormat	format	NumberFormat	0	NullArgumentException	$ == null
1008	132	8	AbstractFormat.java	setNumeratorFormat	format	NumberFormat	0	NullArgumentException	$ == null
1009	162	9	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
1009	162	9	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
12457	164	13	AbstractFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
12457	164	13	AbstractFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
12457	164	13	AbstractFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
1010	169	13	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
1010	169	13	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
1086	82	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	NumberIsTooLargeException	x1 < $
1086	82	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	NumberIsTooLargeException	$ < x0
1087	101	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1087	101	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1088	106	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
1089	109	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	1	RET	$ == Integer.MIN_VALUE
1090	110	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	THIS	AbstractIntegerDistribution	0	RET	$.checkedCumulativeProbability(lower) >= p
1090	110	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	RET	checkedCumulativeProbability($) >= p
1090	110	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	checkedCumulativeProbability(lower) >= $
1091	119	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
1092	129	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	0	DEF	$
1093	132	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ > lower
1093	132	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	DEF	tmp > $
1094	137	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ < upper
1094	137	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	upper	int	0	DEF	tmp < $
12467	158	8	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	NIL-WHILE	$ + 1 < upper
12467	158	8	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	NIL-WHILE	lower + 1 < $
1095	160	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ < lower
1095	160	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ > upper
1095	160	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	DEF	xm < $
1095	160	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	DEF	xm > $
1096	170	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	pm	double	1	DEF	$ >= p
1096	170	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	p	double	1	DEF	pm >= $
1097	203	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
12468	208	8	AbstractIntegerDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
12468	208	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1098	229	8	AbstractIntegerDistribution.java	checkedCumulativeProbability	result	double	0	MathInternalError	Double.isNaN($)
3526	232	8	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y0.$.length != equations.getDimension()
3526	232	8	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y0.length != $.getDimension()
3526	232	8	AbstractIntegrator.java	integrate	y0	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
3527	235	8	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y.$.length != equations.getDimension()
3527	235	8	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y.length != $.getDimension()
3527	235	8	AbstractIntegrator.java	integrate	y	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
3528	321	12	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.statesInitialized
3529	340	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.state.evaluateStep(interpolator)
3529	340	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	state.evaluateStep($)
14437	346	12	AbstractIntegrator.java	acceptStep	occuringEvents	SortedSet<EventState>	0	NIL-WHILE	$.isEmpty()
3530	380	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	RET	$.isLastStep
3531	390	16	AbstractIntegrator.java	acceptStep	needReset	boolean	0	RET	$
3532	406	16	AbstractIntegrator.java	acceptStep	currentEvent	EventState	0	DEF	$.evaluateStep(interpolator)
3532	406	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	currentEvent.evaluateStep($)
3533	451	8	AbstractIntegrator.java	sanityChecks	threshold	double	0	NumberIsTooSmallException	dt <= $
3533	451	8	AbstractIntegrator.java	sanityChecks	dt	double	0	NumberIsTooSmallException	$ <= threshold
14143	172	8	AbstractLeastSquaresOptimizer.java	computeSigma	i	int	0	NIL-FOR	$ < nC
14143	172	8	AbstractLeastSquaresOptimizer.java	computeSigma	nC	int	0	NIL-FOR	i < $
3100	217	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	objectiveValue.$.length != target.$.length
3100	217	8	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	DimensionMismatchException	objectiveValue.length != $.length
3100	217	8	AbstractLeastSquaresOptimizer.java	computeResiduals	objectiveValue	double[]	0	DimensionMismatchException	$.length != target.length
14144	223	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < target.$.length
14144	223	8	AbstractLeastSquaresOptimizer.java	computeResiduals	i	int	0	NIL-FOR	$ < target.length
14144	223	8	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	NIL-FOR	i < $.length
3101	249	12	AbstractLeastSquaresOptimizer.java	parseOptimizationData	THIS	AbstractLeastSquaresOptimizer	0	DEF	$.data instanceof Weight
3102	265	8	AbstractLeastSquaresOptimizer.java	squareRoot	m	RealMatrix	1	RET	$ instanceof DiagonalMatrix
14145	268	12	AbstractLeastSquaresOptimizer.java	squareRoot	i	int	0	NIL-FOR	$ < dim
14145	268	12	AbstractLeastSquaresOptimizer.java	squareRoot	dim	int	0	NIL-FOR	i < $
13425	172	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	i	int	0	NIL-FOR	$ < nC
13425	172	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nC	int	0	NIL-FOR	i < $
1952	177	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	dsValue.$.length != nR
1952	177	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	dsValue	DerivativeStructure[]	0	DimensionMismatchException	$.length != nR
1952	177	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nR	int	0	DimensionMismatchException	dsValue.length != $
13426	181	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	i	int	0	NIL-FOR	$ < nR
13426	181	8	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nR	int	0	NIL-FOR	i < $
13427	183	12	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	j	int	0	NIL-FOR	$ < nC
13427	183	12	AbstractLeastSquaresOptimizer.java	computeWeightedJacobian	nC	int	0	NIL-FOR	j < $
1953	372	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NumberIsTooSmallException	$.rows <= $.cols
13428	379	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < errors.$.length
13428	379	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
13428	379	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
13429	405	8	AbstractLeastSquaresOptimizer.java	computeSigma	i	int	0	NIL-FOR	$ < nC
13429	405	8	AbstractLeastSquaresOptimizer.java	computeSigma	nC	int	0	NIL-FOR	i < $
1954	542	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	objectiveValue.$.length != target.$.length
1954	542	8	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	DimensionMismatchException	objectiveValue.length != $.length
1954	542	8	AbstractLeastSquaresOptimizer.java	computeResiduals	objectiveValue	double[]	0	DimensionMismatchException	$.length != target.length
13430	548	8	AbstractLeastSquaresOptimizer.java	computeResiduals	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < target.$.length
13430	548	8	AbstractLeastSquaresOptimizer.java	computeResiduals	i	int	0	NIL-FOR	$ < target.length
13430	548	8	AbstractLeastSquaresOptimizer.java	computeResiduals	target	double[]	0	NIL-FOR	i < $.length
1955	562	8	AbstractLeastSquaresOptimizer.java	squareRoot	m	RealMatrix	1	RET	$ instanceof DiagonalMatrix
13431	565	12	AbstractLeastSquaresOptimizer.java	squareRoot	i	int	0	NIL-FOR	$ < dim
13431	565	12	AbstractLeastSquaresOptimizer.java	squareRoot	dim	int	0	NIL-FOR	i < $
1882	131	8	AbstractLinearOptimizer.java	incrementIterationsCounter	THIS	AbstractLinearOptimizer	0	MaxCountExceededException	++$.iterations > $.maxIterations
2600	116	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	NullArgumentException	$ == null
2601	119	8	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	data.$.length != nobs * (nvars + 1)
2601	119	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	DimensionMismatchException	$.length != nobs * (nvars + 1)
2601	119	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	DimensionMismatchException	data.length != $ * (nvars + 1)
2601	119	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	DimensionMismatchException	data.length != nobs * ($ + 1)
2602	122	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NumberIsTooSmallException	$ <= nvars
2602	122	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	NumberIsTooSmallException	nobs <= $
13833	129	8	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
13833	129	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
2603	131	12	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	$.noIntercept
13834	134	12	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < cols
13834	134	12	AbstractMultipleLinearRegression.java	newSampleData	cols	int	0	NIL-FOR	j < $
2604	150	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NullArgumentException	$ == null
2605	153	8	AbstractMultipleLinearRegression.java	newYSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	y.$.length == 0
2605	153	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NoDataException	$.length == 0
2606	185	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NullArgumentException	$ == null
2607	188	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
2607	188	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NoDataException	$.length == 0
2608	191	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	1	DEF	$.noIntercept
13835	196	12	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NIL-FOR	i < x.$.length
13835	196	12	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	NIL-FOR	$ < x.length
13835	196	12	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NIL-FOR	i < $.length
2609	197	16	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x[i].length != nVars
2609	197	16	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	DimensionMismatchException	x[$].length != nVars
2609	197	16	AbstractMultipleLinearRegression.java	newXSampleData	nVars	int	0	DimensionMismatchException	x[i].length != $
2609	197	16	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	DimensionMismatchException	$[i].length != nVars
2610	226	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NullArgumentException	$ == null
2610	226	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	NullArgumentException	$ == null
2611	229	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != y.$.length
2611	229	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DimensionMismatchException	$.length != y.length
2611	229	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	DimensionMismatchException	x.length != $.length
2612	232	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
2612	232	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NoDataException	$.length == 0
2613	235	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	MathIllegalArgumentException	x[0].length + 1 > x.$.length
2613	235	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	MathIllegalArgumentException	$[0].length + 1 > $.length
2614	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != covariance.$.length
2614	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	DimensionMismatchException	$.length != covariance.length
2614	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DimensionMismatchException	x.length != $.length
2615	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length != covariance[0].length
2615	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length > 0
2615	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length != $[0].length
2615	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length > 0
13836	293	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
13836	293	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
1249	61	8	AbstractMultivariateRealDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
12514	66	8	AbstractMultivariateRealDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
12514	66	8	AbstractMultivariateRealDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
3580	59	12	AbstractParameterizable.java	isSupported	THIS	AbstractParameterizable	0	RET	$.supportedName.equals(name)
3580	59	12	AbstractParameterizable.java	isSupported	name	String	0	RET	supportedName.equals($)
3581	73	8	AbstractParameterizable.java	complainIfNotSupported	THIS	AbstractParameterizable	0	UnknownParameterException	$.isSupported(name)
3581	73	8	AbstractParameterizable.java	complainIfNotSupported	name	String	0	UnknownParameterException	isSupported($)
14175	108	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
14175	108	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
14175	108	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
14176	110	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
3130	111	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
3131	115	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
3131	115	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
3131	115	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
3132	157	8	AbstractRandomGenerator.java	nextInt	n	int	0	NotStrictlyPositiveException	$ <= 0
3133	253	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
14177	261	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
3134	266	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
1278	112	8	AbstractRealDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1278	112	8	AbstractRealDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
1279	157	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1279	157	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1280	162	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
1281	167	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
1282	177	8	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	DEF	$ == Double.NEGATIVE_INFINITY
1283	178	12	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
12528	182	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(lowerBound) >= p
12528	182	16	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	cumulativeProbability($) >= p
12528	182	16	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(lowerBound) >= $
1284	188	8	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	DEF	$ == Double.POSITIVE_INFINITY
1285	189	12	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
12529	193	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(upperBound) < p
12529	193	16	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	cumulativeProbability($) < p
12529	193	16	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(upperBound) < $
1286	211	8	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.isSupportConnected()
1287	214	12	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	x - dx >= $.getSupportLowerBound()
1287	214	12	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	x - $ >= getSupportLowerBound()
1287	214	12	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	$ - dx >= getSupportLowerBound()
1288	216	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.cumulativeProbability(x - dx) == px
1288	216	16	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	0	RET	cumulativeProbability(x - dx) == $
1288	216	16	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	cumulativeProbability(x - $) == px
1288	216	16	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	cumulativeProbability($ - dx) == px
12530	218	20	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	NIL-WHILE	upperBound - lowerBound > $
12530	218	20	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	upperBound - $ > dx
12530	218	20	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	$ - lowerBound > dx
1289	220	24	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	1	DEF	$.cumulativeProbability(midPoint) < px
1289	220	24	AbstractRealDistribution.java	inverseCumulativeProbability	midPoint	double	1	DEF	cumulativeProbability($) < px
1289	220	24	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	1	DEF	cumulativeProbability(midPoint) < $
1290	269	8	AbstractRealDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
12531	274	8	AbstractRealDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
12531	274	8	AbstractRealDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1409	68	8	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ < 1
1410	71	8	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ < 1
12744	84	8	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
12744	84	8	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
12745	85	12	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
12745	85	12	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
12746	101	8	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
12746	101	8	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
12747	102	12	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
12747	102	12	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
12748	115	8	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
12748	115	8	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
12749	116	12	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
12749	116	12	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
12750	129	8	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
12750	129	8	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
12751	130	12	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
12751	130	12	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
12752	147	8	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
12752	147	8	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
12753	148	12	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
12753	148	12	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
12754	150	16	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
12754	150	16	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1411	169	8	AbstractRealMatrix.java	power	p	int	0	NotPositiveException	$ < 0
1412	173	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NonSquareMatrixException	$.isSquare()
1413	177	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 0
1414	181	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 1
12755	198	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
12755	198	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
12755	198	8	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1415	199	12	AbstractRealMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1415	199	12	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
1416	204	16	AbstractRealMatrix.java	power	maxI	int	0	DEF	$ == -1
12756	213	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ <= maxI
12756	213	8	AbstractRealMatrix.java	power	maxI	int	0	NIL-FOR	i <= $
12757	230	8	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
12757	230	8	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
12757	230	8	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
12758	232	12	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
12758	232	12	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
12758	232	12	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
12759	312	8	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
12759	312	8	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
12760	313	12	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
12760	313	12	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1417	351	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1417	351	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1417	351	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1417	351	8	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1417	351	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1417	351	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
12761	356	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < rowsCount
12761	356	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	NIL-FOR	i < $
1418	357	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[i].length < columnsCount
1418	357	12	AbstractRealMatrix.java	copySubMatrix	i	int	0	MatrixDimensionMismatchException	destination[$].length < columnsCount
1418	357	12	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[i].length < $
1418	357	12	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[i].length < columnsCount
1419	396	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1419	396	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < nCols
1419	396	8	AbstractRealMatrix.java	copySubMatrix	nCols	int	0	MatrixDimensionMismatchException	destination[0].length < $
1419	396	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1419	396	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
1419	396	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < nCols
12762	402	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
12762	402	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
12762	402	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
1420	404	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destinationI.$.length < nCols
1420	404	12	AbstractRealMatrix.java	copySubMatrix	destinationI	double[]	0	MatrixDimensionMismatchException	$.length < nCols
1420	404	12	AbstractRealMatrix.java	copySubMatrix	nCols	int	0	MatrixDimensionMismatchException	destinationI.length < $
12763	408	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
12763	408	12	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
12763	408	12	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1421	420	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1422	425	8	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
12764	429	8	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
12764	429	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1423	430	12	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1423	430	12	AbstractRealMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1423	430	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1423	430	12	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[r].length != nCols
12765	440	8	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
12765	440	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
12766	441	12	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
12766	441	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
12767	452	8	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
12767	452	8	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1424	464	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1424	464	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1424	464	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
12768	470	8	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
12768	470	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
12769	481	8	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
12769	481	8	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1425	493	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1425	493	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1425	493	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
12770	499	8	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
12770	499	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1426	515	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1426	515	8	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nCols
12771	519	8	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
12771	519	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1427	535	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1427	535	8	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nRows
12772	539	8	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
12772	539	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
12773	549	8	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
12773	549	8	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1428	561	8	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1428	561	8	AbstractRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1428	561	8	AbstractRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
12774	564	8	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
12774	564	8	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
12775	574	8	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
12775	574	8	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1429	586	8	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1429	586	8	AbstractRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1429	586	8	AbstractRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
12776	589	8	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
12776	589	8	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1430	651	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1430	651	8	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
12777	655	8	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
12777	655	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1431	666	8	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1431	666	8	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1431	666	8	AbstractRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
12778	671	8	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
12778	671	8	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
12779	673	12	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
12779	673	12	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1432	691	12	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1432	691	12	AbstractRealMatrix.java	operate	v	RealVector	0	DimensionMismatchException	$.getDimension() != nCols
12780	696	12	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
12780	696	12	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
12781	698	16	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
12781	698	16	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1433	713	8	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1433	713	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1433	713	8	AbstractRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
12782	718	8	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
12782	718	8	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
12783	720	12	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
12783	720	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1434	737	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1434	737	12	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DimensionMismatchException	$.getDimension() != nRows
12784	742	12	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
12784	742	12	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
12785	744	16	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
12785	744	16	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
12786	759	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
12786	759	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
12787	760	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
12787	760	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
12788	774	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
12788	774	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
12789	775	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
12789	775	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
12790	790	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
12790	790	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
12791	791	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
12791	791	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
12792	808	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
12792	808	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
12793	809	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
12793	809	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
12794	821	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
12794	821	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
12795	822	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
12795	822	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
12796	836	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
12796	836	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
12797	837	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
12797	837	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
12798	852	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
12798	852	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
12799	853	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
12799	853	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
12800	870	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
12800	870	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
12801	871	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
12801	871	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
1435	930	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
1435	930	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
1436	933	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
1437	939	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
1437	939	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
1437	939	8	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1437	939	8	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
12802	942	8	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
12802	942	8	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
12803	943	12	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
12803	943	12	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1438	944	16	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row, col) != m.getEntry(row, col)
1438	944	16	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row, $) != m.getEntry(row, $)
1438	944	16	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($, col) != m.getEntry($, col)
1438	944	16	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row, col) != $.getEntry(row, col)
12804	964	8	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
12804	964	8	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
12805	965	12	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
12805	965	12	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
592	92	8	AbstractRegion.java	AbstractRegion	boundary	Collection<SubHyperplane<S>>	1	DEF	$.size() == 0
593	143	8	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	1	DEF	hyperplanes.$.length == 0
593	143	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$.length == 0
593	143	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$ == null
594	154	16	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	0	DEF	node.insertCut($.hyperplane)
594	154	16	AbstractRegion.java	AbstractRegion	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
12429	181	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
12429	181	8	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	NIL-WHILE	$ == null
595	183	12	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	DEF	node.insertCut($.copySelf())
595	183	12	AbstractRegion.java	insertCuts	node	BSPTree<S>	0	DEF	$.insertCut(inserted.copySelf())
596	188	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	RET	$.hasNext()
12430	195	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
597	237	8	AbstractRegion.java	isEmpty	node	BSPTree<S>	0	RET	$.getCut() == null
598	266	8	AbstractRegion.java	checkPoint	cell	BSPTree<S>	0	RET	$.getCut() == null
599	280	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getAttribute() == null
599	280	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getCut() != null
599	280	8	AbstractRegion.java	getTree	includeBoundaryAttributes	boolean	0	DEF	$
600	412	8	AbstractRegion.java	getSize	THIS	AbstractRegion	0	DEF	$.barycenter == null
601	427	8	AbstractRegion.java	getBarycenter	THIS	AbstractRegion	0	DEF	$.barycenter == null
602	471	8	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	RET	$.getCut() == null
603	472	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getAttribute()
604	484	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
604	484	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
604	484	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
605	485	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
605	485	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
606	489	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
606	489	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
607	493	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
607	493	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
608	499	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
608	499	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
608	499	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
609	500	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
609	500	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
610	504	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
610	504	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
611	508	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
611	508	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
612	520	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
612	520	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
613	526	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().getHyperplane().sameOrientationAs(sub.getHyperplane())
613	526	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().getHyperplane().sameOrientationAs($.getHyperplane())
614	527	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
614	527	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
615	530	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
615	530	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
616	534	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
616	534	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
617	537	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
617	537	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
618	602	8	AbstractRegion.java	recurseIntersection	node	BSPTree<S>	0	RET	$.getCut() == null
619	616	12	AbstractRegion.java	recurseIntersection	plus	SubHyperplane<S>	1	RET	$ == null
620	618	19	AbstractRegion.java	recurseIntersection	minus	SubHyperplane<S>	1	RET	$ == null
621	652	8	AbstractRegion.java	recurseTransform	node	BSPTree<S>	0	RET	$.getCut() == null
622	659	8	AbstractRegion.java	recurseTransform	attribute	BoundaryAttribute<S>	0	DEF	$ != null
2804	98	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	NullArgumentException	$ == null
2805	101	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	ZeroException	steps.$.length == 0
2805	101	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$.length == 0
13878	109	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
13878	109	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < dimension
13879	111	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i + 1
13879	111	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $ + 1
2806	112	16	AbstractSimplex.java	AbstractSimplex	j	int	0	ZeroException	steps[$] == 0
2806	112	16	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$[j] == 0
2807	133	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NotStrictlyPositiveException	referenceSimplex.$.length <= 0
2807	133	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NotStrictlyPositiveException	$.length <= 0
13880	145	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < referenceSimplex.$.length
13880	145	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < referenceSimplex.length
13880	145	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NIL-FOR	i < $.length
2808	149	12	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	DimensionMismatchException	refI.$.length != $.dimension
2808	149	12	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DimensionMismatchException	$.length != dimension
13881	152	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i
13881	152	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $
13882	155	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
13882	155	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
2809	156	20	AbstractSimplex.java	AbstractSimplex	k	int	0	DEF	refI[$] != refJ[$]
2809	156	20	AbstractSimplex.java	AbstractSimplex	refJ	double[]	0	DEF	refI[k] != $[k]
2809	156	20	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DEF	$[k] != refJ[k]
2810	161	16	AbstractSimplex.java	AbstractSimplex	allEquals	boolean	0	MathIllegalArgumentException	$
2811	168	12	AbstractSimplex.java	AbstractSimplex	i	int	0	DEF	$ > 0
13883	170	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
13883	170	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
2812	217	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	DimensionMismatchException	$.dimension != startPoint.$.length
2812	217	8	AbstractSimplex.java	build	startPoint	double[]	0	DimensionMismatchException	dimension != $.length
13884	226	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
13884	226	8	AbstractSimplex.java	build	i	int	0	NIL-FOR	$ < dimension
13885	229	12	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
13885	229	12	AbstractSimplex.java	build	k	int	0	NIL-FOR	$ < dimension
13886	247	8	AbstractSimplex.java	evaluate	THIS	AbstractSimplex	0	NIL-FOR	i < $.simplex.$.length
13886	247	8	AbstractSimplex.java	evaluate	i	int	0	NIL-FOR	$ < simplex.length
2813	250	12	AbstractSimplex.java	evaluate	vertex	PointValuePair	0	DEF	Double.isNaN($.getValue())
13887	268	8	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
13887	268	8	AbstractSimplex.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < dimension
2814	269	12	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
2814	269	12	AbstractSimplex.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
2814	269	12	AbstractSimplex.java	replaceWorstPoint	pointValuePair	PointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
2814	269	12	AbstractSimplex.java	replaceWorstPoint	comparator	Comparator<PointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
2815	296	8	AbstractSimplex.java	getPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
2815	296	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ < 0
2815	296	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ >= simplex.length
2816	311	8	AbstractSimplex.java	setPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
2816	311	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ >= simplex.length
2816	311	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ < 0
2817	325	8	AbstractSimplex.java	setPoints	THIS	AbstractSimplex	0	DimensionMismatchException	points.$.length != $.simplex.$.length
2817	325	8	AbstractSimplex.java	setPoints	points	PointValuePair[]	0	DimensionMismatchException	$.length != simplex.length
13888	341	8	AbstractSimplex.java	createHypercubeSteps	i	int	0	NIL-FOR	$ < n
13888	341	8	AbstractSimplex.java	createHypercubeSteps	n	int	0	NIL-FOR	i < $
1966	100	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	NullArgumentException	$ == null
1967	103	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	ZeroException	steps.$.length == 0
1967	103	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$.length == 0
13447	111	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
13447	111	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < dimension
13448	113	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i + 1
13448	113	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $ + 1
1968	114	16	AbstractSimplex.java	AbstractSimplex	j	int	0	ZeroException	steps[$] == 0
1968	114	16	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$[j] == 0
1969	135	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NotStrictlyPositiveException	referenceSimplex.$.length <= 0
1969	135	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NotStrictlyPositiveException	$.length <= 0
13449	147	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < referenceSimplex.$.length
13449	147	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < referenceSimplex.length
13449	147	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NIL-FOR	i < $.length
1970	151	12	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	DimensionMismatchException	refI.$.length != $.dimension
1970	151	12	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DimensionMismatchException	$.length != dimension
13450	154	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i
13450	154	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $
13451	157	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
13451	157	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1971	158	20	AbstractSimplex.java	AbstractSimplex	k	int	0	DEF	refI[$] != refJ[$]
1971	158	20	AbstractSimplex.java	AbstractSimplex	refJ	double[]	0	DEF	refI[k] != $[k]
1971	158	20	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DEF	$[k] != refJ[k]
1972	163	16	AbstractSimplex.java	AbstractSimplex	allEquals	boolean	0	MathIllegalArgumentException	$
1973	170	12	AbstractSimplex.java	AbstractSimplex	i	int	0	DEF	$ > 0
13452	172	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
13452	172	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1974	219	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	DimensionMismatchException	$.dimension != startPoint.$.length
1974	219	8	AbstractSimplex.java	build	startPoint	double[]	0	DimensionMismatchException	dimension != $.length
13453	228	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
13453	228	8	AbstractSimplex.java	build	i	int	0	NIL-FOR	$ < dimension
13454	231	12	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
13454	231	12	AbstractSimplex.java	build	k	int	0	NIL-FOR	$ < dimension
13455	249	8	AbstractSimplex.java	evaluate	THIS	AbstractSimplex	0	NIL-FOR	i < $.simplex.$.length
13455	249	8	AbstractSimplex.java	evaluate	i	int	0	NIL-FOR	$ < simplex.length
1975	252	12	AbstractSimplex.java	evaluate	vertex	PointValuePair	0	DEF	Double.isNaN($.getValue())
13456	270	8	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
13456	270	8	AbstractSimplex.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < dimension
1976	271	12	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
1976	271	12	AbstractSimplex.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
1976	271	12	AbstractSimplex.java	replaceWorstPoint	pointValuePair	PointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
1976	271	12	AbstractSimplex.java	replaceWorstPoint	comparator	Comparator<PointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
1977	298	8	AbstractSimplex.java	getPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1977	298	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1977	298	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ < 0
1978	313	8	AbstractSimplex.java	setPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1978	313	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ < 0
1978	313	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1979	327	8	AbstractSimplex.java	setPoints	THIS	AbstractSimplex	0	DimensionMismatchException	points.$.length != $.simplex.$.length
1979	327	8	AbstractSimplex.java	setPoints	points	PointValuePair[]	0	DimensionMismatchException	$.length != simplex.length
13457	343	8	AbstractSimplex.java	createHypercubeSteps	i	int	0	NIL-FOR	$ < n
13457	343	8	AbstractSimplex.java	createHypercubeSteps	n	int	0	NIL-FOR	i < $
3390	181	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState == null
3390	181	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState == null
14303	194	6	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.interpolatedSecondaryState.$.length
14303	194	6	AbstractStepInterpolator.java	AbstractStepInterpolator	i	int	0	NIL-FOR	$ < interpolatedSecondaryState.length
3391	213	6	AbstractStepInterpolator.java	allocateInterpolatedArrays	dimension	int	1	DEF	$ < 0
3392	225	10	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	1	DEF	$.secondaryMappers == null
14304	231	14	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
14304	231	14	AbstractStepInterpolator.java	allocateInterpolatedArrays	i	int	0	NIL-FOR	$ < secondaryMappers.length
3393	407	6	AbstractStepInterpolator.java	evaluateCompleteInterpolatedState	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
3394	489	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
3395	520	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	1	DEF	$.currentState == null
3396	537	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	DEF	$.currentState != null
14305	538	8	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
14305	538	8	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
14306	582	4	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
14306	582	4	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < secondaryMappers.length
3397	587	4	AbstractStepInterpolator.java	readBaseExternal	dimension	int	1	DEF	$ < 0
14307	591	8	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
14307	591	8	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
2241	61	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	NullArgumentException	$ == null
2242	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
2242	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2242	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
2242	92	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
2243	131	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	NullArgumentException	$ == null
2244	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
2244	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
2244	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
2244	150	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
13664	152	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
13664	152	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
2245	167	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
2245	167	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
2246	170	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
648	125	8	AbstractSubHyperplane.java	recurseTransform	node	BSPTree<T>	0	RET	$.getCut() == null
649	132	8	AbstractSubHyperplane.java	recurseTransform	attribute	BoundaryAttribute<T>	0	DEF	$ != null
2364	85	8	AbstractUnivariateStatistic.java	setData	values	double[]	0	NullArgumentException	$ == null
2365	89	8	AbstractUnivariateStatistic.java	setData	begin	int	0	NotPositiveException	$ < 0
2366	93	8	AbstractUnivariateStatistic.java	setData	length	int	0	NotPositiveException	$ < 0
2367	97	8	AbstractUnivariateStatistic.java	setData	THIS	AbstractUnivariateStatistic	0	NumberIsTooLargeException	begin + length > values.$.length
2367	97	8	AbstractUnivariateStatistic.java	setData	values	double[]	0	NumberIsTooLargeException	begin + length > $.length
2367	97	8	AbstractUnivariateStatistic.java	setData	begin	int	0	NumberIsTooLargeException	$ + length > values.length
2367	97	8	AbstractUnivariateStatistic.java	setData	length	int	0	NumberIsTooLargeException	begin + $ > values.length
2368	186	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NullArgumentException	$ == null
2369	190	8	AbstractUnivariateStatistic.java	test	begin	int	0	NotPositiveException	$ < 0
2370	194	8	AbstractUnivariateStatistic.java	test	length	int	0	NotPositiveException	$ < 0
2371	198	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	NumberIsTooLargeException	begin + length > values.$.length
2371	198	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NumberIsTooLargeException	begin + length > $.length
2371	198	8	AbstractUnivariateStatistic.java	test	begin	int	0	NumberIsTooLargeException	$ + length > values.length
2371	198	8	AbstractUnivariateStatistic.java	test	length	int	0	NumberIsTooLargeException	begin + $ > values.length
2372	203	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
2372	203	8	AbstractUnivariateStatistic.java	test	allowEmpty	boolean	0	RET	$
2373	284	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NullArgumentException	$ == null
2373	284	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	NullArgumentException	$ == null
2374	288	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DimensionMismatchException	weights.$.length != values.$.length
2374	288	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DimensionMismatchException	weights.length != $.length
2374	288	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	DimensionMismatchException	$.length != values.length
13695	293	8	AbstractUnivariateStatistic.java	test	i	int	0	NIL-FOR	$ < begin + length
13695	293	8	AbstractUnivariateStatistic.java	test	begin	int	0	NIL-FOR	i < $ + length
13695	293	8	AbstractUnivariateStatistic.java	test	length	int	0	NIL-FOR	i < begin + $
2375	294	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isNaN(weights[$])
2375	294	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isNaN($[i])
2376	297	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isInfinite(weights[$])
2376	297	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
2377	300	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	weights[$] < 0
2377	300	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	$[i] < 0
2378	303	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	weights[$] > 0.0
2378	303	12	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	DEF	$
2378	303	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$[i] > 0.0
2379	308	8	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	MathIllegalArgumentException	$
14164	111	8	AbstractWell.java	AbstractWell	j	int	0	NIL-FOR	$ < r
14164	111	8	AbstractWell.java	AbstractWell	r	int	0	NIL-FOR	j < $
3113	154	8	AbstractWell.java	setSeed	seed	int[]	0	RET	$ == null
3114	161	8	AbstractWell.java	setSeed	THIS	AbstractWell	0	DEF	seed.$.length < $.v.$.length
3114	161	8	AbstractWell.java	setSeed	seed	int[]	0	DEF	$.length < v.length
14165	162	12	AbstractWell.java	setSeed	THIS	AbstractWell	0	NIL-FOR	i < $.v.$.length
14165	162	12	AbstractWell.java	setSeed	i	int	0	NIL-FOR	$ < v.length
14363	227	8	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-DOWHILE	$.isLastStep
14364	230	12	AdamsBashforthIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
14365	236	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < $.mainSetDimension
14365	236	16	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < mainSetDimension
3474	246	16	AdamsBashforthIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
14366	273	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
14366	273	12	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
14366	273	12	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
3475	287	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.isLastStep
3476	292	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.resetOccurred
3477	308	16	AdamsBashforthIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
14359	244	8	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-DOWHILE	$.isLastStep
14360	247	12	AdamsMoultonIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
14361	267	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
14361	267	16	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
14361	267	16	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
3470	276	16	AdamsMoultonIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
14362	290	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
14362	290	12	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
14362	290	12	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
3471	305	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.isLastStep
3472	310	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.resetOccurred
3473	327	16	AdamsMoultonIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
14424	167	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ > 0
14425	179	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ < nSteps
14425	179	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	nSteps	int	0	NIL-FOR	i < $
3524	193	12	AdamsNordsieckTransformer.java	getInstance	t	AdamsNordsieckTransformer	0	DEF	$ == null
14426	227	8	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < pData.$.length
14426	227	8	AdamsNordsieckTransformer.java	buildP	i	int	0	NIL-FOR	$ < pData.length
14426	227	8	AdamsNordsieckTransformer.java	buildP	pData	BigFraction[][]	0	NIL-FOR	i < $.length
14427	232	12	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < pI.$.length
14427	232	12	AdamsNordsieckTransformer.java	buildP	j	int	0	NIL-FOR	$ < pI.length
14427	232	12	AdamsNordsieckTransformer.java	buildP	pI	BigFraction[]	0	NIL-FOR	j < $.length
14428	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < y.$.length
14428	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	i	int	0	NIL-FOR	$ < y.length
14428	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	y	double[][]	0	NIL-FOR	i < $.length
14429	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < aI.$.length
14429	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < aI.length
14429	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	aI	double[]	0	NIL-FOR	j < $.length
14430	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < yI.$.length
14430	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < yI.length
14430	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	yI	double[]	0	NIL-FOR	j < $.length
14431	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < data.$.length
14431	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	i	int	0	NIL-FOR	$ < data.length
14431	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	data	double[][]	0	NIL-FOR	i < $.length
14432	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < dataI.$.length
14432	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	j	int	0	NIL-FOR	$ < dataI.length
14432	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	dataI	double[]	0	NIL-FOR	j < $.length
3509	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
3509	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
3509	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
3509	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
3510	225	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance.$.length != $.mainSetDimension
3510	225	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance != null
3511	229	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance != null
3511	229	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance.$.length != $.mainSetDimension
3512	253	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
14412	263	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
14412	263	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
14412	263	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
3513	272	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
14413	277	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
14413	277	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
14413	277	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
14414	284	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
14414	284	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
14414	284	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
3514	298	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
3514	298	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
3515	301	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
3515	301	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
3516	304	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
3517	325	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	NumberIsTooSmallException	FastMath.abs(h) < $.minStep
3517	325	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	NumberIsTooSmallException	FastMath.abs($) < minStep
3518	326	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
3519	334	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
3519	334	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
3520	336	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
3520	336	13	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
2382	307	8	AggregateSummaryStatistics.java	aggregate	statistics	Collection<SummaryStatistics>	0	RET	$ == null
2383	311	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	RET	$.hasNext()
13696	321	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	NIL-WHILE	$.hasNext()
2384	323	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMin() < min
2384	323	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	current.getMin() < $
2384	323	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	Double.isNaN($)
2385	326	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMax() > max
2385	326	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	current.getMax() > $
2385	326	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	Double.isNaN($)
2386	338	8	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 0
2387	340	15	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 1
3356	43	8	ArgUtils.java	flatten	array	Object[]	0	DEF	$ != null
3357	45	16	ArgUtils.java	flatten	THIS	ArgUtils	1	DEF	$.o instanceof Object[]
11	67	8	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
11	67	8	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
12	116	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	$ == k
12	116	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	n == $
12	116	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
13	119	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
13	119	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
13	119	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
14	123	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	k > $ / 2
14	123	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ > n / 2
15	133	8	ArithmeticUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 61
12327	136	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
12327	136	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
16	140	15	ArithmeticUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 66
12328	144	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
12328	144	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
12329	160	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
12329	160	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
17	197	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	$ == k
17	197	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	n == $
17	197	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 0
18	200	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	k == $ - 1
18	200	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 1
18	200	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == n - 1
19	203	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	k > $/2
19	203	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ > n/2
20	206	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	$ < 67
12330	211	8	ArithmeticUtils.java	binomialCoefficientDouble	i	int	0	NIL-FOR	$ <= k
12330	211	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	NIL-FOR	i <= $
21	242	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
21	242	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
21	242	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
22	245	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
22	245	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
22	245	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
23	253	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 67
24	261	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 1030
25	265	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	k > $ / 2
25	265	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ > n / 2
12331	275	8	ArithmeticUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
12331	275	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
12332	280	8	ArithmeticUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= k
12332	280	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= $
26	312	8	ArithmeticUtils.java	factorial	n	int	0	NotPositiveException	$ < 0
27	316	8	ArithmeticUtils.java	factorial	n	int	0	MathArithmeticException	$ > 20
28	336	8	ArithmeticUtils.java	factorialDouble	n	int	0	NotPositiveException	$ < 0
29	340	8	ArithmeticUtils.java	factorialDouble	n	int	0	RET	$ < 21
30	354	8	ArithmeticUtils.java	factorialLog	n	int	0	NotPositiveException	$ < 0
31	358	8	ArithmeticUtils.java	factorialLog	n	int	0	RET	$ < 21
12333	362	8	ArithmeticUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
12333	362	8	ArithmeticUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
32	401	8	ArithmeticUtils.java	gcd	a	int	0	MathArithmeticException:RET	$ == 0
32	401	8	ArithmeticUtils.java	gcd	b	int	0	MathArithmeticException:RET	$ == 0
33	403	12	ArithmeticUtils.java	gcd	a	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
33	403	12	ArithmeticUtils.java	gcd	b	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
34	414	8	ArithmeticUtils.java	gcd	a	int	0	DEF	$ < 0
35	415	12	ArithmeticUtils.java	gcd	a	int	1	DEF	Integer.MIN_VALUE == $
36	422	8	ArithmeticUtils.java	gcd	b	int	0	DEF	$ < 0
37	423	12	ArithmeticUtils.java	gcd	b	int	1	DEF	Integer.MIN_VALUE == $
38	430	8	ArithmeticUtils.java	gcd	useLong	boolean	0	MathArithmeticException:RET	$
39	431	12	ArithmeticUtils.java	gcd	al	long	0	MathArithmeticException	$ == bl
39	431	12	ArithmeticUtils.java	gcd	bl	long	0	MathArithmeticException	al == $
40	438	12	ArithmeticUtils.java	gcd	al	long	0	MathArithmeticException:RET	$ == 0
41	439	16	ArithmeticUtils.java	gcd	bl	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
42	477	8	ArithmeticUtils.java	gcdPositive	a	int	1	RET	$ == 0
43	480	13	ArithmeticUtils.java	gcdPositive	b	int	0	RET	$ == 0
12334	497	8	ArithmeticUtils.java	gcdPositive	a	int	0	NIL-WHILE	$ != b
12334	497	8	ArithmeticUtils.java	gcdPositive	b	int	0	NIL-WHILE	a != $
44	542	8	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException:RET	$ == 0
44	542	8	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException:RET	$ == 0
45	543	12	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException	$ == Long.MIN_VALUE
45	543	12	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException	$ == Long.MIN_VALUE
46	554	8	ArithmeticUtils.java	gcd	u	long	0	DEF	$ > 0
47	557	8	ArithmeticUtils.java	gcd	v	long	0	DEF	$ > 0
12335	562	8	ArithmeticUtils.java	gcd	u	long	0	NIL-WHILE	($ & 1) == 0
12335	562	8	ArithmeticUtils.java	gcd	v	long	0	NIL-WHILE	($ & 1) == 0
12335	562	8	ArithmeticUtils.java	gcd	k	int	0	NIL-WHILE	$ < 63
48	568	8	ArithmeticUtils.java	gcd	k	int	0	MathArithmeticException	$ == 63
12336	577	8	ArithmeticUtils.java	gcd	t	long	0	NIL-DOWHILE	$ != 0
12337	580	12	ArithmeticUtils.java	gcd	t	long	0	NIL-WHILE	($ & 1) == 0
49	584	12	ArithmeticUtils.java	gcd	t	long	1	DEF	$ > 0
50	620	8	ArithmeticUtils.java	lcm	a	int	0	RET	$ == 0
50	620	8	ArithmeticUtils.java	lcm	b	int	0	RET	$ == 0
51	624	8	ArithmeticUtils.java	lcm	lcm	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
52	654	8	ArithmeticUtils.java	lcm	a	long	0	RET	$ == 0
52	654	8	ArithmeticUtils.java	lcm	b	long	0	RET	$ == 0
53	658	8	ArithmeticUtils.java	lcm	lcm	long	0	MathArithmeticException	$ == Long.MIN_VALUE
54	677	8	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
54	677	8	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
55	695	8	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ > b
55	695	8	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a > $
56	699	12	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ < 0
57	700	16	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ < 0
58	702	20	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
58	702	20	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
59	707	23	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ > 0
60	709	20	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
60	709	20	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
61	719	19	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ > 0
62	724	16	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
62	724	16	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
63	749	8	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
63	749	8	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
64	767	8	ArithmeticUtils.java	subAndCheck	b	long	1	MathArithmeticException	$ == Long.MIN_VALUE
65	768	12	ArithmeticUtils.java	subAndCheck	a	long	1	DEF	$ < 0
66	789	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
12338	795	8	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
67	796	12	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
68	815	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
12339	821	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
69	822	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
70	841	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
12340	847	8	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
71	848	12	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
72	867	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
12341	873	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
73	874	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
74	893	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
75	909	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
12342	915	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
76	916	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
77	936	8	ArithmeticUtils.java	pow	e	BigInteger	0	NotPositiveException	$.compareTo(BigInteger.ZERO) < 0
12343	942	8	ArithmeticUtils.java	pow	e	BigInteger	0	NIL-WHILE	BigInteger.ZERO.equals($)
78	943	12	ArithmeticUtils.java	pow	e	BigInteger	0	DEF	$.testBit(0)
79	974	8	ArithmeticUtils.java	stirlingS2	k	int	0	NotPositiveException	$ < 0
80	977	8	ArithmeticUtils.java	stirlingS2	n	int	0	NumberIsTooLargeException	k > $
80	977	8	ArithmeticUtils.java	stirlingS2	k	int	0	NumberIsTooLargeException	$ > n
81	983	8	ArithmeticUtils.java	stirlingS2	stirlingS2	long[][]	0	DEF	$ == null
12344	992	12	ArithmeticUtils.java	stirlingS2	THIS	ArithmeticUtils	0	NIL-FOR	i < stirlingS2.$.length
12344	992	12	ArithmeticUtils.java	stirlingS2	i	int	0	NIL-FOR	$ < stirlingS2.length
12344	992	12	ArithmeticUtils.java	stirlingS2	stirlingS2	long[][]	0	NIL-FOR	i < $.length
12345	997	16	ArithmeticUtils.java	stirlingS2	j	int	0	NIL-FOR	$ < i
12345	997	16	ArithmeticUtils.java	stirlingS2	i	int	0	NIL-FOR	j < $
82	1007	8	ArithmeticUtils.java	stirlingS2	THIS	ArithmeticUtils	1	RET	n < stirlingS2.$.length
82	1007	8	ArithmeticUtils.java	stirlingS2	stirlingS2	long[][]	1	RET	n < $.length
82	1007	8	ArithmeticUtils.java	stirlingS2	n	int	1	RET	$ < stirlingS2.length
83	1012	12	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == 0
84	1014	19	ArithmeticUtils.java	stirlingS2	n	int	1	RET	k == $
84	1014	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == 1
84	1014	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == n
85	1016	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == 2
86	1018	19	ArithmeticUtils.java	stirlingS2	n	int	1	RET	k == $ - 1
86	1018	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == n - 1
12346	1024	16	ArithmeticUtils.java	stirlingS2	j	int	0	NIL-FOR	$ <= k
12346	1024	16	ArithmeticUtils.java	stirlingS2	k	int	0	NIL-FOR	j <= $
87	1027	20	ArithmeticUtils.java	stirlingS2	sum	long	0	MathArithmeticException	$ < 0
88	1052	8	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ > b
88	1052	8	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a > $
89	1058	12	ArithmeticUtils.java	addAndCheck	a	long	1	MathArithmeticException	$ < 0
90	1059	16	ArithmeticUtils.java	addAndCheck	b	long	1	MathArithmeticException	$ < 0
91	1061	20	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
91	1061	20	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
92	1075	16	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
92	1075	16	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
93	1094	8	ArithmeticUtils.java	checkBinomial	n	int	0	NumberIsTooLargeException	$ < k
93	1094	8	ArithmeticUtils.java	checkBinomial	k	int	0	NumberIsTooLargeException	n < $
94	1098	8	ArithmeticUtils.java	checkBinomial	n	int	0	NotPositiveException	$ < 0
1510	157	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	copyArray	boolean	1	DEF	$
1511	162	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NoDataException	$ == 0
1512	166	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
12883	169	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	NIL-FOR	$ < nRows
12883	169	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	r < $
1513	170	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	d[r].length != nCols
1513	170	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1513	170	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1513	170	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	DimensionMismatchException	$[r].length != nCols
12884	202	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	row	int	0	NIL-FOR	$ < nRows
12884	202	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	row < $
12885	237	8	Array2DRowFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
12885	237	8	Array2DRowFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
12886	241	12	Array2DRowFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
12886	241	12	Array2DRowFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
12887	265	8	Array2DRowFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
12887	265	8	Array2DRowFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
12888	269	12	Array2DRowFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
12888	269	12	Array2DRowFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
12889	295	8	Array2DRowFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
12889	295	8	Array2DRowFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
12890	298	12	Array2DRowFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
12890	298	12	Array2DRowFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
12891	300	16	Array2DRowFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
12891	300	16	Array2DRowFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1514	333	8	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	1	DimensionMismatchException	$.data == null
1515	334	12	Array2DRowFieldMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1516	337	12	Array2DRowFieldMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1517	341	12	Array2DRowFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1518	346	12	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
12892	350	12	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	NIL-FOR	i < $.data.$.length
12892	350	12	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1519	351	16	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1519	351	16	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1519	351	16	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1519	351	16	Array2DRowFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[i].length != nCols
1520	419	8	Array2DRowFieldMatrix.java	operate	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1520	419	8	Array2DRowFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1520	419	8	Array2DRowFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
12893	423	8	Array2DRowFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
12893	423	8	Array2DRowFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
12894	426	12	Array2DRowFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
12894	426	12	Array2DRowFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1521	439	8	Array2DRowFieldMatrix.java	preMultiply	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1521	439	8	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1521	439	8	Array2DRowFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
12895	444	8	Array2DRowFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
12895	444	8	Array2DRowFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
12896	446	12	Array2DRowFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
12896	446	12	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
12897	461	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
12897	461	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
12898	463	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
12898	463	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
12899	476	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
12899	476	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
12900	478	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
12900	478	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
12901	494	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
12901	494	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
12902	496	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
12902	496	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
12903	512	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
12903	512	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
12904	514	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
12904	514	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
12905	527	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
12905	527	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
12906	528	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
12906	528	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
12907	542	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
12907	542	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
12908	543	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
12908	543	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
12909	559	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
12909	559	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
12910	560	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
12910	560	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
12911	577	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
12911	577	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
12912	578	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
12912	578	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
12913	594	8	Array2DRowFieldMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
12913	594	8	Array2DRowFieldMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1693	102	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	copyArray	boolean	1	DEF	$
1694	105	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	NullArgumentException	$ == null
1695	109	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NoDataException	$ == 0
1696	113	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	NoDataException	$ == 0
13186	116	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	NIL-FOR	$ < nRows
13186	116	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	r < $
1697	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	d[r].length != nCols
1697	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1697	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1697	117	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	DimensionMismatchException	$[r].length != nCols
13187	135	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	row	int	0	NIL-FOR	$ < nRows
13187	135	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	row < $
13188	170	8	Array2DRowRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
13188	170	8	Array2DRowRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
13189	174	12	Array2DRowRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
13189	174	12	Array2DRowRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
13190	197	8	Array2DRowRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
13190	197	8	Array2DRowRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
13191	201	12	Array2DRowRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
13191	201	12	Array2DRowRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
13192	231	8	Array2DRowRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
13192	231	8	Array2DRowRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
13193	234	12	Array2DRowRealMatrix.java	multiply	mRow	int	0	NIL-FOR	$ < nSum
13193	234	12	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	mRow < $
13194	238	12	Array2DRowRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
13194	238	12	Array2DRowRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
13195	241	16	Array2DRowRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
13195	241	16	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1698	272	8	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	1	DimensionMismatchException	$.data == null
1699	273	12	Array2DRowRealMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1700	276	12	Array2DRowRealMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1701	281	12	Array2DRowRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1702	286	12	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
13196	290	12	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	NIL-FOR	i < $.data.$.length
13196	290	12	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1703	291	16	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1703	291	16	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1703	291	16	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1703	291	16	Array2DRowRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[i].length != nCols
1704	354	8	Array2DRowRealMatrix.java	operate	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1704	354	8	Array2DRowRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1704	354	8	Array2DRowRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
13197	358	8	Array2DRowRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
13197	358	8	Array2DRowRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
13198	361	12	Array2DRowRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
13198	361	12	Array2DRowRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1705	375	8	Array2DRowRealMatrix.java	preMultiply	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1705	375	8	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1705	375	8	Array2DRowRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
13199	380	8	Array2DRowRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
13199	380	8	Array2DRowRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
13200	382	12	Array2DRowRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
13200	382	12	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
13201	398	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
13201	398	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
13202	400	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
13202	400	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
13203	413	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
13203	413	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
13204	415	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
13204	415	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
13205	431	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
13205	431	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
13206	433	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
13206	433	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
13207	449	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
13207	449	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
13208	451	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
13208	451	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
13209	464	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
13209	464	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
13210	465	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
13210	465	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
13211	479	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
13211	479	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
13212	480	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
13212	480	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
13213	496	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
13213	496	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
13214	497	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
13214	497	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
13215	514	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
13215	514	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
13216	515	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
13216	515	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
13217	531	8	Array2DRowRealMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
13217	531	8	Array2DRowRealMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1795	149	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	d.$.length == 0
1795	149	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	ZeroException	$.length == 0
1796	191	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1796	191	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1796	191	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1796	191	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
1797	213	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1797	213	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1797	213	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1797	213	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
13311	232	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13311	232	8	ArrayFieldVector.java	ArrayFieldVector	i	int	0	NIL-FOR	$ < data.length
1798	394	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1798	394	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1798	394	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
1799	418	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1799	418	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1799	418	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
13312	445	12	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13312	445	12	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
13313	463	8	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13313	463	8	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
13314	477	12	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13314	477	12	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
13315	495	8	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13315	495	8	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
13316	504	8	ArrayFieldVector.java	mapAdd	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13316	504	8	ArrayFieldVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
13317	512	8	ArrayFieldVector.java	mapAddToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13317	512	8	ArrayFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
13318	521	8	ArrayFieldVector.java	mapSubtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13318	521	8	ArrayFieldVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
13319	529	8	ArrayFieldVector.java	mapSubtractToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13319	529	8	ArrayFieldVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
13320	538	8	ArrayFieldVector.java	mapMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13320	538	8	ArrayFieldVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
13321	546	8	ArrayFieldVector.java	mapMultiplyToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13321	546	8	ArrayFieldVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
13322	557	8	ArrayFieldVector.java	mapDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13322	557	8	ArrayFieldVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
13323	567	8	ArrayFieldVector.java	mapDivideToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13323	567	8	ArrayFieldVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
13324	577	8	ArrayFieldVector.java	mapInv	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13324	577	8	ArrayFieldVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
13325	590	8	ArrayFieldVector.java	mapInvToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13325	590	8	ArrayFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
13326	608	12	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13326	608	12	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
13327	626	8	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13327	626	8	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
13328	640	12	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13328	640	12	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
13329	663	8	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13329	663	8	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
13330	695	12	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13330	695	12	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
13331	713	8	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13331	713	8	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
13332	745	12	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
13332	745	12	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
13333	746	16	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
13333	746	16	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
13334	763	8	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
13334	763	8	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
13335	764	12	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
13335	764	12	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1800	810	8	ArrayFieldVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
13336	838	16	ArrayFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
13336	838	16	ArrayFieldVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
13336	838	16	ArrayFieldVector.java	setSubVector	v	FieldVector<T>	0	NIL-FOR	i < index + $.getDimension()
1801	894	8	ArrayFieldVector.java	checkVectorDimensions	THIS	ArrayFieldVector	0	DimensionMismatchException	$.data.$.length != n
1801	894	8	ArrayFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1802	908	8	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$ == other
1802	908	8	ArrayFieldVector.java	equals	other	Object	0	RET	this == $
1803	911	8	ArrayFieldVector.java	equals	other	Object	0	RET	$ == null
1804	918	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data.$.length != rhs.getDimension()
1804	918	12	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data.length != $.getDimension()
13337	922	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
13337	922	12	ArrayFieldVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1805	923	16	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data[i].equals(rhs.getEntry(i))
1805	923	16	ArrayFieldVector.java	equals	i	int	0	RET	data[$].equals(rhs.getEntry($))
1805	923	16	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data[i].equals($.getEntry(i))
1806	955	8	ArrayFieldVector.java	checkIndex	THIS	ArrayFieldVector	0	OutOfRangeException	index >= $.getDimension()
1806	955	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1806	955	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1365	105	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1366	123	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1367	126	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1367	126	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NumberIsTooLargeException	$.length < pos + size
1367	126	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1367	126	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
12681	140	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < d.$.length
12681	140	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < d.length
12681	140	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NIL-FOR	i < $.length
1368	157	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NullArgumentException	$ == null
1369	160	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1369	160	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NumberIsTooLargeException	$.length < pos + size
1369	160	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1369	160	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
12682	164	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < pos + size
12682	164	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NIL-FOR	i < $ + size
12682	164	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NIL-FOR	i < pos + $
1370	176	8	ArrayRealVector.java	ArrayRealVector	v	RealVector	0	NullArgumentException	$ == null
12683	180	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
12683	180	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < data.length
12684	227	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l2
12684	227	8	ArrayRealVector.java	ArrayRealVector	l2	int	0	NIL-FOR	i < $
12685	241	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l1
12685	241	8	ArrayRealVector.java	ArrayRealVector	l1	int	0	NIL-FOR	i < $
1371	296	8	ArrayRealVector.java	add	v	RealVector	1	RET	$ instanceof ArrayRealVector
12686	302	12	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < dim
12686	302	12	ArrayRealVector.java	add	dim	int	0	NIL-FOR	i < $
12687	310	12	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1372	322	8	ArrayRealVector.java	subtract	v	RealVector	1	RET	$ instanceof ArrayRealVector
12688	328	12	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < dim
12688	328	12	ArrayRealVector.java	subtract	dim	int	0	NIL-FOR	i < $
12689	336	12	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
12690	353	8	ArrayRealVector.java	mapToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
12690	353	8	ArrayRealVector.java	mapToSelf	i	int	0	NIL-FOR	$ < data.length
12691	362	8	ArrayRealVector.java	mapAddToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
12691	362	8	ArrayRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
12692	371	8	ArrayRealVector.java	mapSubtractToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
12692	371	8	ArrayRealVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
12693	380	8	ArrayRealVector.java	mapMultiplyToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
12693	380	8	ArrayRealVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
12694	389	8	ArrayRealVector.java	mapDivideToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
12694	389	8	ArrayRealVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
1373	399	8	ArrayRealVector.java	ebeMultiply	v	RealVector	1	RET	$ instanceof ArrayRealVector
12695	405	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < dim
12695	405	12	ArrayRealVector.java	ebeMultiply	dim	int	0	NIL-FOR	i < $
12696	412	12	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
12696	412	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
1374	423	8	ArrayRealVector.java	ebeDivide	v	RealVector	1	RET	$ instanceof ArrayRealVector
12697	429	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < dim
12697	429	12	ArrayRealVector.java	ebeDivide	dim	int	0	NIL-FOR	i < $
12698	436	12	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
12698	436	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
1375	456	8	ArrayRealVector.java	dotProduct	v	RealVector	0	RET	$ instanceof ArrayRealVector
12699	460	12	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
12699	460	12	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
1376	501	8	ArrayRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
12700	505	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
12700	505	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
12701	513	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
12701	513	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
1377	525	8	ArrayRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof ArrayRealVector
12702	529	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
12702	529	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
12703	537	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
12703	537	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
1378	549	8	ArrayRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
12704	553	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
12704	553	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
12705	561	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
12705	561	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
1379	572	8	ArrayRealVector.java	outerProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
12706	577	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
12706	577	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
12707	578	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
12707	578	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
12708	587	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
12708	587	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
12709	588	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
12709	588	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1380	646	8	ArrayRealVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
1381	685	8	ArrayRealVector.java	setSubVector	v	RealVector	1	DEF	$ instanceof ArrayRealVector
12710	689	16	ArrayRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
12710	689	16	ArrayRealVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
12710	689	16	ArrayRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
1382	758	8	ArrayRealVector.java	checkVectorDimensions	THIS	ArrayRealVector	0	DimensionMismatchException	$.data.$.length != n
1382	758	8	ArrayRealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1383	772	12	ArrayRealVector.java	isNaN	THIS	ArrayRealVector	0	RET	Double.isNaN($.v)
1384	788	8	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	$.isNaN()
1385	793	12	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	Double.isInfinite($.v)
1386	804	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$ == other
1386	804	8	ArrayRealVector.java	equals	other	Object	0	RET	this == $
1387	808	8	ArrayRealVector.java	equals	other	Object	0	RET	$ instanceof RealVector
1388	813	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data.$.length != rhs.getDimension()
1388	813	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
1389	817	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	$.isNaN()
12711	821	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
12711	821	8	ArrayRealVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1390	822	12	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data[i] != rhs.getEntry(i)
1390	822	12	ArrayRealVector.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
1390	822	12	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
1391	834	8	ArrayRealVector.java	hashCode	THIS	ArrayRealVector	0	RET	$.isNaN()
1392	851	8	ArrayRealVector.java	combineToSelf	y	RealVector	1	DEF	$ instanceof ArrayRealVector
12712	854	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
12712	854	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
12713	859	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
12713	859	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
12714	870	8	ArrayRealVector.java	walkInDefaultOrder	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
12714	870	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < data.length
12715	883	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
12715	883	8	ArrayRealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
12716	915	8	ArrayRealVector.java	walkInDefaultOrder	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
12716	915	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < data.length
12717	928	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
12717	928	8	ArrayRealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
13939	295	8	BOBYQAOptimizer.java	bobyqa	j	int	0	NIL-FOR	$ < n
13939	295	8	BOBYQAOptimizer.java	bobyqa	n	int	0	NIL-FOR	j < $
2858	299	12	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= -$.initialTrustRegionRadius
2858	299	12	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= -initialTrustRegionRadius
2859	300	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= ZERO
2859	300	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= ZERO
2860	311	19	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(j) <= $.initialTrustRegionRadius
2860	311	19	BOBYQAOptimizer.java	bobyqa	j	int	0	DEF	upperDifference.getEntry($) <= initialTrustRegionRadius
2861	312	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.upperDifference.getEntry(j) <= ZERO
2861	312	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	upperDifference.getEntry($) <= ZERO
13940	406	8	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13940	406	8	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2862	443	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex != kbase
2862	443	12	BOBYQAOptimizer.java	bobyqb	kbase	int	0	DEF	trustRegionCenterInterpolationPointIndex != $
13941	445	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13941	445	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13942	446	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
13942	446	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2863	447	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
2863	447	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
2864	454	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() > npt
2864	454	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	getEvaluations() > $
13943	455	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13943	455	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13944	457	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13944	457	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13945	461	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13945	461	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2865	494	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm < HALF * $
2865	494	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ < HALF * rho
2866	499	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() <= nfsav + 2
2866	499	16	BOBYQAOptimizer.java	bobyqb	nfsav	int	0	DEF	getEvaluations() <= $ + 2
2867	513	16	BOBYQAOptimizer.java	bobyqb	errbig	double	0	DEF	$ > frhosq * crvmin
2867	513	16	BOBYQAOptimizer.java	bobyqb	frhosq	double	0	DEF	errbig > $ * crvmin
2867	513	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	errbig > frhosq * $
2867	513	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	$ > ZERO
13946	518	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13946	518	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2868	520	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.lowerDifference.getEntry(j)
2868	520	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
2869	523	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.upperDifference.getEntry(j)
2869	523	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
2870	526	20	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
2870	526	20	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
13947	528	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13947	528	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2871	534	24	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
2871	534	24	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
2872	553	12	BOBYQAOptimizer.java	bobyqb	dsq	double	0	DEF	$ <= xoptsq * ONE_OVER_A_THOUSAND
2872	553	12	BOBYQAOptimizer.java	bobyqb	xoptsq	double	0	DEF	dsq <= $ * ONE_OVER_A_THOUSAND
13948	558	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13948	558	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13949	561	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13949	561	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
13950	567	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13950	567	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
13951	571	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
13951	571	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
13952	582	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
13952	582	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
13953	585	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13953	585	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13954	590	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13954	590	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13955	592	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13955	592	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13956	596	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13956	596	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13957	602	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13957	602	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
13958	605	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
13958	605	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
13959	617	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13959	617	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13960	619	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13960	619	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13961	623	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
13961	623	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
13962	632	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13962	632	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2873	641	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
13963	673	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13963	673	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
13964	684	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13964	684	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13965	688	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13965	688	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13966	698	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
13966	698	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
13967	700	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13967	700	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13968	704	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13968	704	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13969	711	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13969	711	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13970	716	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13970	716	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13971	721	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13971	721	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2874	740	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	1	DEF	$ == 0
2875	744	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	denom < $
2875	744	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	$ > ZERO
2875	744	16	BOBYQAOptimizer.java	bobyqb	denom	double	0	DEF	$ < cauchy
13972	745	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13972	745	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
13973	763	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13973	763	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2876	764	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
2876	764	20	BOBYQAOptimizer.java	bobyqb	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
13974	768	20	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
13974	768	20	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
13975	777	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13975	777	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2877	786	20	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
2877	786	20	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
2877	786	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
13976	807	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13976	807	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2878	815	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.lowerDifference.getEntry(i)
2878	815	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
2879	818	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.upperDifference.getEntry(i)
2879	818	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
2880	825	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.isMinimize
2881	827	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
13977	838	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13977	838	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13978	840	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
13978	840	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2882	842	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ == j
2882	842	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i == $
13979	849	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13979	849	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2883	859	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm > $
2883	859	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ > rho
2884	865	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	MathIllegalStateException	$ > 0
2885	866	16	BOBYQAOptimizer.java	bobyqb	vquad	double	0	MathIllegalStateException	$ >= ZERO
2886	871	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= ONE_OVER_TEN
2887	874	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= .7
2888	881	16	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
2888	881	16	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
2889	887	16	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
2889	887	16	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
13980	894	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13980	894	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13981	896	24	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
13981	896	24	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
13982	905	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13982	905	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2890	914	24	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
2890	914	24	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
2890	914	24	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
2891	925	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	$ <= HALF * biglsq
2891	925	20	BOBYQAOptimizer.java	bobyqb	biglsq	double	0	DEF	scaden <= HALF * $
13983	940	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13983	940	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
13984	942	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
13984	942	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
13985	947	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
13985	947	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
13986	949	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13986	949	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13987	958	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13987	958	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
13988	962	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13988	962	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13989	964	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
13989	964	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
13990	968	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13990	968	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13991	972	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13991	972	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
13992	976	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13992	976	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2892	982	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
2892	982	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
13993	986	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13993	986	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13994	991	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
13994	991	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2893	992	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
2893	992	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
13995	999	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13995	999	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13996	1001	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13996	1001	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13997	1005	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13997	1005	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2894	1015	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ > 0
13998	1016	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13998	1016	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13999	1020	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < nptm
13999	1020	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	j < $
14000	1022	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
14000	1022	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
14001	1025	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
14001	1025	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
14002	1029	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
14002	1029	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
14003	1031	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
14003	1031	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
14004	1039	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
14004	1039	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
14005	1041	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
14005	1041	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2895	1045	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
2895	1045	20	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
2896	1053	27	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
2896	1053	27	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
2897	1074	16	BOBYQAOptimizer.java	bobyqb	gqsq	double	0	DEF	$ < TEN * gisq
2897	1074	16	BOBYQAOptimizer.java	bobyqb	gisq	double	0	DEF	gqsq < TEN * $
2898	1077	16	BOBYQAOptimizer.java	bobyqb	itest	int	0	DEF	$ >= 3
14006	1078	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < max
14006	1078	20	BOBYQAOptimizer.java	bobyqb	max	int	0	NIL-FOR	i < $
2899	1079	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < n
2899	1079	24	BOBYQAOptimizer.java	bobyqb	n	int	0	DEF	i < $
2900	1082	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < npt
2900	1082	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	i < $
2901	1085	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < nh
2901	1085	24	BOBYQAOptimizer.java	bobyqb	nh	int	0	DEF	i < $
2902	1097	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
2903	1100	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f <= $ + ONE_OVER_TEN * vquad
2903	1100	12	BOBYQAOptimizer.java	bobyqb	vquad	double	0	DEF	f <= fopt + ONE_OVER_TEN * $
2903	1100	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ <= fopt + ONE_OVER_TEN * vquad
14007	1117	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
14007	1117	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
14008	1119	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
14008	1119	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2904	1124	16	BOBYQAOptimizer.java	bobyqb	sum	double	0	DEF	$ > distsq
2904	1124	16	BOBYQAOptimizer.java	bobyqb	distsq	double	0	DEF	sum > $
2905	1136	12	BOBYQAOptimizer.java	bobyqb	knew	int	0	DEF	$ >= 0
2906	1138	16	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2907	1141	20	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
2907	1141	20	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
2908	1153	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2909	1156	12	BOBYQAOptimizer.java	bobyqb	ratio	double	0	DEF	$ > ZERO
2910	1159	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	Math.max(delta, dnorm) > $
2910	1159	12	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	Math.max($, dnorm) > rho
2910	1159	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	Math.max(delta, $) > rho
2911	1168	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	rho > $.stoppingTrustRegionRadius
2911	1168	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	$ > stoppingTrustRegionRadius
2912	1171	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= SIXTEEN
2913	1173	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= TWO_HUNDRED_FIFTY
2914	1187	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2915	1193	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex) <= fsave
2915	1193	12	BOBYQAOptimizer.java	bobyqb	fsave	double	0	DEF	fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= $
14009	1194	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
14009	1194	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2916	1202	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
2916	1202	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
2917	1205	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
2917	1205	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
14010	1268	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
14010	1268	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
14011	1271	8	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < max
14011	1271	8	BOBYQAOptimizer.java	altmov	max	int	0	NIL-FOR	j < $
14012	1273	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
14012	1273	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
14013	1282	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
14013	1282	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
14014	1285	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
14014	1285	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
14015	1287	12	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
14015	1287	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
14016	1291	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
14016	1291	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
14017	1307	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
14017	1307	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
2918	1308	12	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
2918	1308	12	BOBYQAOptimizer.java	altmov	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
14018	1313	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
14018	1313	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
14019	1326	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
14019	1326	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2919	1328	16	BOBYQAOptimizer.java	altmov	tmp	double	1	DEF	$ > ZERO
2920	1329	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2920	1329	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2920	1329	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2920	1329	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2921	1333	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2921	1333	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2921	1333	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2921	1333	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2922	1339	23	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	$ < ZERO
2923	1340	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2923	1340	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2923	1340	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2923	1340	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2924	1344	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2924	1344	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2924	1344	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2924	1344	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2925	1359	12	BOBYQAOptimizer.java	altmov	k	int	1	DEF	$ == knew
2925	1359	12	BOBYQAOptimizer.java	altmov	knew	int	1	DEF	k == $
2926	1363	16	BOBYQAOptimizer.java	altmov	d1	double	0	DEF	Math.abs($) > Math.abs(vlag)
2926	1363	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d1) > Math.abs($)
2927	1371	16	BOBYQAOptimizer.java	altmov	d3	double	0	DEF	$ * d4 < ZERO
2927	1371	16	BOBYQAOptimizer.java	altmov	d4	double	0	DEF	d3 * $ < ZERO
2928	1373	20	BOBYQAOptimizer.java	altmov	d5	double	0	DEF	Math.abs($) > Math.abs(vlag)
2928	1373	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d5) > Math.abs($)
2929	1385	16	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	Math.abs($) > Math.abs(vlag)
2929	1385	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(tmp) > Math.abs($)
2930	1390	16	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ > HALF
2930	1390	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs($) < ONE_OVER_FOUR
2931	1402	12	BOBYQAOptimizer.java	altmov	predsq	double	0	DEF	$ > presav
2931	1402	12	BOBYQAOptimizer.java	altmov	presav	double	0	DEF	predsq > $
14020	1412	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
14020	1412	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2932	1417	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ < 0
2933	1420	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ > 0
14021	1435	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
14021	1435	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2934	1438	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.max($.trustRegionCenterOffset.getEntry(i) - $.upperDifference.getEntry(i), glagValue) < ZERO
2934	1438	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.min($.trustRegionCenterOffset.getEntry(i) - $.lowerDifference.getEntry(i), glagValue) > ZERO
2934	1438	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
2934	1438	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
2934	1438	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
2934	1438	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
2935	1445	12	BOBYQAOptimizer.java	altmov	ggfree	double	0	RET	$ == ZERO
2936	1451	12	BOBYQAOptimizer.java	altmov	tmp1	double	0	DEF	$ > ZERO
14022	1454	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
14022	1454	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2937	1455	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	work1.getEntry($) == bigstp
2937	1455	20	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	0	DEF	$.getEntry(i) == bigstp
2937	1455	20	BOBYQAOptimizer.java	altmov	bigstp	double	0	DEF	work1.getEntry(i) == $
2938	1457	24	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 <= $.lowerDifference.getEntry(i)
2938	1457	24	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ <= lowerDifference.getEntry(i)
2938	1457	24	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 <= lowerDifference.getEntry($)
2939	1462	31	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 >= $.upperDifference.getEntry(i)
2939	1462	31	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ >= upperDifference.getEntry(i)
2939	1462	31	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 >= upperDifference.getEntry($)
14023	1480	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
14023	1480	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2940	1482	16	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == bigstp
2940	1482	16	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == bigstp
2940	1482	16	BOBYQAOptimizer.java	altmov	bigstp	double	1	DEF	work1.getEntry(i) == $
2941	1487	23	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == ZERO
2941	1487	23	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
2942	1489	23	BOBYQAOptimizer.java	altmov	glagValue	double	1	DEF	$ > ZERO
14024	1503	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
14024	1503	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
14025	1505	16	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
14025	1505	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
2943	1510	12	BOBYQAOptimizer.java	altmov	iflag	int	0	DEF	$ == 1
2944	1513	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv < -$ * (ONE + Math.sqrt(TWO))
2944	1513	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv > -$
2944	1513	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ < -gw * (ONE + Math.sqrt(TWO))
2944	1513	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ > -gw
14026	1516	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
14026	1516	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2945	1534	12	BOBYQAOptimizer.java	altmov	iflag	int	1	DEF	$ == 0
14027	1535	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
14027	1535	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2946	1545	8	BOBYQAOptimizer.java	altmov	cauchy	double	0	DEF	csave > $
2946	1545	8	BOBYQAOptimizer.java	altmov	csave	double	0	DEF	$ > cauchy
14028	1546	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
14028	1546	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
14029	1592	8	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
14029	1592	8	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
14030	1594	12	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
14030	1594	12	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
14031	1597	12	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < ndim
14031	1597	12	BOBYQAOptimizer.java	prelim	ndim	int	0	NIL-FOR	i < $
14032	1601	8	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < max
14032	1601	8	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	i < $
14033	1604	8	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
14033	1604	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
14034	1606	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < max
14034	1606	12	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	j < $
14035	1618	8	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	NIL-DOWHILE	$.getEvaluations() < npt
14035	1618	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-DOWHILE	getEvaluations() < $
2947	1625	12	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= 2 * n
2947	1625	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= 2 * $
2948	1626	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= n
2948	1626	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ >= 1
2948	1626	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= $
2949	1629	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfmm) == ZERO
2949	1629	20	BOBYQAOptimizer.java	prelim	nfmm	int	0	DEF	upperDifference.getEntry($) == ZERO
2950	1634	23	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	$ > n
2950	1634	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	nfm > $
2951	1637	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.lowerDifference.getEntry(nfxm) == ZERO
2951	1637	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	lowerDifference.getEntry($) == ZERO
2952	1641	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfxm) == ZERO
2952	1641	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	upperDifference.getEntry($) == ZERO
2953	1651	16	BOBYQAOptimizer.java	prelim	n	int	0	DEF	ipt > $
2953	1651	16	BOBYQAOptimizer.java	prelim	ipt	int	0	DEF	$ > n
14036	1666	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
14036	1666	12	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
2954	1670	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.lowerDifference.getEntry(j)
2954	1670	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == lowerDifference.getEntry($)
2954	1670	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == lowerDifference.getEntry(j)
2955	1673	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.upperDifference.getEntry(j)
2955	1673	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == upperDifference.getEntry($)
2955	1673	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == upperDifference.getEntry(j)
2956	1683	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ == 1
2957	1686	19	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex)
2957	1686	19	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)
2958	1696	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= 2 * n + 1
2958	1696	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= 2 * $ + 1
2959	1697	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ >= 2
2959	1697	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= n + 1
2959	1697	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= $ + 1
2960	1700	20	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	npt < $ + n
2960	1700	20	BOBYQAOptimizer.java	prelim	n	int	0	DEF	npt < numEval + $
2960	1700	20	BOBYQAOptimizer.java	prelim	npt	int	0	DEF	$ < numEval + n
2961	1707	23	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	$ >= n + 2
2961	1707	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	numEval >= $ + 2
2962	1713	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry(nfm - n)
2962	1713	20	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	f < fAtInterpolationPoints.getEntry($ - n)
2962	1713	20	BOBYQAOptimizer.java	prelim	stepa	double	0	DEF	$ * stepb < ZERO
2962	1713	20	BOBYQAOptimizer.java	prelim	stepb	double	0	DEF	stepa * $ < ZERO
2962	1713	20	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(nfm - n)
2962	1713	20	BOBYQAOptimizer.java	prelim	n	int	0	DEF	f < fAtInterpolationPoints.getEntry(nfm - $)
2963	1716	24	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex == nfm
2963	1716	24	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	trustRegionCenterInterpolationPointIndex == $
14037	1842	8	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
14037	1842	8	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2964	1844	12	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) <= $.lowerDifference.getEntry(i)
2964	1844	12	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	trustRegionCenterOffset.getEntry($) <= lowerDifference.getEntry($)
2965	1845	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) >= ZERO
2965	1845	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) >= ZERO
2966	1848	19	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) >= $.upperDifference.getEntry(i)
2966	1848	19	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) <= ZERO
2966	1848	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	trustRegionCenterOffset.getEntry($) >= upperDifference.getEntry($)
2966	1848	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) <= ZERO
2967	1852	12	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) != ZERO
2967	1852	12	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
14038	1878	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
14038	1878	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2968	1879	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) != ZERO
2968	1879	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) != ZERO
2969	1881	23	BOBYQAOptimizer.java	trsbox	beta	double	1	DEF	$ == ZERO
2970	1890	12	BOBYQAOptimizer.java	trsbox	stepsq	double	0	DEF	$ == ZERO
2971	1893	12	BOBYQAOptimizer.java	trsbox	beta	double	0	DEF	$ == ZERO
2972	1897	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	gredsq * delsq <= $ * 1e-4 * $
2972	1897	12	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	gredsq * $ <= qred * 1e-4 * qred
2972	1897	12	BOBYQAOptimizer.java	trsbox	gredsq	double	0	DEF	$ * delsq <= qred * 1e-4 * qred
14039	1913	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
14039	1913	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2973	1914	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2973	1914	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2974	1922	12	BOBYQAOptimizer.java	trsbox	resid	double	0	DEF	$ <= ZERO
2975	1926	12	BOBYQAOptimizer.java	trsbox	ds	double	1	DEF	$ < ZERO
2976	1932	12	BOBYQAOptimizer.java	trsbox	shs	double	0	DEF	$ > ZERO
14040	1941	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
14040	1941	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2977	1942	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	s.getEntry($) != ZERO
2977	1942	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
2978	1944	20	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	s.getEntry($) > ZERO
2978	1944	20	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	1	DEF	$.getEntry(i) > ZERO
2979	1949	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ < stplen
2979	1949	20	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	temp < $
2980	1959	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ > ZERO
2981	1962	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ == -1
2981	1962	16	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2982	1964	20	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ == MINUS_ONE
14041	1970	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
14041	1970	16	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2983	1972	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2983	1972	20	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2984	1987	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
2985	1990	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	s.getEntry($) < ZERO
2985	1990	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(iact) < ZERO
2986	1996	16	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	$ <= ZERO
2987	2005	12	BOBYQAOptimizer.java	trsbox	blen	double	0	DEF	stplen < $
2987	2005	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ < blen
2988	2006	16	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ == itermax
2988	2006	16	BOBYQAOptimizer.java	trsbox	itermax	int	0	DEF	iterc == $
2989	2009	16	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= qred * .01
2989	2009	16	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec <= $ * .01
2990	2027	12	BOBYQAOptimizer.java	trsbox	n	int	0	DEF	nact >= $ - 1
2990	2027	12	BOBYQAOptimizer.java	trsbox	nact	int	0	DEF	$ >= n - 1
14042	2033	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
14042	2033	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2991	2034	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
2991	2034	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
2992	2056	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	temp <= $ * 1e-4 * $
2992	2056	12	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ <= qred * 1e-4 * qred
14043	2060	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
14043	2060	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2993	2061	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
2993	2061	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
14044	2076	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
14044	2076	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2994	2077	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2994	2077	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2995	2080	20	BOBYQAOptimizer.java	trsbox	tempa	double	1	DEF	$ <= ZERO
2996	2084	27	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	$ <= ZERO
2997	2097	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2998	2099	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempa
2998	2099	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempa
2998	2099	24	BOBYQAOptimizer.java	trsbox	tempa	double	0	DEF	angbd * temp > $
2999	2108	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
3000	2110	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempb
3000	2110	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempb
3000	2110	24	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	angbd * temp > $
14045	2128	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
14045	2128	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3001	2129	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
3001	2129	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
14046	2144	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < iu
14046	2144	12	BOBYQAOptimizer.java	trsbox	iu	int	0	NIL-FOR	i < $
3002	2149	16	BOBYQAOptimizer.java	trsbox	redmax	double	1	DEF	rednew > $
3002	2149	16	BOBYQAOptimizer.java	trsbox	rednew	double	1	DEF	$ > redmax
3003	2153	23	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ == isav + 1
3003	2153	23	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	i == $ + 1
3004	2162	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < 0
3005	2165	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav < $
3005	2165	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < iu
3006	2173	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= ZERO
14047	2183	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
14047	2183	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3007	2185	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
3007	2185	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
3008	2195	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav == $
3008	2195	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
3008	2195	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ == iu
3009	2204	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ > qred * .01
3009	2204	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec > $ * .01
14048	2211	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
14048	2211	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3010	2217	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == MINUS_ONE
3010	2217	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == MINUS_ONE
3011	2220	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ONE
3011	2220	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ONE
14049	2237	12	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	$ < n
14049	2237	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	j < $
14050	2239	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ <= j
14050	2239	16	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	i <= $
3012	2240	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ < j
3012	2240	20	BOBYQAOptimizer.java	trsbox	j	int	0	DEF	i < $
14051	2248	12	BOBYQAOptimizer.java	trsbox	k	int	0	NIL-FOR	$ < npt
14051	2248	12	BOBYQAOptimizer.java	trsbox	npt	int	0	NIL-FOR	k < $
3013	2249	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.modelSecondDerivativesParameters.getEntry(k) != ZERO
3013	2249	16	BOBYQAOptimizer.java	trsbox	k	int	0	DEF	modelSecondDerivativesParameters.getEntry($) != ZERO
14052	2250	20	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
14052	2250	20	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
3014	2255	12	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ != ZERO
3015	2258	12	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ > itcsav
3015	2258	12	BOBYQAOptimizer.java	trsbox	itcsav	int	0	DEF	iterc > $
14053	2261	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
14053	2261	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
14054	2302	8	BOBYQAOptimizer.java	update	k	int	0	NIL-FOR	$ < npt
14054	2302	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	k < $
14055	2303	12	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
14055	2303	12	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
14056	2312	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
14056	2312	8	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
3016	2314	12	BOBYQAOptimizer.java	update	d1	double	0	DEF	Math.abs($) > ztest
3016	2314	12	BOBYQAOptimizer.java	update	ztest	double	0	DEF	Math.abs(d1) > $
14057	2322	16	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
14057	2322	16	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
14058	2334	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
14058	2334	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
14059	2346	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
14059	2346	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
14060	2353	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < n
14060	2353	8	BOBYQAOptimizer.java	update	n	int	0	NIL-FOR	j < $
14061	2358	12	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ <= jp
14061	2358	12	BOBYQAOptimizer.java	update	jp	int	0	NIL-FOR	i <= $
3017	2361	16	BOBYQAOptimizer.java	update	i	int	0	DEF	$ >= npt
3017	2361	16	BOBYQAOptimizer.java	update	npt	int	0	DEF	i >= $
3018	2382	8	BOBYQAOptimizer.java	setup	dimension	int	0	NumberIsTooSmallException	$ < MINIMUM_PROBLEM_DIMENSION
3019	2387	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints < nPointsInterval[0]
3019	2387	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints > nPointsInterval[1]
3019	2387	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints < $[0]
3019	2387	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints > $[1]
14062	2400	8	BOBYQAOptimizer.java	setup	i	int	0	NIL-FOR	$ < dimension
14062	2400	8	BOBYQAOptimizer.java	setup	dimension	int	0	NIL-FOR	i < $
3020	2404	8	BOBYQAOptimizer.java	setup	requiredMinDiff	double	0	DEF	minDiff < $
3020	2404	8	BOBYQAOptimizer.java	setup	minDiff	double	0	DEF	$ < requiredMinDiff
13509	300	8	BOBYQAOptimizer.java	bobyqa	j	int	0	NIL-FOR	$ < n
13509	300	8	BOBYQAOptimizer.java	bobyqa	n	int	0	NIL-FOR	j < $
2030	304	12	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= -$.initialTrustRegionRadius
2030	304	12	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= -initialTrustRegionRadius
2031	305	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= ZERO
2031	305	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= ZERO
2032	316	19	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(j) <= $.initialTrustRegionRadius
2032	316	19	BOBYQAOptimizer.java	bobyqa	j	int	0	DEF	upperDifference.getEntry($) <= initialTrustRegionRadius
2033	317	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.upperDifference.getEntry(j) <= ZERO
2033	317	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	upperDifference.getEntry($) <= ZERO
13510	411	8	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13510	411	8	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2034	448	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex != kbase
2034	448	12	BOBYQAOptimizer.java	bobyqb	kbase	int	0	DEF	trustRegionCenterInterpolationPointIndex != $
13511	450	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13511	450	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13512	451	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
13512	451	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2035	452	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
2035	452	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
2036	459	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() > npt
2036	459	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	getEvaluations() > $
13513	460	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13513	460	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13514	462	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13514	462	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13515	466	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13515	466	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2037	499	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm < HALF * $
2037	499	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ < HALF * rho
2038	504	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() <= nfsav + 2
2038	504	16	BOBYQAOptimizer.java	bobyqb	nfsav	int	0	DEF	getEvaluations() <= $ + 2
2039	518	16	BOBYQAOptimizer.java	bobyqb	errbig	double	0	DEF	$ > frhosq * crvmin
2039	518	16	BOBYQAOptimizer.java	bobyqb	frhosq	double	0	DEF	errbig > $ * crvmin
2039	518	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	$ > ZERO
2039	518	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	errbig > frhosq * $
13516	523	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13516	523	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2040	525	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.lowerDifference.getEntry(j)
2040	525	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
2041	528	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.upperDifference.getEntry(j)
2041	528	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
2042	531	20	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
2042	531	20	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
13517	533	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13517	533	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2043	539	24	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
2043	539	24	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
2044	558	12	BOBYQAOptimizer.java	bobyqb	dsq	double	0	DEF	$ <= xoptsq * ONE_OVER_A_THOUSAND
2044	558	12	BOBYQAOptimizer.java	bobyqb	xoptsq	double	0	DEF	dsq <= $ * ONE_OVER_A_THOUSAND
13518	563	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13518	563	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13519	566	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13519	566	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
13520	572	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13520	572	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
13521	576	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
13521	576	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
13522	587	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
13522	587	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
13523	590	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13523	590	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13524	595	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13524	595	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13525	597	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13525	597	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13526	601	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13526	601	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13527	607	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13527	607	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
13528	610	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
13528	610	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
13529	622	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13529	622	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13530	624	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13530	624	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13531	628	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
13531	628	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
13532	637	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13532	637	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2045	646	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
13533	678	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13533	678	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
13534	689	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13534	689	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13535	693	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13535	693	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13536	703	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
13536	703	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
13537	705	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13537	705	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13538	709	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13538	709	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13539	716	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13539	716	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13540	721	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13540	721	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13541	726	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13541	726	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2046	745	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	1	DEF	$ == 0
2047	749	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	$ > ZERO
2047	749	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	denom < $
2047	749	16	BOBYQAOptimizer.java	bobyqb	denom	double	0	DEF	$ < cauchy
13542	750	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13542	750	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
13543	768	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13543	768	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2048	769	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
2048	769	20	BOBYQAOptimizer.java	bobyqb	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
13544	773	20	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
13544	773	20	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
13545	782	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13545	782	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2049	791	20	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
2049	791	20	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
2049	791	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
13546	812	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13546	812	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2050	820	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.lowerDifference.getEntry(i)
2050	820	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
2051	823	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.upperDifference.getEntry(i)
2051	823	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
2052	830	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.isMinimize
2053	832	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
13547	843	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13547	843	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13548	845	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
13548	845	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2054	847	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ == j
2054	847	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i == $
13549	854	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13549	854	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2055	864	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm > $
2055	864	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ > rho
2056	870	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	MathIllegalStateException	$ > 0
2057	871	16	BOBYQAOptimizer.java	bobyqb	vquad	double	0	MathIllegalStateException	$ >= ZERO
2058	876	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= ONE_OVER_TEN
2059	879	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= .7
2060	886	16	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
2060	886	16	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
2061	892	16	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
2061	892	16	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
13550	899	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13550	899	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13551	901	24	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
13551	901	24	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
13552	910	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13552	910	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2062	919	24	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
2062	919	24	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
2062	919	24	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
2063	930	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	$ <= HALF * biglsq
2063	930	20	BOBYQAOptimizer.java	bobyqb	biglsq	double	0	DEF	scaden <= HALF * $
13553	945	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13553	945	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
13554	947	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
13554	947	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
13555	952	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
13555	952	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
13556	954	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13556	954	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13557	963	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13557	963	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
13558	967	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13558	967	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13559	969	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
13559	969	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
13560	973	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13560	973	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13561	977	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13561	977	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
13562	981	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13562	981	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2064	987	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
2064	987	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
13563	991	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13563	991	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13564	996	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
13564	996	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
2065	997	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
2065	997	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
13565	1004	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13565	1004	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13566	1006	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13566	1006	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13567	1010	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13567	1010	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2066	1020	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ > 0
13568	1021	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13568	1021	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13569	1025	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < nptm
13569	1025	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	j < $
13570	1027	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13570	1027	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13571	1030	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13571	1030	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13572	1034	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13572	1034	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13573	1036	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13573	1036	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
13574	1044	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13574	1044	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
13575	1046	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13575	1046	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
2067	1050	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
2067	1050	20	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
2068	1058	27	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
2068	1058	27	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
2069	1079	16	BOBYQAOptimizer.java	bobyqb	gqsq	double	0	DEF	$ < TEN * gisq
2069	1079	16	BOBYQAOptimizer.java	bobyqb	gisq	double	0	DEF	gqsq < TEN * $
2070	1082	16	BOBYQAOptimizer.java	bobyqb	itest	int	0	DEF	$ >= 3
13576	1083	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < max
13576	1083	20	BOBYQAOptimizer.java	bobyqb	max	int	0	NIL-FOR	i < $
2071	1084	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < n
2071	1084	24	BOBYQAOptimizer.java	bobyqb	n	int	0	DEF	i < $
2072	1087	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < npt
2072	1087	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	i < $
2073	1090	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < nh
2073	1090	24	BOBYQAOptimizer.java	bobyqb	nh	int	0	DEF	i < $
2074	1102	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
2075	1105	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f <= $ + ONE_OVER_TEN * vquad
2075	1105	12	BOBYQAOptimizer.java	bobyqb	vquad	double	0	DEF	f <= fopt + ONE_OVER_TEN * $
2075	1105	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ <= fopt + ONE_OVER_TEN * vquad
13577	1122	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
13577	1122	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
13578	1124	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
13578	1124	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
2076	1129	16	BOBYQAOptimizer.java	bobyqb	sum	double	0	DEF	$ > distsq
2076	1129	16	BOBYQAOptimizer.java	bobyqb	distsq	double	0	DEF	sum > $
2077	1141	12	BOBYQAOptimizer.java	bobyqb	knew	int	0	DEF	$ >= 0
2078	1143	16	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2079	1146	20	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
2079	1146	20	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
2080	1158	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2081	1161	12	BOBYQAOptimizer.java	bobyqb	ratio	double	0	DEF	$ > ZERO
2082	1164	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	Math.max(delta, dnorm) > $
2082	1164	12	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	Math.max($, dnorm) > rho
2082	1164	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	Math.max(delta, $) > rho
2083	1173	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	rho > $.stoppingTrustRegionRadius
2083	1173	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	$ > stoppingTrustRegionRadius
2084	1176	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= SIXTEEN
2085	1178	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= TWO_HUNDRED_FIFTY
2086	1192	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
2087	1198	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex) <= fsave
2087	1198	12	BOBYQAOptimizer.java	bobyqb	fsave	double	0	DEF	fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= $
13579	1199	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
13579	1199	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
2088	1207	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
2088	1207	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
2089	1210	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
2089	1210	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
13580	1273	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
13580	1273	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
13581	1276	8	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < max
13581	1276	8	BOBYQAOptimizer.java	altmov	max	int	0	NIL-FOR	j < $
13582	1278	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
13582	1278	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
13583	1287	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
13583	1287	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
13584	1290	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
13584	1290	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
13585	1292	12	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
13585	1292	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
13586	1296	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
13586	1296	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
13587	1312	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
13587	1312	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
2090	1313	12	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
2090	1313	12	BOBYQAOptimizer.java	altmov	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
13588	1318	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
13588	1318	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
13589	1331	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
13589	1331	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2091	1333	16	BOBYQAOptimizer.java	altmov	tmp	double	1	DEF	$ > ZERO
2092	1334	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2092	1334	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2092	1334	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2092	1334	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2093	1338	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2093	1338	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2093	1338	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2093	1338	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2094	1344	23	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	$ < ZERO
2095	1345	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2095	1345	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2095	1345	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2095	1345	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2096	1349	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
2096	1349	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2096	1349	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
2096	1349	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
2097	1364	12	BOBYQAOptimizer.java	altmov	k	int	1	DEF	$ == knew
2097	1364	12	BOBYQAOptimizer.java	altmov	knew	int	1	DEF	k == $
2098	1368	16	BOBYQAOptimizer.java	altmov	d1	double	0	DEF	Math.abs($) > Math.abs(vlag)
2098	1368	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d1) > Math.abs($)
2099	1376	16	BOBYQAOptimizer.java	altmov	d3	double	0	DEF	$ * d4 < ZERO
2099	1376	16	BOBYQAOptimizer.java	altmov	d4	double	0	DEF	d3 * $ < ZERO
2100	1378	20	BOBYQAOptimizer.java	altmov	d5	double	0	DEF	Math.abs($) > Math.abs(vlag)
2100	1378	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d5) > Math.abs($)
2101	1390	16	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	Math.abs($) > Math.abs(vlag)
2101	1390	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(tmp) > Math.abs($)
2102	1395	16	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ > HALF
2102	1395	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs($) < ONE_OVER_FOUR
2103	1407	12	BOBYQAOptimizer.java	altmov	predsq	double	0	DEF	$ > presav
2103	1407	12	BOBYQAOptimizer.java	altmov	presav	double	0	DEF	predsq > $
13590	1417	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
13590	1417	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2104	1422	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ < 0
2105	1425	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ > 0
13591	1440	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
13591	1440	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2106	1443	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.min($.trustRegionCenterOffset.getEntry(i) - $.lowerDifference.getEntry(i), glagValue) > ZERO
2106	1443	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.max($.trustRegionCenterOffset.getEntry(i) - $.upperDifference.getEntry(i), glagValue) < ZERO
2106	1443	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
2106	1443	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
2106	1443	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
2106	1443	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
2107	1450	12	BOBYQAOptimizer.java	altmov	ggfree	double	0	RET	$ == ZERO
2108	1456	12	BOBYQAOptimizer.java	altmov	tmp1	double	0	DEF	$ > ZERO
13592	1459	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
13592	1459	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2109	1460	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	work1.getEntry($) == bigstp
2109	1460	20	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	0	DEF	$.getEntry(i) == bigstp
2109	1460	20	BOBYQAOptimizer.java	altmov	bigstp	double	0	DEF	work1.getEntry(i) == $
2110	1462	24	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 <= $.lowerDifference.getEntry(i)
2110	1462	24	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ <= lowerDifference.getEntry(i)
2110	1462	24	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 <= lowerDifference.getEntry($)
2111	1467	31	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 >= $.upperDifference.getEntry(i)
2111	1467	31	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ >= upperDifference.getEntry(i)
2111	1467	31	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 >= upperDifference.getEntry($)
13593	1485	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
13593	1485	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2112	1487	16	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == bigstp
2112	1487	16	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == bigstp
2112	1487	16	BOBYQAOptimizer.java	altmov	bigstp	double	1	DEF	work1.getEntry(i) == $
2113	1492	23	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == ZERO
2113	1492	23	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
2114	1494	23	BOBYQAOptimizer.java	altmov	glagValue	double	1	DEF	$ > ZERO
13594	1508	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
13594	1508	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
13595	1510	16	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
13595	1510	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
2115	1515	12	BOBYQAOptimizer.java	altmov	iflag	int	0	DEF	$ == 1
2116	1518	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv < -$ * (ONE + Math.sqrt(TWO))
2116	1518	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv > -$
2116	1518	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ < -gw * (ONE + Math.sqrt(TWO))
2116	1518	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ > -gw
13596	1521	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
13596	1521	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2117	1539	12	BOBYQAOptimizer.java	altmov	iflag	int	1	DEF	$ == 0
13597	1540	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
13597	1540	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
2118	1550	8	BOBYQAOptimizer.java	altmov	cauchy	double	0	DEF	csave > $
2118	1550	8	BOBYQAOptimizer.java	altmov	csave	double	0	DEF	$ > cauchy
13598	1551	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
13598	1551	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
13599	1597	8	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
13599	1597	8	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
13600	1599	12	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
13600	1599	12	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
13601	1602	12	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < ndim
13601	1602	12	BOBYQAOptimizer.java	prelim	ndim	int	0	NIL-FOR	i < $
13602	1606	8	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < max
13602	1606	8	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	i < $
13603	1609	8	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
13603	1609	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
13604	1611	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < max
13604	1611	12	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	j < $
13605	1623	8	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	NIL-DOWHILE	$.getEvaluations() < npt
13605	1623	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-DOWHILE	getEvaluations() < $
2119	1630	12	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= 2 * n
2119	1630	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= 2 * $
2120	1631	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ >= 1
2120	1631	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= n
2120	1631	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= $
2121	1634	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfmm) == ZERO
2121	1634	20	BOBYQAOptimizer.java	prelim	nfmm	int	0	DEF	upperDifference.getEntry($) == ZERO
2122	1639	23	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	$ > n
2122	1639	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	nfm > $
2123	1642	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.lowerDifference.getEntry(nfxm) == ZERO
2123	1642	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	lowerDifference.getEntry($) == ZERO
2124	1646	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfxm) == ZERO
2124	1646	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	upperDifference.getEntry($) == ZERO
2125	1656	16	BOBYQAOptimizer.java	prelim	n	int	0	DEF	ipt > $
2125	1656	16	BOBYQAOptimizer.java	prelim	ipt	int	0	DEF	$ > n
13606	1671	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
13606	1671	12	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
2126	1675	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.lowerDifference.getEntry(j)
2126	1675	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == lowerDifference.getEntry($)
2126	1675	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == lowerDifference.getEntry(j)
2127	1678	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.upperDifference.getEntry(j)
2127	1678	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == upperDifference.getEntry($)
2127	1678	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == upperDifference.getEntry(j)
2128	1688	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ == 1
2129	1691	19	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex)
2129	1691	19	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)
2130	1701	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= 2 * n + 1
2130	1701	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= 2 * $ + 1
2131	1702	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ >= 2
2131	1702	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= n + 1
2131	1702	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= $ + 1
2132	1705	20	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	npt < $ + n
2132	1705	20	BOBYQAOptimizer.java	prelim	n	int	0	DEF	npt < numEval + $
2132	1705	20	BOBYQAOptimizer.java	prelim	npt	int	0	DEF	$ < numEval + n
2133	1712	23	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	$ >= n + 2
2133	1712	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	numEval >= $ + 2
2134	1718	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry(nfm - n)
2134	1718	20	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	f < fAtInterpolationPoints.getEntry($ - n)
2134	1718	20	BOBYQAOptimizer.java	prelim	stepa	double	0	DEF	$ * stepb < ZERO
2134	1718	20	BOBYQAOptimizer.java	prelim	stepb	double	0	DEF	stepa * $ < ZERO
2134	1718	20	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(nfm - n)
2134	1718	20	BOBYQAOptimizer.java	prelim	n	int	0	DEF	f < fAtInterpolationPoints.getEntry(nfm - $)
2135	1721	24	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex == nfm
2135	1721	24	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	trustRegionCenterInterpolationPointIndex == $
13607	1847	8	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
13607	1847	8	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2136	1849	12	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) <= $.lowerDifference.getEntry(i)
2136	1849	12	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	trustRegionCenterOffset.getEntry($) <= lowerDifference.getEntry($)
2137	1850	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) >= ZERO
2137	1850	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) >= ZERO
2138	1853	19	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) >= $.upperDifference.getEntry(i)
2138	1853	19	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) <= ZERO
2138	1853	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	trustRegionCenterOffset.getEntry($) >= upperDifference.getEntry($)
2138	1853	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) <= ZERO
2139	1857	12	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) != ZERO
2139	1857	12	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
13608	1883	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
13608	1883	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2140	1884	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) != ZERO
2140	1884	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) != ZERO
2141	1886	23	BOBYQAOptimizer.java	trsbox	beta	double	1	DEF	$ == ZERO
2142	1895	12	BOBYQAOptimizer.java	trsbox	stepsq	double	0	DEF	$ == ZERO
2143	1898	12	BOBYQAOptimizer.java	trsbox	beta	double	0	DEF	$ == ZERO
2144	1902	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	gredsq * delsq <= $ * 1e-4 * $
2144	1902	12	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	gredsq * $ <= qred * 1e-4 * qred
2144	1902	12	BOBYQAOptimizer.java	trsbox	gredsq	double	0	DEF	$ * delsq <= qred * 1e-4 * qred
13609	1918	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
13609	1918	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2145	1919	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2145	1919	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2146	1927	12	BOBYQAOptimizer.java	trsbox	resid	double	0	DEF	$ <= ZERO
2147	1931	12	BOBYQAOptimizer.java	trsbox	ds	double	1	DEF	$ < ZERO
2148	1937	12	BOBYQAOptimizer.java	trsbox	shs	double	0	DEF	$ > ZERO
13610	1946	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
13610	1946	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2149	1947	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	s.getEntry($) != ZERO
2149	1947	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
2150	1949	20	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	s.getEntry($) > ZERO
2150	1949	20	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	1	DEF	$.getEntry(i) > ZERO
2151	1954	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ < stplen
2151	1954	20	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	temp < $
2152	1964	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ > ZERO
2153	1967	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ == -1
2153	1967	16	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2154	1969	20	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ == MINUS_ONE
13611	1975	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
13611	1975	16	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2155	1977	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2155	1977	20	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2156	1992	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
2157	1995	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	s.getEntry($) < ZERO
2157	1995	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(iact) < ZERO
2158	2001	16	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	$ <= ZERO
2159	2010	12	BOBYQAOptimizer.java	trsbox	blen	double	0	DEF	stplen < $
2159	2010	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ < blen
2160	2011	16	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ == itermax
2160	2011	16	BOBYQAOptimizer.java	trsbox	itermax	int	0	DEF	iterc == $
2161	2014	16	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= qred * .01
2161	2014	16	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec <= $ * .01
2162	2032	12	BOBYQAOptimizer.java	trsbox	n	int	0	DEF	nact >= $ - 1
2162	2032	12	BOBYQAOptimizer.java	trsbox	nact	int	0	DEF	$ >= n - 1
13612	2038	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
13612	2038	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2163	2039	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
2163	2039	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
2164	2061	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	temp <= $ * 1e-4 * $
2164	2061	12	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ <= qred * 1e-4 * qred
13613	2065	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
13613	2065	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2165	2066	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
2165	2066	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
13614	2081	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
13614	2081	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2166	2082	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2166	2082	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2167	2085	20	BOBYQAOptimizer.java	trsbox	tempa	double	1	DEF	$ <= ZERO
2168	2089	27	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	$ <= ZERO
2169	2102	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2170	2104	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempa
2170	2104	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempa
2170	2104	24	BOBYQAOptimizer.java	trsbox	tempa	double	0	DEF	angbd * temp > $
2171	2113	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
2172	2115	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempb
2172	2115	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempb
2172	2115	24	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	angbd * temp > $
13615	2133	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
13615	2133	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2173	2134	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2173	2134	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
13616	2149	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < iu
13616	2149	12	BOBYQAOptimizer.java	trsbox	iu	int	0	NIL-FOR	i < $
2174	2154	16	BOBYQAOptimizer.java	trsbox	redmax	double	1	DEF	rednew > $
2174	2154	16	BOBYQAOptimizer.java	trsbox	rednew	double	1	DEF	$ > redmax
2175	2158	23	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ == isav + 1
2175	2158	23	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	i == $ + 1
2176	2167	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < 0
2177	2170	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav < $
2177	2170	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < iu
2178	2178	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= ZERO
13617	2188	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
13617	2188	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2179	2190	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
2179	2190	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
2180	2200	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav == $
2180	2200	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
2180	2200	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ == iu
2181	2209	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ > qred * .01
2181	2209	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec > $ * .01
13618	2216	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
13618	2216	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2182	2222	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == MINUS_ONE
2182	2222	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == MINUS_ONE
2183	2225	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ONE
2183	2225	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ONE
13619	2242	12	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	$ < n
13619	2242	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	j < $
13620	2244	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ <= j
13620	2244	16	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	i <= $
2184	2245	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ < j
2184	2245	20	BOBYQAOptimizer.java	trsbox	j	int	0	DEF	i < $
13621	2253	12	BOBYQAOptimizer.java	trsbox	k	int	0	NIL-FOR	$ < npt
13621	2253	12	BOBYQAOptimizer.java	trsbox	npt	int	0	NIL-FOR	k < $
2185	2254	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.modelSecondDerivativesParameters.getEntry(k) != ZERO
2185	2254	16	BOBYQAOptimizer.java	trsbox	k	int	0	DEF	modelSecondDerivativesParameters.getEntry($) != ZERO
13622	2255	20	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
13622	2255	20	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
2186	2260	12	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ != ZERO
2187	2263	12	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ > itcsav
2187	2263	12	BOBYQAOptimizer.java	trsbox	itcsav	int	0	DEF	iterc > $
13623	2266	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
13623	2266	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
13624	2307	8	BOBYQAOptimizer.java	update	k	int	0	NIL-FOR	$ < npt
13624	2307	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	k < $
13625	2308	12	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
13625	2308	12	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
13626	2317	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
13626	2317	8	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
2188	2319	12	BOBYQAOptimizer.java	update	d1	double	0	DEF	Math.abs($) > ztest
2188	2319	12	BOBYQAOptimizer.java	update	ztest	double	0	DEF	Math.abs(d1) > $
13627	2327	16	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
13627	2327	16	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
13628	2339	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
13628	2339	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
13629	2351	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
13629	2351	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
13630	2358	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < n
13630	2358	8	BOBYQAOptimizer.java	update	n	int	0	NIL-FOR	j < $
13631	2363	12	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ <= jp
13631	2363	12	BOBYQAOptimizer.java	update	jp	int	0	NIL-FOR	i <= $
2189	2366	16	BOBYQAOptimizer.java	update	i	int	0	DEF	$ >= npt
2189	2366	16	BOBYQAOptimizer.java	update	npt	int	0	DEF	i >= $
2190	2387	8	BOBYQAOptimizer.java	setup	dimension	int	0	NumberIsTooSmallException	$ < MINIMUM_PROBLEM_DIMENSION
2191	2392	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints < nPointsInterval[0]
2191	2392	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints > nPointsInterval[1]
2191	2392	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints < $[0]
2191	2392	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints > $[1]
13632	2405	8	BOBYQAOptimizer.java	setup	i	int	0	NIL-FOR	$ < dimension
13632	2405	8	BOBYQAOptimizer.java	setup	dimension	int	0	NIL-FOR	i < $
2192	2409	8	BOBYQAOptimizer.java	setup	requiredMinDiff	double	0	DEF	minDiff < $
2192	2409	8	BOBYQAOptimizer.java	setup	minDiff	double	0	DEF	$ < requiredMinDiff
625	150	8	BSPTree.java	insertCut	THIS	BSPTree	0	DEF	$.cut != null
626	156	8	BSPTree.java	insertCut	chopped	SubHyperplane<S>	0	RET	$ == null
626	156	8	BSPTree.java	insertCut	chopped	SubHyperplane<S>	0	RET	$.isEmpty()
627	181	8	BSPTree.java	copySelf	THIS	BSPTree	0	RET	$.cut == null
628	242	8	BSPTree.java	visit	THIS	BSPTree	1	DEF	$.cut == null
12431	293	8	BSPTree.java	fitToCell	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
12431	293	8	BSPTree.java	fitToCell	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
629	294	12	BSPTree.java	fitToCell	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
629	294	12	BSPTree.java	fitToCell	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
630	312	8	BSPTree.java	getCell	THIS	BSPTree	0	RET	$.cut == null
631	319	8	BSPTree.java	getCell	offset	double	1	RET	FastMath.abs($) < 1.0e-10
632	321	15	BSPTree.java	getCell	offset	double	1	RET	$ <= 0
633	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute.equals($.minus.$.attribute)
633	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.cut == null
633	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute != null
633	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.cut != null
633	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.cut == null
633	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute == null
633	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.attribute == null
634	385	8	BSPTree.java	merge	THIS	BSPTree	1	RET	$.cut == null
635	388	15	BSPTree.java	merge	THIS	BSPTree	1	RET	tree.$.cut == null
635	388	15	BSPTree.java	merge	tree	BSPTree<S>	1	RET	$.cut == null
636	394	12	BSPTree.java	merge	parentTree	BSPTree<S>	0	DEF	$ != null
637	396	16	BSPTree.java	merge	isPlusChild	boolean	1	DEF	$
638	407	12	BSPTree.java	merge	THIS	BSPTree	0	DEF	merged.$.cut != null
638	407	12	BSPTree.java	merge	merged	BSPTree<S>	0	DEF	$.cut != null
639	489	8	BSPTree.java	split	THIS	BSPTree	0	RET	$.cut == null
640	500	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
640	500	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
641	516	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
641	516	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
642	568	8	BSPTree.java	insertInTree	parentTree	BSPTree<S>	0	DEF	$ != null
643	569	12	BSPTree.java	insertInTree	isPlusChild	boolean	1	DEF	$
644	577	8	BSPTree.java	insertInTree	THIS	BSPTree	0	DEF	$.cut != null
12432	580	12	BSPTree.java	insertInTree	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
12432	580	12	BSPTree.java	insertInTree	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
645	587	16	BSPTree.java	insertInTree	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
645	587	16	BSPTree.java	insertInTree	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
646	614	8	BSPTree.java	chopOffMinus	THIS	BSPTree	0	DEF	$.cut != null
647	628	8	BSPTree.java	chopOffPlus	THIS	BSPTree	0	DEF	$.cut != null
2207	223	12	BaseAbstractMultivariateOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.data instanceof InitialGuess
2208	227	12	BaseAbstractMultivariateOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.data instanceof SimpleBounds
2209	276	8	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	NumberIsTooLargeException	$.start != null
2210	278	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	NumberIsTooSmallException	$.lowerBound != null
2211	279	16	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DimensionMismatchException	$.lowerBound.$.length != dim
2211	279	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	lowerBound.length != $
13646	282	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
13646	282	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2212	285	20	BaseAbstractMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooSmallException	$ < lo
2212	285	20	BaseAbstractMultivariateOptimizer.java	checkParameters	lo	double	0	NumberIsTooSmallException	v < $
2213	290	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	NumberIsTooLargeException	$.upperBound != null
2214	291	16	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DimensionMismatchException	$.upperBound.$.length != dim
2214	291	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	upperBound.length != $
13647	294	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
13647	294	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2215	297	20	BaseAbstractMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooLargeException	$ > hi
2215	297	20	BaseAbstractMultivariateOptimizer.java	checkParameters	hi	double	0	NumberIsTooLargeException	v > $
2216	305	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.lowerBound == null
13648	307	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
13648	307	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2217	311	12	BaseAbstractMultivariateOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateOptimizer	0	DEF	$.upperBound == null
13649	313	16	BaseAbstractMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
13649	313	16	BaseAbstractMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
1980	184	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	f	FUNC	0	NullArgumentException	$ == null
1981	187	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	t	double[]	0	NullArgumentException	$ == null
1982	190	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	w	double[]	0	NullArgumentException	$ == null
1983	193	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	startPoint	double[]	0	NullArgumentException	$ == null
1984	196	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	THIS	BaseAbstractMultivariateVectorOptimizer	0	DimensionMismatchException	t.$.length != w.$.length
1984	196	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	t	double[]	0	DimensionMismatchException	$.length != w.length
1984	196	8	BaseAbstractMultivariateVectorOptimizer.java	optimizeInternal	w	double[]	0	DimensionMismatchException	t.length != $.length
13458	324	8	BaseAbstractMultivariateVectorOptimizer.java	setUp	i	int	0	NIL-FOR	$ < dim
13458	324	8	BaseAbstractMultivariateVectorOptimizer.java	setUp	dim	int	0	NIL-FOR	i < $
1985	344	12	BaseAbstractMultivariateVectorOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateVectorOptimizer	0	DEF	$.data instanceof Target
1986	348	12	BaseAbstractMultivariateVectorOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateVectorOptimizer	0	DEF	$.data instanceof Weight
1987	352	12	BaseAbstractMultivariateVectorOptimizer.java	parseOptimizationData	THIS	BaseAbstractMultivariateVectorOptimizer	0	DEF	$.data instanceof InitialGuess
1988	366	8	BaseAbstractMultivariateVectorOptimizer.java	checkParameters	THIS	BaseAbstractMultivariateVectorOptimizer	0	DimensionMismatchException	$.target.$.length != $.weightMatrix.getColumnDimension()
4298	120	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NotStrictlyPositiveException	$ <= 0
4299	123	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NumberIsTooSmallException	maximalIterationCount <= $
4299	123	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	maximalIterationCount	int	0	NumberIsTooSmallException	$ <= minimalIterationCount
1823	119	8	BaseAbstractUnivariateOptimizer.java	optimize	f	UnivariateFunction	0	NullArgumentException	$ == null
1824	122	8	BaseAbstractUnivariateOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
2781	84	8	BaseMultiStartMultivariateOptimizer.java	BaseMultiStartMultivariateOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
13870	146	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	NIL-FOR	i < $.optimData.$.length
13870	146	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < optimData.length
2782	147	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	DEF	$.optimData[i] instanceof MaxEval
2782	147	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof MaxEval
2783	151	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	DEF	$.optimData[i] instanceof InitialGuess
2783	151	12	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof InitialGuess
2784	157	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	MathIllegalStateException	$.maxEvalIndex == -1
2785	160	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	MathIllegalStateException	$.initialGuessIndex == -1
13871	174	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	NIL-FOR	i < $.starts
13871	174	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < starts
2786	181	16	BaseMultiStartMultivariateOptimizer.java	doOptimize	i	int	1	DEF	$ == 0
13872	185	20	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	NIL-WHILE	$ == null
2787	186	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	TooManyEvaluationsException	attempts++ >= $.getMaxEvaluations()
2787	186	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	attempts	int	0	TooManyEvaluationsException	$++ >= getMaxEvaluations()
13873	190	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	NIL-FOR	k < s.$.length
13873	190	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < s.length
13873	190	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	NIL-FOR	k < $.length
13873	190	24	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	NIL-FOR	$ != null
2788	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	k	int	0	DEF	s[$] > max[$]
2788	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	k	int	0	DEF	s[$] < min[$]
2788	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	DEF	$[k] > max[k]
2788	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	s	double[]	0	DEF	$[k] < min[k]
2788	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	min	double[]	0	DEF	$ != null
2788	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	min	double[]	0	DEF	s[k] < $[k]
2788	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	max	double[]	0	DEF	s[k] > $[k]
2788	191	28	BaseMultiStartMultivariateOptimizer.java	doOptimize	max	double[]	0	DEF	$ != null
2789	211	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	THIS	BaseMultiStartMultivariateOptimizer	0	DEF	optima.$.length == 0
2789	211	8	BaseMultiStartMultivariateOptimizer.java	doOptimize	optima	PAIR[]	0	DEF	$.length == 0
1813	75	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	optimizer	BaseMultivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
1813	75	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1814	79	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1815	115	8	BaseMultivariateMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
13344	148	8	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
13344	148	8	BaseMultivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1816	164	8	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
2790	87	12	BaseMultivariateOptimizer.java	parseOptimizationData	THIS	BaseMultivariateOptimizer	0	DEF	$.data instanceof InitialGuess
2791	91	12	BaseMultivariateOptimizer.java	parseOptimizationData	THIS	BaseMultivariateOptimizer	0	DEF	$.data instanceof SimpleBounds
2792	128	8	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	NumberIsTooLargeException	$.start != null
2793	130	12	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	NumberIsTooSmallException	$.lowerBound != null
2794	131	16	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	DimensionMismatchException	$.lowerBound.$.length != dim
2794	131	16	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	lowerBound.length != $
13874	134	16	BaseMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
13874	134	16	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2795	137	20	BaseMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooSmallException	$ < lo
2795	137	20	BaseMultivariateOptimizer.java	checkParameters	lo	double	0	NumberIsTooSmallException	v < $
2796	142	12	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	NumberIsTooLargeException	$.upperBound != null
2797	143	16	BaseMultivariateOptimizer.java	checkParameters	THIS	BaseMultivariateOptimizer	0	DimensionMismatchException	$.upperBound.$.length != dim
2797	143	16	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	DimensionMismatchException	upperBound.length != $
13875	146	16	BaseMultivariateOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < dim
13875	146	16	BaseMultivariateOptimizer.java	checkParameters	dim	int	0	NIL-FOR	i < $
2798	149	20	BaseMultivariateOptimizer.java	checkParameters	v	double	0	NumberIsTooLargeException	$ > hi
2798	149	20	BaseMultivariateOptimizer.java	checkParameters	hi	double	0	NumberIsTooLargeException	v > $
1819	75	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	optimizer	BaseMultivariateVectorOptimizer<FUNC>	0	NullArgumentException	$ == null
1819	75	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1820	79	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1821	116	8	BaseMultivariateVectorMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateVectorMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
13345	149	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	NIL-FOR	i < $.starts
13345	149	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1822	168	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	DEF	$.optima[0] == null
2677	191	12	BaseOptimizer.java	parseOptimizationData	THIS	BaseOptimizer	0	DEF	$.data instanceof MaxEval
2678	195	12	BaseOptimizer.java	parseOptimizationData	THIS	BaseOptimizer	0	DEF	$.data instanceof MaxIter
4287	58	8	BaseRuleFactory.java	getRule	numberOfPoints	int	0	NotStrictlyPositiveException	$ <= 0
4288	66	8	BaseRuleFactory.java	getRule	cached	Pair<double[],double[]>	0	DEF	$ == null
4289	96	8	BaseRuleFactory.java	getRuleInternal	rule	Pair<T[],T[]>	0	RET	$ == null
4290	112	8	BaseRuleFactory.java	addRule	THIS	BaseRuleFactory	0	DimensionMismatchException	rule.getFirst().length != rule.getSecond().length
4290	112	8	BaseRuleFactory.java	addRule	rule	Pair<T[],T[]>	0	DimensionMismatchException	$.getFirst().length != $.getSecond().length
14776	147	8	BaseRuleFactory.java	convertToDouble	i	int	0	NIL-FOR	$ < len
14776	147	8	BaseRuleFactory.java	convertToDouble	len	int	0	NIL-FOR	i < $
4043	146	8	BaseSecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
4044	149	8	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
4045	174	12	BaseSecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
4046	179	12	BaseSecantSolver.java	doSolve	fx	double	1	DEF	f1 * $ < 0
4046	179	12	BaseSecantSolver.java	doSolve	f1	double	1	DEF	$ * fx < 0
4047	196	20	BaseSecantSolver.java	doSolve	x	double	0	ConvergenceException	$ == x1
4047	196	20	BaseSecantSolver.java	doSolve	x1	double	0	ConvergenceException	x == $
4048	212	12	BaseSecantSolver.java	doSolve	f1	double	0	MathInternalError:RET	FastMath.abs($) <= ftol
4048	212	12	BaseSecantSolver.java	doSolve	ftol	double	0	MathInternalError:RET	FastMath.abs(f1) <= $
4049	217	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
4050	222	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
4051	227	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ <= 0
4052	232	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ >= 0
4053	243	12	BaseSecantSolver.java	doSolve	x0	double	0	MathInternalError:RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
4053	243	12	BaseSecantSolver.java	doSolve	x1	double	0	MathInternalError:RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
4053	243	12	BaseSecantSolver.java	doSolve	atol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
4053	243	12	BaseSecantSolver.java	doSolve	rtol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
3306	187	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
3306	187	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
3306	187	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
3306	187	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
3306	187	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
3306	187	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
3306	187	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
3307	195	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
3307	195	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
3307	195	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
3308	272	8	Beta.java	logGammaSum	a	double	0	OutOfRangeException	$ > 2.0
3308	272	8	Beta.java	logGammaSum	a	double	0	OutOfRangeException	$ < 1.0
3309	275	8	Beta.java	logGammaSum	b	double	0	OutOfRangeException	$ > 2.0
3309	275	8	Beta.java	logGammaSum	b	double	0	OutOfRangeException	$ < 1.0
3310	280	8	Beta.java	logGammaSum	x	double	1	RET	$ <= 0.5
3311	282	15	Beta.java	logGammaSum	x	double	1	RET	$ <= 1.5
3312	305	8	Beta.java	logGammaMinusLogGammaSum	a	double	0	NumberIsTooSmallException	$ < 0.0
3313	308	8	Beta.java	logGammaMinusLogGammaSum	b	double	0	NumberIsTooSmallException	$ < 10.0
3314	317	8	Beta.java	logGammaMinusLogGammaSum	a	double	1	DEF	$ <= b
3314	317	8	Beta.java	logGammaMinusLogGammaSum	b	double	1	DEF	a <= $
3315	345	8	Beta.java	deltaMinusDeltaSum	a	double	0	OutOfRangeException	$ < 0
3315	345	8	Beta.java	deltaMinusDeltaSum	a	double	0	OutOfRangeException	$ > b
3315	345	8	Beta.java	deltaMinusDeltaSum	b	double	0	OutOfRangeException	a > $
3316	348	8	Beta.java	deltaMinusDeltaSum	b	double	0	NumberIsTooSmallException	$ < 10
14257	361	8	Beta.java	deltaMinusDeltaSum	THIS	Beta	0	NIL-FOR	i < s.$.length
14257	361	8	Beta.java	deltaMinusDeltaSum	i	int	0	NIL-FOR	$ < s.length
14257	361	8	Beta.java	deltaMinusDeltaSum	s	double[]	0	NIL-FOR	i < $.length
14258	370	8	Beta.java	deltaMinusDeltaSum	i	int	0	NIL-FOR	$ >= 0
3317	391	8	Beta.java	sumDeltaMinusDeltaSum	p	double	0	NumberIsTooSmallException	$ < 10.0
3318	394	8	Beta.java	sumDeltaMinusDeltaSum	q	double	0	NumberIsTooSmallException	$ < 10.0
14259	403	8	Beta.java	sumDeltaMinusDeltaSum	i	int	0	NIL-FOR	$ >= 0
3319	420	8	Beta.java	logBeta	p	double	0	RET	Double.isNaN($)
3319	420	8	Beta.java	logBeta	p	double	0	RET	$ <= 0.0
3319	420	8	Beta.java	logBeta	q	double	0	RET	$ <= 0.0
3319	420	8	Beta.java	logBeta	q	double	0	RET	Double.isNaN($)
3320	426	8	Beta.java	logBeta	a	double	1	RET	$ >= 10.0
3321	432	12	Beta.java	logBeta	u	double	1	RET	$ <= v
3321	432	12	Beta.java	logBeta	v	double	1	RET	u <= $
3322	437	15	Beta.java	logBeta	a	double	1	RET	$ > 2.0
3323	438	12	Beta.java	logBeta	b	double	1	RET	$ > 1000.0
14260	442	16	Beta.java	logBeta	i	int	0	NIL-FOR	$ < n
14260	442	16	Beta.java	logBeta	n	int	0	NIL-FOR	i < $
14261	452	16	Beta.java	logBeta	ared	double	0	NIL-WHILE	$ > 2.0
3324	457	16	Beta.java	logBeta	b	double	1	RET	$ < 10.0
14262	460	20	Beta.java	logBeta	bred	double	0	NIL-WHILE	$ > 2.0
3325	475	15	Beta.java	logBeta	a	double	1	RET	$ >= 1.0
3326	476	12	Beta.java	logBeta	b	double	1	RET	$ > 2.0
3327	477	16	Beta.java	logBeta	b	double	1	RET	$ < 10.0
14263	480	20	Beta.java	logBeta	bred	double	0	NIL-WHILE	$ > 2.0
3328	498	12	Beta.java	logBeta	b	double	1	RET	$ >= 10.0
1140	120	8	BetaDistribution.java	recomputeZ	THIS	BetaDistribution	0	DEF	Double.isNaN($.z)
1141	128	8	BetaDistribution.java	density	x	double	1	RET	$ > 1
1141	128	8	BetaDistribution.java	density	x	double	1	RET	$ < 0
1142	130	15	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 0
1143	131	12	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.alpha < 1
1144	135	15	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 1
1145	136	12	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.beta < 1
1146	149	8	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ <= 0
1147	151	15	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ >= 1
1570	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
1570	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
1571	90	8	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
12983	100	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
12983	100	12	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
12984	105	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
12984	105	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
1572	108	16	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
1572	108	16	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
1572	108	16	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
12985	109	20	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
12985	109	20	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
12986	111	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
12986	111	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
12987	116	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
12987	116	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
1573	122	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
1574	139	8	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
12988	144	12	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
12988	144	12	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
1575	146	16	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
1575	146	16	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
1576	147	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
1577	151	20	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1577	151	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
1578	171	8	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
12989	181	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
12989	181	12	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
12990	186	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
12990	186	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
1579	189	16	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
1579	189	16	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
12991	190	20	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
12991	190	20	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
12992	192	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
12992	192	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
12993	197	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
12993	197	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
1580	203	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
12994	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
12994	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
12995	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
12995	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1581	272	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
12996	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
12996	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
12997	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
12997	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
12998	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
12998	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1582	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
1582	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
12999	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
12999	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
1583	297	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
13000	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
13000	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
13001	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
13001	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
13002	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
13002	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
13003	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
13003	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
13004	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
13004	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1584	336	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
13005	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
13005	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
13006	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
13006	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
13007	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
13007	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1585	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
1585	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
13008	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
13008	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
1586	361	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
13009	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
13009	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
13010	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
13010	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
13011	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
13011	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
3966	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
3966	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
3966	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
3966	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
3966	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$[0].length == 0
3966	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$.length == 0
3967	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
3967	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
3967	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	xLen != $.length
3968	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
3968	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
3968	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	xLen != $.length
3969	116	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
3969	116	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
3969	116	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	xLen != $.length
3970	119	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
3970	119	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
3970	119	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	xLen != $.length
14564	133	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
14564	133	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
3971	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
3971	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
3971	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
3971	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	$[i].length != yLen
3972	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
3972	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
3972	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
3972	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	$[i].length != yLen
3973	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
3973	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
3973	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
3973	140	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
3974	143	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
3974	143	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
3974	143	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
3974	143	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
14565	147	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
14565	147	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
3975	183	8	BicubicSplineInterpolatingFunction.java	isValidPoint	THIS	BicubicSplineInterpolatingFunction	1	RET	y > $.yval[$.yval.$.length - 1]
3975	183	8	BicubicSplineInterpolatingFunction.java	isValidPoint	THIS	BicubicSplineInterpolatingFunction	1	RET	x < $.xval[0]
3975	183	8	BicubicSplineInterpolatingFunction.java	isValidPoint	THIS	BicubicSplineInterpolatingFunction	1	RET	y < $.yval[0]
3975	183	8	BicubicSplineInterpolatingFunction.java	isValidPoint	THIS	BicubicSplineInterpolatingFunction	1	RET	x > $.xval[$.xval.$.length - 1]
3975	183	8	BicubicSplineInterpolatingFunction.java	isValidPoint	x	double	1	RET	$ < xval[0]
3975	183	8	BicubicSplineInterpolatingFunction.java	isValidPoint	x	double	1	RET	$ > xval[xval.length - 1]
3975	183	8	BicubicSplineInterpolatingFunction.java	isValidPoint	y	double	1	RET	$ > yval[yval.length - 1]
3975	183	8	BicubicSplineInterpolatingFunction.java	isValidPoint	y	double	1	RET	$ < yval[0]
3976	269	8	BicubicSplineInterpolatingFunction.java	partialDerivative	THIS	BicubicSplineInterpolatingFunction	0	DEF	$.partialDerivatives == null
14566	290	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < lastI
14566	290	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastI	int	0	NIL-FOR	i < $
14567	291	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < lastJ
14567	291	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastJ	int	0	NIL-FOR	j < $
3977	313	8	BicubicSplineInterpolatingFunction.java	searchIndex	THIS	BicubicSplineInterpolatingFunction	0	OutOfRangeException	r == -val.$.length - 1
3977	313	8	BicubicSplineInterpolatingFunction.java	searchIndex	r	int	0	OutOfRangeException	$ == -val.length - 1
3977	313	8	BicubicSplineInterpolatingFunction.java	searchIndex	r	int	0	OutOfRangeException	$ == -1
3977	313	8	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	OutOfRangeException	r == -$.length - 1
3978	318	8	BicubicSplineInterpolatingFunction.java	searchIndex	r	int	0	RET	$ < 0
3979	324	8	BicubicSplineInterpolatingFunction.java	searchIndex	r	int	0	RET	$ == last
3979	324	8	BicubicSplineInterpolatingFunction.java	searchIndex	last	int	0	RET	r == $
14568	366	8	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < NUM_COEFF
14569	369	12	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < NUM_COEFF
14570	414	8	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	i	int	0	NIL-FOR	$ < N
14571	415	12	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	j	int	0	NIL-FOR	$ < N
3980	425	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
3980	425	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
3981	428	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
3981	428	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
14572	453	8	BicubicSplineInterpolatingFunction.java	apply	i	int	0	NIL-FOR	$ < N
14573	454	12	BicubicSplineInterpolatingFunction.java	apply	j	int	0	NIL-FOR	$ < N
3982	466	8	BicubicSplineInterpolatingFunction.java	partialDerivativeX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeX == null
3983	476	8	BicubicSplineInterpolatingFunction.java	partialDerivativeY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeY == null
3984	486	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXX == null
3985	496	8	BicubicSplineInterpolatingFunction.java	partialDerivativeYY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeYY == null
3986	506	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXY == null
14574	523	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < N
14575	524	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < N
3963	43	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3963	43	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3963	43	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3963	43	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3963	43	8	BicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3963	43	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
3964	46	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3964	46	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3964	46	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
14552	61	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
14552	61	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3965	62	12	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3965	62	12	BicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3965	62	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3965	62	12	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
14553	66	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
14553	66	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
14554	76	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
14554	76	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
14555	83	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
14555	83	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
14556	89	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
14556	89	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
14557	91	12	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
14557	91	12	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
14558	98	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
14558	98	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
14559	100	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
14559	100	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
14560	107	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
14560	107	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
14561	110	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
14561	110	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
954	123	8	BigFraction.java	BigFraction	den	BigInteger	0	ZeroException	BigInteger.ZERO.equals($)
955	126	8	BigFraction.java	BigFraction	num	BigInteger	1	DEF	BigInteger.ZERO.equals($)
956	133	12	BigFraction.java	BigFraction	gcd	BigInteger	0	DEF	BigInteger.ONE.compareTo($) < 0
957	139	12	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.compareTo($) > 0
958	173	8	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isNaN($)
959	176	8	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isInfinite($)
960	185	8	BigFraction.java	BigFraction	exponent	long	0	DEF	$ != 0
961	189	8	BigFraction.java	BigFraction	sign	long	0	DEF	$ != 0
12454	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x001ffffffffffffeL) != 0
12454	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x1) == 0
962	198	8	BigFraction.java	BigFraction	k	int	1	DEF	$ < 0
963	275	8	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	a0 > $
963	275	8	BigFraction.java	BigFraction	a0	long	0	FractionConversionException	$ > overflow
964	281	8	BigFraction.java	BigFraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
964	281	8	BigFraction.java	BigFraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
964	281	8	BigFraction.java	BigFraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
12455	297	8	BigFraction.java	BigFraction	stop	boolean	0	NIL-DOWHILE	$
965	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	q2 > $
965	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	p2 > $
965	303	12	BigFraction.java	BigFraction	p2	long	0	FractionConversionException	$ > overflow
965	303	12	BigFraction.java	BigFraction	q2	long	0	FractionConversionException	$ > overflow
966	308	12	BigFraction.java	BigFraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
966	308	12	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
966	308	12	BigFraction.java	BigFraction	n	int	1	DEF	$ < maxIterations
966	308	12	BigFraction.java	BigFraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
966	308	12	BigFraction.java	BigFraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
966	308	12	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
966	308	12	BigFraction.java	BigFraction	maxIterations	int	1	DEF	n < $
967	322	8	BigFraction.java	BigFraction	n	int	0	FractionConversionException	$ >= maxIterations
967	322	8	BigFraction.java	BigFraction	maxIterations	int	0	FractionConversionException	n >= $
968	326	8	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
968	326	8	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
969	433	8	BigFraction.java	getReducedFraction	numerator	int	0	RET	$ == 0
970	508	8	BigFraction.java	add	fraction	BigFraction	0	NullArgumentException	$ == null
971	511	8	BigFraction.java	add	fraction	BigFraction	0	RET	ZERO.equals($)
972	518	8	BigFraction.java	add	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
972	518	8	BigFraction.java	add	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
973	612	8	BigFraction.java	divide	bg	BigInteger	0	NullArgumentException	$ == null
974	615	8	BigFraction.java	divide	bg	BigInteger	0	MathArithmeticException	BigInteger.ZERO.equals($)
975	661	8	BigFraction.java	divide	fraction	BigFraction	0	NullArgumentException	$ == null
976	664	8	BigFraction.java	divide	THIS	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals(fraction.$.numerator)
976	664	8	BigFraction.java	divide	fraction	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals($.numerator)
977	683	8	BigFraction.java	doubleValue	result	double	0	DEF	Double.isNaN($)
978	713	8	BigFraction.java	equals	THIS	BigFraction	1	DEF	$ == other
978	713	8	BigFraction.java	equals	other	Object	1	DEF	this == $
979	715	15	BigFraction.java	equals	other	Object	0	DEF	$ instanceof BigFraction
980	736	8	BigFraction.java	floatValue	result	float	0	DEF	Double.isNaN($)
981	865	8	BigFraction.java	multiply	bg	BigInteger	0	NullArgumentException	$ == null
982	910	8	BigFraction.java	multiply	fraction	BigFraction	0	NullArgumentException	$ == null
983	913	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
983	913	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	fraction.$.numerator.equals(BigInteger.ZERO)
983	913	8	BigFraction.java	multiply	fraction	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
984	957	8	BigFraction.java	pow	exponent	int	0	RET	$ < 0
985	974	8	BigFraction.java	pow	exponent	long	0	RET	$ < 0
986	993	8	BigFraction.java	pow	exponent	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
987	1052	8	BigFraction.java	subtract	bg	BigInteger	0	NullArgumentException	$ == null
988	1095	8	BigFraction.java	subtract	fraction	BigFraction	0	NullArgumentException	$ == null
989	1098	8	BigFraction.java	subtract	fraction	BigFraction	0	RET	ZERO.equals($)
990	1104	8	BigFraction.java	subtract	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
990	1104	8	BigFraction.java	subtract	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
991	1127	8	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ONE.equals($.denominator)
992	1129	15	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ZERO.equals($.numerator)
993	169	8	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigFraction
994	171	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigInteger
995	173	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
996	194	8	BigFractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
997	216	8	BigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
998	249	8	BigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
12456	272	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	$ < source.length()
12456	272	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	Character.isDigit(source.charAt($))
12456	272	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	end < $.length()
12456	272	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	Character.isDigit($.charAt(end))
219	306	8	BigReal.java	equals	THIS	BigReal	0	RET	$ == other
219	306	8	BigReal.java	equals	other	Object	0	RET	this == $
220	310	8	BigReal.java	equals	other	Object	0	RET	$ instanceof BigReal
3239	56	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i < 0
3239	56	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i >1
14221	71	8	BinaryChromosome.java	randomBinaryRepresentation	j	int	0	NIL-FOR	$<length
14221	71	8	BinaryChromosome.java	randomBinaryRepresentation	length	int	0	NIL-FOR	j<$
3240	80	8	BinaryChromosome.java	isSame	another	Chromosome	0	RET	$ instanceof BinaryChromosome
3241	85	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getLength() != anotherBc.getLength()
3241	85	8	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getLength() != $.getLength()
14222	89	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	NIL-FOR	i< $.getRepresentation().size()
14222	89	8	BinaryChromosome.java	isSame	i	int	0	NIL-FOR	$< getRepresentation().size()
3242	90	12	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))
3242	90	12	BinaryChromosome.java	isSame	i	int	0	RET	getRepresentation().get($).equals(anotherBc.getRepresentation().get($))
3242	90	12	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getRepresentation().get(i).equals($.getRepresentation().get(i))
3253	41	8	BinaryMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof BinaryChromosome
1212	70	8	BinomialDistribution.java	BinomialDistribution	trials	int	0	NotPositiveException	$ < 0
1213	74	8	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ < 0
1213	74	8	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ > 1
1214	103	8	BinomialDistribution.java	probability	THIS	BinomialDistribution	1	DEF	x > $.numberOfTrials
1214	103	8	BinomialDistribution.java	probability	x	int	1	DEF	$ < 0
1214	103	8	BinomialDistribution.java	probability	x	int	1	DEF	$ > numberOfTrials
1215	116	8	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
1216	118	15	BinomialDistribution.java	cumulativeProbability	THIS	BinomialDistribution	1	DEF	x >= $.numberOfTrials
1216	118	15	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= numberOfTrials
4118	78	12	BisectionSolver.java	doSolve	fm	double	1	DEF	$ * fmin > 0
4118	78	12	BisectionSolver.java	doSolve	fmin	double	1	DEF	fm * $ > 0
4119	86	12	BisectionSolver.java	doSolve	min	double	0	RET	FastMath.abs(max - $) <= absoluteAccuracy
4119	86	12	BisectionSolver.java	doSolve	max	double	0	RET	FastMath.abs($ - min) <= absoluteAccuracy
4119	86	12	BisectionSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(max - min) <= $
14183	73	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < iEnd
14183	73	8	BitsStreamGenerator.java	nextBytes	iEnd	int	0	NIL-WHILE	i < $
14184	82	8	BitsStreamGenerator.java	nextBytes	THIS	BitsStreamGenerator	0	NIL-WHILE	i < bytes.$.length
14184	82	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < bytes.length
14184	82	8	BitsStreamGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	i < $.length
3152	104	8	BitsStreamGenerator.java	nextGaussian	THIS	BitsStreamGenerator	1	DEF	Double.isNaN($.nextGaussian)
3153	143	8	BitsStreamGenerator.java	nextInt	n	int	0	RET	$ > 0
3154	144	12	BitsStreamGenerator.java	nextInt	n	int	0	RET	($ & -$) == $
14185	149	12	BitsStreamGenerator.java	nextInt	bits	int	0	NIL-DOWHILE	$ - val + (n - 1) < 0
14185	149	12	BitsStreamGenerator.java	nextInt	val	int	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
14185	149	12	BitsStreamGenerator.java	nextInt	n	int	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
3155	177	8	BitsStreamGenerator.java	nextLong	n	long	0	RET	$ > 0
14186	180	12	BitsStreamGenerator.java	nextLong	bits	long	0	NIL-DOWHILE	$ - val + (n - 1) < 0
14186	180	12	BitsStreamGenerator.java	nextLong	val	long	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
14186	180	12	BitsStreamGenerator.java	nextLong	n	long	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
1312	161	8	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	1	DEF	$
12547	170	8	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
12547	170	8	BlockFieldMatrix.java	BlockFieldMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
12548	172	12	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
12548	172	12	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1313	173	16	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1313	173	16	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1313	173	16	BlockFieldMatrix.java	BlockFieldMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1313	173	16	BlockFieldMatrix.java	BlockFieldMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1313	173	16	BlockFieldMatrix.java	BlockFieldMatrix	blockData	T[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1314	177	16	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	0	DEF	$
12549	217	8	BlockFieldMatrix.java	toBlocksLayout	THIS	BlockFieldMatrix	0	NIL-FOR	i < rawData.$.length
12549	217	8	BlockFieldMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
12549	217	8	BlockFieldMatrix.java	toBlocksLayout	rawData	T[][]	0	NIL-FOR	i < $.length
1315	219	12	BlockFieldMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1315	219	12	BlockFieldMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
12550	228	8	BlockFieldMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
12550	228	8	BlockFieldMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
12551	232	12	BlockFieldMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
12551	232	12	BlockFieldMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
12552	243	16	BlockFieldMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
12552	243	16	BlockFieldMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
12553	277	8	BlockFieldMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
12553	277	8	BlockFieldMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
12554	281	12	BlockFieldMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
12554	281	12	BlockFieldMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
12555	310	8	BlockFieldMatrix.java	copy	THIS	BlockFieldMatrix	0	NIL-FOR	i < $.blocks.$.length
12555	310	8	BlockFieldMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
12556	332	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
12556	332	12	BlockFieldMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
12556	332	12	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
12557	333	16	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
12557	333	16	BlockFieldMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
12557	333	16	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
12558	343	20	BlockFieldMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
12558	343	20	BlockFieldMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
12559	344	24	BlockFieldMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
12559	344	24	BlockFieldMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
12560	377	8	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
12560	377	8	BlockFieldMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
12560	377	8	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
12561	381	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
12561	381	12	BlockFieldMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
12561	381	12	BlockFieldMatrix.java	add	outBlock	T[]	0	NIL-FOR	k < $.length
12562	404	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
12562	404	12	BlockFieldMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
12562	404	12	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
12563	405	16	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
12563	405	16	BlockFieldMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
12563	405	16	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
12564	415	20	BlockFieldMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
12564	415	20	BlockFieldMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
12565	416	24	BlockFieldMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
12565	416	24	BlockFieldMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
12566	447	8	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
12566	447	8	BlockFieldMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
12566	447	8	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
12567	451	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
12567	451	12	BlockFieldMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
12567	451	12	BlockFieldMatrix.java	subtract	outBlock	T[]	0	NIL-FOR	k < $.length
12568	465	8	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
12568	465	8	BlockFieldMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
12568	465	8	BlockFieldMatrix.java	scalarAdd	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
12569	468	12	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
12569	468	12	BlockFieldMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
12569	468	12	BlockFieldMatrix.java	scalarAdd	outBlock	T[]	0	NIL-FOR	k < $.length
12570	483	8	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
12570	483	8	BlockFieldMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
12570	483	8	BlockFieldMatrix.java	scalarMultiply	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
12571	486	12	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
12571	486	12	BlockFieldMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
12571	486	12	BlockFieldMatrix.java	scalarMultiply	outBlock	T[]	0	NIL-FOR	k < $.length
12572	510	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
12572	510	12	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
12572	510	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
12573	515	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
12573	515	16	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
12573	515	16	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
12574	524	20	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
12574	524	20	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
12575	529	24	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
12575	529	24	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
12576	532	28	BlockFieldMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
12576	532	28	BlockFieldMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
12577	535	32	BlockFieldMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
12577	535	32	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
12578	573	8	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
12578	573	8	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
12578	573	8	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
12579	578	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
12579	578	12	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
12579	578	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
12580	588	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
12580	588	16	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
12581	593	20	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
12581	593	20	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
12582	596	24	BlockFieldMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
12582	596	24	BlockFieldMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
12583	600	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
12583	600	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
12584	609	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
12584	609	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
12585	634	8	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
12585	634	8	BlockFieldMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
12586	639	12	BlockFieldMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
12586	639	12	BlockFieldMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
12587	643	16	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
12587	643	16	BlockFieldMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
12588	677	8	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
12588	677	8	BlockFieldMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
12588	677	8	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
12589	680	12	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
12589	680	12	BlockFieldMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
12589	680	12	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
1316	691	16	BlockFieldMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1317	693	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1318	725	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
12590	775	8	BlockFieldMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
12590	775	8	BlockFieldMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1319	791	8	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1320	798	12	BlockFieldMatrix.java	setSubMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1320	798	12	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
12591	810	8	BlockFieldMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
12591	810	8	BlockFieldMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
12592	816	12	BlockFieldMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
12592	816	12	BlockFieldMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
12593	825	16	BlockFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
12593	825	16	BlockFieldMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
12594	848	8	BlockFieldMatrix.java	getRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
12594	848	8	BlockFieldMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1321	852	12	BlockFieldMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1321	852	12	BlockFieldMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1322	892	8	BlockFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1322	892	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1322	892	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
12595	905	8	BlockFieldMatrix.java	setRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
12595	905	8	BlockFieldMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1323	909	12	BlockFieldMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1323	909	12	BlockFieldMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
12596	935	8	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
12596	935	8	BlockFieldMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
12597	938	12	BlockFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
12597	938	12	BlockFieldMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1324	939	16	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	DEF	outIndex >= outBlock.$.length
1324	939	16	BlockFieldMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1324	939	16	BlockFieldMatrix.java	getColumnMatrix	outBlock	T[]	0	DEF	outIndex >= $.length
1325	976	8	BlockFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1325	976	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1325	976	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
12598	990	8	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
12598	990	8	BlockFieldMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
12599	993	12	BlockFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
12599	993	12	BlockFieldMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1326	994	16	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	DEF	mIndex >= mBlock.$.length
1326	994	16	BlockFieldMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1326	994	16	BlockFieldMatrix.java	setColumnMatrix	mBlock	T[]	0	DEF	mIndex >= $.length
12600	1014	8	BlockFieldMatrix.java	getRowVector	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
12600	1014	8	BlockFieldMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
12601	1047	8	BlockFieldMatrix.java	getColumnVector	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
12601	1047	8	BlockFieldMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
12602	1050	12	BlockFieldMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
12602	1050	12	BlockFieldMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
12603	1079	8	BlockFieldMatrix.java	getRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
12603	1079	8	BlockFieldMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1327	1095	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1327	1095	8	BlockFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1327	1095	8	BlockFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
12604	1103	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
12604	1103	8	BlockFieldMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
12605	1122	8	BlockFieldMatrix.java	getColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
12605	1122	8	BlockFieldMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
12606	1125	12	BlockFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
12606	1125	12	BlockFieldMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1328	1139	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1328	1139	8	BlockFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1328	1139	8	BlockFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
12607	1148	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
12607	1148	8	BlockFieldMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
12608	1151	12	BlockFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
12608	1151	12	BlockFieldMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
12609	1228	8	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockColumns
12609	1228	8	BlockFieldMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
12610	1229	12	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockRows
12610	1229	12	BlockFieldMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
12611	1239	16	BlockFieldMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
12611	1239	16	BlockFieldMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
12612	1242	20	BlockFieldMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
12612	1242	20	BlockFieldMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1329	1273	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.columns
1329	1273	8	BlockFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != columns
12613	1280	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
12613	1280	8	BlockFieldMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
12614	1283	12	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
12614	1283	12	BlockFieldMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
12615	1288	16	BlockFieldMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
12615	1288	16	BlockFieldMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
12616	1291	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
12616	1291	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
12617	1300	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
12617	1300	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1330	1315	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.rows
1330	1315	8	BlockFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != rows
12618	1322	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
12618	1322	8	BlockFieldMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
12619	1329	12	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
12619	1329	12	BlockFieldMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
12620	1333	16	BlockFieldMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
12620	1333	16	BlockFieldMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
12621	1337	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
12621	1337	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
12622	1346	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
12622	1346	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
12623	1362	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
12623	1362	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
12624	1365	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
12624	1365	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
12625	1366	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
12625	1366	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
12626	1372	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
12626	1372	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
12627	1386	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
12627	1386	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
12628	1389	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
12628	1389	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
12629	1390	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
12629	1390	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
12630	1396	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
12630	1396	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
12631	1414	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
12631	1414	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
12632	1418	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
12632	1418	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
12633	1419	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
12633	1419	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
12634	1426	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
12634	1426	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
12635	1444	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
12635	1444	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
12636	1448	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
12636	1448	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
12637	1449	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
12637	1449	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
12638	1456	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
12638	1456	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
12639	1471	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
12639	1471	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
12640	1474	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
12640	1474	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
12641	1479	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
12641	1479	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
12642	1480	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
12642	1480	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
12643	1496	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
12643	1496	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
12644	1499	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
12644	1499	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
12645	1504	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
12645	1504	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
12646	1505	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
12646	1505	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
12647	1524	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
12647	1524	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
12648	1528	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
12648	1528	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
12649	1534	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
12649	1534	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
12650	1536	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
12650	1536	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
12651	1554	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
12651	1554	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
12652	1558	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
12652	1558	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
12653	1564	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
12653	1564	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
12654	1566	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
12654	1566	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
1669	157	8	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	1	DEF	$
13064	166	8	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
13064	166	8	BlockRealMatrix.java	BlockRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
13065	168	12	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
13065	168	12	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1670	169	16	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1670	169	16	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1670	169	16	BlockRealMatrix.java	BlockRealMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1670	169	16	BlockRealMatrix.java	BlockRealMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1670	169	16	BlockRealMatrix.java	BlockRealMatrix	blockData	double[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1671	173	16	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	0	DEF	$
13066	209	8	BlockRealMatrix.java	toBlocksLayout	THIS	BlockRealMatrix	0	NIL-FOR	i < rawData.$.length
13066	209	8	BlockRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
13066	209	8	BlockRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
1672	211	12	BlockRealMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1672	211	12	BlockRealMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
13067	219	8	BlockRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
13067	219	8	BlockRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
13068	223	12	BlockRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
13068	223	12	BlockRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
13069	234	16	BlockRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
13069	234	16	BlockRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
13070	263	8	BlockRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
13070	263	8	BlockRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
13071	267	12	BlockRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
13071	267	12	BlockRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
13072	294	8	BlockRealMatrix.java	copy	THIS	BlockRealMatrix	0	NIL-FOR	i < $.blocks.$.length
13072	294	8	BlockRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
13073	315	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
13073	315	12	BlockRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
13073	315	12	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
13074	316	16	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
13074	316	16	BlockRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
13074	316	16	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
13075	326	20	BlockRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
13075	326	20	BlockRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
13076	327	24	BlockRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
13076	327	24	BlockRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
13077	357	8	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
13077	357	8	BlockRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
13077	357	8	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
13078	361	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
13078	361	12	BlockRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
13078	361	12	BlockRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
13079	383	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
13079	383	12	BlockRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
13079	383	12	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
13080	384	16	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
13080	384	16	BlockRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
13080	384	16	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
13081	394	20	BlockRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
13081	394	20	BlockRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
13082	395	24	BlockRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
13082	395	24	BlockRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
13083	425	8	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
13083	425	8	BlockRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
13083	425	8	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
13084	429	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
13084	429	12	BlockRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
13084	429	12	BlockRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
13085	444	8	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
13085	444	8	BlockRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
13085	444	8	BlockRealMatrix.java	scalarAdd	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
13086	447	12	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
13086	447	12	BlockRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
13086	447	12	BlockRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
13087	461	8	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
13087	461	8	BlockRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
13087	461	8	BlockRealMatrix.java	scalarMultiply	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
13088	464	12	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
13088	464	12	BlockRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
13088	464	12	BlockRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
13089	486	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
13089	486	12	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
13089	486	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
13090	490	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
13090	490	16	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
13090	490	16	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
13091	498	20	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
13091	498	20	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
13092	503	24	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
13092	503	24	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
13093	506	28	BlockRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
13093	506	28	BlockRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
13094	509	32	BlockRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
13094	509	32	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
13095	543	8	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
13095	543	8	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
13095	543	8	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
13096	548	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
13096	548	12	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
13096	548	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
13097	558	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
13097	558	16	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
13098	563	20	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
13098	563	20	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
13099	566	24	BlockRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
13099	566	24	BlockRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
13100	570	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
13100	570	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
13101	578	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
13101	578	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
13102	601	8	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
13102	601	8	BlockRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
13103	606	12	BlockRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
13103	606	12	BlockRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
13104	610	16	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
13104	610	16	BlockRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
13105	628	8	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
13105	628	8	BlockRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
13106	631	12	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
13106	631	12	BlockRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
13107	634	16	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
13107	634	16	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
13108	636	20	BlockRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
13108	636	20	BlockRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
13109	642	12	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
13109	642	12	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
13110	653	8	BlockRealMatrix.java	getFrobeniusNorm	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
13110	653	8	BlockRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
13111	682	8	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
13111	682	8	BlockRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
13111	682	8	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
13112	685	12	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
13112	685	12	BlockRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
13112	685	12	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
1673	696	16	BlockRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1674	698	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1675	730	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
13113	780	8	BlockRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
13113	780	8	BlockRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1676	796	8	BlockRealMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1677	803	12	BlockRealMatrix.java	setSubMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1677	803	12	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
13114	815	8	BlockRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
13114	815	8	BlockRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
13115	821	12	BlockRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
13115	821	12	BlockRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
13116	830	16	BlockRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
13116	830	16	BlockRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
13117	853	8	BlockRealMatrix.java	getRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
13117	853	8	BlockRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1678	857	12	BlockRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1678	857	12	BlockRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1679	897	8	BlockRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1679	897	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1679	897	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
13118	910	8	BlockRealMatrix.java	setRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
13118	910	8	BlockRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1680	914	12	BlockRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1680	914	12	BlockRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
13119	940	8	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
13119	940	8	BlockRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
13120	943	12	BlockRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
13120	943	12	BlockRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1681	944	16	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	DEF	outIndex >= outBlock.$.length
1681	944	16	BlockRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1681	944	16	BlockRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
1682	981	8	BlockRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1682	981	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1682	981	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
13121	995	8	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
13121	995	8	BlockRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
13122	998	12	BlockRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
13122	998	12	BlockRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1683	999	16	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	DEF	mIndex >= mBlock.$.length
1683	999	16	BlockRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1683	999	16	BlockRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
13123	1019	8	BlockRealMatrix.java	getRowVector	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
13123	1019	8	BlockRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
13124	1052	8	BlockRealMatrix.java	getColumnVector	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
13124	1052	8	BlockRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
13125	1055	12	BlockRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
13125	1055	12	BlockRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
13126	1084	8	BlockRealMatrix.java	getRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
13126	1084	8	BlockRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1684	1100	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1684	1100	8	BlockRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1684	1100	8	BlockRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
13127	1108	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
13127	1108	8	BlockRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
13128	1127	8	BlockRealMatrix.java	getColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
13128	1127	8	BlockRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
13129	1130	12	BlockRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
13129	1130	12	BlockRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1685	1144	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1685	1144	8	BlockRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1685	1144	8	BlockRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
13130	1153	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
13130	1153	8	BlockRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
13131	1156	12	BlockRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
13131	1156	12	BlockRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
13132	1221	8	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
13132	1221	8	BlockRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
13133	1222	12	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockRows
13133	1222	12	BlockRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
13134	1231	16	BlockRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
13134	1231	16	BlockRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
13135	1234	20	BlockRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
13135	1234	20	BlockRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1686	1264	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.columns
1686	1264	8	BlockRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != columns
13136	1270	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
13136	1270	8	BlockRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
13137	1273	12	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
13137	1273	12	BlockRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
13138	1278	16	BlockRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
13138	1278	16	BlockRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
13139	1281	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
13139	1281	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
13140	1289	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
13140	1289	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1687	1304	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.rows
1687	1304	8	BlockRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != rows
13141	1310	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
13141	1310	8	BlockRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
13142	1317	12	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
13142	1317	12	BlockRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
13143	1321	16	BlockRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
13143	1321	16	BlockRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
13144	1325	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
13144	1325	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
13145	1333	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
13145	1333	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
13146	1349	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
13146	1349	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
13147	1352	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
13147	1352	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
13148	1353	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
13148	1353	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
13149	1359	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
13149	1359	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
13150	1373	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
13150	1373	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
13151	1376	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
13151	1376	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
13152	1377	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
13152	1377	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
13153	1383	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
13153	1383	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
13154	1401	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
13154	1401	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
13155	1405	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
13155	1405	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
13156	1406	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
13156	1406	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
13157	1413	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
13157	1413	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
13158	1431	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
13158	1431	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
13159	1435	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
13159	1435	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
13160	1436	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
13160	1436	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
13161	1443	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
13161	1443	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
13162	1458	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
13162	1458	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
13163	1461	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
13163	1461	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
13164	1466	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
13164	1466	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
13165	1467	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
13165	1467	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
13166	1483	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
13166	1483	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
13167	1486	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
13167	1486	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
13168	1491	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
13168	1491	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
13169	1492	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
13169	1492	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
13170	1512	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
13170	1512	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
13171	1516	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
13171	1516	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
13172	1522	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
13172	1522	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
13173	1524	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
13173	1524	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
13174	1543	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
13174	1543	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
13175	1547	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
13175	1547	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
13176	1553	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
13176	1553	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
13177	1555	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
13177	1555	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
623	47	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusOutside() != null
624	50	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusInside() != null
2684	91	8	BracketFinder.java	BracketFinder	growLimit	double	0	NotStrictlyPositiveException	$ <= 0
2685	94	8	BracketFinder.java	BracketFinder	maxEvaluations	int	0	NotStrictlyPositiveException	$ <= 0
2686	118	8	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fA < fB : fA > fB
2686	118	8	BracketFinder.java	search	fA	double	0	DEF	isMinim ? $ < fB : $ > fB
2686	118	8	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fA < $ : fA > $
13843	134	8	BracketFinder.java	search	isMinim	boolean	0	NIL-WHILE	$ ? fC < fB : fC > fB
13843	134	8	BracketFinder.java	search	fB	double	0	NIL-WHILE	isMinim ? fC < $ : fC > $
13843	134	8	BracketFinder.java	search	fC	double	0	NIL-WHILE	isMinim ? $ < fB : $ > fB
2687	145	12	BracketFinder.java	search	w	double	1	DEF	($ - xC) * (xB - $) > 0
2687	145	12	BracketFinder.java	search	xC	double	1	DEF	(w - $) * (xB - w) > 0
2687	145	12	BracketFinder.java	search	xB	double	1	DEF	(w - xC) * ($ - w) > 0
2688	147	16	BracketFinder.java	search	fW	double	1	DEF	isMinim ? $ < fC : $ > fC
2688	147	16	BracketFinder.java	search	isMinim	boolean	1	DEF	$ ? fW < fC : fW > fC
2688	147	16	BracketFinder.java	search	fC	double	1	DEF	isMinim ? fW < $ : fW > $
2689	155	23	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ > fB : $ < fB
2689	155	23	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW > fB : fW < fB
2689	155	23	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fW > $ : fW < $
2690	164	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (wLim - xC) >= 0
2690	164	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * ($ - xC) >= 0
2690	164	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * (wLim - $) >= 0
2691	167	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (xC - $) > 0
2691	167	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * (xC - w) > 0
2691	167	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * ($ - w) > 0
2692	169	16	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ < fC : $ > fC
2692	169	16	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW < fC : fW > fC
2692	169	16	BracketFinder.java	search	fC	double	0	DEF	isMinim ? fW < $ : fW > $
2693	199	8	BracketFinder.java	search	THIS	BracketFinder	0	DEF	$.lo > $.hi
1825	93	8	BracketFinder.java	BracketFinder	growLimit	double	0	NotStrictlyPositiveException	$ <= 0
1826	96	8	BracketFinder.java	BracketFinder	maxEvaluations	int	0	NotStrictlyPositiveException	$ <= 0
1827	120	8	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fA < fB : fA > fB
1827	120	8	BracketFinder.java	search	fA	double	0	DEF	isMinim ? $ < fB : $ > fB
1827	120	8	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fA < $ : fA > $
13346	136	8	BracketFinder.java	search	isMinim	boolean	0	NIL-WHILE	$ ? fC < fB : fC > fB
13346	136	8	BracketFinder.java	search	fB	double	0	NIL-WHILE	isMinim ? fC < $ : fC > $
13346	136	8	BracketFinder.java	search	fC	double	0	NIL-WHILE	isMinim ? $ < fB : $ > fB
1828	147	12	BracketFinder.java	search	w	double	1	DEF	($ - xC) * (xB - $) > 0
1828	147	12	BracketFinder.java	search	xC	double	1	DEF	(w - $) * (xB - w) > 0
1828	147	12	BracketFinder.java	search	xB	double	1	DEF	(w - xC) * ($ - w) > 0
1829	149	16	BracketFinder.java	search	fW	double	1	DEF	isMinim ? $ < fC : $ > fC
1829	149	16	BracketFinder.java	search	isMinim	boolean	1	DEF	$ ? fW < fC : fW > fC
1829	149	16	BracketFinder.java	search	fC	double	1	DEF	isMinim ? fW < $ : fW > $
1830	157	23	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ > fB : $ < fB
1830	157	23	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW > fB : fW < fB
1830	157	23	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fW > $ : fW < $
1831	166	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (wLim - xC) >= 0
1831	166	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * ($ - xC) >= 0
1831	166	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * (wLim - $) >= 0
1832	169	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (xC - $) > 0
1832	169	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * (xC - w) > 0
1832	169	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * ($ - w) > 0
1833	171	16	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ < fC : $ > fC
1833	171	16	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW < fC : fW > fC
1833	171	16	BracketFinder.java	search	fC	double	0	DEF	isMinim ? fW < $ : fW > $
1834	201	8	BracketFinder.java	search	THIS	BracketFinder	0	DEF	$.lo > $.hi
4073	85	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
4074	105	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
4075	127	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
4076	159	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[1], 0.0, 1)
4077	166	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[0], 0.0, 1)
4078	173	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[0] * $[1] < 0
4079	183	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[2], 0.0, 1)
4080	188	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[1] * $[2] < 0
4081	217	12	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	MathInternalError:RET	FastMath.max(absYA, absYB) < $.getFunctionValueAccuracy()
4081	217	12	BracketingNthOrderBrentSolver.java	doSolve	xTol	double	0	MathInternalError:RET	(xB - xA) <= $
4081	217	12	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	MathInternalError:RET	(xB - $) <= xTol
4081	217	12	BracketingNthOrderBrentSolver.java	doSolve	absYA	double	0	MathInternalError:RET	FastMath.max($, absYB) < getFunctionValueAccuracy()
4081	217	12	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	MathInternalError:RET	($ - xA) <= xTol
4081	217	12	BracketingNthOrderBrentSolver.java	doSolve	absYB	double	0	MathInternalError:RET	FastMath.max(absYA, $) < getFunctionValueAccuracy()
4082	237	12	BracketingNthOrderBrentSolver.java	doSolve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
4083	243	19	BracketingNthOrderBrentSolver.java	doSolve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
14634	258	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	NIL-DOWHILE	Double.isNaN($)
14634	258	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	0	NIL-DOWHILE	end - $ > 1
14634	258	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	0	NIL-DOWHILE	$ - start > 1
4084	264	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ < xB
4084	264	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ > xA
4084	264	16	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	DEF	nextX > $
4084	264	16	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	DEF	nextX < $
4085	270	20	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
4085	270	20	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
4085	270	20	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	1	DEF	$ - start >= end - $
4086	285	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	Double.isNaN($)
4087	294	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	0	RET	Precision.equals($, 0.0, 1)
4088	300	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	end - $ != nbPoints
4088	300	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	$ - start != nbPoints
4088	300	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	$ > 2
4088	300	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	end - start != $
4089	309	20	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	nbPoints == x.$.length
4089	309	20	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	nbPoints == $.length
4089	309	20	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	0	DEF	$ == x.length
4090	315	16	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
4090	315	16	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
4090	315	16	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
4091	333	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	1	DEF	$ * yA <= 0
4091	333	12	BracketingNthOrderBrentSolver.java	doSolve	yA	double	1	DEF	nextY * $ <= 0
14635	375	8	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	$ < end - 1
14635	375	8	BracketingNthOrderBrentSolver.java	guessX	end	int	0	NIL-FOR	i < $ - 1
14636	377	12	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ > i
14636	377	12	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	j > $
14637	384	8	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ >= start
14637	384	8	BracketingNthOrderBrentSolver.java	guessX	start	int	0	NIL-FOR	j >= $
3833	78	8	BracketingNthOrderBrentSolverDFP.java	BracketingNthOrderBrentSolverDFP	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3834	202	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[1].isZero()
3835	210	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[0].isZero()
3836	217	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[0].multiply($[1]).negativeOrNull()
3837	228	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[2].isZero()
3838	233	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[1].multiply($[2]).negativeOrNull()
3839	266	12	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	MathInternalError:RET	maxY.lessThan($.functionValueAccuracy)
3839	266	12	BracketingNthOrderBrentSolverDFP.java	solve	maxY	Dfp	0	MathInternalError:RET	$.lessThan(functionValueAccuracy)
3839	266	12	BracketingNthOrderBrentSolverDFP.java	solve	xTol	Dfp	0	MathInternalError:RET	xB.subtract(xA).subtract($).negativeOrNull()
3839	266	12	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	MathInternalError:RET	xB.subtract($).subtract(xTol).negativeOrNull()
3839	266	12	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	MathInternalError:RET	$.subtract(xA).subtract(xTol).negativeOrNull()
3840	287	12	BracketingNthOrderBrentSolverDFP.java	solve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
3841	290	19	BracketingNthOrderBrentSolverDFP.java	solve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
14505	302	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	NIL-DOWHILE	$.isNaN()
14505	302	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	0	NIL-DOWHILE	end - $ > 1
14505	302	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	0	NIL-DOWHILE	$ - start > 1
3842	308	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.greaterThan(xA)
3842	308	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.lessThan(xB)
3842	308	16	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	DEF	nextX.greaterThan($)
3842	308	16	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	DEF	nextX.lessThan($)
3843	314	20	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
3843	314	20	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
3843	314	20	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	1	DEF	$ - start >= end - $
3844	329	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.isNaN()
3845	339	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	0	RET	$.isZero()
3846	345	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	end - $ != nbPoints
3846	345	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	$ - start != nbPoints
3846	345	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	end - start != $
3846	345	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	$ > 2
3847	354	20	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	nbPoints == x.$.length
3847	354	20	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	nbPoints == $.length
3847	354	20	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	0	DEF	$ == x.length
3848	360	16	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
3848	360	16	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
3848	360	16	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
3849	378	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	1	DEF	$.multiply(yA).negativeOrNull()
3849	378	12	BracketingNthOrderBrentSolverDFP.java	solve	yA	Dfp	1	DEF	nextY.multiply($).negativeOrNull()
14506	420	8	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	$ < end - 1
14506	420	8	BracketingNthOrderBrentSolverDFP.java	guessX	end	int	0	NIL-FOR	i < $ - 1
14507	422	12	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ > i
14507	422	12	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	j > $
14508	429	8	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ >= start
14508	429	8	BracketingNthOrderBrentSolverDFP.java	guessX	start	int	0	NIL-FOR	j >= $
2698	83	8	BrentOptimizer.java	BrentOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
2699	86	8	BrentOptimizer.java	BrentOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
2700	127	8	BrentOptimizer.java	doOptimize	lo	double	1	DEF	$ < hi
2700	127	8	BrentOptimizer.java	doOptimize	hi	double	1	DEF	lo < $
2701	141	8	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
2702	161	12	BrentOptimizer.java	doOptimize	stop	boolean	1	RET	$
2703	167	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(e) > $
2703	167	16	BrentOptimizer.java	doOptimize	e	double	1	DEF	FastMath.abs($) > tol1
2704	173	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	$ > 0
2705	182	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ > q * (a - x)
2705	182	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ < q * (b - x)
2705	182	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	FastMath.abs($) < FastMath.abs(0.5 * q * r)
2705	182	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p > $ * (a - x)
2705	182	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p < $ * (b - x)
2705	182	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * $ * r)
2705	182	20	BrentOptimizer.java	doOptimize	r	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * q * $)
2705	182	20	BrentOptimizer.java	doOptimize	a	double	1	DEF	p > q * ($ - x)
2705	182	20	BrentOptimizer.java	doOptimize	b	double	1	DEF	p < q * ($ - x)
2705	182	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p > q * (a - $)
2705	182	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p < q * (b - $)
2706	190	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	$ - a < tol2
2706	190	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	b - $ < tol2
2706	190	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	u - a < $
2706	190	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	b - u < $
2706	190	24	BrentOptimizer.java	doOptimize	a	double	0	DEF	u - $ < tol2
2706	190	24	BrentOptimizer.java	doOptimize	b	double	0	DEF	$ - u < tol2
2707	191	28	BrentOptimizer.java	doOptimize	m	double	1	DEF	x <= $
2707	191	28	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ <= m
2708	199	24	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
2708	199	24	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
2709	208	20	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
2709	208	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
2710	217	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(d) < $
2710	217	16	BrentOptimizer.java	doOptimize	d	double	1	DEF	FastMath.abs($) < tol1
2711	218	20	BrentOptimizer.java	doOptimize	d	double	1	DEF	$ >= 0
2712	228	16	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
2713	241	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$ != null
2713	241	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$.converged(iter, previous, current)
2713	241	16	BrentOptimizer.java	doOptimize	previous	UnivariatePointValuePair	0	RET	checker.converged(iter, $, current)
2713	241	16	BrentOptimizer.java	doOptimize	current	UnivariatePointValuePair	0	RET	checker.converged(iter, previous, $)
2713	241	16	BrentOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
2714	246	16	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fx
2714	246	16	BrentOptimizer.java	doOptimize	fx	double	1	DEF	fu <= $
2715	247	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
2715	247	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
2716	259	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
2716	259	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
2717	264	20	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fw
2717	264	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	Precision.equals(w, $)
2717	264	20	BrentOptimizer.java	doOptimize	w	double	1	DEF	Precision.equals($, x)
2717	264	20	BrentOptimizer.java	doOptimize	fw	double	1	DEF	fu <= $
2718	270	27	BrentOptimizer.java	doOptimize	fu	double	0	DEF	$ <= fv
2718	270	27	BrentOptimizer.java	doOptimize	x	double	0	DEF	Precision.equals(v, $)
2718	270	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, w)
2718	270	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, x)
2718	270	27	BrentOptimizer.java	doOptimize	w	double	0	DEF	Precision.equals(v, $)
2718	270	27	BrentOptimizer.java	doOptimize	fv	double	0	DEF	fu <= $
2719	302	8	BrentOptimizer.java	best	a	UnivariatePointValuePair	0	RET	$ == null
2720	305	8	BrentOptimizer.java	best	b	UnivariatePointValuePair	0	RET	$ == null
2721	309	8	BrentOptimizer.java	best	isMinim	boolean	1	RET	$
1837	85	8	BrentOptimizer.java	BrentOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
1838	88	8	BrentOptimizer.java	BrentOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
1839	129	8	BrentOptimizer.java	doOptimize	lo	double	1	DEF	$ < hi
1839	129	8	BrentOptimizer.java	doOptimize	hi	double	1	DEF	lo < $
1840	143	8	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1841	163	12	BrentOptimizer.java	doOptimize	stop	boolean	1	RET	$
1842	169	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(e) > $
1842	169	16	BrentOptimizer.java	doOptimize	e	double	1	DEF	FastMath.abs($) > tol1
1843	175	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	$ > 0
1844	184	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ < q * (b - x)
1844	184	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ > q * (a - x)
1844	184	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	FastMath.abs($) < FastMath.abs(0.5 * q * r)
1844	184	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p < $ * (b - x)
1844	184	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p > $ * (a - x)
1844	184	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * $ * r)
1844	184	20	BrentOptimizer.java	doOptimize	r	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * q * $)
1844	184	20	BrentOptimizer.java	doOptimize	a	double	1	DEF	p > q * ($ - x)
1844	184	20	BrentOptimizer.java	doOptimize	b	double	1	DEF	p < q * ($ - x)
1844	184	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p < q * (b - $)
1844	184	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p > q * (a - $)
1845	192	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	b - $ < tol2
1845	192	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	$ - a < tol2
1845	192	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	b - u < $
1845	192	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	u - a < $
1845	192	24	BrentOptimizer.java	doOptimize	a	double	0	DEF	u - $ < tol2
1845	192	24	BrentOptimizer.java	doOptimize	b	double	0	DEF	$ - u < tol2
1846	193	28	BrentOptimizer.java	doOptimize	m	double	1	DEF	x <= $
1846	193	28	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ <= m
1847	201	24	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1847	201	24	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1848	210	20	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1848	210	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1849	219	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(d) < $
1849	219	16	BrentOptimizer.java	doOptimize	d	double	1	DEF	FastMath.abs($) < tol1
1850	220	20	BrentOptimizer.java	doOptimize	d	double	1	DEF	$ >= 0
1851	230	16	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1852	243	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$ != null
1852	243	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$.converged(iter, previous, current)
1852	243	16	BrentOptimizer.java	doOptimize	previous	UnivariatePointValuePair	0	RET	checker.converged(iter, $, current)
1852	243	16	BrentOptimizer.java	doOptimize	current	UnivariatePointValuePair	0	RET	checker.converged(iter, previous, $)
1852	243	16	BrentOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1853	248	16	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fx
1853	248	16	BrentOptimizer.java	doOptimize	fx	double	1	DEF	fu <= $
1854	249	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1854	249	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1855	261	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1855	261	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1856	266	20	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fw
1856	266	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	Precision.equals(w, $)
1856	266	20	BrentOptimizer.java	doOptimize	w	double	1	DEF	Precision.equals($, x)
1856	266	20	BrentOptimizer.java	doOptimize	fw	double	1	DEF	fu <= $
1857	272	27	BrentOptimizer.java	doOptimize	fu	double	0	DEF	$ <= fv
1857	272	27	BrentOptimizer.java	doOptimize	x	double	0	DEF	Precision.equals(v, $)
1857	272	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, x)
1857	272	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, w)
1857	272	27	BrentOptimizer.java	doOptimize	w	double	0	DEF	Precision.equals(v, $)
1857	272	27	BrentOptimizer.java	doOptimize	fv	double	0	DEF	fu <= $
1858	304	8	BrentOptimizer.java	best	a	UnivariatePointValuePair	0	RET	$ == null
1859	307	8	BrentOptimizer.java	best	b	UnivariatePointValuePair	0	RET	$ == null
1860	311	8	BrentOptimizer.java	best	isMinim	boolean	1	RET	$
4127	97	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
4127	97	8	BrentSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4128	103	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
4128	103	8	BrentSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4129	108	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
4129	108	8	BrentSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
4130	114	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
4130	114	8	BrentSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4131	119	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
4131	119	8	BrentSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
4132	157	12	BrentSolver.java	brent	fb	double	0	DEF	FastMath.abs(fc) < FastMath.abs($)
4132	157	12	BrentSolver.java	brent	fc	double	0	DEF	FastMath.abs($) < FastMath.abs(fb)
4133	169	12	BrentSolver.java	brent	tol	double	0	RET	FastMath.abs(m) <= $
4133	169	12	BrentSolver.java	brent	m	double	0	RET	FastMath.abs($) <= tol
4133	169	12	BrentSolver.java	brent	fb	double	0	RET	Precision.equals($, 0)
4134	173	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(e) < $
4134	173	12	BrentSolver.java	brent	fa	double	1	DEF	FastMath.abs($) <= FastMath.abs(fb)
4134	173	12	BrentSolver.java	brent	fb	double	1	DEF	FastMath.abs(fa) <= FastMath.abs($)
4134	173	12	BrentSolver.java	brent	e	double	1	DEF	FastMath.abs($) < tol
4135	185	16	BrentSolver.java	brent	a	double	1	DEF	$ == c
4135	185	16	BrentSolver.java	brent	c	double	1	DEF	a == $
4136	196	16	BrentSolver.java	brent	p	double	1	DEF	$ > 0
4137	203	16	BrentSolver.java	brent	s	double	1	DEF	p >= FastMath.abs(0.5 * $ * q)
4137	203	16	BrentSolver.java	brent	p	double	1	DEF	$ >= 1.5 * m * q - FastMath.abs(tol * q)
4137	203	16	BrentSolver.java	brent	p	double	1	DEF	$ >= FastMath.abs(0.5 * s * q)
4137	203	16	BrentSolver.java	brent	q	double	1	DEF	p >= 1.5 * m * $ - FastMath.abs(tol * $)
4137	203	16	BrentSolver.java	brent	q	double	1	DEF	p >= FastMath.abs(0.5 * s * $)
4137	203	16	BrentSolver.java	brent	tol	double	1	DEF	p >= 1.5 * m * q - FastMath.abs($ * q)
4137	203	16	BrentSolver.java	brent	m	double	1	DEF	p >= 1.5 * $ * q - FastMath.abs(tol * q)
4138	217	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(d) > $
4138	217	12	BrentSolver.java	brent	d	double	1	DEF	FastMath.abs($) > tol
4139	219	19	BrentSolver.java	brent	m	double	1	DEF	$ > 0
4140	225	12	BrentSolver.java	brent	fb	double	0	DEF	$ <= 0
4140	225	12	BrentSolver.java	brent	fb	double	0	DEF	$ > 0
4140	225	12	BrentSolver.java	brent	fc	double	0	DEF	$ <= 0
4140	225	12	BrentSolver.java	brent	fc	double	0	DEF	$ > 0
13891	387	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	$.iterations <= $.maxIterations
13892	395	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	k < $.lambda
13892	395	12	CMAESOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < lambda
13893	397	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.checkFeasableCount + 1
13893	397	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < checkFeasableCount + 1
2820	398	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
2821	405	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.checkFeasableCount
2821	405	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= checkFeasableCount
2821	405	20	CMAESOptimizer.java	doOptimize	arxk	RealMatrix	0	DEF	fitfun.isFeasible($.getColumn(0))
2821	405	20	CMAESOptimizer.java	doOptimize	fitfun	FitnessFunction	0	DEF	$.isFeasible(arxk.getColumn(0))
2822	428	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
2823	437	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	bestValue > $
2823	437	12	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ > bestFitness
2824	442	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
2824	442	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, optimum, lastResult)
2824	442	16	CMAESOptimizer.java	doOptimize	optimum	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
2824	442	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, optimum, $)
2824	442	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
2825	449	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestFitness < ($.isMinimize ? $.stopFitness : -$.stopFitness)
2825	449	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.stopFitness != 0
2825	449	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	$ < (isMinimize ? stopFitness : -stopFitness)
13894	454	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
13894	454	12	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
2826	455	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > $.stopTolX
2826	455	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * Math.max(Math.abs(pcCol[$]), sqrtDiagC[$]) > stopTolX
2826	455	16	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * Math.max(Math.abs(pcCol[i]), $[i]) > stopTolX
2826	455	16	CMAESOptimizer.java	doOptimize	pcCol	double[]	0	DEF	sigma * Math.max(Math.abs($[i]), sqrtDiagC[i]) > stopTolX
2827	458	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.dimension - 1
2827	458	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= dimension - 1
13895	462	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
13895	462	12	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
2828	463	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * sqrtDiagC[i] > $.stopTolUpX
2828	463	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * sqrtDiagC[$] > stopTolUpX
2828	463	16	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * $[i] > stopTolUpX
2829	469	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, bestFitness) < $.stopTolFun
2829	469	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
2829	469	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
2829	469	12	CMAESOptimizer.java	doOptimize	worstFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
2829	469	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
2829	469	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
2830	474	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > $.fitnessHistory.$.length
2830	474	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	historyWorst - historyBest < $.stopTolHistFun
2830	474	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	historyWorst - $ < stopTolHistFun
2830	474	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	$ - historyBest < stopTolHistFun
2831	479	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) / $.min($.diagD) > 1e7
2832	483	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
2833	487	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, current, lastResult)
2833	487	16	CMAESOptimizer.java	doOptimize	current	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
2833	487	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
2833	487	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, current, $)
2834	494	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestValue == fitness[arindex[(int)(0.1+$.lambda/4.)]]
2834	494	12	CMAESOptimizer.java	doOptimize	fitness	double[]	0	DEF	bestValue == $[arindex[(int)(0.1+lambda/4.)]]
2834	494	12	CMAESOptimizer.java	doOptimize	arindex	int[]	0	DEF	bestValue == fitness[$[(int)(0.1+lambda/4.)]]
2834	494	12	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ == fitness[arindex[(int)(0.1+lambda/4.)]]
2835	497	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
2835	497	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
2835	497	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
2835	497	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
2836	504	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.generateStatistics
2837	532	12	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof Sigma
2838	536	12	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof PopulationSize
2839	553	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma != null
2840	554	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	DimensionMismatchException	$.inputSigma.$.length != init.$.length
2840	554	12	CMAESOptimizer.java	checkParameters	init	double[]	0	DimensionMismatchException	inputSigma.length != $.length
13896	557	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < init.$.length
13896	557	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < init.length
13896	557	12	CMAESOptimizer.java	checkParameters	init	double[]	0	NIL-FOR	i < $.length
2841	558	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma[i] > uB[i] - lB[i]
2841	558	16	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	inputSigma[$] > uB[$] - lB[$]
2841	558	16	CMAESOptimizer.java	checkParameters	lB	double[]	0	OutOfRangeException	inputSigma[i] > uB[i] - $[i]
2841	558	16	CMAESOptimizer.java	checkParameters	uB	double[]	0	OutOfRangeException	inputSigma[i] > $[i] - lB[i]
2842	571	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NotStrictlyPositiveException	$.lambda <= 0
13897	576	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < guess.$.length
13897	576	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < guess.length
13897	576	8	CMAESOptimizer.java	initializeCMA	guess	double[]	0	NIL-FOR	i < $.length
13898	594	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.mu
13898	594	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < mu
13899	631	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.historySize
13899	631	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < historySize
2843	653	8	CMAESOptimizer.java	updateEvolutionPaths	hsig	boolean	0	DEF	$
2844	676	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.diagonalOnly > 1
2844	676	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.iterations > $.diagonalOnly
2845	701	8	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu > 0
2846	709	12	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	1	DEF	$.isActiveCMA
2847	732	16	CMAESOptimizer.java	updateCovariance	negcovMax	double	0	DEF	negccov > $
2847	732	16	CMAESOptimizer.java	updateCovariance	negccov	double	0	DEF	$ > negcovMax
2848	764	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu + negccov > 0
2848	764	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	($.iterations % 1. / ($.ccov1 + $.ccovmu + negccov) / $.dimension / 10.) < 1
2848	764	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	ccov1 + ccovmu + $ > 0
2848	764	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1
2849	773	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.min($.diagD) <= 0
13900	774	16	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
13900	774	16	CMAESOptimizer.java	updateBD	i	int	0	NIL-FOR	$ < dimension
2850	775	20	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.diagD.getEntry(i, 0) < 0
2850	775	20	CMAESOptimizer.java	updateBD	i	int	0	DEF	diagD.getEntry($, 0) < 0
2851	783	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) > 1e14 * $.min($.diagD)
13901	801	8	CMAESOptimizer.java	push	i	int	0	NIL-FOR	$ > 0
13902	815	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
13902	815	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
13902	815	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
13903	820	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
13903	820	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
13903	820	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
13904	980	8	CMAESOptimizer.java	log	r	int	0	NIL-FOR	$ < m.getRowDimension()
13904	980	8	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
13905	981	12	CMAESOptimizer.java	log	c	int	0	NIL-FOR	$ < m.getColumnDimension()
13905	981	12	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
13906	994	8	CMAESOptimizer.java	sqrt	r	int	0	NIL-FOR	$ < m.getRowDimension()
13906	994	8	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
13907	995	12	CMAESOptimizer.java	sqrt	c	int	0	NIL-FOR	$ < m.getColumnDimension()
13907	995	12	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
13908	1008	8	CMAESOptimizer.java	square	r	int	0	NIL-FOR	$ < m.getRowDimension()
13908	1008	8	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
13909	1009	12	CMAESOptimizer.java	square	c	int	0	NIL-FOR	$ < m.getColumnDimension()
13909	1009	12	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
13910	1024	8	CMAESOptimizer.java	times	r	int	0	NIL-FOR	$ < m.getRowDimension()
13910	1024	8	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
13911	1025	12	CMAESOptimizer.java	times	c	int	0	NIL-FOR	$ < m.getColumnDimension()
13911	1025	12	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
13912	1039	8	CMAESOptimizer.java	divide	r	int	0	NIL-FOR	$ < m.getRowDimension()
13912	1039	8	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
13913	1040	12	CMAESOptimizer.java	divide	c	int	0	NIL-FOR	$ < m.getColumnDimension()
13913	1040	12	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
13914	1054	8	CMAESOptimizer.java	selectColumns	r	int	0	NIL-FOR	$ < m.getRowDimension()
13914	1054	8	CMAESOptimizer.java	selectColumns	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
13915	1055	12	CMAESOptimizer.java	selectColumns	THIS	CMAESOptimizer	0	NIL-FOR	c < cols.$.length
13915	1055	12	CMAESOptimizer.java	selectColumns	c	int	0	NIL-FOR	$ < cols.length
13915	1055	12	CMAESOptimizer.java	selectColumns	cols	int[]	0	NIL-FOR	c < $.length
13916	1069	8	CMAESOptimizer.java	triu	r	int	0	NIL-FOR	$ < m.getRowDimension()
13916	1069	8	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
13917	1070	12	CMAESOptimizer.java	triu	c	int	0	NIL-FOR	$ < m.getColumnDimension()
13917	1070	12	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
13918	1083	8	CMAESOptimizer.java	sumRows	c	int	0	NIL-FOR	$ < m.getColumnDimension()
13918	1083	8	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
13919	1085	12	CMAESOptimizer.java	sumRows	r	int	0	NIL-FOR	$ < m.getRowDimension()
13919	1085	12	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
2852	1099	8	CMAESOptimizer.java	diag	m	RealMatrix	1	RET	$.getColumnDimension() == 1
13920	1101	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getRowDimension()
13920	1101	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
13921	1107	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getColumnDimension()
13921	1107	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
13922	1124	8	CMAESOptimizer.java	copyColumn	i	int	0	NIL-FOR	$ < m1.getRowDimension()
13922	1124	8	CMAESOptimizer.java	copyColumn	m1	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
13923	1136	8	CMAESOptimizer.java	ones	r	int	0	NIL-FOR	$ < n
13923	1136	8	CMAESOptimizer.java	ones	n	int	0	NIL-FOR	r < $
13924	1150	8	CMAESOptimizer.java	eye	r	int	0	NIL-FOR	$ < n
13924	1150	8	CMAESOptimizer.java	eye	n	int	0	NIL-FOR	r < $
2853	1151	12	CMAESOptimizer.java	eye	r	int	0	DEF	$ < m
2853	1151	12	CMAESOptimizer.java	eye	m	int	0	DEF	r < $
13925	1177	8	CMAESOptimizer.java	repmat	r	int	0	NIL-FOR	$ < n * rd
13925	1177	8	CMAESOptimizer.java	repmat	rd	int	0	NIL-FOR	r < n * $
13925	1177	8	CMAESOptimizer.java	repmat	n	int	0	NIL-FOR	r < $ * rd
13926	1178	12	CMAESOptimizer.java	repmat	c	int	0	NIL-FOR	$ < m * cd
13926	1178	12	CMAESOptimizer.java	repmat	cd	int	0	NIL-FOR	c < m * $
13926	1178	12	CMAESOptimizer.java	repmat	m	int	0	NIL-FOR	c < $ * cd
13927	1195	8	CMAESOptimizer.java	sequence	r	int	0	NIL-FOR	$ < size
13927	1195	8	CMAESOptimizer.java	sequence	size	int	0	NIL-FOR	r < $
13928	1208	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.getRowDimension()
13928	1208	8	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
13929	1209	12	CMAESOptimizer.java	max	c	int	0	NIL-FOR	$ < m.getColumnDimension()
13929	1209	12	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
2854	1211	16	CMAESOptimizer.java	max	e	double	0	DEF	max < $
2854	1211	16	CMAESOptimizer.java	max	max	double	0	DEF	$ < e
13930	1225	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.getRowDimension()
13930	1225	8	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
13931	1226	12	CMAESOptimizer.java	min	c	int	0	NIL-FOR	$ < m.getColumnDimension()
13931	1226	12	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
2855	1228	16	CMAESOptimizer.java	min	e	double	0	DEF	min > $
2855	1228	16	CMAESOptimizer.java	min	min	double	0	DEF	$ > e
13932	1242	8	CMAESOptimizer.java	max	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
13932	1242	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.length
13932	1242	8	CMAESOptimizer.java	max	m	double[]	0	NIL-FOR	r < $.length
2856	1243	12	CMAESOptimizer.java	max	r	int	0	DEF	max < m[$]
2856	1243	12	CMAESOptimizer.java	max	max	double	0	DEF	$ < m[r]
2856	1243	12	CMAESOptimizer.java	max	m	double[]	0	DEF	max < $[r]
13933	1256	8	CMAESOptimizer.java	min	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
13933	1256	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.length
13933	1256	8	CMAESOptimizer.java	min	m	double[]	0	NIL-FOR	r < $.length
2857	1257	12	CMAESOptimizer.java	min	r	int	0	DEF	min > m[$]
2857	1257	12	CMAESOptimizer.java	min	min	double	0	DEF	$ > m[r]
2857	1257	12	CMAESOptimizer.java	min	m	double[]	0	DEF	min > $[r]
13934	1270	8	CMAESOptimizer.java	inverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
13934	1270	8	CMAESOptimizer.java	inverse	i	int	0	NIL-FOR	$ < indices.length
13934	1270	8	CMAESOptimizer.java	inverse	indices	int[]	0	NIL-FOR	i < $.length
13935	1282	8	CMAESOptimizer.java	reverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
13935	1282	8	CMAESOptimizer.java	reverse	i	int	0	NIL-FOR	$ < indices.length
13935	1282	8	CMAESOptimizer.java	reverse	indices	int[]	0	NIL-FOR	i < $.length
13936	1294	8	CMAESOptimizer.java	randn	i	int	0	NIL-FOR	$ < size
13936	1294	8	CMAESOptimizer.java	randn	size	int	0	NIL-FOR	i < $
13937	1307	8	CMAESOptimizer.java	randn1	r	int	0	NIL-FOR	$ < size
13937	1307	8	CMAESOptimizer.java	randn1	size	int	0	NIL-FOR	r < $
13938	1308	12	CMAESOptimizer.java	randn1	c	int	0	NIL-FOR	$ < popSize
13938	1308	12	CMAESOptimizer.java	randn1	popSize	int	0	NIL-FOR	c < $
13461	517	8	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	$.iterations <= $.maxIterations
13462	523	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	k < $.lambda
13462	523	12	CMAESOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < lambda
13463	525	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.checkFeasableCount + 1
13463	525	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < checkFeasableCount + 1
1991	526	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1992	533	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.checkFeasableCount
1992	533	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= checkFeasableCount
1992	533	20	CMAESOptimizer.java	doOptimize	arxk	RealMatrix	0	DEF	fitfun.isFeasible($.getColumn(0))
1992	533	20	CMAESOptimizer.java	doOptimize	fitfun	FitnessFunction	0	DEF	$.isFeasible(arxk.getColumn(0))
1993	556	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1994	565	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	bestValue > $
1994	565	12	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ > bestFitness
1995	570	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
1995	570	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, optimum, lastResult)
1995	570	16	CMAESOptimizer.java	doOptimize	optimum	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
1995	570	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
1995	570	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, optimum, $)
1996	577	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestFitness < ($.isMinimize ? $.stopFitness : -$.stopFitness)
1996	577	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.stopFitness != 0
1996	577	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	$ < (isMinimize ? stopFitness : -stopFitness)
13464	582	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
13464	582	12	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1997	583	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > $.stopTolX
1997	583	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * Math.max(Math.abs(pcCol[$]), sqrtDiagC[$]) > stopTolX
1997	583	16	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * Math.max(Math.abs(pcCol[i]), $[i]) > stopTolX
1997	583	16	CMAESOptimizer.java	doOptimize	pcCol	double[]	0	DEF	sigma * Math.max(Math.abs($[i]), sqrtDiagC[i]) > stopTolX
1998	586	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.dimension - 1
1998	586	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= dimension - 1
13465	590	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
13465	590	12	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1999	591	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma * sqrtDiagC[i] > $.stopTolUpX
1999	591	16	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma * sqrtDiagC[$] > stopTolUpX
1999	591	16	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma * $[i] > stopTolUpX
2000	597	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, bestFitness) < $.stopTolFun
2000	597	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
2000	597	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
2000	597	12	CMAESOptimizer.java	doOptimize	worstFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
2000	597	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
2000	597	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
2001	602	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	historyWorst-historyBest < $.stopTolHistFun
2001	602	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > $.fitnessHistory.$.length
2001	602	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	historyWorst-$ < stopTolHistFun
2001	602	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	$-historyBest < stopTolHistFun
2002	607	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.max($.diagD)/$.min($.diagD) > 1e7
2003	611	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
2004	615	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, current, lastResult)
2004	615	16	CMAESOptimizer.java	doOptimize	current	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
2004	615	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
2004	615	16	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, current, $)
2005	622	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestValue == fitness[arindex[(int)(0.1+$.lambda/4.)]]
2005	622	12	CMAESOptimizer.java	doOptimize	fitness	double[]	0	DEF	bestValue == $[arindex[(int)(0.1+lambda/4.)]]
2005	622	12	CMAESOptimizer.java	doOptimize	arindex	int[]	0	DEF	bestValue == fitness[$[(int)(0.1+lambda/4.)]]
2005	622	12	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ == fitness[arindex[(int)(0.1+lambda/4.)]]
2006	625	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
2006	625	12	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
2006	625	12	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
2006	625	12	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
2007	632	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.generateStatistics
2008	656	12	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof Sigma
2009	660	12	CMAESOptimizer.java	parseOptimizationData	THIS	CMAESOptimizer	0	DEF	$.data instanceof PopulationSize
2010	675	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma != null
2011	676	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	DimensionMismatchException	$.inputSigma.$.length != init.$.length
2011	676	12	CMAESOptimizer.java	checkParameters	init	double[]	0	DimensionMismatchException	inputSigma.length != $.length
13466	679	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < init.$.length
13466	679	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < init.length
13466	679	12	CMAESOptimizer.java	checkParameters	init	double[]	0	NIL-FOR	i < $.length
2012	680	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NotPositiveException	$.inputSigma[i] < 0
2012	680	16	CMAESOptimizer.java	checkParameters	i	int	0	NotPositiveException	inputSigma[$] < 0
2013	684	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma[i] > uB[i] - lB[i]
2013	684	16	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	inputSigma[$] > uB[$] - lB[$]
2013	684	16	CMAESOptimizer.java	checkParameters	lB	double[]	0	OutOfRangeException	inputSigma[i] > uB[i] - $[i]
2013	684	16	CMAESOptimizer.java	checkParameters	uB	double[]	0	OutOfRangeException	inputSigma[i] > $[i] - lB[i]
2014	697	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	DEF	$.lambda <= 0
13467	704	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < guess.$.length
13467	704	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < guess.length
13467	704	8	CMAESOptimizer.java	initializeCMA	guess	double[]	0	NIL-FOR	i < $.length
13468	724	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.mu
13468	724	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < mu
13469	761	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.historySize
13469	761	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < historySize
2015	783	8	CMAESOptimizer.java	updateEvolutionPaths	hsig	boolean	0	DEF	$
2016	806	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.iterations > $.diagonalOnly
2016	806	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.diagonalOnly > 1
2017	831	8	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu > 0
2018	839	12	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	1	DEF	$.isActiveCMA
2019	862	16	CMAESOptimizer.java	updateCovariance	negcovMax	double	0	DEF	negccov > $
2019	862	16	CMAESOptimizer.java	updateCovariance	negccov	double	0	DEF	$ > negcovMax
2020	894	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu + negccov > 0
2020	894	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	($.iterations % 1. / ($.ccov1 + $.ccovmu + negccov) / $.dimension / 10.) < 1
2020	894	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	ccov1 + ccovmu + $ > 0
2020	894	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1
2021	903	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.min($.diagD) <= 0
13470	904	16	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
13470	904	16	CMAESOptimizer.java	updateBD	i	int	0	NIL-FOR	$ < dimension
2022	905	20	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.diagD.getEntry(i, 0) < 0
2022	905	20	CMAESOptimizer.java	updateBD	i	int	0	DEF	diagD.getEntry($, 0) < 0
2023	913	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) > 1e14 * $.min($.diagD)
13471	931	8	CMAESOptimizer.java	push	i	int	0	NIL-FOR	$ > 0
13472	945	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
13472	945	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
13472	945	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
13473	950	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
13473	950	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
13473	950	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
13474	1110	8	CMAESOptimizer.java	log	r	int	0	NIL-FOR	$ < m.getRowDimension()
13474	1110	8	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
13475	1111	12	CMAESOptimizer.java	log	c	int	0	NIL-FOR	$ < m.getColumnDimension()
13475	1111	12	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
13476	1124	8	CMAESOptimizer.java	sqrt	r	int	0	NIL-FOR	$ < m.getRowDimension()
13476	1124	8	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
13477	1125	12	CMAESOptimizer.java	sqrt	c	int	0	NIL-FOR	$ < m.getColumnDimension()
13477	1125	12	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
13478	1138	8	CMAESOptimizer.java	square	r	int	0	NIL-FOR	$ < m.getRowDimension()
13478	1138	8	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
13479	1139	12	CMAESOptimizer.java	square	c	int	0	NIL-FOR	$ < m.getColumnDimension()
13479	1139	12	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
13480	1154	8	CMAESOptimizer.java	times	r	int	0	NIL-FOR	$ < m.getRowDimension()
13480	1154	8	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
13481	1155	12	CMAESOptimizer.java	times	c	int	0	NIL-FOR	$ < m.getColumnDimension()
13481	1155	12	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
13482	1169	8	CMAESOptimizer.java	divide	r	int	0	NIL-FOR	$ < m.getRowDimension()
13482	1169	8	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
13483	1170	12	CMAESOptimizer.java	divide	c	int	0	NIL-FOR	$ < m.getColumnDimension()
13483	1170	12	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
13484	1184	8	CMAESOptimizer.java	selectColumns	r	int	0	NIL-FOR	$ < m.getRowDimension()
13484	1184	8	CMAESOptimizer.java	selectColumns	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
13485	1185	12	CMAESOptimizer.java	selectColumns	THIS	CMAESOptimizer	0	NIL-FOR	c < cols.$.length
13485	1185	12	CMAESOptimizer.java	selectColumns	c	int	0	NIL-FOR	$ < cols.length
13485	1185	12	CMAESOptimizer.java	selectColumns	cols	int[]	0	NIL-FOR	c < $.length
13486	1199	8	CMAESOptimizer.java	triu	r	int	0	NIL-FOR	$ < m.getRowDimension()
13486	1199	8	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
13487	1200	12	CMAESOptimizer.java	triu	c	int	0	NIL-FOR	$ < m.getColumnDimension()
13487	1200	12	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
13488	1213	8	CMAESOptimizer.java	sumRows	c	int	0	NIL-FOR	$ < m.getColumnDimension()
13488	1213	8	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
13489	1215	12	CMAESOptimizer.java	sumRows	r	int	0	NIL-FOR	$ < m.getRowDimension()
13489	1215	12	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
2024	1229	8	CMAESOptimizer.java	diag	m	RealMatrix	1	RET	$.getColumnDimension() == 1
13490	1231	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getRowDimension()
13490	1231	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
13491	1237	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getColumnDimension()
13491	1237	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
13492	1254	8	CMAESOptimizer.java	copyColumn	i	int	0	NIL-FOR	$ < m1.getRowDimension()
13492	1254	8	CMAESOptimizer.java	copyColumn	m1	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
13493	1266	8	CMAESOptimizer.java	ones	r	int	0	NIL-FOR	$ < n
13493	1266	8	CMAESOptimizer.java	ones	n	int	0	NIL-FOR	r < $
13494	1280	8	CMAESOptimizer.java	eye	r	int	0	NIL-FOR	$ < n
13494	1280	8	CMAESOptimizer.java	eye	n	int	0	NIL-FOR	r < $
2025	1281	12	CMAESOptimizer.java	eye	r	int	0	DEF	$ < m
2025	1281	12	CMAESOptimizer.java	eye	m	int	0	DEF	r < $
13495	1307	8	CMAESOptimizer.java	repmat	r	int	0	NIL-FOR	$ < n * rd
13495	1307	8	CMAESOptimizer.java	repmat	rd	int	0	NIL-FOR	r < n * $
13495	1307	8	CMAESOptimizer.java	repmat	n	int	0	NIL-FOR	r < $ * rd
13496	1308	12	CMAESOptimizer.java	repmat	c	int	0	NIL-FOR	$ < m * cd
13496	1308	12	CMAESOptimizer.java	repmat	cd	int	0	NIL-FOR	c < m * $
13496	1308	12	CMAESOptimizer.java	repmat	m	int	0	NIL-FOR	c < $ * cd
13497	1325	8	CMAESOptimizer.java	sequence	r	int	0	NIL-FOR	$ < size
13497	1325	8	CMAESOptimizer.java	sequence	size	int	0	NIL-FOR	r < $
13498	1338	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.getRowDimension()
13498	1338	8	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
13499	1339	12	CMAESOptimizer.java	max	c	int	0	NIL-FOR	$ < m.getColumnDimension()
13499	1339	12	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
2026	1341	16	CMAESOptimizer.java	max	e	double	0	DEF	max < $
2026	1341	16	CMAESOptimizer.java	max	max	double	0	DEF	$ < e
13500	1355	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.getRowDimension()
13500	1355	8	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
13501	1356	12	CMAESOptimizer.java	min	c	int	0	NIL-FOR	$ < m.getColumnDimension()
13501	1356	12	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
2027	1358	16	CMAESOptimizer.java	min	e	double	0	DEF	min > $
2027	1358	16	CMAESOptimizer.java	min	min	double	0	DEF	$ > e
13502	1372	8	CMAESOptimizer.java	max	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
13502	1372	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.length
13502	1372	8	CMAESOptimizer.java	max	m	double[]	0	NIL-FOR	r < $.length
2028	1373	12	CMAESOptimizer.java	max	r	int	0	DEF	max < m[$]
2028	1373	12	CMAESOptimizer.java	max	max	double	0	DEF	$ < m[r]
2028	1373	12	CMAESOptimizer.java	max	m	double[]	0	DEF	max < $[r]
13503	1386	8	CMAESOptimizer.java	min	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
13503	1386	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.length
13503	1386	8	CMAESOptimizer.java	min	m	double[]	0	NIL-FOR	r < $.length
2029	1387	12	CMAESOptimizer.java	min	r	int	0	DEF	min > m[$]
2029	1387	12	CMAESOptimizer.java	min	min	double	0	DEF	$ > m[r]
2029	1387	12	CMAESOptimizer.java	min	m	double[]	0	DEF	min > $[r]
13504	1400	8	CMAESOptimizer.java	inverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
13504	1400	8	CMAESOptimizer.java	inverse	i	int	0	NIL-FOR	$ < indices.length
13504	1400	8	CMAESOptimizer.java	inverse	indices	int[]	0	NIL-FOR	i < $.length
13505	1412	8	CMAESOptimizer.java	reverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
13505	1412	8	CMAESOptimizer.java	reverse	i	int	0	NIL-FOR	$ < indices.length
13505	1412	8	CMAESOptimizer.java	reverse	indices	int[]	0	NIL-FOR	i < $.length
13506	1424	8	CMAESOptimizer.java	randn	i	int	0	NIL-FOR	$ < size
13506	1424	8	CMAESOptimizer.java	randn	size	int	0	NIL-FOR	i < $
13507	1437	8	CMAESOptimizer.java	randn1	r	int	0	NIL-FOR	$ < size
13507	1437	8	CMAESOptimizer.java	randn1	size	int	0	NIL-FOR	r < $
13508	1438	12	CMAESOptimizer.java	randn1	c	int	0	NIL-FOR	$ < popSize
13508	1438	12	CMAESOptimizer.java	randn1	popSize	int	0	NIL-FOR	c < $
14233	35	8	CanberraDistance.java	compute	THIS	CanberraDistance	0	NIL-FOR	i < a.$.length
14233	35	8	CanberraDistance.java	compute	i	int	0	NIL-FOR	$ < a.length
14233	35	8	CanberraDistance.java	compute	a	double[]	0	NIL-FOR	i < $.length
1199	100	8	CauchyDistribution.java	CauchyDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1200	146	8	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0
1200	146	8	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1
1201	148	15	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
1202	150	16	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
2409	85	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length < 2
2409	85	8	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length < 2
2410	88	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length != observed.$.length
2410	88	8	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length != observed.length
2410	88	8	ChiSquareTest.java	chiSquare	observed	long[]	0	DimensionMismatchException	expected.length != $.length
13703	96	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
13703	96	8	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
13703	96	8	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2411	102	8	ChiSquareTest.java	chiSquare	sumExpected	double	0	DEF	FastMath.abs($ - sumObserved) > 10E-6
2411	102	8	ChiSquareTest.java	chiSquare	sumObserved	double	0	DEF	FastMath.abs(sumExpected - $) > 10E-6
13704	107	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
13704	107	8	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
13704	107	8	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2412	108	12	ChiSquareTest.java	chiSquare	rescale	boolean	1	DEF	$
2413	208	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
2413	208	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
13705	256	8	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
13705	256	8	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
13706	257	12	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
13706	257	12	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
13707	267	8	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
13707	267	8	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
13708	268	12	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
13708	268	12	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
2414	363	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
2414	363	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
2415	414	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length < 2
2415	414	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length < 2
2416	417	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length != observed2.$.length
2416	417	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length != observed2.length
2416	417	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	0	DimensionMismatchException	observed1.length != $.length
13709	430	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
13709	430	8	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
13709	430	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2417	435	8	ChiSquareTest.java	chiSquareDataSetsComparison	countSum1	long	0	ZeroException	$ == 0
2417	435	8	ChiSquareTest.java	chiSquareDataSetsComparison	countSum2	long	0	ZeroException	$ == 0
2418	440	8	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
13710	448	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
13710	448	8	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
13710	448	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2419	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed1[$] == 0
2419	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed2[$] == 0
2419	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	1	ZeroException	$[i] == 0
2419	449	12	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	1	ZeroException	$[i] == 0
2420	454	16	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
2421	566	8	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ <= 0
2421	566	8	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ > 0.5
2422	588	8	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in.$.length < 2
2422	588	8	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$.length < 2
2423	592	8	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in[0].length < 2
2423	592	8	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$[0].length < 2
1522	107	8	CholeskyDecomposition.java	CholeskyDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
12914	118	8	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
12914	118	8	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
12915	122	12	CholeskyDecomposition.java	CholeskyDecomposition	j	int	0	NIL-FOR	$ < order
12915	122	12	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	j < $
1523	128	16	CholeskyDecomposition.java	CholeskyDecomposition	lIJ	double	0	NonSymmetricMatrixException	FastMath.abs($ - lJI) > maxDelta
1523	128	16	CholeskyDecomposition.java	CholeskyDecomposition	lJI	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - $) > maxDelta
1523	128	16	CholeskyDecomposition.java	CholeskyDecomposition	maxDelta	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - lJI) > $
12916	136	8	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
12916	136	8	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
1524	141	12	CholeskyDecomposition.java	CholeskyDecomposition	ltI	double[]	0	NonPositiveDefiniteMatrixException	$[i] <= absolutePositivityThreshold
1524	141	12	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	ltI[$] <= absolutePositivityThreshold
1524	141	12	CholeskyDecomposition.java	CholeskyDecomposition	absolutePositivityThreshold	double	0	NonPositiveDefiniteMatrixException	ltI[i] <= $
12917	148	12	CholeskyDecomposition.java	CholeskyDecomposition	q	int	0	NIL-FOR	$ > i
12917	148	12	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	q > $
12918	151	16	CholeskyDecomposition.java	CholeskyDecomposition	p	int	0	NIL-FOR	$ < order
12918	151	16	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	p < $
1525	164	8	CholeskyDecomposition.java	getL	THIS	CholeskyDecomposition	0	DEF	$.cachedL == null
1526	177	8	CholeskyDecomposition.java	getLT	THIS	CholeskyDecomposition	0	DEF	$.cachedLT == null
12919	191	8	CholeskyDecomposition.java	getDeterminant	THIS	CholeskyDecomposition	0	NIL-FOR	i < $.lTData.$.length
12919	191	8	CholeskyDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < lTData.length
3219	43	8	Chromosome.java	getFitness	THIS	Chromosome	0	DEF	$.fitness == NO_FITNESS
3220	85	12	Chromosome.java	findSameChromosome	THIS	Chromosome	0	RET	$.isSame($.anotherChr)
3221	100	8	Chromosome.java	searchForFitnessUpdate	sameChromosome	Chromosome	0	DEF	$ != null
3508	100	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	1	DEF	$.previousState != null
3508	100	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
14410	106	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
14410	106	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
14411	121	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
14411	121	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
893	116	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN
894	119	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
895	122	8	Complex.java	abs	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
896	123	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
897	129	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
898	158	8	Complex.java	add	THIS	Complex	0	RET	addend.$.isNaN
898	158	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
898	158	8	Complex.java	add	addend	Complex	0	RET	$.isNaN
899	175	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
899	175	8	Complex.java	add	addend	double	0	RET	Double.isNaN($)
900	197	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN
901	249	8	Complex.java	divide	THIS	Complex	0	RET	divisor.$.isNaN
901	249	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
901	249	8	Complex.java	divide	divisor	Complex	0	RET	$.isNaN
902	255	8	Complex.java	divide	c	double	0	RET	$ == 0.0
902	255	8	Complex.java	divide	d	double	0	RET	$ == 0.0
903	259	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
903	259	8	Complex.java	divide	divisor	Complex	0	RET	$.isInfinite()
904	263	8	Complex.java	divide	c	double	1	RET	FastMath.abs($) < FastMath.abs(d)
904	263	8	Complex.java	divide	d	double	1	RET	FastMath.abs(c) < FastMath.abs($)
905	285	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
905	285	8	Complex.java	divide	divisor	double	0	RET	Double.isNaN($)
906	288	8	Complex.java	divide	divisor	double	0	RET	$ == 0d
907	291	8	Complex.java	divide	divisor	double	0	RET	Double.isInfinite($)
908	300	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.isNaN
909	304	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.real == 0.0
909	304	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.imaginary == 0.0
910	308	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.isInfinite
911	312	8	Complex.java	reciprocal	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
912	340	8	Complex.java	equals	THIS	Complex	0	RET	$ == other
912	340	8	Complex.java	equals	other	Object	0	RET	this == $
913	343	8	Complex.java	equals	other	Object	0	RET	$ instanceof Complex
914	345	12	Complex.java	equals	THIS	Complex	1	RET	c.$.isNaN
914	345	12	Complex.java	equals	c	Complex	1	RET	$.isNaN
915	363	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN
916	439	8	Complex.java	multiply	THIS	Complex	0	RET	factor.$.isNaN
916	439	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
916	439	8	Complex.java	multiply	factor	Complex	0	RET	$.isNaN
917	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.real)
917	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
917	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
917	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.imaginary)
917	442	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.real)
917	442	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.imaginary)
918	462	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
919	465	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
919	465	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
920	481	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
920	481	8	Complex.java	multiply	factor	double	0	RET	Double.isNaN($)
921	484	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
921	484	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
921	484	8	Complex.java	multiply	factor	double	0	RET	Double.isInfinite($)
922	501	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN
923	529	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
923	529	8	Complex.java	subtract	THIS	Complex	0	RET	subtrahend.$.isNaN
923	529	8	Complex.java	subtract	subtrahend	Complex	0	RET	$.isNaN
924	546	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
924	546	8	Complex.java	subtract	subtrahend	double	0	RET	Double.isNaN($)
925	569	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN
926	593	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN
927	617	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN
928	658	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN
929	698	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN
930	739	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN
931	784	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN
932	862	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN
933	902	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN
934	945	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN
935	949	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
935	949	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
936	954	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
937	1016	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN
937	1016	8	Complex.java	tan	THIS	Complex	0	RET	Double.isInfinite($.real)
938	1019	8	Complex.java	tan	THIS	Complex	0	RET	$.imaginary > 20.0
939	1022	8	Complex.java	tan	THIS	Complex	0	RET	$.imaginary < -20.0
940	1067	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN
940	1067	8	Complex.java	tanh	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
941	1070	8	Complex.java	tanh	THIS	Complex	0	RET	$.real > 20.0
942	1073	8	Complex.java	tanh	THIS	Complex	0	RET	$.real < -20.0
943	1131	8	Complex.java	nthRoot	n	int	0	NotPositiveException	$ <= 0
944	1138	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN
945	1142	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
12453	1154	8	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
12453	1154	8	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
946	1188	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
946	1188	8	Complex.java	valueOf	imaginaryPart	double	0	RET	Double.isNaN($)
947	1202	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
877	67	8	ComplexFormat.java	ComplexFormat	format	NumberFormat	0	NullArgumentException	$ == null
878	85	8	ComplexFormat.java	ComplexFormat	imaginaryFormat	NumberFormat	0	NullArgumentException	$ == null
879	88	8	ComplexFormat.java	ComplexFormat	realFormat	NumberFormat	0	NullArgumentException	$ == null
880	146	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NullArgumentException	$ == null
881	149	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NoDataException	$.length() == 0
882	152	8	ComplexFormat.java	ComplexFormat	imaginaryFormat	NumberFormat	0	NullArgumentException	$ == null
883	155	8	ComplexFormat.java	ComplexFormat	realFormat	NumberFormat	0	NullArgumentException	$ == null
884	214	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
885	219	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
885	219	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
886	245	8	ComplexFormat.java	formatImaginary	toAppendTo	StringBuffer	0	DEF	$.toString().equals("1")
887	272	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
888	274	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
889	354	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
890	377	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
891	413	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
892	421	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	CompositeFormat.parseFixedstring(source, $.getImaginaryCharacter(), pos)
892	421	8	ComplexFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, getImaginaryCharacter(), pos)
892	421	8	ComplexFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, getImaginaryCharacter(), $)
869	63	8	ComplexUtils.java	polar2Complex	r	double	0	MathIllegalArgumentException	$ < 0
12451	81	8	ComplexUtils.java	convertToComplex	THIS	ComplexUtils	0	NIL-FOR	i < real.$.length
12451	81	8	ComplexUtils.java	convertToComplex	i	int	0	NIL-FOR	$ < real.length
12451	81	8	ComplexUtils.java	convertToComplex	real	double[]	0	NIL-FOR	i < $.length
505	85	9	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
505	85	9	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
12411	87	13	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
12411	87	13	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
12411	87	13	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
506	92	13	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
506	92	13	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
507	121	8	CompositeFormat.java	parseNumber	sb	StringBuilder	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
507	121	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
507	121	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
507	121	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
507	121	8	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
507	121	8	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
508	147	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
508	147	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
12412	152	12	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
12412	152	12	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
12412	152	12	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
509	154	16	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
510	176	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($, endIndex).compareTo(expected) != 0
510	176	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
510	176	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
510	176	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex, $).compareTo(expected) != 0
510	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
510	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex, endIndex).compareTo(expected) != 0
510	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
510	176	8	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex, endIndex).compareTo($) != 0
511	210	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
511	210	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
1774	176	8	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	1	DEF	$ == null
1775	185	8	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1775	185	8	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
1776	195	12	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	0	DEF	$ != null
1777	199	12	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1777	199	12	ConjugateGradient.java	solveInPlace	rhoNext	double	0	DEF	$ <= 0.
1778	207	12	ConjugateGradient.java	solveInPlace	manager	IterationManager	1	DEF	$.getIterations() == 2
1779	214	12	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1779	214	12	ConjugateGradient.java	solveInPlace	pq	double	0	DEF	$ <= 0.
1780	230	12	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1780	230	12	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
95	129	8	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(hPrev, 0.0, $)
95	129	8	ContinuedFraction.java	evaluate	hPrev	double	0	DEF	Precision.equals($, 0.0, small)
12347	138	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
12347	138	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
96	143	12	ContinuedFraction.java	evaluate	dN	double	0	DEF	Precision.equals($, 0.0, small)
96	143	12	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(dN, 0.0, $)
97	147	12	ContinuedFraction.java	evaluate	cN	double	0	DEF	Precision.equals($, 0.0, small)
97	147	12	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(cN, 0.0, $)
98	155	12	ContinuedFraction.java	evaluate	hN	double	0	ConvergenceException	Double.isInfinite($)
99	159	12	ContinuedFraction.java	evaluate	hN	double	0	ConvergenceException	Double.isNaN($)
100	164	12	ContinuedFraction.java	evaluate	deltaN	double	0	DEF	FastMath.abs($ - 1.0) < epsilon
100	164	12	ContinuedFraction.java	evaluate	epsilon	double	0	DEF	FastMath.abs(deltaN - 1.0) < $
101	174	8	ContinuedFraction.java	evaluate	n	int	0	MaxCountExceededException	$ >= maxIterations
101	174	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxCountExceededException	n >= $
3561	133	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
3561	133	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
3562	137	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
3563	142	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DimensionMismatchException	$.getInterpolatedState().length != model.getInterpolatedState().length
3563	142	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DimensionMismatchException	getInterpolatedState().length != $.getInterpolatedState().length
3564	147	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	MathIllegalArgumentException	$.forward ^ model.$.forward
3564	147	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	MathIllegalArgumentException	forward ^ $.forward
3565	156	6	ContinuousOutputModel.java	append	step	double	0	MathIllegalArgumentException	FastMath.abs(gap) > 1.0e-3 * FastMath.abs($)
3565	156	6	ContinuousOutputModel.java	append	gap	double	0	MathIllegalArgumentException	FastMath.abs($) > 1.0e-3 * FastMath.abs(step)
3566	192	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
3567	199	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
3568	257	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
3568	257	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
3568	257	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
3569	262	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
3569	262	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
3569	262	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
14444	269	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
14444	269	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
3570	274	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
3571	277	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
3572	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs(tMax - $) < 1e-6
3572	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs($ - tMin) < 1e-6
3572	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	FastMath.abs(tMed - $) < 1e-6
3572	291	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	FastMath.abs($ - tMed) < 1e-6
3573	314	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
3573	314	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
3574	316	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
3574	316	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
14445	324	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
14445	324	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
14445	324	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
14445	324	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
3575	365	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
3576	366	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
3576	366	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
3577	368	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
3577	368	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
3578	374	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
3578	374	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
3579	376	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
3579	376	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
3109	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
3109	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
3109	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
14153	121	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
14153	121	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
14154	168	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.normalized.$.length
14154	168	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < normalized.length
14155	174	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
14155	174	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
14155	174	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
14156	176	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.root.getColumnDimension()
14156	176	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < root.getColumnDimension()
13751	173	8	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	$ < dimension
13751	173	8	Covariance.java	computeCovarianceMatrix	dimension	int	0	NIL-FOR	i < $
13752	174	12	Covariance.java	computeCovarianceMatrix	j	int	0	NIL-FOR	$ < i
13752	174	12	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	j < $
2480	245	8	Covariance.java	covariance	THIS	Covariance	1	MathIllegalArgumentException	length != yArray.$.length
2480	245	8	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ != yArray.length
2480	245	8	Covariance.java	covariance	yArray	double[]	1	MathIllegalArgumentException	length != $.length
2481	248	15	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ < 2
13753	254	12	Covariance.java	covariance	i	int	0	NIL-FOR	$ < length
13753	254	12	Covariance.java	covariance	length	int	0	NIL-FOR	i < $
2482	290	8	Covariance.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
2482	290	8	Covariance.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 1
1865	188	8	CurveFitter.java	fit	THIS	CurveFitter	1	DEF	$.optimizer == null
3209	106	8	CycleCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3209	106	8	CycleCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3210	124	8	CycleCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
3210	124	8	CycleCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
14214	144	8	CycleCrossover.java	mate	length	int	0	NIL-WHILE	visitedIndices.size() < $
14214	144	8	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.size() < length
14215	150	12	CycleCrossover.java	mate	indices	List<Integer>	0	NIL-WHILE	idx != $.get(0)
14215	150	12	CycleCrossover.java	mate	idx	int	0	NIL-WHILE	$ != indices.get(0)
3211	160	12	CycleCrossover.java	mate	cycle	int	0	DEF	$++ % 2 != 0
14216	171	12	CycleCrossover.java	mate	length	int	0	NIL-WHILE	visitedIndices.size() < $
14216	171	12	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.contains(idx)
14216	171	12	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.size() < length
14216	171	12	CycleCrossover.java	mate	idx	int	0	NIL-WHILE	visitedIndices.contains($)
3212	173	16	CycleCrossover.java	mate	length	int	0	DEF	idx >= $
3212	173	16	CycleCrossover.java	mate	idx	int	0	DEF	$ >= length
3260	101	8	DBSCANClusterer.java	DBSCANClusterer	eps	double	0	NotPositiveException	$ < 0.0d
3261	104	8	DBSCANClusterer.java	DBSCANClusterer	minPts	int	0	NotPositiveException	$ < 0
3262	143	12	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	0	DEF	visited.get($.point) != null
3262	143	12	DBSCANClusterer.java	cluster	visited	Map<Clusterable,PointStatus>	0	DEF	$.get(point) != null
3263	147	12	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	1	DEF	neighbors.size() >= $.minPts
3263	147	12	DBSCANClusterer.java	cluster	neighbors	List<T>	1	DEF	$.size() >= minPts
14234	179	8	DBSCANClusterer.java	expandCluster	seeds	List<T>	0	NIL-WHILE	index < $.size()
14234	179	8	DBSCANClusterer.java	expandCluster	index	int	0	NIL-WHILE	$ < seeds.size()
3264	183	12	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ == null
3265	185	16	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	currentNeighbors.size() >= $.minPts
3265	185	16	DBSCANClusterer.java	expandCluster	currentNeighbors	List<T>	0	DEF	$.size() >= minPts
3266	190	12	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	pStatus != $.PointStatus.PART_OF_CLUSTER
3266	190	12	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ != PointStatus.PART_OF_CLUSTER
3267	210	12	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	point != $.neighbor
3267	210	12	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	$.distance($.neighbor, point) <= $.eps
3267	210	12	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	$ != neighbor
3267	210	12	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	distance(neighbor, $) <= eps
3268	227	12	DBSCANClusterer.java	merge	THIS	DBSCANClusterer	0	DEF	oneSet.contains($.item)
3268	227	12	DBSCANClusterer.java	merge	oneSet	Set<T>	0	DEF	$.contains(item)
2437	89	8	DBSCANClusterer.java	DBSCANClusterer	eps	double	0	NotPositiveException	$ < 0.0d
2438	92	8	DBSCANClusterer.java	DBSCANClusterer	minPts	int	0	NotPositiveException	$ < 0
2439	137	12	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	0	DEF	visited.get($.point) != null
2439	137	12	DBSCANClusterer.java	cluster	visited	Map<Clusterable<T>,PointStatus>	0	DEF	$.get(point) != null
2440	141	12	DBSCANClusterer.java	cluster	THIS	DBSCANClusterer	1	DEF	neighbors.size() >= $.minPts
2440	141	12	DBSCANClusterer.java	cluster	neighbors	List<T>	1	DEF	$.size() >= minPts
13722	173	8	DBSCANClusterer.java	expandCluster	seeds	List<T>	0	NIL-WHILE	index < $.size()
13722	173	8	DBSCANClusterer.java	expandCluster	index	int	0	NIL-WHILE	$ < seeds.size()
2441	177	12	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ == null
2442	179	16	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	currentNeighbors.size() >= $.minPts
2442	179	16	DBSCANClusterer.java	expandCluster	currentNeighbors	List<T>	0	DEF	$.size() >= minPts
2443	184	12	DBSCANClusterer.java	expandCluster	THIS	DBSCANClusterer	0	DEF	pStatus != $.PointStatus.PART_OF_CLUSTER
2443	184	12	DBSCANClusterer.java	expandCluster	pStatus	PointStatus	0	DEF	$ != PointStatus.PART_OF_CLUSTER
2444	204	12	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	point != $.neighbor
2444	204	12	DBSCANClusterer.java	getNeighbors	THIS	DBSCANClusterer	0	DEF	$.neighbor.distanceFrom(point) <= $.eps
2444	204	12	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	$ != neighbor
2444	204	12	DBSCANClusterer.java	getNeighbors	point	T	0	DEF	neighbor.distanceFrom($) <= eps
2445	221	12	DBSCANClusterer.java	merge	THIS	DBSCANClusterer	0	DEF	oneSet.contains($.item)
2445	221	12	DBSCANClusterer.java	merge	oneSet	Set<T>	0	DEF	$.contains(item)
4143	196	8	DSCompiler.java	getCompiler	THIS	DSCompiler	0	RET	cache.$.length > parameters
4143	196	8	DSCompiler.java	getCompiler	THIS	DSCompiler	0	RET	cache[parameters].length > order
4143	196	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$[parameters][order] != null
4143	196	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$.length > parameters
4143	196	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$[parameters].length > order
4143	196	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$ != null
4143	196	8	DSCompiler.java	getCompiler	parameters	int	0	RET	cache[$][order] != null
4143	196	8	DSCompiler.java	getCompiler	parameters	int	0	RET	cache.length > $
4143	196	8	DSCompiler.java	getCompiler	parameters	int	0	RET	cache[$].length > order
4143	196	8	DSCompiler.java	getCompiler	order	int	0	RET	cache[parameters][$] != null
4143	196	8	DSCompiler.java	getCompiler	order	int	0	RET	cache[parameters].length > $
4144	207	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	DEF	$ != null
14644	209	12	DSCompiler.java	getCompiler	THIS	DSCompiler	0	NIL-FOR	i < cache.$.length
14644	209	12	DSCompiler.java	getCompiler	i	int	0	NIL-FOR	$ < cache.length
14644	209	12	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	NIL-FOR	i < $.length
14645	215	8	DSCompiler.java	getCompiler	diag	int	0	NIL-FOR	$ <= parameters + order
14645	215	8	DSCompiler.java	getCompiler	parameters	int	0	NIL-FOR	diag <= $ + order
14645	215	8	DSCompiler.java	getCompiler	order	int	0	NIL-FOR	diag <= parameters + $
14646	216	12	DSCompiler.java	getCompiler	o	int	0	NIL-FOR	$ <= FastMath.min(order, diag)
14646	216	12	DSCompiler.java	getCompiler	diag	int	0	NIL-FOR	o <= FastMath.min(order, $)
14646	216	12	DSCompiler.java	getCompiler	order	int	0	NIL-FOR	o <= FastMath.min($, diag)
4145	218	16	DSCompiler.java	getCompiler	p	int	0	DEF	newCache[$][o] == null
4145	218	16	DSCompiler.java	getCompiler	o	int	0	DEF	newCache[p][$] == null
4145	218	16	DSCompiler.java	getCompiler	newCache	DSCompiler[][]	0	DEF	$[p][o] == null
4146	243	8	DSCompiler.java	compileSizes	parameters	int	1	DEF	$ == 0
14647	248	12	DSCompiler.java	compileSizes	i	int	0	NIL-FOR	$ < order
14647	248	12	DSCompiler.java	compileSizes	order	int	0	NIL-FOR	i < $
4147	268	8	DSCompiler.java	compileDerivativesIndirection	parameters	int	0	RET	$ == 0
4147	268	8	DSCompiler.java	compileDerivativesIndirection	order	int	0	RET	$ == 0
14648	277	8	DSCompiler.java	compileDerivativesIndirection	i	int	0	NIL-FOR	$ < vSize
14648	277	8	DSCompiler.java	compileDerivativesIndirection	vSize	int	0	NIL-FOR	i < $
14649	285	8	DSCompiler.java	compileDerivativesIndirection	i	int	0	NIL-FOR	$ < dSize
14649	285	8	DSCompiler.java	compileDerivativesIndirection	dSize	int	0	NIL-FOR	i < $
4148	316	8	DSCompiler.java	compileLowerIndirection	parameters	int	0	RET	$ == 0
4148	316	8	DSCompiler.java	compileLowerIndirection	order	int	0	RET	$ <= 1
14650	325	8	DSCompiler.java	compileLowerIndirection	i	int	0	NIL-FOR	$ < dSize
14650	325	8	DSCompiler.java	compileLowerIndirection	dSize	int	0	NIL-FOR	i < $
4149	351	8	DSCompiler.java	compileMultiplicationIndirection	parameters	int	0	RET	$ == 0
4149	351	8	DSCompiler.java	compileMultiplicationIndirection	order	int	0	RET	$ == 0
14651	362	8	DSCompiler.java	compileMultiplicationIndirection	i	int	0	NIL-FOR	$ < dSize
14651	362	8	DSCompiler.java	compileMultiplicationIndirection	dSize	int	0	NIL-FOR	i < $
14652	365	12	DSCompiler.java	compileMultiplicationIndirection	THIS	DSCompiler	0	NIL-FOR	j < dRow.$.length
14652	365	12	DSCompiler.java	compileMultiplicationIndirection	j	int	0	NIL-FOR	$ < dRow.length
14652	365	12	DSCompiler.java	compileMultiplicationIndirection	dRow	int[][]	0	NIL-FOR	j < $.length
14653	372	12	DSCompiler.java	compileMultiplicationIndirection	j	int	0	NIL-FOR	$ < row.size()
14653	372	12	DSCompiler.java	compileMultiplicationIndirection	row	List<int[]>	0	NIL-FOR	j < $.size()
4150	374	16	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[0] > 0
14654	375	20	DSCompiler.java	compileMultiplicationIndirection	k	int	0	NIL-FOR	$ < row.size()
14654	375	20	DSCompiler.java	compileMultiplicationIndirection	row	List<int[]>	0	NIL-FOR	k < $.size()
4151	377	24	DSCompiler.java	compileMultiplicationIndirection	termK	int[]	0	DEF	termJ[1] == $[1]
4151	377	24	DSCompiler.java	compileMultiplicationIndirection	termK	int[]	0	DEF	termJ[2] == $[2]
4151	377	24	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[1] == termK[1]
4151	377	24	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[2] == termK[2]
4152	418	8	DSCompiler.java	compileCompositionIndirection	parameters	int	0	RET	$ == 0
4152	418	8	DSCompiler.java	compileCompositionIndirection	order	int	0	RET	$ == 0
14655	433	8	DSCompiler.java	compileCompositionIndirection	i	int	0	NIL-FOR	$ < dSize
14655	433	8	DSCompiler.java	compileCompositionIndirection	dSize	int	0	NIL-FOR	i < $
14656	446	16	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	j < $.term.$.length
14656	446	16	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < term.length
14657	457	16	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	l < $.term.$.length
14657	457	16	DSCompiler.java	compileCompositionIndirection	l	int	0	NIL-FOR	$ < term.length
14658	461	20	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	j < $.term.$.length
14658	461	20	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < term.length
4153	467	24	DSCompiler.java	compileCompositionIndirection	j	int	0	DEF	$ == l
4153	467	24	DSCompiler.java	compileCompositionIndirection	l	int	0	DEF	j == $
14659	482	12	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < row.size()
14659	482	12	DSCompiler.java	compileCompositionIndirection	row	List<int[]>	0	NIL-FOR	j < $.size()
4154	484	16	DSCompiler.java	compileCompositionIndirection	termJ	int[]	0	DEF	$[0] > 0
14660	485	20	DSCompiler.java	compileCompositionIndirection	k	int	0	NIL-FOR	$ < row.size()
14660	485	20	DSCompiler.java	compileCompositionIndirection	row	List<int[]>	0	NIL-FOR	k < $.size()
14661	488	24	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	l < termJ.$.length
14661	488	24	DSCompiler.java	compileCompositionIndirection	l	int	0	NIL-FOR	$ < termJ.length
14661	488	24	DSCompiler.java	compileCompositionIndirection	equals	boolean	0	NIL-FOR	$
14661	488	24	DSCompiler.java	compileCompositionIndirection	termJ	int[]	0	NIL-FOR	l < $.length
4155	491	24	DSCompiler.java	compileCompositionIndirection	equals	boolean	0	DEF	$
4156	546	8	DSCompiler.java	getPartialDerivativeIndex	THIS	DSCompiler	0	DimensionMismatchException	orders.$.length != $.getFreeParameters()
4156	546	8	DSCompiler.java	getPartialDerivativeIndex	orders	int	0	DimensionMismatchException	$.length != getFreeParameters()
14662	573	8	DSCompiler.java	getPartialDerivativeIndex	i	int	0	NIL-FOR	$ >= 0
4157	580	12	DSCompiler.java	getPartialDerivativeIndex	ordersSum	int	0	NumberIsTooLargeException	$ > order
4157	580	12	DSCompiler.java	getPartialDerivativeIndex	order	int	0	NumberIsTooLargeException	ordersSum > $
14663	584	12	DSCompiler.java	getPartialDerivativeIndex	derivativeOrder	int	0	NIL-WHILE	$-- > 0
14664	670	8	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
14664	670	8	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
14665	695	8	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
14665	695	8	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
14666	726	8	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
14666	726	8	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
14667	747	8	DSCompiler.java	add	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
14667	747	8	DSCompiler.java	add	i	int	0	NIL-FOR	$ < getSize()
14668	763	8	DSCompiler.java	subtract	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
14668	763	8	DSCompiler.java	subtract	i	int	0	NIL-FOR	$ < getSize()
14669	781	8	DSCompiler.java	multiply	THIS	DSCompiler	0	NIL-FOR	i < $.multIndirection.$.length
14669	781	8	DSCompiler.java	multiply	i	int	0	NIL-FOR	$ < multIndirection.length
14670	784	12	DSCompiler.java	multiply	THIS	DSCompiler	0	NIL-FOR	j < mappingI.$.length
14670	784	12	DSCompiler.java	multiply	j	int	0	NIL-FOR	$ < mappingI.length
14670	784	12	DSCompiler.java	multiply	mappingI	int[][]	0	NIL-FOR	j < $.length
14671	832	8	DSCompiler.java	remainder	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
14671	832	8	DSCompiler.java	remainder	i	int	0	NIL-FOR	$ < getSize()
14672	854	8	DSCompiler.java	pow	i	int	0	NIL-FOR	$ > 0
14673	860	8	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
14673	860	8	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
4158	882	8	DSCompiler.java	pow	n	int	0	RET	$ == 0
4159	893	8	DSCompiler.java	pow	n	int	1	DEF	$ > 0
14674	897	12	DSCompiler.java	pow	i	int	0	NIL-FOR	$ > 0
14675	906	12	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
14675	906	12	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
14676	913	8	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
14676	913	8	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
4160	959	8	DSCompiler.java	rootN	n	int	1	DEF	$ == 2
4161	962	15	DSCompiler.java	rootN	n	int	1	DEF	$ == 3
14677	971	8	DSCompiler.java	rootN	THIS	DSCompiler	0	NIL-FOR	i <= $.order
14677	971	8	DSCompiler.java	rootN	i	int	0	NIL-FOR	$ <= order
4162	1036	8	DSCompiler.java	log	THIS	DSCompiler	0	DEF	$.order > 0
14678	1039	12	DSCompiler.java	log	THIS	DSCompiler	0	NIL-FOR	i <= $.order
14678	1039	12	DSCompiler.java	log	i	int	0	NIL-FOR	$ <= order
4163	1063	8	DSCompiler.java	log1p	THIS	DSCompiler	0	DEF	$.order > 0
14679	1066	12	DSCompiler.java	log1p	THIS	DSCompiler	0	NIL-FOR	i <= $.order
14679	1066	12	DSCompiler.java	log1p	i	int	0	NIL-FOR	$ <= order
4164	1090	8	DSCompiler.java	log10	THIS	DSCompiler	0	DEF	$.order > 0
14680	1093	12	DSCompiler.java	log10	THIS	DSCompiler	0	NIL-FOR	i <= $.order
14680	1093	12	DSCompiler.java	log10	i	int	0	NIL-FOR	$ <= order
4165	1118	8	DSCompiler.java	cos	THIS	DSCompiler	0	DEF	$.order > 0
14681	1120	12	DSCompiler.java	cos	THIS	DSCompiler	0	NIL-FOR	i <= $.order
14681	1120	12	DSCompiler.java	cos	i	int	0	NIL-FOR	$ <= order
4166	1144	8	DSCompiler.java	sin	THIS	DSCompiler	0	DEF	$.order > 0
14682	1146	12	DSCompiler.java	sin	THIS	DSCompiler	0	NIL-FOR	i <= $.order
14682	1146	12	DSCompiler.java	sin	i	int	0	NIL-FOR	$ <= order
4167	1172	8	DSCompiler.java	tan	THIS	DSCompiler	0	DEF	$.order > 0
14683	1184	12	DSCompiler.java	tan	THIS	DSCompiler	0	NIL-FOR	n <= $.order
14683	1184	12	DSCompiler.java	tan	n	int	0	NIL-FOR	$ <= order
14684	1189	16	DSCompiler.java	tan	k	int	0	NIL-FOR	$ >= 0
4168	1191	20	DSCompiler.java	tan	k	int	1	DEF	$ > 2
4169	1193	27	DSCompiler.java	tan	k	int	0	DEF	$ == 2
4170	1197	16	DSCompiler.java	tan	n	int	0	DEF	($ & 0x1) == 0
4171	1226	8	DSCompiler.java	acos	THIS	DSCompiler	0	DEF	$.order > 0
14685	1240	12	DSCompiler.java	acos	THIS	DSCompiler	0	NIL-FOR	n <= $.order
14685	1240	12	DSCompiler.java	acos	n	int	0	NIL-FOR	$ <= order
14686	1245	16	DSCompiler.java	acos	k	int	0	NIL-FOR	$ >= 0
4172	1247	20	DSCompiler.java	acos	k	int	1	DEF	$ > 2
4173	1249	27	DSCompiler.java	acos	k	int	0	DEF	$ == 2
4174	1253	16	DSCompiler.java	acos	n	int	0	DEF	($ & 0x1) == 0
4175	1283	8	DSCompiler.java	asin	THIS	DSCompiler	0	DEF	$.order > 0
14687	1297	12	DSCompiler.java	asin	THIS	DSCompiler	0	NIL-FOR	n <= $.order
14687	1297	12	DSCompiler.java	asin	n	int	0	NIL-FOR	$ <= order
14688	1302	16	DSCompiler.java	asin	k	int	0	NIL-FOR	$ >= 0
4176	1304	20	DSCompiler.java	asin	k	int	1	DEF	$ > 2
4177	1306	27	DSCompiler.java	asin	k	int	0	DEF	$ == 2
4178	1310	16	DSCompiler.java	asin	n	int	0	DEF	($ & 0x1) == 0
4179	1340	8	DSCompiler.java	atan	THIS	DSCompiler	0	DEF	$.order > 0
14689	1354	12	DSCompiler.java	atan	THIS	DSCompiler	0	NIL-FOR	n <= $.order
14689	1354	12	DSCompiler.java	atan	n	int	0	NIL-FOR	$ <= order
14690	1359	16	DSCompiler.java	atan	k	int	0	NIL-FOR	$ >= 0
4180	1361	20	DSCompiler.java	atan	k	int	1	DEF	$ > 2
4181	1363	27	DSCompiler.java	atan	k	int	0	DEF	$ == 2
4182	1367	16	DSCompiler.java	atan	n	int	0	DEF	($ & 0x1) == 0
4183	1404	8	DSCompiler.java	atan2	x	double[]	1	DEF	$[xOffset] >= 0
4183	1404	8	DSCompiler.java	atan2	xOffset	int	1	DEF	x[$] >= 0
14691	1410	12	DSCompiler.java	atan2	THIS	DSCompiler	0	NIL-FOR	i < tmp2.$.length
14691	1410	12	DSCompiler.java	atan2	i	int	0	NIL-FOR	$ < tmp2.length
14691	1410	12	DSCompiler.java	atan2	tmp2	double[]	0	NIL-FOR	i < $.length
14692	1422	12	DSCompiler.java	atan2	THIS	DSCompiler	0	NIL-FOR	i < tmp2.$.length
14692	1422	12	DSCompiler.java	atan2	i	int	0	NIL-FOR	$ < tmp2.length
14692	1422	12	DSCompiler.java	atan2	tmp2	double[]	0	NIL-FOR	i < $.length
4184	1447	8	DSCompiler.java	cosh	THIS	DSCompiler	0	DEF	$.order > 0
14693	1449	12	DSCompiler.java	cosh	THIS	DSCompiler	0	NIL-FOR	i <= $.order
14693	1449	12	DSCompiler.java	cosh	i	int	0	NIL-FOR	$ <= order
4185	1473	8	DSCompiler.java	sinh	THIS	DSCompiler	0	DEF	$.order > 0
14694	1475	12	DSCompiler.java	sinh	THIS	DSCompiler	0	NIL-FOR	i <= $.order
14694	1475	12	DSCompiler.java	sinh	i	int	0	NIL-FOR	$ <= order
4186	1501	8	DSCompiler.java	tanh	THIS	DSCompiler	0	DEF	$.order > 0
14695	1513	12	DSCompiler.java	tanh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
14695	1513	12	DSCompiler.java	tanh	n	int	0	NIL-FOR	$ <= order
14696	1518	16	DSCompiler.java	tanh	k	int	0	NIL-FOR	$ >= 0
4187	1520	20	DSCompiler.java	tanh	k	int	1	DEF	$ > 2
4188	1522	27	DSCompiler.java	tanh	k	int	0	DEF	$ == 2
4189	1526	16	DSCompiler.java	tanh	n	int	0	DEF	($ & 0x1) == 0
4190	1555	8	DSCompiler.java	acosh	THIS	DSCompiler	0	DEF	$.order > 0
14697	1569	12	DSCompiler.java	acosh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
14697	1569	12	DSCompiler.java	acosh	n	int	0	NIL-FOR	$ <= order
14698	1574	16	DSCompiler.java	acosh	k	int	0	NIL-FOR	$ >= 0
4191	1576	20	DSCompiler.java	acosh	k	int	1	DEF	$ > 2
4192	1578	27	DSCompiler.java	acosh	k	int	0	DEF	$ == 2
4193	1582	16	DSCompiler.java	acosh	n	int	0	DEF	($ & 0x1) == 0
4194	1612	8	DSCompiler.java	asinh	THIS	DSCompiler	0	DEF	$.order > 0
14699	1626	12	DSCompiler.java	asinh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
14699	1626	12	DSCompiler.java	asinh	n	int	0	NIL-FOR	$ <= order
14700	1631	16	DSCompiler.java	asinh	k	int	0	NIL-FOR	$ >= 0
4195	1633	20	DSCompiler.java	asinh	k	int	1	DEF	$ > 2
4196	1635	27	DSCompiler.java	asinh	k	int	0	DEF	$ == 2
4197	1639	16	DSCompiler.java	asinh	n	int	0	DEF	($ & 0x1) == 0
4198	1669	8	DSCompiler.java	atanh	THIS	DSCompiler	0	DEF	$.order > 0
14701	1683	12	DSCompiler.java	atanh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
14701	1683	12	DSCompiler.java	atanh	n	int	0	NIL-FOR	$ <= order
14702	1688	16	DSCompiler.java	atanh	k	int	0	NIL-FOR	$ >= 0
4199	1690	20	DSCompiler.java	atanh	k	int	1	DEF	$ > 2
4200	1692	27	DSCompiler.java	atanh	k	int	0	DEF	$ == 2
4201	1696	16	DSCompiler.java	atanh	n	int	0	DEF	($ & 0x1) == 0
14703	1723	8	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	i < $.compIndirection.$.length
14703	1723	8	DSCompiler.java	compose	i	int	0	NIL-FOR	$ < compIndirection.length
14704	1726	12	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	j < mappingI.$.length
14704	1726	12	DSCompiler.java	compose	j	int	0	NIL-FOR	$ < mappingI.length
14704	1726	12	DSCompiler.java	compose	mappingI	int[][]	0	NIL-FOR	j < $.length
14705	1729	16	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	k < mappingIJ.$.length
14705	1729	16	DSCompiler.java	compose	k	int	0	NIL-FOR	$ < mappingIJ.length
14705	1729	16	DSCompiler.java	compose	mappingIJ	int[]	0	NIL-FOR	k < $.length
14706	1748	8	DSCompiler.java	taylor	i	int	0	NIL-FOR	$ >= 0
14707	1751	12	DSCompiler.java	taylor	THIS	DSCompiler	0	NIL-FOR	k < orders.$.length
14707	1751	12	DSCompiler.java	taylor	k	int	0	NIL-FOR	$ < orders.length
14707	1751	12	DSCompiler.java	taylor	orders	int[]	0	NIL-FOR	k < $.length
4202	1752	16	DSCompiler.java	taylor	k	int	0	MathInternalError	orders[$] > 0
4202	1752	16	DSCompiler.java	taylor	orders	int[]	0	MathInternalError	$[k] > 0
4203	1773	8	DSCompiler.java	checkCompatibility	THIS	DSCompiler	0	DimensionMismatchException	$.parameters != compiler.$.parameters
4203	1773	8	DSCompiler.java	checkCompatibility	compiler	DSCompiler	0	DimensionMismatchException	parameters != $.parameters
4204	1776	8	DSCompiler.java	checkCompatibility	THIS	DSCompiler	0	DimensionMismatchException	$.order != compiler.$.order
4204	1776	8	DSCompiler.java	checkCompatibility	compiler	DSCompiler	0	DimensionMismatchException	order != $.order
550	247	8	Decimal64.java	equals	obj	Object	0	RET	$ instanceof Decimal64
551	443	8	Decimal64.java	rootN	THIS	Decimal64	1	RET	$.value < 0
552	603	8	Decimal64.java	linearCombination	THIS	Decimal64	0	DimensionMismatchException	a.$.length != b.$.length
552	603	8	Decimal64.java	linearCombination	a	Decimal64[]	0	DimensionMismatchException	$.length != b.length
552	603	8	Decimal64.java	linearCombination	b	Decimal64[]	0	DimensionMismatchException	a.length != $.length
12418	608	8	Decimal64.java	linearCombination	THIS	Decimal64	0	NIL-FOR	i < a.$.length
12418	608	8	Decimal64.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
12418	608	8	Decimal64.java	linearCombination	a	Decimal64[]	0	NIL-FOR	i < $.length
553	620	8	Decimal64.java	linearCombination	THIS	Decimal64	0	DimensionMismatchException	a.$.length != b.$.length
553	620	8	Decimal64.java	linearCombination	a	double[]	0	DimensionMismatchException	$.length != b.length
553	620	8	Decimal64.java	linearCombination	b	Decimal64[]	0	DimensionMismatchException	a.length != $.length
12419	624	8	Decimal64.java	linearCombination	THIS	Decimal64	0	NIL-FOR	i < a.$.length
12419	624	8	Decimal64.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
12419	624	8	Decimal64.java	linearCombination	a	double[]	0	NIL-FOR	i < $.length
1794	114	8	DefaultIterativeLinearSolverEvent.java	getResidual	THIS	DefaultIterativeLinearSolverEvent	0	RET	$.r != null
524	50	8	DefaultTransformer.java	transform	o	Object	0	NullArgumentException	$ == null
525	54	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
526	69	8	DefaultTransformer.java	equals	THIS	DefaultTransformer	0	RET	$ == other
526	69	8	DefaultTransformer.java	equals	other	Object	0	RET	this == $
4209	121	8	DerivativeStructure.java	DerivativeStructure	parameters	int	0	NumberIsTooLargeException	index >= $
4209	121	8	DerivativeStructure.java	DerivativeStructure	index	int	0	NumberIsTooLargeException	$ >= parameters
4210	125	8	DerivativeStructure.java	DerivativeStructure	order	int	0	DEF	$ > 0
4211	207	8	DerivativeStructure.java	DerivativeStructure	THIS	DerivativeStructure	0	DimensionMismatchException	derivatives.$.length != $.data.$.length
4211	207	8	DerivativeStructure.java	DerivativeStructure	derivatives	double	0	DimensionMismatchException	$.length != data.length
14711	323	8	DerivativeStructure.java	multiply	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
14711	323	8	DerivativeStructure.java	multiply	i	int	0	NIL-FOR	$ < ds.data.length
14711	323	8	DerivativeStructure.java	multiply	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
14712	346	8	DerivativeStructure.java	divide	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
14712	346	8	DerivativeStructure.java	divide	i	int	0	NIL-FOR	$ < ds.data.length
14712	346	8	DerivativeStructure.java	divide	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
14713	387	8	DerivativeStructure.java	negate	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
14713	387	8	DerivativeStructure.java	negate	i	int	0	NIL-FOR	$ < ds.data.length
14713	387	8	DerivativeStructure.java	negate	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
4212	397	8	DerivativeStructure.java	abs	THIS	DerivativeStructure	1	RET	Double.doubleToLongBits($.data[0]) < 0
4213	452	8	DerivativeStructure.java	copySign	m	long	0	RET	$ >= 0
4213	452	8	DerivativeStructure.java	copySign	m	long	0	RET	$ < 0
4213	452	8	DerivativeStructure.java	copySign	s	long	0	RET	$ < 0
4213	452	8	DerivativeStructure.java	copySign	s	long	0	RET	$ >= 0
4214	464	8	DerivativeStructure.java	copySign	m	long	0	RET	$ < 0
4214	464	8	DerivativeStructure.java	copySign	m	long	0	RET	$ >= 0
4214	464	8	DerivativeStructure.java	copySign	s	long	0	RET	$ >= 0
4214	464	8	DerivativeStructure.java	copySign	s	long	0	RET	$ < 0
14714	487	8	DerivativeStructure.java	scalb	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
14714	487	8	DerivativeStructure.java	scalb	i	int	0	NIL-FOR	$ < ds.data.length
14714	487	8	DerivativeStructure.java	scalb	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
4215	503	8	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isInfinite(y.$.data[0])
4215	503	8	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isInfinite($.data[0])
4215	503	8	DerivativeStructure.java	hypot	y	DerivativeStructure	1	RET	Double.isInfinite($.data[0])
4216	507	15	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isNaN($.data[0])
4216	507	15	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isNaN(y.$.data[0])
4216	507	15	DerivativeStructure.java	hypot	y	DerivativeStructure	1	RET	Double.isNaN($.data[0])
4217	515	12	DerivativeStructure.java	hypot	expX	int	1	RET	$ > expY + 27
4217	515	12	DerivativeStructure.java	hypot	expY	int	1	RET	expX > $ + 27
4218	518	19	DerivativeStructure.java	hypot	expX	int	1	RET	expY > $ + 27
4218	518	19	DerivativeStructure.java	hypot	expY	int	1	RET	$ > expX + 27
4219	574	8	DerivativeStructure.java	compose	THIS	DerivativeStructure	0	DimensionMismatchException	f.$.length != $.getOrder() + 1
4219	574	8	DerivativeStructure.java	compose	f	double	0	DimensionMismatchException	$.length != getOrder() + 1
14715	847	8	DerivativeStructure.java	toDegrees	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
14715	847	8	DerivativeStructure.java	toDegrees	i	int	0	NIL-FOR	$ < ds.data.length
14715	847	8	DerivativeStructure.java	toDegrees	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
14716	858	8	DerivativeStructure.java	toRadians	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
14716	858	8	DerivativeStructure.java	toRadians	i	int	0	NIL-FOR	$ < ds.data.length
14716	858	8	DerivativeStructure.java	toRadians	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
14717	883	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < a.$.length
14717	883	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
14717	883	8	DerivativeStructure.java	linearCombination	a	DerivativeStructure[]	0	NIL-FOR	i < $.length
14718	887	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < b.$.length
14718	887	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < b.length
14718	887	8	DerivativeStructure.java	linearCombination	b	DerivativeStructure[]	0	NIL-FOR	i < $.length
14719	894	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < a.$.length
14719	894	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
14719	894	8	DerivativeStructure.java	linearCombination	a	DerivativeStructure[]	0	NIL-FOR	i < $.length
14720	915	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < b.$.length
14720	915	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < b.length
14720	915	8	DerivativeStructure.java	linearCombination	b	DerivativeStructure[]	0	NIL-FOR	i < $.length
14721	922	8	DerivativeStructure.java	linearCombination	THIS	DerivativeStructure	0	NIL-FOR	i < a.$.length
14721	922	8	DerivativeStructure.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
14721	922	8	DerivativeStructure.java	linearCombination	a	double[]	0	NIL-FOR	i < $.length
4220	1096	8	DerivativeStructure.java	equals	THIS	DerivativeStructure	0	RET	$ == other
4220	1096	8	DerivativeStructure.java	equals	other	Object	0	RET	this == $
4221	1100	8	DerivativeStructure.java	equals	other	Object	0	RET	$ instanceof DerivativeStructure
2309	140	8	DescriptiveStatistics.java	DescriptiveStatistics	initialDoubleArray	double[]	0	DEF	$ != null
2310	165	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
2311	166	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
2312	168	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
2313	252	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
2314	253	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
2315	356	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ < 1
2315	356	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ != INFINITE_WINDOW
2316	366	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
2316	366	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
2316	366	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
2317	427	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
3610	219	8	Dfp.java	Dfp	x	long	0	DEF	$ == Long.MIN_VALUE
3611	227	8	Dfp.java	Dfp	x	long	1	DEF	$ < 0
14451	235	8	Dfp.java	Dfp	x	long	0	NIL-WHILE	$ != 0
3612	242	8	Dfp.java	Dfp	isLongMin	boolean	0	DEF	$
14452	245	12	Dfp.java	Dfp	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
14452	245	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < mant.length - 1
3613	246	16	Dfp.java	Dfp	THIS	Dfp	0	DEF	$.mant[i] != 0
3613	246	16	Dfp.java	Dfp	i	int	0	DEF	mant[$] != 0
3614	271	8	Dfp.java	Dfp	exponent	int	0	RET	$ == -1023
3615	273	12	Dfp.java	Dfp	x	double	0	RET	$ == 0
3616	275	16	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
14453	284	12	Dfp.java	Dfp	mantissa	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
3617	291	8	Dfp.java	Dfp	exponent	int	0	RET	$ == 1024
3618	293	12	Dfp.java	Dfp	x	double	1	DEF	$ != $
3619	296	19	Dfp.java	Dfp	x	double	1	DEF	$ < 0
3620	310	8	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
3621	351	8	Dfp.java	Dfp	s	String	0	RET	$.equals(POS_INFINITY_STRING)
3622	357	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NEG_INFINITY_STRING)
3623	363	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NAN_STRING)
3624	371	8	Dfp.java	Dfp	p	int	0	DEF	$ == -1
3625	377	8	Dfp.java	Dfp	p	int	1	DEF	$ != -1
14454	383	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$<fpexp.length()
14454	383	12	Dfp.java	Dfp	fpexp	String	0	NIL-FOR	i<$.length()
3626	385	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) == '-'
3626	385	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) == '-'
3627	390	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) <= '9'
3627	390	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) >= '0'
3627	390	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) <= '9'
3627	390	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) >= '0'
3628	395	12	Dfp.java	Dfp	negative	boolean	0	DEF	$
3629	404	8	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.indexOf("-") != -1
3630	414	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) <= '9'
3630	414	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) >= '1'
3630	414	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) <= '9'
3630	414	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) >= '1'
3631	418	12	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
3631	418	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '0'
3631	418	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '0'
3632	422	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
3632	422	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
3633	428	12	Dfp.java	Dfp	p	int	0	DEF	$ == fpdecimal.length()
3633	428	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == $.length()
3634	441	12	Dfp.java	Dfp	p	int	0	DEF	$ == (fpdecimal.length())
3634	441	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == ($.length())
3635	446	12	Dfp.java	Dfp	THIS	Dfp	0	DEF	q == $.mant.$.length*rsize+offset+1
3635	446	12	Dfp.java	Dfp	rsize	int	0	DEF	q == mant.length*$+offset+1
3635	446	12	Dfp.java	Dfp	offset	int	0	DEF	q == mant.length*rsize+$+1
3635	446	12	Dfp.java	Dfp	q	int	0	DEF	$ == mant.length*rsize+offset+1
3636	450	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
3636	450	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
3637	457	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) < '0'
3637	457	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) > '9'
3637	457	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) < '0'
3637	457	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) > '9'
3638	470	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
3638	470	8	Dfp.java	Dfp	offset	int	0	DEF	q != $
3638	470	8	Dfp.java	Dfp	q	int	0	DEF	$ != offset
3639	473	16	Dfp.java	Dfp	offset	int	0	DEF	q == $
3639	473	16	Dfp.java	Dfp	q	int	0	DEF	$ == offset
3640	476	16	Dfp.java	Dfp	striped	char[]	1	DEF	$[q] == '0'
3640	476	16	Dfp.java	Dfp	q	int	1	DEF	striped[$] == '0'
3641	485	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
3641	485	8	Dfp.java	Dfp	significantDigits	int	0	DEF	$ == 0
3642	490	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
14455	498	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	$ > q
14455	498	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	p > $
3643	499	12	Dfp.java	Dfp	striped	char[]	0	DEF	$[p] != '0'
3643	499	12	Dfp.java	Dfp	p	int	0	DEF	striped[$] != '0'
14456	511	8	Dfp.java	Dfp	THIS	Dfp	0	NIL-WHILE	(p - q) < ($.mant.$.length * rsize)
14456	511	8	Dfp.java	Dfp	rsize	int	0	NIL-WHILE	(p - q) < (mant.length * $)
14456	511	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	($ - q) < (mant.length * rsize)
14456	511	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	(p - $) < (mant.length * rsize)
14457	512	12	Dfp.java	Dfp	rsize	int	0	NIL-FOR	i < $
14457	512	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < rsize
14458	519	8	Dfp.java	Dfp	i	int	0	NIL-FOR	$ >= 0
3644	530	8	Dfp.java	Dfp	THIS	Dfp	0	DEF	q < striped.$.length
3644	530	8	Dfp.java	Dfp	striped	char[]	0	DEF	q < $.length
3644	530	8	Dfp.java	Dfp	q	int	0	DEF	$ < striped.length
3645	599	8	Dfp.java	newInstance	THIS	Dfp	0	RET	$.field.getRadixDigits() != d.$.field.getRadixDigits()
3645	599	8	Dfp.java	newInstance	d	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
14459	671	8	Dfp.java	shiftLeft	i	int	0	NIL-FOR	$ > 0
14460	683	8	Dfp.java	shiftRight	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
14460	683	8	Dfp.java	shiftRight	i	int	0	NIL-FOR	$ < mant.length - 1
3646	705	8	Dfp.java	align	adiff	int	0	DEF	$ < 0
3647	709	8	Dfp.java	align	diff	int	0	RET	$ == 0
3648	713	8	Dfp.java	align	THIS	Dfp	0	RET	adiff > ($.mant.$.length + 1)
3648	713	8	Dfp.java	align	adiff	int	0	RET	$ > (mant.length + 1)
14461	724	8	Dfp.java	align	i	int	0	NIL-FOR	$ < adiff
14461	724	8	Dfp.java	align	adiff	int	0	NIL-FOR	i < $
3649	725	12	Dfp.java	align	diff	int	1	DEF	$ < 0
3650	730	16	Dfp.java	align	lostdigit	int	0	DEF	$ != 0
3651	742	8	Dfp.java	align	inexact	boolean	0	DEF	$
3652	758	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3652	758	8	Dfp.java	lessThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3653	767	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.isNaN()
3653	767	8	Dfp.java	lessThan	x	Dfp	0	RET	$.isNaN()
3654	783	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3654	783	8	Dfp.java	greaterThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3655	792	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.isNaN()
3655	792	8	Dfp.java	greaterThan	x	Dfp	0	RET	$.isNaN()
3656	806	8	Dfp.java	negativeOrNull	THIS	Dfp	0	RET	$.isNaN()
3657	821	8	Dfp.java	strictlyNegative	THIS	Dfp	0	RET	$.isNaN()
3658	836	8	Dfp.java	positiveOrNull	THIS	Dfp	0	RET	$.isNaN()
3659	851	8	Dfp.java	strictlyPositive	THIS	Dfp	0	RET	$.isNaN()
3660	890	8	Dfp.java	isZero	THIS	Dfp	0	RET	$.isNaN()
3661	907	8	Dfp.java	equals	other	Object	0	RET	$ instanceof Dfp
3662	909	12	Dfp.java	equals	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3662	909	12	Dfp.java	equals	THIS	Dfp	0	RET	$.isNaN()
3662	909	12	Dfp.java	equals	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3662	909	12	Dfp.java	equals	x	Dfp	0	RET	$.isNaN()
3663	934	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.isNaN()
3663	934	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3663	934	8	Dfp.java	unequal	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3663	934	8	Dfp.java	unequal	x	Dfp	0	RET	$.isNaN()
3664	949	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
3664	949	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length - 1] == 0
3664	949	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
3664	949	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[a.$.mant.$.length - 1] == 0
3664	949	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
3664	949	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
3664	949	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
3664	949	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
3665	954	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.sign != b.$.sign
3665	954	8	Dfp.java	compare	a	Dfp	0	RET	$.sign != b.sign
3665	954	8	Dfp.java	compare	b	Dfp	0	RET	a.sign != $.sign
3666	955	12	Dfp.java	compare	THIS	Dfp	1	RET	a.$.sign == -1
3666	955	12	Dfp.java	compare	a	Dfp	1	RET	$.sign == -1
3667	963	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
3667	963	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
3667	963	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
3667	963	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
3668	967	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
3668	967	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
3668	967	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
3668	967	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
3669	971	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
3669	971	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
3669	971	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
3669	971	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
3670	976	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[b.$.mant.$.length-1] != 0
3670	976	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length-1] != 0
3670	976	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[b.mant.length-1] != 0
3670	976	8	Dfp.java	compare	b	Dfp	0	RET	a.mant[$.mant.length-1] != 0
3670	976	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length-1] != 0
3671	977	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp < b.$.exp
3671	977	12	Dfp.java	compare	a	Dfp	0	RET	$.exp < b.exp
3671	977	12	Dfp.java	compare	b	Dfp	0	RET	a.exp < $.exp
3672	981	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp > b.$.exp
3672	981	12	Dfp.java	compare	a	Dfp	0	RET	$.exp > b.exp
3672	981	12	Dfp.java	compare	b	Dfp	0	RET	a.exp > $.exp
14462	987	8	Dfp.java	compare	i	int	0	NIL-FOR	$ >= 0
3673	988	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] > b.$.mant[i]
3673	988	12	Dfp.java	compare	i	int	0	RET	a.mant[$] > b.mant[$]
3673	988	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] > b.mant[i]
3673	988	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] > $.mant[i]
3674	992	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] < b.$.mant[i]
3674	992	12	Dfp.java	compare	i	int	0	RET	a.mant[$] < b.mant[$]
3674	992	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] < b.mant[i]
3674	992	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] < $.mant[i]
3675	1039	8	Dfp.java	remainder	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3675	1039	8	Dfp.java	remainder	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3676	1054	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.isNaN()
3677	1058	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.nans == INFINITE
3678	1062	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
3679	1069	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp < 0
3680	1080	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp >= $.mant.$.length
14463	1088	8	Dfp.java	trunc	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length-result.$.exp
14463	1088	8	Dfp.java	trunc	i	int	0	NIL-FOR	$ < mant.length-result.exp
14463	1088	8	Dfp.java	trunc	result	Dfp	0	NIL-FOR	i < mant.length-$.exp
3681	1093	8	Dfp.java	trunc	changed	boolean	0	RET	$
3682	1096	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == -1
3682	1096	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == -1
3683	1103	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == 1
3683	1103	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == 1
3684	1114	20	Dfp.java	trunc	half	Dfp	0	DEF	a.greaterThan($)
3684	1114	20	Dfp.java	trunc	a	Dfp	0	DEF	$.greaterThan(half)
3685	1121	20	Dfp.java	trunc	THIS	Dfp	0	DEF	(result.$.mant[$.mant.$.length-result.$.exp]&1) != 0
3685	1121	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.exp > 0
3685	1121	20	Dfp.java	trunc	half	Dfp	0	DEF	a.equals($)
3685	1121	20	Dfp.java	trunc	a	Dfp	0	DEF	$.equals(half)
3685	1121	20	Dfp.java	trunc	result	Dfp	0	DEF	($.mant[mant.length-$.exp]&1) != 0
3685	1121	20	Dfp.java	trunc	result	Dfp	0	DEF	$.exp > 0
3686	1147	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.greaterThan($.newInstance(2147483647))
3686	1147	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.greaterThan(newInstance(2147483647))
3687	1151	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.lessThan($.newInstance(-2147483648))
3687	1151	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.lessThan(newInstance(-2147483648))
14464	1155	8	Dfp.java	intValue	THIS	Dfp	0	NIL-FOR	i >= $.mant.$.length - rounded.$.exp
14464	1155	8	Dfp.java	intValue	i	int	0	NIL-FOR	$ >= mant.length - rounded.exp
14464	1155	8	Dfp.java	intValue	rounded	Dfp	0	NIL-FOR	i >= mant.length - $.exp
3688	1159	8	Dfp.java	intValue	THIS	Dfp	0	DEF	rounded.$.sign == -1
3688	1159	8	Dfp.java	intValue	rounded	Dfp	0	DEF	$.sign == -1
3689	1190	8	Dfp.java	intLog10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 1000
3690	1193	8	Dfp.java	intLog10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 100
3691	1196	8	Dfp.java	intLog10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 10
3692	1209	8	Dfp.java	power10	e	int	1	DEF	$ >= 0
14465	1240	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
14465	1240	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
14466	1246	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
14466	1246	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
3693	1262	8	Dfp.java	add	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3693	1262	8	Dfp.java	add	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3694	1270	8	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans != FINITE
3694	1270	8	Dfp.java	add	THIS	Dfp	0	RET	$.nans != FINITE
3694	1270	8	Dfp.java	add	x	Dfp	0	RET	$.nans != FINITE
3695	1271	12	Dfp.java	add	THIS	Dfp	0	RET	$.isNaN()
3696	1275	12	Dfp.java	add	x	Dfp	0	RET	$.isNaN()
3697	1279	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == FINITE
3697	1279	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
3697	1279	12	Dfp.java	add	x	Dfp	0	RET	$.nans == FINITE
3698	1283	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == FINITE
3698	1283	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
3698	1283	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
3699	1287	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign == x.$.sign
3699	1287	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
3699	1287	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
3699	1287	12	Dfp.java	add	x	Dfp	0	RET	sign == $.sign
3699	1287	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
3700	1291	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign != x.$.sign
3700	1291	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
3700	1291	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
3700	1291	12	Dfp.java	add	x	Dfp	0	RET	sign != $.sign
3700	1291	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
3701	1316	8	Dfp.java	add	THIS	Dfp	0	DEF	$.compare(a, b) > 0
3701	1316	8	Dfp.java	add	a	Dfp	0	DEF	compare($, b) > 0
3701	1316	8	Dfp.java	add	b	Dfp	0	DEF	compare(a, $) > 0
3702	1323	8	Dfp.java	add	THIS	Dfp	0	DEF	b.$.mant[$.mant.$.length-1] == 0
3702	1323	8	Dfp.java	add	b	Dfp	0	DEF	$.mant[mant.length-1] == 0
3703	1327	8	Dfp.java	add	THIS	Dfp	0	DEF	a.$.mant[$.mant.$.length-1] == 0
3703	1327	8	Dfp.java	add	a	Dfp	0	DEF	$.mant[mant.length-1] == 0
3704	1334	8	Dfp.java	add	THIS	Dfp	1	DEF	a.$.exp < b.$.exp
3704	1334	8	Dfp.java	add	a	Dfp	1	DEF	$.exp < b.exp
3704	1334	8	Dfp.java	add	b	Dfp	1	DEF	a.exp < $.exp
3705	1341	8	Dfp.java	add	asign	byte	0	DEF	$ != bsign
3705	1341	8	Dfp.java	add	bsign	byte	0	DEF	asign != $
3706	1342	12	Dfp.java	add	asign	byte	1	DEF	$ == rsign
3706	1342	12	Dfp.java	add	rsign	byte	1	DEF	asign == $
14467	1351	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
14467	1351	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
3707	1362	8	Dfp.java	add	asign	byte	0	DEF	$ == bsign
3707	1362	8	Dfp.java	add	bsign	byte	0	DEF	asign == $
3707	1362	8	Dfp.java	add	rh	int	0	DEF	$ != 0
3708	1367	12	Dfp.java	add	excp	int	0	DEF	$ != 0
14468	1373	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
14468	1373	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
3709	1374	12	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] != 0
3709	1374	12	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] != 0
3710	1378	12	Dfp.java	add	i	int	0	DEF	$ == 0
3711	1386	8	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3711	1386	8	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3712	1389	12	Dfp.java	add	asign	byte	0	DEF	$ != bsign
3712	1389	12	Dfp.java	add	bsign	byte	0	DEF	asign != $
3713	1397	8	Dfp.java	add	excp	int	0	DEF	$ != 0
3714	1462	8	Dfp.java	round	inc	boolean	0	DEF	$
14469	1465	12	Dfp.java	round	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
14469	1465	12	Dfp.java	round	i	int	0	NIL-FOR	$ < mant.length
3715	1471	12	Dfp.java	round	rh	int	0	DEF	$ != 0
3716	1478	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp < MIN_EXP
3717	1484	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp > MAX_EXP
3718	1490	8	Dfp.java	round	n	int	0	RET	$ != 0
3719	1507	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3719	1507	8	Dfp.java	multiply	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3720	1517	8	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans != FINITE
3720	1517	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
3720	1517	8	Dfp.java	multiply	x	Dfp	0	RET	$.nans != FINITE
3721	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
3722	1522	12	Dfp.java	multiply	x	Dfp	0	RET	$.isNaN()
3723	1526	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
3723	1526	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
3723	1526	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] != 0
3723	1526	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
3723	1526	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] != 0
3724	1532	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
3724	1532	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
3724	1532	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] != 0
3724	1532	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
3725	1538	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
3725	1538	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
3725	1538	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
3726	1544	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
3726	1544	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] == 0
3726	1544	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
3726	1544	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
3726	1544	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
3726	1544	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
3726	1544	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
3726	1544	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] == 0
3726	1544	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
14470	1556	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
14470	1556	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
14471	1558	12	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	j<$.mant.$.length
14471	1558	12	Dfp.java	multiply	j	int	0	NIL-FOR	$<mant.length
14472	1570	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ >= 0
3727	1571	12	Dfp.java	multiply	i	int	0	DEF	product[$] != 0
3727	1571	12	Dfp.java	multiply	product	int[]	0	DEF	$[i] != 0
14473	1578	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
14473	1578	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
3728	1586	8	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3728	1586	8	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3729	1592	8	Dfp.java	multiply	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
3729	1592	8	Dfp.java	multiply	md	int	1	DEF	$ > (mant.length-1)
3730	1598	8	Dfp.java	multiply	excp	int	0	DEF	$ != 0
3731	1611	8	Dfp.java	multiply	x	int	1	RET	$ >= 0
3731	1611	8	Dfp.java	multiply	x	int	1	RET	$ < RADIX
3732	1627	8	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.nans != FINITE
3733	1628	12	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.isNaN()
3734	1632	12	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.nans == INFINITE
3734	1632	12	Dfp.java	multiplyFast	x	int	0	RET	$ != 0
3735	1637	12	Dfp.java	multiplyFast	THIS	Dfp	0	RET	$.nans == INFINITE
3735	1637	12	Dfp.java	multiplyFast	x	int	0	RET	$ == 0
3736	1647	8	Dfp.java	multiplyFast	x	int	0	RET	$ < 0
3736	1647	8	Dfp.java	multiplyFast	x	int	0	RET	$ >= RADIX
14474	1656	8	Dfp.java	multiplyFast	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
14474	1656	8	Dfp.java	multiplyFast	i	int	0	NIL-FOR	$ < mant.length
3737	1663	8	Dfp.java	multiplyFast	rh	int	0	DEF	$ != 0
3738	1669	8	Dfp.java	multiplyFast	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3738	1669	8	Dfp.java	multiplyFast	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3739	1674	8	Dfp.java	multiplyFast	excp	int	0	DEF	$ != 0
3740	1698	8	Dfp.java	divide	THIS	Dfp	0	RET	$.field.getRadixDigits() != divisor.$.field.getRadixDigits()
3740	1698	8	Dfp.java	divide	divisor	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3741	1708	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans != FINITE
3741	1708	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
3741	1708	8	Dfp.java	divide	divisor	Dfp	0	RET	$.nans != FINITE
3742	1709	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
3743	1713	12	Dfp.java	divide	divisor	Dfp	0	RET	$.isNaN()
3744	1717	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
3744	1717	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == FINITE
3744	1717	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == FINITE
3745	1723	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == FINITE
3745	1723	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
3745	1723	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
3746	1729	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
3746	1729	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
3746	1729	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
3747	1739	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.mant[$.mant.$.length-1] == 0
3747	1739	8	Dfp.java	divide	divisor	Dfp	0	RET	$.mant[mant.length-1] == 0
14475	1762	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
14475	1762	8	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
14476	1770	8	Dfp.java	divide	qd	int	0	NIL-FOR	$ >= 0
14477	1779	12	Dfp.java	divide	trialgood	boolean	0	NIL-WHILE	$
14478	1785	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
14478	1785	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
14479	1794	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
14479	1794	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
3748	1801	16	Dfp.java	divide	rh	int	0	DEF	$ == 0
3749	1811	16	Dfp.java	divide	minadj	int	0	DEF	$ >= 2
14480	1819	16	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
3750	1820	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] > remainder[i]
3750	1820	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] > remainder[$]
3750	1820	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] > $[i]
3750	1820	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] > remainder[i]
3751	1823	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] < remainder[i]
3751	1823	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] < remainder[$]
3751	1823	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] < $[i]
3751	1823	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] < remainder[i]
3752	1828	16	Dfp.java	divide	THIS	Dfp	0	DEF	remainder[$.mant.$.length] != 0
3752	1828	16	Dfp.java	divide	remainder	int[]	0	DEF	$[mant.length] != 0
3753	1832	16	Dfp.java	divide	trialgood	boolean	0	DEF	$ == false
3754	1839	12	Dfp.java	divide	nsqd	int	0	DEF	$ != 0
3754	1839	12	Dfp.java	divide	trial	int	0	DEF	$ != 0
3755	1843	12	Dfp.java	divide	THIS	Dfp	0	DEF	$.field.getRoundingMode() == DfpField.$.RoundingMode.ROUND_DOWN
3755	1843	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd == $.mant.$.length
3755	1843	12	Dfp.java	divide	nsqd	int	0	DEF	$ == mant.length
3756	1848	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd > $.mant.$.length
3756	1848	12	Dfp.java	divide	nsqd	int	0	DEF	$ > mant.length
14481	1855	12	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
14481	1855	12	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
14482	1862	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
3757	1863	12	Dfp.java	divide	i	int	0	DEF	quotient[$] != 0
3757	1863	12	Dfp.java	divide	quotient	int[]	0	DEF	$[i] != 0
14483	1870	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i<$.mant.$.length
14483	1870	8	Dfp.java	divide	i	int	0	NIL-FOR	$<mant.length
3758	1878	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3758	1878	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3759	1882	8	Dfp.java	divide	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
3759	1882	8	Dfp.java	divide	md	int	1	DEF	$ > (mant.length-1)
3760	1888	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
3761	1903	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
3762	1904	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
3763	1908	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
3764	1914	8	Dfp.java	divide	divisor	int	0	RET	$ == 0
3765	1924	8	Dfp.java	divide	divisor	int	0	RET	$ >= RADIX
3765	1924	8	Dfp.java	divide	divisor	int	0	RET	$ < 0
14484	1935	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
3766	1942	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3766	1942	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3767	1952	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
3768	1972	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
3768	1972	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == FINITE
3769	1977	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans != FINITE
3770	1978	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == INFINITE
3770	1978	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == 1
3771	1983	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == QNAN
3772	1987	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == SNAN
3773	1997	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == -1
3774	2011	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp > 1
3774	2011	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp < -1
3774	2011	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp > 1
3774	2011	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp < -1
14485	2037	8	Dfp.java	sqrt	x	Dfp	0	NIL-WHILE	$.unequal(px)
14485	2037	8	Dfp.java	sqrt	px	Dfp	0	NIL-WHILE	x.unequal($)
3775	2046	12	Dfp.java	sqrt	x	Dfp	0	DEF	$.equals(ppx)
3775	2046	12	Dfp.java	sqrt	ppx	Dfp	0	DEF	x.equals($)
3776	2053	12	Dfp.java	sqrt	THIS	Dfp	0	DEF	dx.$.mant[$.mant.$.length-1] == 0
3776	2053	12	Dfp.java	sqrt	dx	Dfp	0	DEF	$.mant[mant.length-1] == 0
3777	2067	8	Dfp.java	toString	THIS	Dfp	0	RET	$.nans != FINITE
3778	2069	12	Dfp.java	toString	THIS	Dfp	1	RET	$.nans == INFINITE
3779	2076	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp > $.mant.$.length
3779	2076	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp < -1
14486	2098	8	Dfp.java	dfp2sci	i	int	0	NIL-FOR	$ >= 0
14487	2106	8	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-FOR	p < rawdigits.$.length
14487	2106	8	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-FOR	p < $.length
14487	2106	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ < rawdigits.length
3780	2107	12	Dfp.java	dfp2sci	rawdigits	char[]	0	DEF	$[p] != '0'
3780	2107	12	Dfp.java	dfp2sci	p	int	0	DEF	rawdigits[$] != '0'
3781	2115	8	Dfp.java	dfp2sci	THIS	Dfp	0	DEF	$.sign == -1
3782	2119	8	Dfp.java	dfp2sci	THIS	Dfp	1	DEF	p != rawdigits.$.length
3782	2119	8	Dfp.java	dfp2sci	rawdigits	char[]	1	DEF	p != $.length
3782	2119	8	Dfp.java	dfp2sci	p	int	1	DEF	$ != rawdigits.length
14488	2124	12	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-WHILE	p<rawdigits.$.length
14488	2124	12	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-WHILE	p<$.length
14488	2124	12	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$<rawdigits.length
3783	2142	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
14489	2147	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ > ae
14489	2147	8	Dfp.java	dfp2sci	ae	int	0	NIL-FOR	p > $
3784	2151	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
14490	2155	8	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$ > 0
3785	2177	8	Dfp.java	dfp2string	e	int	0	DEF	$ <= 0
14491	2183	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ < 0
14492	2191	8	Dfp.java	dfp2string	i	int	0	NIL-FOR	$ >= 0
3786	2196	12	Dfp.java	dfp2string	e	int	0	DEF	--$ == 0
14493	2202	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ > 0
3787	2210	8	Dfp.java	dfp2string	pointInserted	boolean	0	DEF	$
14494	2217	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[q] == '0'
14494	2217	8	Dfp.java	dfp2string	q	int	0	NIL-WHILE	buffer[$] == '0'
3788	2220	8	Dfp.java	dfp2string	buffer	char[]	0	DEF	$[q] == '.'
3788	2220	8	Dfp.java	dfp2string	q	int	0	DEF	buffer[$] == '.'
14495	2225	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[p-1] == '0'
14495	2225	8	Dfp.java	dfp2string	p	int	0	NIL-WHILE	buffer[$-1] == '0'
3789	2230	8	Dfp.java	dfp2string	THIS	Dfp	0	DEF	$.sign < 0
3790	2256	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] != 0
3790	2256	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
3791	2263	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] == 0
3791	2263	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
3792	2269	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
3792	2269	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == QNAN
3793	2274	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
3793	2274	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == SNAN
3794	2281	16	Dfp.java	dotrap	THIS	Dfp	1	DEF	(result.$.exp+$.mant.$.length) < MIN_EXP
3794	2281	16	Dfp.java	dotrap	result	Dfp	1	DEF	($.exp+mant.length) < MIN_EXP
3795	2346	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3795	2346	8	Dfp.java	nextAfter	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3796	2355	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan(x)
3796	2355	8	Dfp.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
3797	2359	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.compare(this, x) == 0
3797	2359	8	Dfp.java	nextAfter	x	Dfp	0	RET	compare(this, $) == 0
3798	2363	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan($.getZero())
3799	2369	8	Dfp.java	nextAfter	up	boolean	1	DEF	$
3800	2374	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
3801	2384	12	Dfp.java	nextAfter	THIS	Dfp	1	DEF	$.equals(inc)
3801	2384	12	Dfp.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
3802	2390	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
3803	2397	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.classify() != INFINITE
3803	2397	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
3804	2402	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero()) == false
3804	2402	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	result.equals($.getZero())
3804	2402	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
3805	2417	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isInfinite()
3806	2418	12	Dfp.java	toDouble	THIS	Dfp	1	RET	$.lessThan($.getZero())
3807	2425	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isNaN()
3808	2432	8	Dfp.java	toDouble	cmp0	int	1	RET	$ == 0
3809	2434	15	Dfp.java	toDouble	cmp0	int	0	DEF	$ < 0
3810	2442	8	Dfp.java	toDouble	exponent	int	0	DEF	$ < 0
14496	2447	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.lessThan($)
14496	2447	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.equals($)
14496	2447	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.lessThan(y)
14496	2447	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.equals(y)
3811	2456	8	Dfp.java	toDouble	exponent	int	0	DEF	$ > -1023
3812	2460	8	Dfp.java	toDouble	exponent	int	0	RET	$ < -1074
3813	2464	8	Dfp.java	toDouble	exponent	int	0	RET	$ > 1023
3814	2474	8	Dfp.java	toDouble	mantissa	long	0	DEF	$ == 4503599627370496L
3815	2481	8	Dfp.java	toDouble	exponent	int	0	DEF	$ <= -1023
14497	2485	8	Dfp.java	toDouble	exponent	int	0	NIL-WHILE	$ < -1023
3816	2493	8	Dfp.java	toDouble	negate	boolean	0	DEF	$
3817	2568	8	Dfp.java	signum	THIS	Dfp	1	RET	$.isNaN()
3817	2568	8	Dfp.java	signum	THIS	Dfp	1	RET	$.isZero()
3818	2579	8	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign >= 0
3818	2579	8	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign < 0
3818	2579	8	Dfp.java	copySign	THIS	Dfp	0	RET	s.$.sign >= 0
3818	2579	8	Dfp.java	copySign	THIS	Dfp	0	RET	s.$.sign < 0
3818	2579	8	Dfp.java	copySign	s	Dfp	0	RET	$.sign >= 0
3818	2579	8	Dfp.java	copySign	s	Dfp	0	RET	$.sign < 0
3819	2590	8	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign < 0
3819	2590	8	Dfp.java	copySign	THIS	Dfp	0	RET	$.sign >= 0
3819	2590	8	Dfp.java	copySign	sb	long	0	RET	$ < 0
3819	2590	8	Dfp.java	copySign	sb	long	0	RET	$ >= 0
3820	2745	8	Dfp.java	atan2	THIS	Dfp	1	RET	x.$.sign >= 0
3820	2745	8	Dfp.java	atan2	x	Dfp	1	RET	$.sign >= 0
3821	2810	8	Dfp.java	linearCombination	THIS	Dfp	0	DimensionMismatchException	a.$.length != b.$.length
3821	2810	8	Dfp.java	linearCombination	a	Dfp[]	0	DimensionMismatchException	$.length != b.length
3821	2810	8	Dfp.java	linearCombination	b	Dfp[]	0	DimensionMismatchException	a.length != $.length
14498	2814	8	Dfp.java	linearCombination	THIS	Dfp	0	NIL-FOR	i < a.$.length
14498	2814	8	Dfp.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
14498	2814	8	Dfp.java	linearCombination	a	Dfp[]	0	NIL-FOR	i < $.length
3822	2825	8	Dfp.java	linearCombination	THIS	Dfp	0	DimensionMismatchException	a.$.length != b.$.length
3822	2825	8	Dfp.java	linearCombination	a	double[]	0	DimensionMismatchException	$.length != b.length
3822	2825	8	Dfp.java	linearCombination	b	Dfp[]	0	DimensionMismatchException	a.length != $.length
14499	2829	8	Dfp.java	linearCombination	THIS	Dfp	0	NIL-FOR	i < a.$.length
14499	2829	8	Dfp.java	linearCombination	i	int	0	NIL-FOR	$ < a.length
14499	2829	8	Dfp.java	linearCombination	a	double[]	0	NIL-FOR	i < $.length
3589	131	8	DfpDec.java	newInstance	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != d.getField().getRadixDigits()
3589	131	8	DfpDec.java	newInstance	d	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
3590	168	8	DfpDec.java	round	msb	int	0	RET	$ == 0
14447	175	8	DfpDec.java	round	msb	int	0	NIL-WHILE	lsbthreshold > $
14447	175	8	DfpDec.java	round	lsbthreshold	int	0	NIL-WHILE	$ > msb
14448	186	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsbshift % 4
14448	186	8	DfpDec.java	round	lsbshift	int	0	NIL-FOR	i < $ % 4
3591	192	8	DfpDec.java	round	THIS	DfpDec	0	RET	digits == 4 * $.mant.$.length - 3
3591	192	8	DfpDec.java	round	lsbthreshold	int	0	RET	$ <= 1
3591	192	8	DfpDec.java	round	digits	int	0	RET	$ == 4 * mant.length - 3
3592	198	8	DfpDec.java	round	lsbthreshold	int	1	DEF	$ == 1
14449	208	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsd
14449	208	8	DfpDec.java	round	lsd	int	0	NIL-FOR	i < $
3593	255	8	DfpDec.java	round	inc	boolean	0	DEF	$
14450	258	12	DfpDec.java	round	THIS	DfpDec	0	NIL-FOR	i < $.mant.$.length
14450	258	12	DfpDec.java	round	i	int	0	NIL-FOR	$ < mant.length
3594	264	12	DfpDec.java	round	rh	int	0	DEF	$ != 0
3595	271	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp < MIN_EXP
3596	277	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp > MAX_EXP
3597	283	8	DfpDec.java	round	discarded	int	0	RET	$ != 0
3597	283	8	DfpDec.java	round	n	int	0	RET	$ != 0
3598	298	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != x.getField().getRadixDigits()
3598	298	8	DfpDec.java	nextAfter	x	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
3599	310	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan(x)
3599	310	8	DfpDec.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
3600	314	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.equals(x)
3600	314	8	DfpDec.java	nextAfter	x	Dfp	0	RET	equals($)
3601	318	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan($.getZero())
3602	322	8	DfpDec.java	nextAfter	up	boolean	1	DEF	$
3603	326	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
3604	330	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
3604	330	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
3605	339	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	$.equals(inc)
3605	339	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
3606	345	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
3607	349	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
3607	349	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
3608	356	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.classify() != INFINITE
3608	356	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
3609	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	result.equals($.getZero())
3609	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero()) == false
3609	361	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
3823	200	8	DfpField.java	DfpField	computeConstants	boolean	1	DEF	$
14500	537	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
14500	537	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
14500	537	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
3824	540	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3824	540	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '1'
3824	540	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
3824	540	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '1'
3825	544	8	DfpField.java	split	i	int	0	DEF	buf[$] == '.'
3825	544	8	DfpField.java	split	buf	char[]	0	DEF	$[i] == '.'
3826	549	8	DfpField.java	split	THIS	DfpField	0	DEF	sig == ($.radixDigits / 2) * 4
3826	549	8	DfpField.java	split	sig	int	0	DEF	$ == (radixDigits / 2) * 4
3827	554	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
3827	554	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3827	554	8	DfpField.java	split	leading	boolean	0	DEF	$
3827	554	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
3827	554	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
14501	561	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
14501	561	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
14501	561	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
3828	563	8	DfpField.java	split	i	int	0	DEF	$ < sp
3828	563	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
3828	563	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3828	563	8	DfpField.java	split	sp	int	0	DEF	i < $
3828	563	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
3828	563	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
3829	578	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String.length() < highPrecisionDecimalDigits - 3
3829	578	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String == null
3829	578	8	DfpField.java	computeStringConstants	highPrecisionDecimalDigits	int	0	DEF	sqr2String.length() < $ - 3
14502	623	8	DfpField.java	computePi	i	int	0	NIL-FOR	$ < 20
3830	637	12	DfpField.java	computePi	ykM1	Dfp	0	DEF	yk.equals($)
3830	637	12	DfpField.java	computePi	yk	Dfp	0	DEF	$.equals(ykM1)
14503	659	8	DfpField.java	computeExp	i	int	0	NIL-FOR	$ < 10000
3831	664	12	DfpField.java	computeExp	y	Dfp	0	DEF	$.equals(py)
3831	664	12	DfpField.java	computeExp	py	Dfp	0	DEF	y.equals($)
14504	742	8	DfpField.java	computeLn	i	int	0	NIL-FOR	$ < 10000
3832	748	12	DfpField.java	computeLn	y	Dfp	0	DEF	$.equals(py)
3832	748	12	DfpField.java	computeLn	py	Dfp	0	DEF	y.equals($)
14509	54	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
14509	54	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
14509	54	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
3850	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '1'
3850	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3850	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '1'
3850	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3851	61	12	DfpMath.java	split	i	int	0	DEF	buf[$] == '.'
3851	61	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] == '.'
3852	66	12	DfpMath.java	split	sig	int	0	DEF	$ == (field.getRadixDigits() / 2) * 4
3852	66	12	DfpMath.java	split	field	DfpField	0	DEF	sig == ($.getRadixDigits() / 2) * 4
3853	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3853	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
3853	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3853	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
3853	71	12	DfpMath.java	split	leading	boolean	0	DEF	$
14510	78	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
14510	78	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
14510	78	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
3854	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
3854	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3854	80	12	DfpMath.java	split	i	int	0	DEF	$ < sp
3854	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
3854	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3854	80	12	DfpMath.java	split	sp	int	0	DEF	i < $
3855	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].equals($[1])
3855	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].classify() == Dfp.INFINITE
3856	162	8	DfpMath.java	splitPow	a	int	0	RET	$ == 0
3857	167	8	DfpMath.java	splitPow	a	int	0	DEF	$ < 0
14511	174	8	DfpMath.java	splitPow	a	int	0	NIL-DOWHILE	$ >= 1
3858	183	16	DfpMath.java	splitPow	trial	int	0	DEF	$ > a
3858	183	16	DfpMath.java	splitPow	a	int	0	DEF	trial > $
3859	198	8	DfpMath.java	splitPow	invert	boolean	0	DEF	$
3860	217	8	DfpMath.java	pow	a	int	0	RET	$ == 0
3861	222	8	DfpMath.java	pow	a	int	0	DEF	$ < 0
14512	228	8	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$ >= 1
14513	234	12	DfpMath.java	pow	trial	int	0	NIL-DOWHILE	a>$
14513	234	12	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$>trial
3862	249	8	DfpMath.java	pow	invert	boolean	0	DEF	$
3863	270	8	DfpMath.java	exp	ia	int	0	RET	$ > 2147483646
3864	275	8	DfpMath.java	exp	ia	int	0	RET	$ < -2147483646
14514	297	8	DfpMath.java	expInternal	i	int	0	NIL-FOR	$ < 90
3865	301	12	DfpMath.java	expInternal	y	Dfp	0	DEF	$.equals(py)
3865	301	12	DfpMath.java	expInternal	py	Dfp	0	DEF	y.equals($)
3866	324	8	DfpMath.java	log	a	Dfp	0	RET	$.equals($.getZero())
3866	324	8	DfpMath.java	log	a	Dfp	0	RET	$.isNaN()
3866	324	8	DfpMath.java	log	a	Dfp	0	RET	$.lessThan($.getZero())
3867	330	8	DfpMath.java	log	a	Dfp	0	RET	$.classify() == Dfp.INFINITE
14515	340	8	DfpMath.java	log	ix	int	0	NIL-WHILE	$ > 2
14516	353	8	DfpMath.java	log	spx	Dfp[]	0	NIL-WHILE	$[0].add($[1]).greaterThan(spy[0])
14516	353	8	DfpMath.java	log	spy	Dfp[]	0	NIL-WHILE	spx[0].add(spx[1]).greaterThan($[0])
14517	447	8	DfpMath.java	logInternal	i	int	0	NIL-FOR	$ < 10000
3868	453	12	DfpMath.java	logInternal	y	Dfp	0	DEF	$.equals(py)
3868	453	12	DfpMath.java	logInternal	py	Dfp	0	DEF	y.equals($)
3869	508	8	DfpMath.java	pow	x	Dfp	0	RET	$.getField().getRadixDigits() != y.getField().getRadixDigits()
3869	508	8	DfpMath.java	pow	y	Dfp	0	RET	x.getField().getRadixDigits() != $.getField().getRadixDigits()
3870	522	8	DfpMath.java	pow	zero	Dfp	0	RET	y.equals($)
3870	522	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(zero)
3871	526	8	DfpMath.java	pow	one	Dfp	0	RET	y.equals($)
3871	526	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(one)
3872	527	12	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
3873	535	8	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
3873	535	8	DfpMath.java	pow	y	Dfp	0	RET	$.isNaN()
3874	542	8	DfpMath.java	pow	zero	Dfp	0	RET	x.equals($)
3874	542	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(zero)
3875	543	12	DfpMath.java	pow	zero	Dfp	1	RET	Dfp.copysign(one, x).greaterThan($)
3875	543	12	DfpMath.java	pow	one	Dfp	1	RET	Dfp.copysign($, x).greaterThan(zero)
3875	543	12	DfpMath.java	pow	x	Dfp	1	RET	Dfp.copysign(one, $).greaterThan(zero)
3876	545	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3876	545	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3877	552	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
3877	552	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
3877	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
3877	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
3877	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
3878	554	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3878	554	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3879	561	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3879	561	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3880	570	8	DfpMath.java	pow	zero	Dfp	0	DEF	x.lessThan($)
3880	570	8	DfpMath.java	pow	x	Dfp	0	DEF	$.lessThan(zero)
3881	576	8	DfpMath.java	pow	one	Dfp	0	RET	x.greaterThan($)
3881	576	8	DfpMath.java	pow	x	Dfp	0	RET	$.greaterThan(one)
3881	576	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3882	577	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3882	577	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3883	584	8	DfpMath.java	pow	one	Dfp	0	RET	x.lessThan($)
3883	584	8	DfpMath.java	pow	x	Dfp	0	RET	$.lessThan(one)
3883	584	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3884	585	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3884	585	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3885	592	8	DfpMath.java	pow	one	Dfp	0	RET	x.equals($)
3885	592	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(one)
3885	592	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3886	597	8	DfpMath.java	pow	x	Dfp	0	RET	$.classify() == Dfp.INFINITE
3887	599	12	DfpMath.java	pow	invert	boolean	1	RET	$
3888	601	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
3888	601	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
3888	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
3888	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
3888	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
3889	603	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3889	603	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3890	610	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3890	610	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3891	618	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3891	618	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3892	626	8	DfpMath.java	pow	invert	boolean	0	RET	$
3892	626	8	DfpMath.java	pow	y	Dfp	0	RET	$.rint().equals($)
3893	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.lessThan($.newInstance(100000000))
3893	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.greaterThan($.newInstance(-100000000))
3893	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.lessThan(x.newInstance(100000000))
3893	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.greaterThan(x.newInstance(-100000000))
3894	640	12	DfpMath.java	pow	v	Dfp	1	DEF	$.unequal(zero)
3894	640	12	DfpMath.java	pow	zero	Dfp	1	DEF	v.unequal($)
3895	656	8	DfpMath.java	pow	zero	Dfp	0	DEF	y.remainder(two).equals($)
3895	656	8	DfpMath.java	pow	two	Dfp	0	DEF	y.remainder($).equals(zero)
3895	656	8	DfpMath.java	pow	invert	boolean	0	DEF	$
3895	656	8	DfpMath.java	pow	y	Dfp	0	DEF	$.remainder(two).equals(zero)
3895	656	8	DfpMath.java	pow	y	Dfp	0	DEF	$.rint().equals($)
14518	679	8	DfpMath.java	sinInternal	i	int	0	NIL-FOR	$ < 90
3896	685	12	DfpMath.java	sinInternal	y	Dfp	0	DEF	$.equals(py)
3896	685	12	DfpMath.java	sinInternal	py	Dfp	0	DEF	y.equals($)
14519	712	8	DfpMath.java	cosInternal	i	int	0	NIL-FOR	$ < 90
3897	719	12	DfpMath.java	cosInternal	y	Dfp	0	DEF	$.equals(py)
3897	719	12	DfpMath.java	cosInternal	py	Dfp	0	DEF	y.equals($)
3898	743	8	DfpMath.java	sin	zero	Dfp	0	DEF	x.lessThan($)
3898	743	8	DfpMath.java	sin	x	Dfp	0	DEF	$.lessThan(zero)
3899	752	8	DfpMath.java	sin	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
3899	752	8	DfpMath.java	sin	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
3900	757	8	DfpMath.java	sin	pi	Dfp	1	DEF	x.lessThan($.divide(4))
3900	757	8	DfpMath.java	sin	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
3901	772	8	DfpMath.java	sin	neg	boolean	0	DEF	$
3902	794	8	DfpMath.java	cos	zero	Dfp	0	DEF	x.lessThan($)
3902	794	8	DfpMath.java	cos	x	Dfp	0	DEF	$.lessThan(zero)
3903	802	8	DfpMath.java	cos	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
3903	802	8	DfpMath.java	cos	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
3904	808	8	DfpMath.java	cos	pi	Dfp	1	DEF	x.lessThan($.divide(4))
3904	808	8	DfpMath.java	cos	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
3905	822	8	DfpMath.java	cos	neg	boolean	0	DEF	$
14520	848	8	DfpMath.java	atanInternal	i	int	0	NIL-FOR	$ < 90
3906	853	12	DfpMath.java	atanInternal	y	Dfp	0	DEF	$.equals(py)
3906	853	12	DfpMath.java	atanInternal	py	Dfp	0	DEF	y.equals($)
3907	888	8	DfpMath.java	atan	zero	Dfp	0	DEF	x.lessThan($)
3907	888	8	DfpMath.java	atan	x	Dfp	0	DEF	$.lessThan(zero)
3908	893	8	DfpMath.java	atan	one	Dfp	0	DEF	x.greaterThan($)
3908	893	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(one)
3909	898	8	DfpMath.java	atan	ty	Dfp	0	DEF	x.greaterThan($)
3909	898	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(ty)
3910	921	8	DfpMath.java	atan	sub	boolean	0	DEF	$
3911	925	8	DfpMath.java	atan	recp	boolean	0	DEF	$
3912	929	8	DfpMath.java	atan	neg	boolean	0	DEF	$
3913	953	8	DfpMath.java	acos	a	Dfp	0	DEF	$.lessThan($.getZero())
3914	961	8	DfpMath.java	acos	negative	boolean	0	DEF	$
1393	97	8	DiagonalMatrix.java	createMatrix	rowDimension	int	0	DimensionMismatchException	$ != columnDimension
1393	97	8	DiagonalMatrix.java	createMatrix	columnDimension	int	0	DimensionMismatchException	rowDimension != $
12718	125	8	DiagonalMatrix.java	add	i	int	0	NIL-FOR	$ < dim
12718	125	8	DiagonalMatrix.java	add	dim	int	0	NIL-FOR	i < $
12719	146	8	DiagonalMatrix.java	subtract	i	int	0	NIL-FOR	$ < dim
12719	146	8	DiagonalMatrix.java	subtract	dim	int	0	NIL-FOR	i < $
12720	167	8	DiagonalMatrix.java	multiply	i	int	0	NIL-FOR	$ < dim
12720	167	8	DiagonalMatrix.java	multiply	dim	int	0	NIL-FOR	i < $
1394	184	8	DiagonalMatrix.java	multiply	m	RealMatrix	1	RET	$ instanceof DiagonalMatrix
12721	191	12	DiagonalMatrix.java	multiply	r	int	0	NIL-FOR	$ < nRows
12721	191	12	DiagonalMatrix.java	multiply	nRows	int	0	NIL-FOR	r < $
12722	192	16	DiagonalMatrix.java	multiply	c	int	0	NIL-FOR	$ < nCols
12722	192	16	DiagonalMatrix.java	multiply	nCols	int	0	NIL-FOR	c < $
12723	206	8	DiagonalMatrix.java	getData	i	int	0	NIL-FOR	$ < dim
12723	206	8	DiagonalMatrix.java	getData	dim	int	0	NIL-FOR	i < $
1395	236	8	DiagonalMatrix.java	setEntry	row	int	1	DEF	$ == column
1395	236	8	DiagonalMatrix.java	setEntry	column	int	1	DEF	row == $
1396	252	8	DiagonalMatrix.java	addToEntry	row	int	1	DEF	$ == column
1396	252	8	DiagonalMatrix.java	addToEntry	column	int	1	DEF	row == $
1397	267	8	DiagonalMatrix.java	multiplyEntry	row	int	0	DEF	$ == column
1397	267	8	DiagonalMatrix.java	multiplyEntry	column	int	0	DEF	row == $
1398	304	8	DiagonalMatrix.java	ensureZero	value	double	0	NumberIsTooLargeException	Precision.equals(0.0, $, 1)
14562	110	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
14562	110	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
14563	111	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
14563	111	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
14563	111	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
14358	144	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < $.mainSetDimension
14358	144	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
3415	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
3415	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
3416	172	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
3417	174	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
14324	184	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
14324	184	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
3418	207	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	1	DEF	$.previousState != null
3418	207	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
14325	208	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
14325	208	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
14326	214	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
14326	214	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
14357	258	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < $.mainSetDimension
14357	258	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
3469	279	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
3489	247	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
3489	247	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
14378	258	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
14378	258	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
14379	265	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
14379	265	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
14380	294	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
14380	294	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
14381	299	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
14381	299	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
3490	320	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
3491	322	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
14382	324	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < 7
14383	333	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
14383	333	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
14384	351	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < D.$.length
14384	351	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < D.length
3492	373	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	1	DEF	$.previousState != null
3492	373	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
14385	374	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
14385	374	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
14386	388	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
14386	388	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
3493	409	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
14387	419	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
14387	419	6	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
14388	428	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
14388	428	6	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
14389	438	6	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
14389	438	6	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
14390	465	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < dimension
14390	465	4	DormandPrince853StepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	i < $
14391	488	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
14391	488	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
14246	56	8	DoublePoint.java	DoublePoint	THIS	DoublePoint	0	NIL-FOR	i < point.$.length
14246	56	8	DoublePoint.java	DoublePoint	i	int	0	NIL-FOR	$ < point.length
14246	56	8	DoublePoint.java	DoublePoint	point	int[]	0	NIL-FOR	i < $.length
3293	69	8	DoublePoint.java	equals	other	Object	0	RET	$ instanceof DoublePoint
1439	121	8	EigenDecomposition.java	EigenDecomposition	THIS	EigenDecomposition	1	DEF	$.isSymmetric
12806	164	8	EigenDecomposition.java	EigenDecomposition	i	int	0	NIL-FOR	$ < size
12806	164	8	EigenDecomposition.java	EigenDecomposition	size	int	0	NIL-FOR	i < $
1440	199	8	EigenDecomposition.java	getV	THIS	EigenDecomposition	0	DEF	$.cachedV == null
12807	202	12	EigenDecomposition.java	getV	k	int	0	NIL-FOR	$ < m
12807	202	12	EigenDecomposition.java	getV	m	int	0	NIL-FOR	k < $
1441	223	8	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	DEF	$.cachedD == null
12808	227	12	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	NIL-FOR	i < $.imagEigenvalues.$.length
12808	227	12	EigenDecomposition.java	getD	i	int	0	NIL-FOR	$ < imagEigenvalues.length
1442	228	16	EigenDecomposition.java	getD	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) > 0
1442	228	16	EigenDecomposition.java	getD	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) > 0
1443	230	23	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) < 0
1443	230	23	EigenDecomposition.java	getD	i	int	0	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0
1444	250	8	EigenDecomposition.java	getVT	THIS	EigenDecomposition	0	DEF	$.cachedVt == null
12809	253	12	EigenDecomposition.java	getVT	k	int	0	NIL-FOR	$ < m
12809	253	12	EigenDecomposition.java	getVT	m	int	0	NIL-FOR	k < $
12810	272	8	EigenDecomposition.java	hasComplexEigenvalues	THIS	EigenDecomposition	0	NIL-FOR	i < $.imagEigenvalues.$.length
12810	272	8	EigenDecomposition.java	hasComplexEigenvalues	i	int	0	NIL-FOR	$ < imagEigenvalues.length
1445	273	12	EigenDecomposition.java	hasComplexEigenvalues	THIS	EigenDecomposition	0	RET	Precision.equals($.imagEigenvalues[i], 0.0, EPSILON)
1445	273	12	EigenDecomposition.java	hasComplexEigenvalues	i	int	0	RET	Precision.equals(imagEigenvalues[$], 0.0, EPSILON)
1446	375	8	EigenDecomposition.java	getSquareRoot	THIS	EigenDecomposition	0	MathUnsupportedOperationException	$.isSymmetric
12811	380	8	EigenDecomposition.java	getSquareRoot	THIS	EigenDecomposition	0	NIL-FOR	i < $.realEigenvalues.$.length
12811	380	8	EigenDecomposition.java	getSquareRoot	i	int	0	NIL-FOR	$ < realEigenvalues.length
1447	382	12	EigenDecomposition.java	getSquareRoot	eigen	double	0	MathUnsupportedOperationException	$ <= 0
1448	406	8	EigenDecomposition.java	getSolver	THIS	EigenDecomposition	0	MathUnsupportedOperationException	$.hasComplexEigenvalues()
12812	578	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n - 1
12812	578	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $ - 1
12813	587	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
12813	587	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1449	588	12	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1449	588	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1449	588	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1450	591	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) > maxAbsoluteValue
1450	591	12	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) > maxAbsoluteValue
1450	591	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) > $
1451	596	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$ != 0
12814	597	12	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
12814	597	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1452	598	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue
1452	598	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) <= Precision.EPSILON * maxAbsoluteValue
1452	598	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * $
1453	601	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) <= Precision.EPSILON * maxAbsoluteValue
1453	601	16	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) <= Precision.EPSILON * maxAbsoluteValue
1453	601	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) <= Precision.EPSILON * $
12815	607	8	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
12815	607	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
12816	610	12	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-DOWHILE	$ != j
12816	610	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-DOWHILE	m != $
12817	611	16	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-FOR	$ < n - 1
12817	611	16	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	m < $ - 1
1454	614	20	EigenDecomposition.java	findEigenVectors	delta	double	0	DEF	FastMath.abs(e[m]) + $ == $
1454	614	20	EigenDecomposition.java	findEigenVectors	m	int	0	DEF	FastMath.abs(e[$]) + delta == delta
1454	614	20	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[m]) + delta == delta
1455	618	16	EigenDecomposition.java	findEigenVectors	m	int	0	MaxCountExceededException	$ != j
1455	618	16	EigenDecomposition.java	findEigenVectors	j	int	0	MaxCountExceededException	m != $
1456	619	20	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	MaxCountExceededException	its == $.maxIter
1456	619	20	EigenDecomposition.java	findEigenVectors	its	int	0	MaxCountExceededException	$ == maxIter
1457	626	20	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	$ < 0.0
12818	635	20	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ >= j
12818	635	20	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	i >= $
1458	638	24	EigenDecomposition.java	findEigenVectors	p	double	1	DEF	FastMath.abs($) >= FastMath.abs(q)
1458	638	24	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	FastMath.abs(p) >= FastMath.abs($)
1459	651	24	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	e[$ + 1] == 0.0
1459	651	24	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	$[i + 1] == 0.0
12819	661	24	EigenDecomposition.java	findEigenVectors	ia	int	0	NIL-FOR	$ < n
12819	661	24	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	ia < $
1460	667	20	EigenDecomposition.java	findEigenVectors	t	double	0	DEF	$ == 0.0
1460	667	20	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	$ >= j
1460	667	20	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	i >= $
12820	678	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
12820	678	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
12821	681	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
12821	681	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
1461	682	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	$.realEigenvalues[j] > p
1461	682	16	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	realEigenvalues[$] > p
1461	682	16	EigenDecomposition.java	findEigenVectors	p	double	0	DEF	realEigenvalues[j] > $
1462	687	12	EigenDecomposition.java	findEigenVectors	k	int	0	DEF	$ != i
1462	687	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	k != $
12822	690	16	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
12822	690	16	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
12823	700	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
12823	700	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1463	701	12	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1463	701	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1463	701	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1464	706	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$ != 0.0
12824	707	12	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
12824	707	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1465	708	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue
1465	708	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) < Precision.EPSILON * maxAbsoluteValue
1465	708	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * $
12825	715	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
12825	715	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
12826	716	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
12826	716	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
12827	736	8	EigenDecomposition.java	transformToSchur	THIS	EigenDecomposition	0	NIL-FOR	i < $.realEigenvalues.$.length
12827	736	8	EigenDecomposition.java	transformToSchur	i	int	0	NIL-FOR	$ < realEigenvalues.length
1466	737	12	EigenDecomposition.java	transformToSchur	THIS	EigenDecomposition	1	DEF	i == ($.realEigenvalues.$.length - 1)
1466	737	12	EigenDecomposition.java	transformToSchur	i	int	1	DEF	$ == (realEigenvalues.length - 1)
1466	737	12	EigenDecomposition.java	transformToSchur	i	int	1	DEF	Precision.equals(matT[$ + 1][$], 0.0, EPSILON)
1466	737	12	EigenDecomposition.java	transformToSchur	matT	double[][]	1	DEF	Precision.equals($[i + 1][i], 0.0, EPSILON)
12828	783	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
12828	783	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
12829	784	11	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
12829	784	11	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
1467	790	8	EigenDecomposition.java	findEigenVectorsFromSchur	norm	double	0	MathArithmeticException	Precision.equals($, 0.0, EPSILON)
12830	800	8	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	$ >= 0
1468	804	12	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	1	DEF	Precision.equals($, 0.0)
12831	808	16	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ >= 0
12832	811	20	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
12832	811	20	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1469	814	20	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) < 0.0
1469	814	20	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
1470	819	24	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.equals($.imagEigenvalues[i], 0.0)
1470	819	24	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.equals(imagEigenvalues[$], 0.0)
1471	820	28	EigenDecomposition.java	findEigenVectorsFromSchur	w	double	1	DEF	$ != 0.0
1472	833	28	EigenDecomposition.java	findEigenVectorsFromSchur	x	double	1	DEF	FastMath.abs($) > FastMath.abs(z)
1472	833	28	EigenDecomposition.java	findEigenVectorsFromSchur	z	double	1	DEF	FastMath.abs(x) > FastMath.abs($)
1473	842	24	EigenDecomposition.java	findEigenVectorsFromSchur	t	double	0	DEF	(Precision.EPSILON * $) * $ > 1
12833	843	28	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
12833	843	28	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1474	849	19	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	0	DEF	$ < 0.0
1475	854	16	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	1	DEF	FastMath.abs(matrixT[$][$ - 1]) > FastMath.abs(matrixT[$ - 1][$])
1475	854	16	EigenDecomposition.java	findEigenVectorsFromSchur	matrixT	double[][]	1	DEF	FastMath.abs($[idx][idx - 1]) > FastMath.abs($[idx - 1][idx])
12834	867	16	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ >= 0
12835	870	20	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
12835	870	20	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1476	876	20	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) < 0.0
1476	876	20	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
1477	882	24	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.equals($.imagEigenvalues[i], 0.0)
1477	882	24	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.equals(imagEigenvalues[$], 0.0)
1478	893	28	EigenDecomposition.java	findEigenVectorsFromSchur	vr	double	0	DEF	Precision.equals($, 0.0)
1478	893	28	EigenDecomposition.java	findEigenVectorsFromSchur	vi	double	0	DEF	Precision.equals($, 0.0)
1479	903	28	EigenDecomposition.java	findEigenVectorsFromSchur	x	double	1	DEF	FastMath.abs($) > (FastMath.abs(z) + FastMath.abs(q))
1479	903	28	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	1	DEF	FastMath.abs(x) > (FastMath.abs(z) + FastMath.abs($))
1479	903	28	EigenDecomposition.java	findEigenVectorsFromSchur	z	double	1	DEF	FastMath.abs(x) > (FastMath.abs($) + FastMath.abs(q))
1480	919	24	EigenDecomposition.java	findEigenVectorsFromSchur	t	double	0	DEF	(Precision.EPSILON * $) * $ > 1
12836	920	28	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
12836	920	28	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
12837	931	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
12837	931	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
1481	932	12	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	DEF	$ < 0 | $ > n - 1
1481	932	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	DEF	i < 0 | i > $ - 1
12838	933	16	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
12838	933	16	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
12839	940	8	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ >= 0
12840	941	12	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ <= n - 1
12840	941	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i <= $ - 1
12841	943	16	EigenDecomposition.java	findEigenVectorsFromSchur	k	int	0	NIL-FOR	$ <= FastMath.min(j, n - 1)
12841	943	16	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	k <= FastMath.min($, n - 1)
12841	943	16	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	k <= FastMath.min(j, $ - 1)
12842	952	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
12842	952	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
12843	953	12	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
12843	953	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
14210	93	8	ElitisticListPopulation.java	nextGeneration	i	int	0	NIL-FOR	$ < oldChromosomes.size()
14210	93	8	ElitisticListPopulation.java	nextGeneration	oldChromosomes	List<Chromosome>	0	NIL-FOR	i < $.size()
3204	106	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ > 1
3204	106	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ < 0
14369	223	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
14370	229	6	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
3479	231	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
3479	231	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
3480	236	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
3481	238	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance == null
14371	239	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
14371	239	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
14371	239	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
14372	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
14372	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
14372	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
3482	253	8	EmbeddedRungeKuttaIntegrator.java	integrate	forward	boolean	1	DEF	$
3483	254	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize >= t
3483	254	12	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize >= $
3484	258	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize <= t
3484	258	12	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize <= $
14373	264	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
14373	264	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
14374	266	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
14374	266	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
14374	266	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
14375	268	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
14375	268	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
14376	279	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
14376	279	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
14376	279	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
14377	281	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
14377	281	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
3485	289	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
3486	306	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.isLastStep
3487	311	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
3488	326	10	EmbeddedRungeKuttaIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
3117	262	12	EmpiricalDistribution.java	load	THIS	EmpiricalDistribution	0	ZeroException	$.sampleStats.getN() == 0
3118	434	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	DEF	$.binStats.isEmpty()
14168	437	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
14168	437	8	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
14169	449	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount-1
14169	449	8	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
3119	477	8	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	MathIllegalStateException	$.loaded
14170	485	8	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
14170	485	8	EmpiricalDistribution.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
3120	486	11	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	RET	x <= $.upperBounds[i]
3120	486	11	EmpiricalDistribution.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
3120	486	11	EmpiricalDistribution.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
3121	488	15	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
3122	489	19	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
14171	547	8	EmpiricalDistribution.java	getUpperBounds	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount - 1
14171	547	8	EmpiricalDistribution.java	getUpperBounds	i	int	0	NIL-FOR	$ < binCount - 1
3123	616	8	EmpiricalDistribution.java	density	THIS	EmpiricalDistribution	0	RET	x > $.max
3123	616	8	EmpiricalDistribution.java	density	THIS	EmpiricalDistribution	0	RET	x < $.min
3123	616	8	EmpiricalDistribution.java	density	x	double	0	RET	$ > max
3123	616	8	EmpiricalDistribution.java	density	x	double	0	RET	$ < min
3124	638	8	EmpiricalDistribution.java	cumulativeProbability	THIS	EmpiricalDistribution	1	RET	x < $.min
3124	638	8	EmpiricalDistribution.java	cumulativeProbability	x	double	1	RET	$ < min
3125	640	15	EmpiricalDistribution.java	cumulativeProbability	THIS	EmpiricalDistribution	0	RET	x >= $.max
3125	640	15	EmpiricalDistribution.java	cumulativeProbability	x	double	0	RET	$ >= max
3126	676	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
3126	676	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
3127	680	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
3128	684	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
14172	689	8	EmpiricalDistribution.java	inverseCumulativeProbability	THIS	EmpiricalDistribution	0	NIL-WHILE	$.cumBinP(i) < p
14172	689	8	EmpiricalDistribution.java	inverseCumulativeProbability	i	int	0	NIL-WHILE	cumBinP($) < p
14172	689	8	EmpiricalDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumBinP(i) < $
3129	701	8	EmpiricalDistribution.java	inverseCumulativeProbability	pCrit	double	0	RET	$ <= 0
12479	110	8	EnumeratedDistribution.java	EnumeratedDistribution	i	int	0	NIL-FOR	$ < pmf.size()
12479	110	8	EnumeratedDistribution.java	EnumeratedDistribution	pmf	List<Pair<T,Double>>	0	NIL-FOR	i < $.size()
1103	114	12	EnumeratedDistribution.java	EnumeratedDistribution	p	double	0	NotPositiveException	$ < 0
1104	117	12	EnumeratedDistribution.java	EnumeratedDistribution	p	double	0	NotFiniteNumberException	Double.isInfinite($)
1105	120	12	EnumeratedDistribution.java	EnumeratedDistribution	p	double	0	NotANumberException	Double.isNaN($)
12480	153	8	EnumeratedDistribution.java	probability	THIS	EnumeratedDistribution	0	NIL-FOR	i < $.probabilities.$.length
12480	153	8	EnumeratedDistribution.java	probability	i	int	0	NIL-FOR	$ < probabilities.length
1106	154	12	EnumeratedDistribution.java	probability	THIS	EnumeratedDistribution	0	DEF	$.singletons.get(i) == null
1106	154	12	EnumeratedDistribution.java	probability	THIS	EnumeratedDistribution	0	DEF	x.equals($.singletons.get(i))
1106	154	12	EnumeratedDistribution.java	probability	i	int	0	DEF	singletons.get($) == null
1106	154	12	EnumeratedDistribution.java	probability	i	int	0	DEF	x.equals(singletons.get($))
1106	154	12	EnumeratedDistribution.java	probability	x	T	0	DEF	$.equals(singletons.get(i))
1106	154	12	EnumeratedDistribution.java	probability	x	T	0	DEF	$ != null
1106	154	12	EnumeratedDistribution.java	probability	x	T	0	DEF	$ == null
12481	176	8	EnumeratedDistribution.java	getPmf	THIS	EnumeratedDistribution	0	NIL-FOR	i < $.probabilities.$.length
12481	176	8	EnumeratedDistribution.java	getPmf	i	int	0	NIL-FOR	$ < probabilities.length
12482	192	8	EnumeratedDistribution.java	sample	THIS	EnumeratedDistribution	0	NIL-FOR	i < $.probabilities.$.length
12482	192	8	EnumeratedDistribution.java	sample	i	int	0	NIL-FOR	$ < probabilities.length
1107	194	12	EnumeratedDistribution.java	sample	randomValue	double	0	RET	$ < sum
1107	194	12	EnumeratedDistribution.java	sample	sum	double	0	RET	randomValue < $
1108	214	8	EnumeratedDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
12483	221	8	EnumeratedDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
12483	221	8	EnumeratedDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1109	243	8	EnumeratedDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
1110	247	8	EnumeratedDistribution.java	sample	array	T[]	0	NullArgumentException	$ == null
1111	252	8	EnumeratedDistribution.java	sample	THIS	EnumeratedDistribution	1	DEF	array.$.length < sampleSize
1111	252	8	EnumeratedDistribution.java	sample	sampleSize	int	1	DEF	array.length < $
1111	252	8	EnumeratedDistribution.java	sample	array	T[]	1	DEF	$.length < sampleSize
12484	260	8	EnumeratedDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
12484	260	8	EnumeratedDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1116	90	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	THIS	EnumeratedIntegerDistribution	0	DimensionMismatchException	singletons.$.length != probabilities.$.length
1116	90	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	singletons	int[]	0	DimensionMismatchException	$.length != probabilities.length
1116	90	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	probabilities	double[]	0	DimensionMismatchException	singletons.length != $.length
12485	96	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	THIS	EnumeratedIntegerDistribution	0	NIL-FOR	i < singletons.$.length
12485	96	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	i	int	0	NIL-FOR	$ < singletons.length
12485	96	8	EnumeratedIntegerDistribution.java	EnumeratedIntegerDistribution	singletons	int[]	0	NIL-FOR	i < $.length
1117	117	12	EnumeratedIntegerDistribution.java	cumulativeProbability	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getKey() <= x
1117	117	12	EnumeratedIntegerDistribution.java	cumulativeProbability	x	int	0	DEF	sample.getKey() <= $
1118	167	12	EnumeratedIntegerDistribution.java	getSupportLowerBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getKey() < min
1118	167	12	EnumeratedIntegerDistribution.java	getSupportLowerBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getValue() > 0
1118	167	12	EnumeratedIntegerDistribution.java	getSupportLowerBound	min	int	0	DEF	sample.getKey() < $
1119	185	12	EnumeratedIntegerDistribution.java	getSupportUpperBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getValue() > 0
1119	185	12	EnumeratedIntegerDistribution.java	getSupportUpperBound	THIS	EnumeratedIntegerDistribution	0	DEF	$.sample.getKey() > max
1119	185	12	EnumeratedIntegerDistribution.java	getSupportUpperBound	max	int	0	DEF	sample.getKey() > $
1234	90	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	THIS	EnumeratedRealDistribution	0	DimensionMismatchException	singletons.$.length != probabilities.$.length
1234	90	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	singletons	double[]	0	DimensionMismatchException	$.length != probabilities.length
1234	90	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	probabilities	double[]	0	DimensionMismatchException	singletons.length != $.length
12507	96	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	THIS	EnumeratedRealDistribution	0	NIL-FOR	i < singletons.$.length
12507	96	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	i	int	0	NIL-FOR	$ < singletons.length
12507	96	8	EnumeratedRealDistribution.java	EnumeratedRealDistribution	singletons	double[]	0	NIL-FOR	i < $.length
1235	131	12	EnumeratedRealDistribution.java	cumulativeProbability	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getKey() <= x
1235	131	12	EnumeratedRealDistribution.java	cumulativeProbability	x	double	0	DEF	sample.getKey() <= $
1236	181	12	EnumeratedRealDistribution.java	getSupportLowerBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getValue() > 0
1236	181	12	EnumeratedRealDistribution.java	getSupportLowerBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getKey() < min
1236	181	12	EnumeratedRealDistribution.java	getSupportLowerBound	min	double	0	DEF	sample.getKey() < $
1237	199	12	EnumeratedRealDistribution.java	getSupportUpperBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getValue() > 0
1237	199	12	EnumeratedRealDistribution.java	getSupportUpperBound	THIS	EnumeratedRealDistribution	0	DEF	$.sample.getKey() > max
1237	199	12	EnumeratedRealDistribution.java	getSupportUpperBound	max	double	0	DEF	sample.getKey() > $
3535	77	8	EquationsMapper.java	extractEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
3535	77	8	EquationsMapper.java	extractEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
3536	92	8	EquationsMapper.java	insertEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
3536	92	8	EquationsMapper.java	insertEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
3300	67	8	Erf.java	erf	x	double	0	RET	FastMath.abs($) > 40
3301	98	8	Erf.java	erfc	x	double	0	RET	FastMath.abs($) > 40
3302	116	8	Erf.java	erf	x1	double	0	RET	$ > x2
3302	116	8	Erf.java	erf	x2	double	0	RET	x1 > $
3303	152	8	Erf.java	erfInv	w	double	1	DEF	$ < 6.25
3304	177	15	Erf.java	erfInv	w	double	1	DEF	$ < 16.0
3305	198	15	Erf.java	erfInv	w	double	1	DEF	Double.isInfinite($)
13720	56	12	EuclideanDoublePoint.java	centroidOf	THIS	EuclideanDoublePoint	0	NIL-FOR	i < centroid.$.length
13720	56	12	EuclideanDoublePoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
13720	56	12	EuclideanDoublePoint.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
13721	60	8	EuclideanDoublePoint.java	centroidOf	THIS	EuclideanDoublePoint	0	NIL-FOR	i < centroid.$.length
13721	60	8	EuclideanDoublePoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
13721	60	8	EuclideanDoublePoint.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
2436	74	8	EuclideanDoublePoint.java	equals	other	Object	0	RET	$ instanceof EuclideanDoublePoint
13732	68	12	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
13732	68	12	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
13732	68	12	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
13733	72	8	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
13733	72	8	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
13733	72	8	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
2470	81	8	EuclideanIntegerPoint.java	equals	other	Object	0	RET	$ instanceof EuclideanIntegerPoint
3521	86	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	1	DEF	$.previousState != null
3521	86	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
14415	87	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
14415	87	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
14416	92	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
14416	92	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
3537	110	8	EventFilter.java	g	THIS	EventFilter	1	RET	$.forward
3538	112	12	EventFilter.java	g	THIS	EventFilter	1	RET	$.extremeT < t
3538	112	12	EventFilter.java	g	t	double	1	RET	extremeT < $
3539	118	16	EventFilter.java	g	previous	Transformer	0	DEF	next != $
3539	118	16	EventFilter.java	g	next	Transformer	0	DEF	$ != previous
14438	140	16	EventFilter.java	g	i	int	0	NIL-FOR	$ > 0
3540	141	20	EventFilter.java	g	THIS	EventFilter	0	RET	$.updates[i] <= t
3540	141	20	EventFilter.java	g	i	int	0	RET	updates[$] <= t
3540	141	20	EventFilter.java	g	t	double	0	RET	updates[i] <= $
3541	151	12	EventFilter.java	g	THIS	EventFilter	1	RET	t < $.extremeT
3541	151	12	EventFilter.java	g	t	double	1	RET	$ < extremeT
3542	157	16	EventFilter.java	g	previous	Transformer	0	DEF	next != $
3542	157	16	EventFilter.java	g	next	Transformer	0	DEF	$ != previous
14439	179	16	EventFilter.java	g	THIS	EventFilter	0	NIL-FOR	i < $.updates.$.length - 1
14439	179	16	EventFilter.java	g	i	int	0	NIL-FOR	$ < updates.length - 1
3543	180	20	EventFilter.java	g	THIS	EventFilter	0	RET	t <= $.updates[i]
3543	180	20	EventFilter.java	g	i	int	0	RET	t <= updates[$]
3543	180	20	EventFilter.java	g	t	double	0	RET	$ <= updates[i]
3544	173	8	EventState.java	reinitializeBegin	THIS	EventState	0	DEF	$.g0 == 0
3545	232	12	EventState.java	evaluateStep	THIS	EventState	0	RET	FastMath.abs(dt) < $.convergence
3545	232	12	EventState.java	evaluateStep	dt	double	0	RET	FastMath.abs($) < convergence
14440	252	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
14440	252	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
3546	260	16	EventState.java	evaluateStep	THIS	EventState	1	RET	$.g0Positive ^ (gb >= 0)
3546	260	16	EventState.java	evaluateStep	gb	double	1	RET	g0Positive ^ ($ >= 0)
3547	268	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	$.solver instanceof BracketedUnivariateSolver<?>
3548	289	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Double.isNaN($.previousEventTime)
3548	289	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - ta) <= $.convergence
3548	289	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - $.previousEventTime) <= $.convergence
3548	289	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - ta) <= convergence
3548	289	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - previousEventTime) <= convergence
3548	289	20	EventState.java	evaluateStep	ta	double	1	DEF	FastMath.abs(root - $) <= convergence
3549	297	27	EventState.java	evaluateStep	THIS	EventState	1	RET	Double.isNaN($.previousEventTime)
3549	297	27	EventState.java	evaluateStep	THIS	EventState	1	RET	FastMath.abs($.previousEventTime - root) > $.convergence
3549	297	27	EventState.java	evaluateStep	root	double	1	RET	FastMath.abs(previousEventTime - $) > convergence
3550	348	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
3550	348	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	FastMath.abs($.pendingEventTime - t) <= $.convergence
3550	348	8	EventState.java	stepAccepted	t	double	1	DEF	FastMath.abs(pendingEventTime - $) <= convergence
3551	376	8	EventState.java	reset	THIS	EventState	0	RET	FastMath.abs($.pendingEventTime - t) <= $.convergence
3551	376	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
3551	376	8	EventState.java	reset	t	double	0	RET	FastMath.abs(pendingEventTime - $) <= convergence
3552	380	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.$.Action.RESET_STATE
14269	174	8	ExceptionContext.java	buildMessage	i	int	0	NIL-FOR	$ < len
14269	174	8	ExceptionContext.java	buildMessage	len	int	0	NIL-FOR	i < $
3358	180	12	ExceptionContext.java	buildMessage	count	int	0	DEF	++$ < len
3358	180	12	ExceptionContext.java	buildMessage	len	int	0	DEF	++count < $
14270	228	8	ExceptionContext.java	serializeMessages	i	int	0	NIL-FOR	$ < len
14270	228	8	ExceptionContext.java	serializeMessages	len	int	0	NIL-FOR	i < $
14271	236	12	ExceptionContext.java	serializeMessages	j	int	0	NIL-FOR	$ < aLen
14271	236	12	ExceptionContext.java	serializeMessages	aLen	int	0	NIL-FOR	j < $
3359	237	16	ExceptionContext.java	serializeMessages	j	int	1	DEF	args[$] instanceof Serializable
3359	237	16	ExceptionContext.java	serializeMessages	args	Object[]	1	DEF	$[j] instanceof Serializable
14272	263	8	ExceptionContext.java	deSerializeMessages	i	int	0	NIL-FOR	$ < len
14272	263	8	ExceptionContext.java	deSerializeMessages	len	int	0	NIL-FOR	i < $
14273	270	12	ExceptionContext.java	deSerializeMessages	j	int	0	NIL-FOR	$ < aLen
14273	270	12	ExceptionContext.java	deSerializeMessages	aLen	int	0	NIL-FOR	j < $
3360	293	12	ExceptionContext.java	serializeContext	value	Object	1	DEF	$ instanceof Serializable
14274	316	8	ExceptionContext.java	deSerializeContext	i	int	0	NIL-FOR	$ < len
14274	316	8	ExceptionContext.java	deSerializeContext	len	int	0	NIL-FOR	i < $
3584	97	8	ExpandableStatefulODE.java	getTotalDimension	THIS	ExpandableStatefulODE	1	RET	$.components.isEmpty()
3585	140	8	ExpandableStatefulODE.java	addSecondaryEquations	THIS	ExpandableStatefulODE	1	DEF	$.components.isEmpty()
14446	169	8	ExpandableStatefulODE.java	getSecondaryMappers	THIS	ExpandableStatefulODE	0	NIL-FOR	i < mappers.$.length
14446	169	8	ExpandableStatefulODE.java	getSecondaryMappers	i	int	0	NIL-FOR	$ < mappers.length
14446	169	8	ExpandableStatefulODE.java	getSecondaryMappers	mappers	EquationsMapper[]	0	NIL-FOR	i < $.length
3586	197	8	ExpandableStatefulODE.java	setPrimaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	primaryState.$.length != $.primaryState.length
3586	197	8	ExpandableStatefulODE.java	setPrimaryState	primaryState	double[]	0	DimensionMismatchException	$.length != this.primaryState.length
3587	234	8	ExpandableStatefulODE.java	setSecondaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	secondaryState.$.length != localArray.$.length
3587	234	8	ExpandableStatefulODE.java	setSecondaryState	localArray	double[]	0	DimensionMismatchException	secondaryState.length != $.length
3587	234	8	ExpandableStatefulODE.java	setSecondaryState	secondaryState	double[]	0	DimensionMismatchException	$.length != localArray.length
3588	270	8	ExpandableStatefulODE.java	setCompleteState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	completeState.$.length != $.getTotalDimension()
3588	270	8	ExpandableStatefulODE.java	setCompleteState	completeState	double[]	0	DimensionMismatchException	$.length != getTotalDimension()
1148	130	8	ExponentialDistribution.java	ExponentialDistribution	mean	double	0	NotStrictlyPositiveException	$ <= 0
1149	148	8	ExponentialDistribution.java	density	x	double	0	RET	$ < 0
1150	166	8	ExponentialDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
1151	184	8	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
1151	184	8	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
1152	186	15	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
12487	213	8	ExponentialDistribution.java	sample	u	double	0	NIL-WHILE	$ < 0.5
1153	222	8	ExponentialDistribution.java	sample	u	double	0	RET	$ <= EXPONENTIAL_SA_QI[0]
12488	232	8	ExponentialDistribution.java	sample	u	double	0	NIL-DOWHILE	$ > EXPONENTIAL_SA_QI[i]
12488	232	8	ExponentialDistribution.java	sample	i	int	0	NIL-DOWHILE	u > EXPONENTIAL_SA_QI[$]
1154	236	12	ExponentialDistribution.java	sample	u2	double	0	DEF	$ < umin
1154	236	12	ExponentialDistribution.java	sample	umin	double	0	DEF	u2 < $
1206	110	8	FDistribution.java	FDistribution	numeratorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1207	114	8	FDistribution.java	FDistribution	denominatorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1208	154	8	FDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
1209	203	8	FDistribution.java	getNumericalMean	denominatorDF	double	0	RET	$ > 2
1210	224	8	FDistribution.java	getNumericalVariance	THIS	FDistribution	0	DEF	$.numericalVarianceIsCalculated
1211	239	8	FDistribution.java	calculateNumericalVariance	denominatorDF	double	0	RET	$ > 4
3361	93	8	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	type == $.TransformType.FORWARD
3361	93	8	FastCosineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
3362	94	12	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
3363	102	8	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	1	DEF	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
3364	142	8	FastCosineTransformer.java	fct	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
3365	147	8	FastCosineTransformer.java	fct	n	int	0	RET	$ == 1
14275	159	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
14275	159	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
14276	174	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
14276	174	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
14289	135	8	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	NIL-FOR	$ < n
14289	135	8	FastFourierTransformer.java	bitReversalShuffle2	n	int	0	NIL-FOR	i < $
3377	136	12	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	DEF	$ < j
3377	136	12	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	DEF	i < $
14290	148	12	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ > 0
14290	148	12	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ <= j
14290	148	12	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	NIL-WHILE	k <= $
3378	173	16	FastFourierTransformer.java	normalizeTransformedData	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
3378	173	16	FastFourierTransformer.java	normalizeTransformedData	type	TransformType	0	DEF	$ == TransformType.INVERSE
14291	175	20	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
14291	175	20	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
14292	183	16	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
14292	183	16	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
3379	218	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataRI.$.length != 2
3379	218	8	FastFourierTransformer.java	transformInPlace	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
3380	223	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataR.$.length != dataI.$.length
3380	223	8	FastFourierTransformer.java	transformInPlace	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
3380	223	8	FastFourierTransformer.java	transformInPlace	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
3381	228	8	FastFourierTransformer.java	transformInPlace	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
3382	234	8	FastFourierTransformer.java	transformInPlace	n	int	1	RET	$ == 1
3383	236	15	FastFourierTransformer.java	transformInPlace	n	int	0	RET	$ == 2
3384	256	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	1	DEF	type == $.TransformType.INVERSE
3384	256	8	FastFourierTransformer.java	transformInPlace	type	TransformType	1	DEF	$ == TransformType.INVERSE
14293	257	12	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
14293	257	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
14294	286	12	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
14294	286	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
14295	318	8	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-WHILE	lastN0 < $
14295	318	8	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-WHILE	$ < n
3385	323	12	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
3385	323	12	FastFourierTransformer.java	transformInPlace	type	TransformType	0	DEF	$ == TransformType.INVERSE
14296	328	12	FastFourierTransformer.java	transformInPlace	destEvenStartIndex	int	0	NIL-FOR	$ < n
14296	328	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	destEvenStartIndex < $
14297	334	16	FastFourierTransformer.java	transformInPlace	r	int	0	NIL-FOR	$ < lastN0
14297	334	16	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-FOR	r < $
14298	442	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
14298	442	8	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
14298	442	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
3386	464	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
3386	464	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
3386	464	8	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
14299	466	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
14299	466	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
14299	466	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
14300	474	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
14300	474	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
14300	474	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
3387	481	12	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
3387	481	12	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
3387	481	12	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
14301	487	16	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
14301	487	16	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
14301	487	16	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
14301	487	16	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
3369	52	8	FastHadamardTransformer.java	transform	THIS	FastHadamardTransformer	0	RET	type == $.TransformType.FORWARD
3369	52	8	FastHadamardTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
3370	234	8	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
14281	248	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
14281	248	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
14282	256	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
14282	256	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
14283	261	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
14283	261	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
3371	285	8	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
14284	299	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
14284	299	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
14285	307	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
14285	307	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
14286	312	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
14286	312	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
262	371	8	FastMath.java	doubleHighPart	d	double	0	RET	$ < Precision.SAFE_MIN
262	371	8	FastMath.java	doubleHighPart	d	double	0	RET	$ > -Precision.SAFE_MIN
263	393	6	FastMath.java	cosh	x	double	0	RET	$ != $
264	402	6	FastMath.java	cosh	x	double	1	RET	$ > 20
265	403	10	FastMath.java	cosh	x	double	1	RET	$ >= LOG_MAX_VALUE
266	410	13	FastMath.java	cosh	x	double	0	RET	$ < -20
267	411	10	FastMath.java	cosh	x	double	1	RET	$ <= -LOG_MAX_VALUE
268	421	6	FastMath.java	cosh	x	double	0	DEF	$ < 0.0
269	463	6	FastMath.java	sinh	x	double	0	RET	$ != $
270	472	6	FastMath.java	sinh	x	double	1	RET	$ > 20
271	473	10	FastMath.java	sinh	x	double	1	RET	$ >= LOG_MAX_VALUE
272	480	13	FastMath.java	sinh	x	double	0	RET	$ < -20
273	481	10	FastMath.java	sinh	x	double	1	RET	$ <= -LOG_MAX_VALUE
274	490	6	FastMath.java	sinh	x	double	0	RET	$ == 0
275	494	6	FastMath.java	sinh	x	double	0	DEF	$ < 0.0
276	501	6	FastMath.java	sinh	x	double	1	DEF	$ > 0.25
277	575	6	FastMath.java	sinh	negate	boolean	0	DEF	$
278	589	6	FastMath.java	tanh	x	double	0	RET	$ != $
279	599	6	FastMath.java	tanh	x	double	0	RET	$ > 20.0
280	603	6	FastMath.java	tanh	x	double	0	RET	$ < -20
281	607	6	FastMath.java	tanh	x	double	0	RET	$ == 0
282	611	6	FastMath.java	tanh	x	double	0	DEF	$ < 0.0
283	617	6	FastMath.java	tanh	x	double	1	DEF	$ >= 0.5
284	699	6	FastMath.java	tanh	negate	boolean	0	DEF	$
285	720	8	FastMath.java	asinh	a	double	0	DEF	$ < 0
286	726	8	FastMath.java	asinh	a	double	1	DEF	$ > 0.167
287	730	12	FastMath.java	asinh	a	double	1	DEF	$ > 0.097
288	732	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.036
289	734	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.0036
290	750	8	FastMath.java	atanh	a	double	0	DEF	$ < 0
291	756	8	FastMath.java	atanh	a	double	1	DEF	$ > 0.15
292	760	12	FastMath.java	atanh	a	double	1	DEF	$ > 0.087
293	762	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.031
294	764	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.003
295	856	8	FastMath.java	exp	x	double	1	RET	$ < 0.0
296	859	12	FastMath.java	exp	intVal	int	0	RET	$ > 746
297	860	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
298	867	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
299	870	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
300	877	12	FastMath.java	exp	intVal	int	0	RET	$ == 709
301	880	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
302	896	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
303	897	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
304	949	8	FastMath.java	exp	extra	double	1	DEF	$ != 0.0
305	955	8	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
306	978	8	FastMath.java	expm1	x	double	0	RET	$ != $
306	978	8	FastMath.java	expm1	x	double	0	RET	$ == 0.0
307	982	8	FastMath.java	expm1	x	double	0	RET	$ <= -1.0
307	982	8	FastMath.java	expm1	x	double	0	RET	$ >= 1.0
308	987	12	FastMath.java	expm1	x	double	1	RET	$ > 0.0
309	1002	8	FastMath.java	expm1	x	double	0	DEF	$ < 0.0
310	1078	8	FastMath.java	expm1	negative	boolean	0	DEF	$
311	1111	8	FastMath.java	expm1	hiPrecOut	double	0	DEF	$ != null
312	1136	8	FastMath.java	log	x	double	0	RET	$==0
313	1142	8	FastMath.java	log	bits	long	0	RET	($ & 0x8000000000000000L) != 0
313	1142	8	FastMath.java	log	x	double	0	RET	$ != 0.0
313	1142	8	FastMath.java	log	x	double	0	RET	$ != $
314	1143	12	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
315	1151	8	FastMath.java	log	x	double	0	RET	$ == Double.POSITIVE_INFINITY
316	1152	12	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
317	1162	8	FastMath.java	log	bits	long	0	RET	($ & 0x7ff0000000000000L) == 0
318	1164	12	FastMath.java	log	x	double	0	RET	$ == 0
319	1166	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
12405	1175	12	FastMath.java	log	bits	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
320	1182	8	FastMath.java	log	exp	int	0	RET	$ == -1
320	1182	8	FastMath.java	log	exp	int	0	RET	$ == 0
320	1182	8	FastMath.java	log	x	double	0	RET	$ > 0.99
320	1182	8	FastMath.java	log	x	double	0	RET	$ < 1.01
320	1182	8	FastMath.java	log	hiPrec	double[]	0	RET	$ == null
12406	1199	12	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
321	1246	8	FastMath.java	log	hiPrec	double[]	1	DEF	$ != null
12407	1265	12	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
322	1349	8	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
323	1364	8	FastMath.java	log1p	x	double	0	RET	$ == -1
324	1368	8	FastMath.java	log1p	x	double	0	RET	$ == Double.POSITIVE_INFINITY
325	1372	8	FastMath.java	log1p	x	double	1	RET	$ > 1e-6
325	1372	8	FastMath.java	log1p	x	double	1	RET	$ < -1e-6
326	1379	12	FastMath.java	log1p	lores	double	0	RET	Double.isInfinite($)
327	1403	8	FastMath.java	log10	lores	double	0	RET	Double.isInfinite($)
328	1447	8	FastMath.java	pow	y	double	0	RET	$ == 0.0
329	1451	8	FastMath.java	pow	x	double	0	RET	$ != $
330	1456	8	FastMath.java	pow	x	double	0	RET	$ == 0
331	1458	12	FastMath.java	pow	bits	long	0	RET	($ & 0x8000000000000000L) != 0
332	1462	16	FastMath.java	pow	yi	long	0	RET	y == $
332	1462	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
332	1462	16	FastMath.java	pow	y	double	0	RET	$ < 0
332	1462	16	FastMath.java	pow	y	double	0	RET	$ == yi
333	1466	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
333	1466	16	FastMath.java	pow	yi	long	0	RET	y == $
333	1466	16	FastMath.java	pow	y	double	0	RET	$ == yi
333	1466	16	FastMath.java	pow	y	double	0	RET	$ > 0
334	1471	12	FastMath.java	pow	y	double	0	RET	$ < 0
335	1474	12	FastMath.java	pow	y	double	0	RET	$ > 0
336	1481	8	FastMath.java	pow	x	double	0	RET	$ == Double.POSITIVE_INFINITY
337	1482	12	FastMath.java	pow	y	double	0	RET	$ != $
338	1485	12	FastMath.java	pow	y	double	1	RET	$ < 0.0
339	1492	8	FastMath.java	pow	y	double	0	RET	$ == Double.POSITIVE_INFINITY
340	1493	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
341	1497	12	FastMath.java	pow	x	double	1	RET	$ * $ > 1.0
342	1504	8	FastMath.java	pow	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
343	1505	12	FastMath.java	pow	y	double	0	RET	$ != $
344	1509	12	FastMath.java	pow	y	double	0	RET	$ < 0
345	1511	16	FastMath.java	pow	yi	long	0	RET	y == $
345	1511	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
345	1511	16	FastMath.java	pow	y	double	0	RET	$ == yi
346	1518	12	FastMath.java	pow	y	double	0	RET	$ > 0
347	1520	16	FastMath.java	pow	yi	long	0	RET	y == $
347	1520	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
347	1520	16	FastMath.java	pow	y	double	0	RET	$ == yi
348	1528	8	FastMath.java	pow	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
349	1530	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
350	1534	12	FastMath.java	pow	x	double	1	RET	$ * $ < 1.0
351	1542	8	FastMath.java	pow	x	double	0	RET	$ < 0
352	1544	12	FastMath.java	pow	THIS	FastMath	0	RET	y >= $.TWO_POWER_53
352	1544	12	FastMath.java	pow	THIS	FastMath	0	RET	y <= -$.TWO_POWER_53
352	1544	12	FastMath.java	pow	y	double	0	RET	$ >= TWO_POWER_53
352	1544	12	FastMath.java	pow	y	double	0	RET	$ <= -TWO_POWER_53
353	1548	12	FastMath.java	pow	y	double	1	RET	$ == (long) $
354	1559	8	FastMath.java	pow	y	double	1	DEF	$ < 8e298
354	1559	8	FastMath.java	pow	y	double	1	DEF	$ > -8e298
355	1572	8	FastMath.java	pow	lores	double	0	RET	Double.isInfinite($)
356	1615	8	FastMath.java	pow	e	int	1	RET	$ == 0
357	1617	15	FastMath.java	pow	e	int	0	DEF	$ < 0
12408	1638	8	FastMath.java	pow	e	int	0	NIL-WHILE	$ != 0
358	1640	12	FastMath.java	pow	e	int	0	DEF	($ & 0x1) != 0
359	1821	8	FastMath.java	sinQ	xb	double	0	DEF	$ != 0.0
360	1951	8	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
361	1984	8	FastMath.java	tanQ	xb	double	0	DEF	$ != 0.0
362	1988	12	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
363	2030	8	FastMath.java	reducePayneHanek	shift	int	1	DEF	$ != 0
364	2061	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
364	2061	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
364	2061	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
364	2061	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
364	2061	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
365	2075	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
365	2075	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
365	2075	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
365	2075	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
365	2075	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
366	2095	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
366	2095	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
366	2095	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
366	2095	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
366	2095	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
367	2147	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
367	2147	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
367	2147	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
367	2147	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
367	2147	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
368	2161	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
368	2161	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
368	2161	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
368	2161	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
368	2161	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
369	2181	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
369	2181	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
369	2181	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
369	2181	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
369	2181	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
370	2203	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
370	2203	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
370	2203	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
370	2203	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
370	2203	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
371	2235	8	FastMath.java	sin	x	double	0	DEF	$ < 0
372	2241	8	FastMath.java	sin	xa	double	0	RET	$ == 0.0
373	2243	12	FastMath.java	sin	bits	long	0	RET	$ < 0
374	2249	8	FastMath.java	sin	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
374	2249	8	FastMath.java	sin	xa	double	0	RET	$ != $
375	2254	8	FastMath.java	sin	xa	double	1	DEF	$ > 3294198.0
376	2263	15	FastMath.java	sin	xa	double	0	DEF	$ > 1.5707963267948966
377	2270	8	FastMath.java	sin	negative	boolean	0	DEF	$
378	2299	8	FastMath.java	cos	x	double	0	DEF	$ < 0
379	2303	8	FastMath.java	cos	xa	double	0	RET	$ != $
379	2303	8	FastMath.java	cos	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
380	2309	8	FastMath.java	cos	xa	double	1	DEF	$ > 3294198.0
381	2318	15	FastMath.java	cos	xa	double	0	DEF	$ > 1.5707963267948966
382	2354	8	FastMath.java	tan	x	double	0	DEF	$ < 0
383	2360	8	FastMath.java	tan	xa	double	0	RET	$ == 0.0
384	2362	12	FastMath.java	tan	bits	long	0	RET	$ < 0
385	2368	8	FastMath.java	tan	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
385	2368	8	FastMath.java	tan	xa	double	0	RET	$ != $
386	2374	8	FastMath.java	tan	xa	double	1	DEF	$ > 3294198.0
387	2383	15	FastMath.java	tan	xa	double	0	DEF	$ > 1.5707963267948966
388	2390	8	FastMath.java	tan	xa	double	0	DEF	$ > 1.5
389	2406	8	FastMath.java	tan	quadrant	int	1	DEF	($ & 1) == 0
390	2412	8	FastMath.java	tan	negative	boolean	0	DEF	$
391	2438	8	FastMath.java	atan	xa	double	0	RET	$ == 0.0
392	2442	8	FastMath.java	atan	xa	double	0	DEF	$ < 0
393	2449	8	FastMath.java	atan	xa	double	0	RET	$ > 1.633123935319537E16
394	2454	8	FastMath.java	atan	xa	double	1	DEF	$ < 1
395	2476	8	FastMath.java	atan	idx	int	1	DEF	$ == 0
396	2554	8	FastMath.java	atan	leftPlane	boolean	0	DEF	$
397	2568	8	FastMath.java	atan	negate	boolean	0	DEF	$ ^ leftPlane
397	2568	8	FastMath.java	atan	leftPlane	boolean	0	DEF	negate ^ $
398	2582	8	FastMath.java	atan2	y	double	0	RET	$ != $
398	2582	8	FastMath.java	atan2	x	double	0	RET	$ != $
399	2586	8	FastMath.java	atan2	y	double	0	RET	$ == 0
400	2591	12	FastMath.java	atan2	invx	double	0	RET	$ == 0
401	2592	16	FastMath.java	atan2	x	double	1	RET	$ > 0
402	2599	12	FastMath.java	atan2	invx	double	1	RET	$ < 0
402	2599	12	FastMath.java	atan2	x	double	1	RET	$ < 0
403	2600	16	FastMath.java	atan2	invy	double	1	RET	$ < 0
403	2600	16	FastMath.java	atan2	y	double	1	RET	$ < 0
404	2612	8	FastMath.java	atan2	y	double	0	RET	$ == Double.POSITIVE_INFINITY
405	2613	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
406	2617	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
407	2624	8	FastMath.java	atan2	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
408	2625	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
409	2629	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
410	2636	8	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
411	2637	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
411	2637	12	FastMath.java	atan2	y	double	0	RET	$ > 0
412	2641	12	FastMath.java	atan2	y	double	0	RET	$ < 0
412	2641	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
413	2646	8	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
414	2648	12	FastMath.java	atan2	y	double	0	RET	$ > 0.0
414	2648	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0.0
415	2652	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
415	2652	12	FastMath.java	atan2	y	double	0	RET	$ < 0
416	2659	8	FastMath.java	atan2	x	double	0	RET	$ == 0
417	2660	12	FastMath.java	atan2	y	double	0	RET	$ > 0
417	2660	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
418	2664	12	FastMath.java	atan2	y	double	0	RET	$ < 0
418	2664	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
419	2671	8	FastMath.java	atan2	r	double	0	RET	Double.isInfinite($)
420	2688	8	FastMath.java	atan2	ra	double	0	DEF	$ == 0
421	2703	6	FastMath.java	asin	x	double	0	RET	$ != $
422	2707	6	FastMath.java	asin	x	double	0	RET	$ > 1.0
422	2707	6	FastMath.java	asin	x	double	0	RET	$ < -1.0
423	2711	6	FastMath.java	asin	x	double	0	RET	$ == 1.0
424	2715	6	FastMath.java	asin	x	double	0	RET	$ == -1.0
425	2719	6	FastMath.java	asin	x	double	0	RET	$ == 0.0
426	2779	6	FastMath.java	acos	x	double	0	RET	$ != $
427	2783	6	FastMath.java	acos	x	double	0	RET	$ > 1.0
427	2783	6	FastMath.java	acos	x	double	0	RET	$ < -1.0
428	2787	6	FastMath.java	acos	x	double	0	RET	$ == -1.0
429	2791	6	FastMath.java	acos	x	double	0	RET	$ == 1.0
430	2795	6	FastMath.java	acos	x	double	0	RET	$ == 0
431	2839	6	FastMath.java	acos	r	double	0	RET	Double.isInfinite($)
432	2866	6	FastMath.java	cbrt	exponent	int	0	RET	$ == -1023
433	2867	10	FastMath.java	cbrt	x	double	0	RET	$ == 0
434	2878	6	FastMath.java	cbrt	exponent	int	0	RET	$ == 1024
435	2933	6	FastMath.java	cbrt	subnormal	boolean	0	DEF	$
436	2947	8	FastMath.java	toRadians	x	double	0	RET	Double.isInfinite($)
436	2947	8	FastMath.java	toRadians	x	double	0	RET	$ == 0.0
437	2959	8	FastMath.java	toRadians	result	double	0	DEF	$ == 0
438	2972	8	FastMath.java	toDegrees	x	double	0	RET	Double.isInfinite($)
438	2972	8	FastMath.java	toDegrees	x	double	0	RET	$ == 0.0
439	3034	8	FastMath.java	ulp	x	double	0	RET	Double.isInfinite($)
440	3046	8	FastMath.java	ulp	x	float	0	RET	Float.isInfinite($)
441	3061	8	FastMath.java	scalb	n	int	0	RET	$ < 1024
441	3061	8	FastMath.java	scalb	n	int	0	RET	$ > -1023
442	3066	8	FastMath.java	scalb	d	double	0	RET	$ == 0
442	3066	8	FastMath.java	scalb	d	double	0	RET	Double.isInfinite($)
442	3066	8	FastMath.java	scalb	d	double	0	RET	Double.isNaN($)
443	3069	8	FastMath.java	scalb	n	int	0	RET	$ < -2098
444	3072	8	FastMath.java	scalb	n	int	0	RET	$ > 2097
445	3085	8	FastMath.java	scalb	n	int	1	RET	$ < 0
446	3087	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
447	3090	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -53
448	3099	16	FastMath.java	scalb	mostSignificantLostBit	long	0	DEF	$ != 0
449	3111	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
12409	3114	16	FastMath.java	scalb	mantissa	long	0	NIL-WHILE	($ >>> 52) != 1
450	3121	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
451	3127	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
452	3145	8	FastMath.java	scalb	n	int	0	RET	$ > -127
452	3145	8	FastMath.java	scalb	n	int	0	RET	$ < 128
453	3150	8	FastMath.java	scalb	f	float	0	RET	Float.isNaN($)
453	3150	8	FastMath.java	scalb	f	float	0	RET	$ == 0f
453	3150	8	FastMath.java	scalb	f	float	0	RET	Float.isInfinite($)
454	3153	8	FastMath.java	scalb	n	int	0	RET	$ < -277
455	3156	8	FastMath.java	scalb	n	int	0	RET	$ > 276
456	3169	8	FastMath.java	scalb	n	int	1	RET	$ < 0
457	3171	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
458	3174	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -24
459	3183	16	FastMath.java	scalb	mostSignificantLostBit	int	0	DEF	$ != 0
460	3195	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
12410	3198	16	FastMath.java	scalb	mantissa	int	0	NIL-WHILE	($ >>> 23) != 1
461	3205	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
462	3211	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
463	3254	8	FastMath.java	nextAfter	d	double	1	RET	Double.isNaN($)
463	3254	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
464	3256	15	FastMath.java	nextAfter	d	double	1	RET	$ == direction
464	3256	15	FastMath.java	nextAfter	direction	double	1	RET	d == $
465	3258	15	FastMath.java	nextAfter	d	double	1	RET	Double.isInfinite($)
466	3260	15	FastMath.java	nextAfter	d	double	0	RET	$ == 0
467	3268	8	FastMath.java	nextAfter	sign	long	1	RET	(direction < d) ^ ($ == 0L)
467	3268	8	FastMath.java	nextAfter	d	double	1	RET	(direction < $) ^ (sign == 0L)
467	3268	8	FastMath.java	nextAfter	direction	double	1	RET	($ < d) ^ (sign == 0L)
468	3310	8	FastMath.java	nextAfter	f	float	1	RET	Double.isNaN($)
468	3310	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
469	3312	15	FastMath.java	nextAfter	f	float	1	RET	$ == direction
469	3312	15	FastMath.java	nextAfter	direction	double	1	RET	f == $
470	3314	15	FastMath.java	nextAfter	f	float	1	RET	Float.isInfinite($)
471	3316	15	FastMath.java	nextAfter	f	float	0	RET	$ == 0f
472	3324	8	FastMath.java	nextAfter	sign	int	1	RET	(direction < f) ^ ($ == 0)
472	3324	8	FastMath.java	nextAfter	f	float	1	RET	(direction < $) ^ (sign == 0)
472	3324	8	FastMath.java	nextAfter	direction	double	1	RET	($ < f) ^ (sign == 0)
473	3339	8	FastMath.java	floor	x	double	0	RET	$ != $
474	3343	8	FastMath.java	floor	THIS	FastMath	0	RET	x <= -$.TWO_POWER_52
474	3343	8	FastMath.java	floor	THIS	FastMath	0	RET	x >= $.TWO_POWER_52
474	3343	8	FastMath.java	floor	x	double	0	RET	$ <= -TWO_POWER_52
474	3343	8	FastMath.java	floor	x	double	0	RET	$ >= TWO_POWER_52
475	3348	8	FastMath.java	floor	y	long	0	DEF	$ != x
475	3348	8	FastMath.java	floor	x	double	0	DEF	$ < 0
475	3348	8	FastMath.java	floor	x	double	0	DEF	y != $
476	3352	8	FastMath.java	floor	y	long	0	RET	$ == 0
477	3366	8	FastMath.java	ceil	x	double	0	RET	$ != $
478	3371	8	FastMath.java	ceil	y	double	0	RET	$ == x
478	3371	8	FastMath.java	ceil	x	double	0	RET	y == $
479	3377	8	FastMath.java	ceil	y	double	0	RET	$ == 0
480	3392	8	FastMath.java	rint	d	double	0	RET	$ > 0.5
481	3393	12	FastMath.java	rint	y	double	0	RET	$ == -1.0
482	3398	8	FastMath.java	rint	d	double	0	RET	$ < 0.5
483	3447	8	FastMath.java	min	a	float	0	RET	$ > b
483	3447	8	FastMath.java	min	b	float	0	RET	a > $
484	3450	8	FastMath.java	min	a	float	0	RET	$ < b
484	3450	8	FastMath.java	min	b	float	0	RET	a < $
485	3454	8	FastMath.java	min	a	float	0	RET	$ != b
485	3454	8	FastMath.java	min	b	float	0	RET	a != $
486	3460	8	FastMath.java	min	bits	int	0	RET	$ == 0x80000000
487	3472	8	FastMath.java	min	a	double	0	RET	$ > b
487	3472	8	FastMath.java	min	b	double	0	RET	a > $
488	3475	8	FastMath.java	min	a	double	0	RET	$ < b
488	3475	8	FastMath.java	min	b	double	0	RET	a < $
489	3479	8	FastMath.java	min	a	double	0	RET	$ != b
489	3479	8	FastMath.java	min	b	double	0	RET	a != $
490	3485	8	FastMath.java	min	bits	long	0	RET	$ == 0x8000000000000000L
491	3515	8	FastMath.java	max	a	float	0	RET	$ > b
491	3515	8	FastMath.java	max	b	float	0	RET	a > $
492	3518	8	FastMath.java	max	a	float	0	RET	$ < b
492	3518	8	FastMath.java	max	b	float	0	RET	a < $
493	3522	8	FastMath.java	max	a	float	0	RET	$ != b
493	3522	8	FastMath.java	max	b	float	0	RET	a != $
494	3528	8	FastMath.java	max	bits	int	0	RET	$ == 0x80000000
495	3540	8	FastMath.java	max	a	double	0	RET	$ > b
495	3540	8	FastMath.java	max	b	double	0	RET	a > $
496	3543	8	FastMath.java	max	a	double	0	RET	$ < b
496	3543	8	FastMath.java	max	b	double	0	RET	a < $
497	3547	8	FastMath.java	max	a	double	0	RET	$ != b
497	3547	8	FastMath.java	max	b	double	0	RET	a != $
498	3553	8	FastMath.java	max	bits	long	0	RET	$ == 0x8000000000000000L
499	3574	8	FastMath.java	hypot	x	double	1	RET	Double.isInfinite($)
499	3574	8	FastMath.java	hypot	y	double	1	RET	Double.isInfinite($)
500	3576	15	FastMath.java	hypot	x	double	1	RET	Double.isNaN($)
500	3576	15	FastMath.java	hypot	y	double	1	RET	Double.isNaN($)
501	3582	12	FastMath.java	hypot	expX	int	1	RET	$ > expY + 27
501	3582	12	FastMath.java	hypot	expY	int	1	RET	expX > $ + 27
502	3585	19	FastMath.java	hypot	expX	int	1	RET	expY > $ + 27
502	3585	19	FastMath.java	hypot	expY	int	1	RET	$ > expX + 27
503	3647	8	FastMath.java	copySign	m	long	0	RET	($^s) >= 0
503	3647	8	FastMath.java	copySign	s	long	0	RET	(m^$) >= 0
504	3668	8	FastMath.java	copySign	m	int	0	RET	($^s) >= 0
504	3668	8	FastMath.java	copySign	s	int	0	RET	(m^$) >= 0
12391	108	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < 7
12392	121	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
173	128	12	FastMathCalc.java	buildSinCosTables	i	int	1	DEF	($ & 1) == 0
12393	177	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
12394	215	8	FastMathCalc.java	slowCos	i	int	0	NIL-FOR	$ >= 0
174	219	12	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 1) != 0
175	226	12	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 2) != 0
176	235	8	FastMathCalc.java	slowCos	result	double	0	DEF	$ != null
12395	259	8	FastMathCalc.java	slowSin	i	int	0	NIL-FOR	$ >= 0
177	263	12	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 1) == 0
178	270	12	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 2) != 0
179	279	8	FastMathCalc.java	slowSin	result	double	0	DEF	$ != null
12396	303	8	FastMathCalc.java	slowexp	i	int	0	NIL-FOR	$ >= 0
180	316	8	FastMathCalc.java	slowexp	result	double	0	DEF	$ != null
181	330	8	FastMathCalc.java	split	d	double	1	DEF	$ < 8e298
181	330	8	FastMathCalc.java	split	d	double	1	DEF	$ > -8e298
182	349	8	FastMathCalc.java	resplit	c	double	1	DEF	$ < 8e298
182	349	8	FastMathCalc.java	resplit	c	double	1	DEF	$ > -8e298
183	407	8	FastMathCalc.java	splitReciprocal	in	double	0	DEF	$[0] == 0.0
184	415	8	FastMathCalc.java	splitReciprocal	result	double	0	DEF	$[1] != $[1]
12397	422	8	FastMathCalc.java	splitReciprocal	i	int	0	NIL-FOR	$ < 2
12398	510	8	FastMathCalc.java	expint	p	int	0	NIL-WHILE	$ > 0
185	511	12	FastMathCalc.java	expint	p	int	0	DEF	($ & 1) != 0
186	522	8	FastMathCalc.java	expint	result	double	0	DEF	$ != null
12399	578	8	FastMathCalc.java	slowLog	i	int	0	NIL-FOR	$ >= 0
187	639	8	FastMathCalc.java	format	d	double	1	RET	$ != $
188	654	8	FastMathCalc.java	checkLen	expectedLen	int	0	DimensionMismatchException	$ != actual
188	654	8	FastMathCalc.java	checkLen	actual	int	0	DimensionMismatchException	expectedLen != $
3372	97	8	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	$.normalization == $.DstNormalization.ORTHOGONAL_DST_I
3373	101	8	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	type == $.TransformType.FORWARD
3373	101	8	FastSineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
3374	141	8	FastSineTransformer.java	fst	THIS	FastSineTransformer	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo(f.$.length)
3374	141	8	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($.length)
3375	146	8	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	$[0] != 0.0
3376	152	8	FastSineTransformer.java	fst	n	int	0	RET	$ == 1
14287	161	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
14287	161	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
14288	174	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
14288	174	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
14578	97	8	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	NIL-FOR	i < value.$.length
14578	97	8	FieldHermiteInterpolator.java	addSamplePoint	i	int	0	NIL-FOR	$ < value.length
14578	97	8	FieldHermiteInterpolator.java	addSamplePoint	value	T[]	0	NIL-FOR	i < $.length
3990	100	12	FieldHermiteInterpolator.java	addSamplePoint	i	int	0	DEF	$ > 1
14579	103	16	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	NIL-FOR	j < y.$.length
14579	103	16	FieldHermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < y.length
14579	103	16	FieldHermiteInterpolator.java	addSamplePoint	y	T[]	0	NIL-FOR	j < $.length
14580	112	12	FieldHermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < n
14580	112	12	FieldHermiteInterpolator.java	addSamplePoint	n	int	0	NIL-FOR	j < $
3991	114	16	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	ZeroException	x.equals($.abscissae.get(n - (j + 1)))
3991	114	16	FieldHermiteInterpolator.java	addSamplePoint	j	int	0	ZeroException	x.equals(abscissae.get(n - ($ + 1)))
3991	114	16	FieldHermiteInterpolator.java	addSamplePoint	n	int	0	ZeroException	x.equals(abscissae.get($ - (j + 1)))
3991	114	16	FieldHermiteInterpolator.java	addSamplePoint	x	T	0	ZeroException	$.equals(abscissae.get(n - (j + 1)))
14581	118	16	FieldHermiteInterpolator.java	addSamplePoint	THIS	FieldHermiteInterpolator	0	NIL-FOR	k < y.$.length
14581	118	16	FieldHermiteInterpolator.java	addSamplePoint	k	int	0	NIL-FOR	$ < y.length
14581	118	16	FieldHermiteInterpolator.java	addSamplePoint	y	T[]	0	NIL-FOR	k < $.length
3992	144	8	FieldHermiteInterpolator.java	value	THIS	FieldHermiteInterpolator	0	NoDataException	$.abscissae.isEmpty()
14582	150	8	FieldHermiteInterpolator.java	value	THIS	FieldHermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
14582	150	8	FieldHermiteInterpolator.java	value	i	int	0	NIL-FOR	$ < topDiagonal.size()
14583	152	12	FieldHermiteInterpolator.java	value	THIS	FieldHermiteInterpolator	0	NIL-FOR	k < value.$.length
14583	152	12	FieldHermiteInterpolator.java	value	k	int	0	NIL-FOR	$ < value.length
14583	152	12	FieldHermiteInterpolator.java	value	value	T[]	0	NIL-FOR	k < $.length
3993	175	8	FieldHermiteInterpolator.java	derivatives	THIS	FieldHermiteInterpolator	0	NoDataException	$.abscissae.isEmpty()
14584	183	8	FieldHermiteInterpolator.java	derivatives	i	int	0	NIL-FOR	$ < order
14584	183	8	FieldHermiteInterpolator.java	derivatives	order	int	0	NIL-FOR	i < $
14585	191	8	FieldHermiteInterpolator.java	derivatives	THIS	FieldHermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
14585	191	8	FieldHermiteInterpolator.java	derivatives	i	int	0	NIL-FOR	$ < topDiagonal.size()
14586	194	12	FieldHermiteInterpolator.java	derivatives	j	int	0	NIL-FOR	$ >= 0
14587	195	16	FieldHermiteInterpolator.java	derivatives	THIS	FieldHermiteInterpolator	0	NIL-FOR	k < derivatives[j].length
14587	195	16	FieldHermiteInterpolator.java	derivatives	k	int	0	NIL-FOR	$ < derivatives[j].length
14587	195	16	FieldHermiteInterpolator.java	derivatives	j	int	0	NIL-FOR	k < derivatives[$].length
14587	195	16	FieldHermiteInterpolator.java	derivatives	derivatives	T[][]	0	NIL-FOR	k < $[j].length
3994	200	16	FieldHermiteInterpolator.java	derivatives	j	int	0	DEF	$ > 0
1632	86	8	FieldLUDecomposition.java	FieldLUDecomposition	matrix	FieldMatrix<T>	0	NonSquareMatrixException	$.isSquare()
13035	100	8	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
13035	100	8	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
13036	107	8	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	$ < m
13036	107	8	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	col < $
13037	112	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < col
13037	112	12	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	row < $
13038	115	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < row
13038	115	16	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	i < $
13039	123	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
13039	123	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
13040	126	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < col
13040	126	16	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	i < $
1633	131	16	FieldLUDecomposition.java	FieldLUDecomposition	THIS	FieldLUDecomposition	0	DEF	$.lu[nonZero][col].equals($.field.getZero())
1633	131	16	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	lu[$][col].equals(field.getZero())
1633	131	16	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	lu[nonZero][$].equals(field.getZero())
1634	138	12	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	RET	$ >= m
1634	138	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	RET	nonZero >= $
1635	144	12	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	$ != col
1635	144	12	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	nonZero != $
13041	146	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < m
13041	146	16	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	i < $
13042	159	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
13042	159	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
1636	173	8	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.cachedL == null
1636	173	8	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.singular
13043	176	12	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
13043	176	12	FieldLUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
13044	178	16	FieldLUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
13044	178	16	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1637	193	8	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.cachedU == null
1637	193	8	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.singular
13045	196	12	FieldLUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
13045	196	12	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
13046	198	16	FieldLUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
13046	198	16	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1638	216	8	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.singular
1638	216	8	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.cachedP == null
13047	219	12	FieldLUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
13047	219	12	FieldLUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1639	240	8	FieldLUDecomposition.java	getDeterminant	THIS	FieldLUDecomposition	1	RET	$.singular
13048	245	12	FieldLUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
13048	245	12	FieldLUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
665	78	8	FieldRotation.java	FieldRotation	needsNormalization	boolean	1	DEF	$
666	120	8	FieldRotation.java	FieldRotation	norm	T	0	MathIllegalArgumentException	$.getReal() == 0
667	168	8	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m.$.length != 3
667	168	8	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m[1].length != 3
667	168	8	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m[0].length != 3
667	168	8	FieldRotation.java	FieldRotation	THIS	FieldRotation	0	NotARotationMatrixException	m[2].length != 3
667	168	8	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$.length != 3
667	168	8	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$[1].length != 3
667	168	8	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$[0].length != 3
667	168	8	FieldRotation.java	FieldRotation	m	T[][]	0	NotARotationMatrixException	$[2].length != 3
668	184	8	FieldRotation.java	FieldRotation	det	T	0	NotARotationMatrixException	$.getReal() < 0.0
669	268	8	FieldRotation.java	FieldRotation	normProduct	T	0	MathArithmeticException	$.getReal() == 0
670	274	8	FieldRotation.java	FieldRotation	normProduct	T	1	DEF	dot.getReal() < ((2.0e-15 - 1.0) * $.getReal())
670	274	8	FieldRotation.java	FieldRotation	dot	T	1	DEF	$.getReal() < ((2.0e-15 - 1.0) * normProduct.getReal())
671	346	8	FieldRotation.java	mat2quat	s	T	1	DEF	$.getReal() > -0.19
672	355	12	FieldRotation.java	mat2quat	s	T	1	DEF	$.getReal() > -0.19
673	364	16	FieldRotation.java	mat2quat	s	T	1	DEF	$.getReal() > -0.19
674	432	8	FieldRotation.java	getAxis	squaredSine	T	1	RET	$.getReal() == 0
675	435	15	FieldRotation.java	getAxis	THIS	FieldRotation	0	RET	$.q0.getReal() < 0
676	448	8	FieldRotation.java	getAngle	THIS	FieldRotation	1	RET	$.q0.getReal() < -0.1
676	448	8	FieldRotation.java	getAngle	THIS	FieldRotation	1	RET	$.q0.getReal() > 0.1
677	450	15	FieldRotation.java	getAngle	THIS	FieldRotation	0	RET	$.q0.getReal() < 0
678	494	8	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
679	503	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
679	503	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
680	510	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
681	519	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
681	519	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
682	526	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
683	535	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
683	535	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
684	542	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
685	551	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
685	551	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
686	558	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
687	567	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
687	567	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
688	574	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
689	583	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
689	583	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
690	590	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
691	599	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
691	599	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
692	606	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
693	615	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() > 0.9999999999
693	615	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getX().getReal() < -0.9999999999
694	622	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
695	631	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
695	631	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
696	638	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
697	647	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() < -0.9999999999
697	647	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getY().getReal() > 0.9999999999
698	654	15	FieldRotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
699	663	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
699	663	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
700	679	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() < -0.9999999999
700	679	12	FieldRotation.java	getAngles	v2	FieldVector3D<T>	0	CardanEulerSingularityException	$.getZ().getReal() > 0.9999999999
12435	1090	8	FieldRotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
701	1131	12	FieldRotation.java	orthogonalizeMatrix	fn	double	0	RET	FastMath.abs(fn1 - $) <= threshold
701	1131	12	FieldRotation.java	orthogonalizeMatrix	fn1	double	0	RET	FastMath.abs($ - fn) <= threshold
701	1131	12	FieldRotation.java	orthogonalizeMatrix	threshold	double	0	RET	FastMath.abs(fn1 - fn) <= $
775	73	8	FieldVector3D.java	FieldVector3D	THIS	FieldVector3D	0	DimensionMismatchException	v.$.length != 3
775	73	8	FieldVector3D.java	FieldVector3D	v	T[]	0	DimensionMismatchException	$.length != 3
776	376	8	FieldVector3D.java	getNormInf	xAbs	T	1	RET	$.getReal() <= yAbs.getReal()
776	376	8	FieldVector3D.java	getNormInf	yAbs	T	1	RET	xAbs.getReal() <= $.getReal()
777	377	12	FieldVector3D.java	getNormInf	yAbs	T	1	RET	$.getReal() <= zAbs.getReal()
777	377	12	FieldVector3D.java	getNormInf	zAbs	T	1	RET	yAbs.getReal() <= $.getReal()
778	383	12	FieldVector3D.java	getNormInf	xAbs	T	1	RET	$.getReal() <= zAbs.getReal()
778	383	12	FieldVector3D.java	getNormInf	zAbs	T	1	RET	xAbs.getReal() <= $.getReal()
779	525	8	FieldVector3D.java	normalize	s	T	0	MathArithmeticException	$.getReal() == 0
780	549	8	FieldVector3D.java	orthogonal	threshold	double	0	MathArithmeticException	$ == 0
781	553	8	FieldVector3D.java	orthogonal	THIS	FieldVector3D	1	RET	FastMath.abs($.x.getReal()) <= threshold
781	553	8	FieldVector3D.java	orthogonal	threshold	double	1	RET	FastMath.abs(x.getReal()) <= $
782	556	15	FieldVector3D.java	orthogonal	THIS	FieldVector3D	1	RET	FastMath.abs($.y.getReal()) <= threshold
782	556	15	FieldVector3D.java	orthogonal	threshold	double	1	RET	FastMath.abs(y.getReal()) <= $
783	582	8	FieldVector3D.java	angle	normProduct	T	0	MathArithmeticException	$.getReal() == 0
784	588	8	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() > threshold
784	588	8	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() < -threshold
784	588	8	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() > $
784	588	8	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() < -$
785	591	12	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() >= 0
786	618	8	FieldVector3D.java	angle	normProduct	T	0	MathArithmeticException	$.getReal() == 0
787	624	8	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() > threshold
787	624	8	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() < -threshold
787	624	8	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() > $
787	624	8	FieldVector3D.java	angle	threshold	double	0	RET	dot.getReal() < -$
788	627	12	FieldVector3D.java	angle	dot	T	0	RET	$.getReal() >= 0
789	718	8	FieldVector3D.java	equals	THIS	FieldVector3D	0	RET	$ == other
789	718	8	FieldVector3D.java	equals	other	Object	0	RET	this == $
790	722	8	FieldVector3D.java	equals	other	Object	0	RET	$ instanceof FieldVector3D
791	725	12	FieldVector3D.java	equals	rhs	FieldVector3D<T>	0	RET	$.isNaN()
792	744	8	FieldVector3D.java	hashCode	THIS	FieldVector3D	0	RET	$.isNaN()
793	865	8	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dy.getReal()
793	865	8	FieldVector3D.java	distanceInf	dy	T	1	RET	dx.getReal() <= $.getReal()
794	866	12	FieldVector3D.java	distanceInf	dy	T	1	RET	$.getReal() <= dz.getReal()
794	866	12	FieldVector3D.java	distanceInf	dz	T	1	RET	dy.getReal() <= $.getReal()
795	872	12	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dz.getReal()
795	872	12	FieldVector3D.java	distanceInf	dz	T	1	RET	dx.getReal() <= $.getReal()
796	891	8	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dy.getReal()
796	891	8	FieldVector3D.java	distanceInf	dy	T	1	RET	dx.getReal() <= $.getReal()
797	892	12	FieldVector3D.java	distanceInf	dy	T	1	RET	$.getReal() <= dz.getReal()
797	892	12	FieldVector3D.java	distanceInf	dz	T	1	RET	dy.getReal() <= $.getReal()
798	898	12	FieldVector3D.java	distanceInf	dx	T	1	RET	$.getReal() <= dz.getReal()
798	898	12	FieldVector3D.java	distanceInf	dz	T	1	RET	dx.getReal() <= $.getReal()
4205	145	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	nbPoints	int	0	NumberIsTooSmallException	$ <= 1
4206	150	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	stepSize	double	0	NotPositiveException	$ <= 0
4207	156	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	THIS	FiniteDifferencesDifferentiator	0	NumberIsTooLargeException	2 * $.halfSampleSpan >= tUpper - tLower
4207	156	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	tLower	double	0	NumberIsTooLargeException	2 * halfSampleSpan >= tUpper - $
4207	156	8	FiniteDifferencesDifferentiator.java	FiniteDifferencesDifferentiator	tUpper	double	0	NumberIsTooLargeException	2 * halfSampleSpan >= $ - tLower
14708	201	8	FiniteDifferencesDifferentiator.java	evaluate	THIS	FiniteDifferencesDifferentiator	0	NIL-FOR	i < $.nbPoints
14708	201	8	FiniteDifferencesDifferentiator.java	evaluate	i	int	0	NIL-FOR	$ < nbPoints
14709	205	12	FiniteDifferencesDifferentiator.java	evaluate	j	int	0	NIL-FOR	$ <= i
14709	205	12	FiniteDifferencesDifferentiator.java	evaluate	i	int	0	NIL-FOR	j <= $
14710	221	8	FiniteDifferencesDifferentiator.java	evaluate	THIS	FiniteDifferencesDifferentiator	0	NIL-FOR	i < $.nbPoints
14710	221	8	FiniteDifferencesDifferentiator.java	evaluate	i	int	0	NIL-FOR	$ < nbPoints
4208	222	12	FiniteDifferencesDifferentiator.java	evaluate	i	int	1	DEF	$ == 0
2299	103	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
3251	58	8	FixedElapsedTime.java	FixedElapsedTime	maxTime	long	0	NumberIsTooSmallException	$ < 0
3252	72	8	FixedElapsedTime.java	isSatisfied	THIS	FixedElapsedTime	0	DEF	$.endTime < 0
3237	43	8	FixedGenerationCount.java	FixedGenerationCount	maxGenerations	int	0	NumberIsTooSmallException	$ <= 0
3238	57	8	FixedGenerationCount.java	isSatisfied	THIS	FixedGenerationCount	0	RET	$.numGenerations < $.maxGenerations
2277	89	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
1027	181	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(a0) > $
1027	181	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	FastMath.abs($) > overflow
1028	187	8	Fraction.java	Fraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
1028	187	8	Fraction.java	Fraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
1028	187	8	Fraction.java	Fraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
12458	203	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
1029	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(p2) > $
1029	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(q2) > $
1029	209	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	FastMath.abs($) > overflow
1029	209	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	FastMath.abs($) > overflow
1030	214	12	Fraction.java	Fraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
1030	214	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
1030	214	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
1030	214	12	Fraction.java	Fraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
1030	214	12	Fraction.java	Fraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
1030	214	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
1030	214	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
1031	226	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
1031	226	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
1032	230	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
1032	230	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
1033	257	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == 0
1034	261	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ < 0
1035	262	12	Fraction.java	Fraction	num	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
1035	262	12	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
1036	272	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
1037	278	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
1038	292	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
1039	333	8	Fraction.java	equals	THIS	Fraction	0	RET	$ == other
1039	333	8	Fraction.java	equals	other	Object	0	RET	this == $
1040	336	8	Fraction.java	equals	other	Object	0	RET	$ instanceof Fraction
1041	406	8	Fraction.java	negate	THIS	Fraction	0	MathArithmeticException	$.numerator==Integer.MIN_VALUE
1042	477	8	Fraction.java	addSub	fraction	Fraction	0	NullArgumentException	$ == null
1043	481	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
1044	484	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
1044	484	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
1045	490	8	Fraction.java	addSub	d1	int	0	RET	$==1
1046	514	8	Fraction.java	addSub	w	BigInteger	0	MathArithmeticException	$.bitLength() > 31
1047	534	8	Fraction.java	multiply	fraction	Fraction	0	NullArgumentException	$ == null
1048	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
1048	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
1048	537	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
1049	569	8	Fraction.java	divide	fraction	Fraction	0	NullArgumentException	$ == null
1050	572	8	Fraction.java	divide	THIS	Fraction	0	MathArithmeticException	fraction.$.numerator == 0
1050	572	8	Fraction.java	divide	fraction	Fraction	0	MathArithmeticException	$.numerator == 0
1051	612	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ == 0
1052	616	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
1053	620	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
1053	620	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
1054	623	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ < 0
1055	624	12	Fraction.java	getReducedFraction	numerator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
1055	624	12	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
1056	651	8	Fraction.java	toString	THIS	Fraction	1	DEF	$.denominator == 1
1057	653	15	Fraction.java	toString	THIS	Fraction	1	DEF	$.numerator == 0
1011	177	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
1012	179	15	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
1013	199	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1014	221	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
1015	254	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
13770	90	8	Frequency.java	toString	iter	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2503	132	8	Frequency.java	incrementValue	v	Comparable<?>	0	DEF	$ instanceof Integer
2504	137	12	Frequency.java	incrementValue	count	Long	1	DEF	$ == null
13771	228	8	Frequency.java	getSumFreq	iterator	Iterator<Long>	0	NIL-WHILE	$.hasNext()
2505	242	8	Frequency.java	getCount	v	Comparable<?>	0	RET	$ instanceof Integer
2506	248	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
2507	308	8	Frequency.java	getPct	sumFreq	long	0	RET	$ == 0
2508	359	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
2509	362	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	$ instanceof Integer
2510	366	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	DEF	$ == null
2511	373	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
2512	380	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
2512	380	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.firstKey()) < 0
2512	380	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.firstKey()) < 0
2513	384	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
2513	384	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.lastKey()) >= 0
2513	384	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.lastKey()) >= 0
13772	389	8	Frequency.java	getCumFreq	values	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2514	391	12	Frequency.java	getCumFreq	nextValue	Comparable<?>	1	DEF	c.compare(v, $) > 0
2514	391	12	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	1	DEF	$.compare(v, nextValue) > 0
2514	391	12	Frequency.java	getCumFreq	v	Comparable<?>	1	DEF	c.compare($, nextValue) > 0
2515	451	8	Frequency.java	getCumPct	sumFreq	long	0	RET	$ == 0
13773	511	8	Frequency.java	merge	iter	Iterator<Entry<Comparable<?>,Long>>	0	NIL-WHILE	$.hasNext()
2516	577	8	Frequency.java	equals	THIS	Frequency	0	RET	$ == obj
2516	577	8	Frequency.java	equals	obj	Object	0	RET	this == $
2517	580	8	Frequency.java	equals	obj	Object	0	RET	$ instanceof Frequency
2518	584	8	Frequency.java	equals	THIS	Frequency	1	RET	$.freqTable == null
2519	585	12	Frequency.java	equals	THIS	Frequency	0	RET	other.$.freqTable != null
2519	585	12	Frequency.java	equals	other	Frequency	0	RET	$.freqTable != null
2520	588	15	Frequency.java	equals	THIS	Frequency	0	RET	$.freqTable.equals(other.$.freqTable)
2520	588	15	Frequency.java	equals	other	Frequency	0	RET	freqTable.equals($.freqTable)
4141	429	8	FunctionUtils.java	sample	n	int	0	NotStrictlyPositiveException	$ <= 0
4142	434	8	FunctionUtils.java	sample	min	double	0	NumberIsTooLargeException	$ >= max
4142	434	8	FunctionUtils.java	sample	max	double	0	NumberIsTooLargeException	min >= $
14640	440	8	FunctionUtils.java	sample	i	int	0	NIL-FOR	$ < n
14640	440	8	FunctionUtils.java	sample	n	int	0	NIL-FOR	i < $
3294	146	8	FuzzyKMeansClusterer.java	FuzzyKMeansClusterer	fuzziness	double	0	NumberIsTooSmallException	$ <= 1.0d
3295	211	8	FuzzyKMeansClusterer.java	getMembershipMatrix	THIS	FuzzyKMeansClusterer	0	MathIllegalStateException	$.membershipMatrix == null
3296	242	8	FuzzyKMeansClusterer.java	getObjectiveFunctionValue	THIS	FuzzyKMeansClusterer	0	MathIllegalStateException	$.points == null
3296	242	8	FuzzyKMeansClusterer.java	getObjectiveFunctionValue	THIS	FuzzyKMeansClusterer	0	MathIllegalStateException	$.clusters == null
3297	277	8	FuzzyKMeansClusterer.java	cluster	THIS	FuzzyKMeansClusterer	0	NumberIsTooSmallException	size < $.k
3297	277	8	FuzzyKMeansClusterer.java	cluster	size	int	0	NumberIsTooSmallException	$ < k
3298	288	8	FuzzyKMeansClusterer.java	cluster	size	int	0	RET	$ == 0
14247	296	8	FuzzyKMeansClusterer.java	cluster	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.k
14247	296	8	FuzzyKMeansClusterer.java	cluster	i	int	0	NIL-FOR	$ < k
14248	304	8	FuzzyKMeansClusterer.java	cluster	THIS	FuzzyKMeansClusterer	0	NIL-DOWHILE	difference > $.epsilon
14248	304	8	FuzzyKMeansClusterer.java	cluster	iteration	int	0	NIL-DOWHILE	++$ < max
14248	304	8	FuzzyKMeansClusterer.java	cluster	max	int	0	NIL-DOWHILE	++iteration < $
14248	304	8	FuzzyKMeansClusterer.java	cluster	difference	double	0	NIL-DOWHILE	$ > epsilon
14249	328	16	FuzzyKMeansClusterer.java	updateClusterCenters	THIS	FuzzyKMeansClusterer	0	NIL-FOR	idx < arr.$.length
14249	328	16	FuzzyKMeansClusterer.java	updateClusterCenters	idx	int	0	NIL-FOR	$ < arr.length
14249	328	16	FuzzyKMeansClusterer.java	updateClusterCenters	arr	double[]	0	NIL-FOR	idx < $.length
14250	347	8	FuzzyKMeansClusterer.java	updateMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.points.size()
14250	347	8	FuzzyKMeansClusterer.java	updateMembershipMatrix	i	int	0	NIL-FOR	$ < points.size()
14251	351	12	FuzzyKMeansClusterer.java	updateMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	j < $.clusters.size()
14251	351	12	FuzzyKMeansClusterer.java	updateMembershipMatrix	j	int	0	NIL-FOR	$ < clusters.size()
3299	362	16	FuzzyKMeansClusterer.java	updateMembershipMatrix	THIS	FuzzyKMeansClusterer	0	DEF	$.membershipMatrix[i][j] > maxMembership
3299	362	16	FuzzyKMeansClusterer.java	updateMembershipMatrix	j	int	0	DEF	membershipMatrix[i][$] > maxMembership
3299	362	16	FuzzyKMeansClusterer.java	updateMembershipMatrix	maxMembership	double	0	DEF	membershipMatrix[i][j] > $
3299	362	16	FuzzyKMeansClusterer.java	updateMembershipMatrix	i	int	0	DEF	membershipMatrix[$][j] > maxMembership
14252	375	8	FuzzyKMeansClusterer.java	initializeMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.points.size()
14252	375	8	FuzzyKMeansClusterer.java	initializeMembershipMatrix	i	int	0	NIL-FOR	$ < points.size()
14253	376	12	FuzzyKMeansClusterer.java	initializeMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	j < $.k
14253	376	12	FuzzyKMeansClusterer.java	initializeMembershipMatrix	j	int	0	NIL-FOR	$ < k
14254	392	8	FuzzyKMeansClusterer.java	calculateMaxMembershipChange	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.points.size()
14254	392	8	FuzzyKMeansClusterer.java	calculateMaxMembershipChange	i	int	0	NIL-FOR	$ < points.size()
14255	393	12	FuzzyKMeansClusterer.java	calculateMaxMembershipChange	THIS	FuzzyKMeansClusterer	0	NIL-FOR	j < $.clusters.size()
14255	393	12	FuzzyKMeansClusterer.java	calculateMaxMembershipChange	j	int	0	NIL-FOR	$ < clusters.size()
14256	407	8	FuzzyKMeansClusterer.java	saveMembershipMatrix	THIS	FuzzyKMeansClusterer	0	NIL-FOR	i < $.points.size()
14256	407	8	FuzzyKMeansClusterer.java	saveMembershipMatrix	i	int	0	NIL-FOR	$ < points.size()
2525	80	8	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
2424	81	8	GTest.java	g	THIS	GTest	0	DimensionMismatchException	expected.$.length < 2
2424	81	8	GTest.java	g	expected	double[]	0	DimensionMismatchException	$.length < 2
2425	84	8	GTest.java	g	THIS	GTest	0	DimensionMismatchException	expected.$.length != observed.$.length
2425	84	8	GTest.java	g	expected	double[]	0	DimensionMismatchException	$.length != observed.length
2425	84	8	GTest.java	g	observed	long[]	0	DimensionMismatchException	expected.length != $.length
13711	92	8	GTest.java	g	THIS	GTest	0	NIL-FOR	i < observed.$.length
13711	92	8	GTest.java	g	i	int	0	NIL-FOR	$ < observed.length
13711	92	8	GTest.java	g	observed	long[]	0	NIL-FOR	i < $.length
2426	98	8	GTest.java	g	sumExpected	double	0	DEF	Math.abs($ - sumObserved) > 10E-6
2426	98	8	GTest.java	g	sumObserved	double	0	DEF	Math.abs(sumExpected - $) > 10E-6
13712	103	8	GTest.java	g	THIS	GTest	0	NIL-FOR	i < observed.$.length
13712	103	8	GTest.java	g	i	int	0	NIL-FOR	$ < observed.length
13712	103	8	GTest.java	g	observed	long[]	0	NIL-FOR	i < $.length
2427	242	8	GTest.java	gTest	alpha	double	0	OutOfRangeException	$ <= 0
2427	242	8	GTest.java	gTest	alpha	double	0	OutOfRangeException	$ > 0.5
13713	264	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
13713	264	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
13713	264	8	GTest.java	entropy	k	long[][]	0	NIL-FOR	i < $.length
13714	265	12	GTest.java	entropy	THIS	GTest	0	NIL-FOR	j < k[i].length
13714	265	12	GTest.java	entropy	j	int	0	NIL-FOR	$ < k[i].length
13714	265	12	GTest.java	entropy	i	int	0	NIL-FOR	j < k[$].length
13714	265	12	GTest.java	entropy	k	long[][]	0	NIL-FOR	j < $[i].length
13715	269	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
13715	269	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
13715	269	8	GTest.java	entropy	k	long[][]	0	NIL-FOR	i < $.length
13716	270	12	GTest.java	entropy	THIS	GTest	0	NIL-FOR	j < k[i].length
13716	270	12	GTest.java	entropy	j	int	0	NIL-FOR	$ < k[i].length
13716	270	12	GTest.java	entropy	i	int	0	NIL-FOR	j < k[$].length
13716	270	12	GTest.java	entropy	k	long[][]	0	NIL-FOR	j < $[i].length
2428	271	16	GTest.java	entropy	j	int	0	DEF	k[i][$] != 0
2428	271	16	GTest.java	entropy	i	int	0	DEF	k[$][j] != 0
2428	271	16	GTest.java	entropy	k	long[][]	0	DEF	$[i][j] != 0
13717	294	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
13717	294	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
13717	294	8	GTest.java	entropy	k	long[]	0	NIL-FOR	i < $.length
13718	297	8	GTest.java	entropy	THIS	GTest	0	NIL-FOR	i < k.$.length
13718	297	8	GTest.java	entropy	i	int	0	NIL-FOR	$ < k.length
13718	297	8	GTest.java	entropy	k	long[]	0	NIL-FOR	i < $.length
2429	298	12	GTest.java	entropy	i	int	0	DEF	k[$] != 0
2429	298	12	GTest.java	entropy	k	long[]	0	DEF	$[i] != 0
2430	352	8	GTest.java	gDataSetsComparison	THIS	GTest	0	DimensionMismatchException	observed1.$.length < 2
2430	352	8	GTest.java	gDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length < 2
2431	355	8	GTest.java	gDataSetsComparison	THIS	GTest	0	DimensionMismatchException	observed1.$.length != observed2.$.length
2431	355	8	GTest.java	gDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length != observed2.length
2431	355	8	GTest.java	gDataSetsComparison	observed2	long[]	0	DimensionMismatchException	observed1.length != $.length
13719	371	8	GTest.java	gDataSetsComparison	THIS	GTest	0	NIL-FOR	i < observed1.$.length
13719	371	8	GTest.java	gDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
13719	371	8	GTest.java	gDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2432	372	12	GTest.java	gDataSetsComparison	i	int	1	ZeroException	observed2[$] == 0
2432	372	12	GTest.java	gDataSetsComparison	i	int	1	ZeroException	observed1[$] == 0
2432	372	12	GTest.java	gDataSetsComparison	observed1	long[]	1	ZeroException	$[i] == 0
2432	372	12	GTest.java	gDataSetsComparison	observed2	long[]	1	ZeroException	$[i] == 0
2433	383	8	GTest.java	gDataSetsComparison	countSum1	long	0	ZeroException	$ == 0
2433	383	8	GTest.java	gDataSetsComparison	countSum2	long	0	ZeroException	$ == 0
2434	426	8	GTest.java	rootLogLikelihoodRatio	k11	long	0	DEF	(double) $ / ($ + k12) < (double) k21 / (k21 + k22)
2434	426	8	GTest.java	rootLogLikelihoodRatio	k12	long	0	DEF	(double) k11 / (k11 + $) < (double) k21 / (k21 + k22)
2434	426	8	GTest.java	rootLogLikelihoodRatio	k21	long	0	DEF	(double) k11 / (k11 + k12) < (double) $ / ($ + k22)
2434	426	8	GTest.java	rootLogLikelihoodRatio	k22	long	0	DEF	(double) k11 / (k11 + k12) < (double) k21 / (k21 + $)
2435	531	8	GTest.java	gTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ <= 0
2435	531	8	GTest.java	gTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ > 0.5
3329	247	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
3329	247	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
3330	249	15	Gamma.java	logGamma	x	double	1	RET	$ < 0.5
3331	251	15	Gamma.java	logGamma	x	double	1	RET	$ <= 2.5
3332	253	15	Gamma.java	logGamma	x	double	1	RET	$ <= 8.0
14264	256	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ <= n
14264	256	12	Gamma.java	logGamma	n	int	0	NIL-FOR	i <= $
3333	316	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
3333	316	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
3333	316	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
3333	316	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
3334	318	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
3335	320	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x >= $ + 1
3335	320	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ >= a + 1
14265	329	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
14265	329	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	FastMath.abs($/sum) > epsilon
14265	329	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	FastMath.abs(an/$) > epsilon
14265	329	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	$ < Double.POSITIVE_INFINITY
14265	329	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	FastMath.abs(an/sum) > $
14265	329	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
3336	339	12	Gamma.java	regularizedGammaP	n	double	1	MaxCountExceededException	$ >= maxIterations
3336	339	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxCountExceededException	n >= $
3337	341	19	Gamma.java	regularizedGammaP	sum	double	1	DEF	Double.isInfinite($)
3338	394	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
3338	394	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
3338	394	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
3338	394	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
3339	396	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
3340	398	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $ + 1.0
3340	398	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a + 1.0
3341	446	8	Gamma.java	digamma	x	double	0	RET	$ > 0
3341	446	8	Gamma.java	digamma	x	double	0	RET	$ <= S_LIMIT
3342	452	8	Gamma.java	digamma	x	double	0	RET	$ >= C_LIMIT
3343	476	8	Gamma.java	trigamma	x	double	0	RET	$ <= S_LIMIT
3343	476	8	Gamma.java	trigamma	x	double	0	RET	$ > 0
3344	480	8	Gamma.java	trigamma	x	double	0	RET	$ >= C_LIMIT
14266	514	8	Gamma.java	lanczos	i	int	0	NIL-FOR	$ > 0
3345	534	8	Gamma.java	invGamma1pm1	x	double	0	NumberIsTooSmallException	$ < -0.5
3346	537	8	Gamma.java	invGamma1pm1	x	double	0	NumberIsTooLargeException	$ > 1.5
3347	543	8	Gamma.java	invGamma1pm1	t	double	1	DEF	$ < 0.0
3348	569	12	Gamma.java	invGamma1pm1	x	double	1	DEF	$ > 0.5
3349	604	12	Gamma.java	invGamma1pm1	x	double	1	DEF	$ > 0.5
3350	628	8	Gamma.java	logGamma1p	x	double	0	NumberIsTooSmallException	$ < -0.5
3351	631	8	Gamma.java	logGamma1p	x	double	0	NumberIsTooLargeException	$ > 1.5
3352	650	8	Gamma.java	gamma	x	double	0	RET	$ == FastMath.rint($)
3352	650	8	Gamma.java	gamma	x	double	0	RET	$ <= 0.0
3353	656	8	Gamma.java	gamma	absX	double	1	DEF	$ <= 20.0
3354	657	12	Gamma.java	gamma	x	double	1	DEF	$ >= 1.0
14267	668	16	Gamma.java	gamma	t	double	0	NIL-WHILE	$ > 2.5
14268	683	16	Gamma.java	gamma	t	double	0	NIL-WHILE	$ < -0.5
3355	694	12	Gamma.java	gamma	x	double	1	DEF	$ > 0.0
1257	134	8	GammaDistribution.java	GammaDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1258	137	8	GammaDistribution.java	GammaDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1259	238	8	GammaDistribution.java	density	x	double	0	RET	$ < 0
1260	242	8	GammaDistribution.java	density	THIS	GammaDistribution	0	RET	y <= $.minY
1260	242	8	GammaDistribution.java	density	THIS	GammaDistribution	0	RET	FastMath.log(y) >= $.maxLogY
1260	242	8	GammaDistribution.java	density	y	double	0	RET	$ <= minY
1260	242	8	GammaDistribution.java	density	y	double	0	RET	FastMath.log($) >= maxLogY
1261	276	8	GammaDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
1262	374	8	GammaDistribution.java	sample	THIS	GammaDistribution	0	RET	$.shape < 1
1263	383	16	GammaDistribution.java	sample	p	double	1	RET	$ <= 1
1264	389	20	GammaDistribution.java	sample	x	double	1	DEF	u2 > FastMath.exp(-$)
1264	389	20	GammaDistribution.java	sample	u2	double	1	DEF	$ > FastMath.exp(-x)
1265	401	20	GammaDistribution.java	sample	THIS	GammaDistribution	1	DEF	u2 > FastMath.pow(x, $.shape - 1)
1265	401	20	GammaDistribution.java	sample	x	double	1	DEF	u2 > FastMath.pow($, shape - 1)
1265	401	20	GammaDistribution.java	sample	u2	double	1	DEF	$ > FastMath.pow(x, shape - 1)
1266	420	12	GammaDistribution.java	sample	v	double	0	DEF	$ <= 0
1267	428	12	GammaDistribution.java	sample	x2	double	0	RET	u < 1 - 0.0331 * $ * $
1267	428	12	GammaDistribution.java	sample	u	double	0	RET	$ < 1 - 0.0331 * x2 * x2
1268	432	12	GammaDistribution.java	sample	v	double	0	RET	FastMath.log(u) < 0.5 * x2 + d * (1 - $ + FastMath.log($))
1268	432	12	GammaDistribution.java	sample	x2	double	0	RET	FastMath.log(u) < 0.5 * $ + d * (1 - v + FastMath.log(v))
1268	432	12	GammaDistribution.java	sample	u	double	0	RET	FastMath.log($) < 0.5 * x2 + d * (1 - v + FastMath.log(v))
1268	432	12	GammaDistribution.java	sample	d	double	0	RET	FastMath.log(u) < 0.5 * x2 + $ * (1 - v + FastMath.log(v))
4278	53	8	GaussIntegrator.java	GaussIntegrator	THIS	GaussIntegrator	0	DimensionMismatchException	points.$.length != weights.$.length
4278	53	8	GaussIntegrator.java	GaussIntegrator	points	double[]	0	DimensionMismatchException	$.length != weights.length
4278	53	8	GaussIntegrator.java	GaussIntegrator	weights	double[]	0	DimensionMismatchException	points.length != $.length
14765	92	8	GaussIntegrator.java	integrate	THIS	GaussIntegrator	0	NIL-FOR	i < $.points.$.length
14765	92	8	GaussIntegrator.java	integrate	i	int	0	NIL-FOR	$ < points.length
14777	163	8	GaussIntegratorFactory.java	transform	THIS	GaussIntegratorFactory	0	NIL-FOR	i < points.$.length
14777	163	8	GaussIntegratorFactory.java	transform	i	int	0	NIL-FOR	$ < points.length
14777	163	8	GaussIntegratorFactory.java	transform	points	double[]	0	NIL-FOR	i < $.length
3103	87	8	GaussNewtonOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	NullArgumentException	$ == null
14146	97	8	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
14146	97	8	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
14147	106	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
14148	120	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
14148	120	12	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
14149	128	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
14149	128	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
14150	133	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
14150	133	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
14151	136	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < nC
14151	136	20	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	l < $
3104	143	12	GaussNewtonOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	$ != null
3105	145	16	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	RET	$
14152	159	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nC
14152	159	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	i < $
3106	175	8	GaussNewtonOptimizer.java	checkParameters	THIS	GaussNewtonOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
3106	175	8	GaussNewtonOptimizer.java	checkParameters	THIS	GaussNewtonOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
1963	110	8	GaussNewtonOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	NullArgumentException	$ == null
13440	120	8	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
13440	120	8	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
13441	130	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
13442	144	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
13442	144	12	GaussNewtonOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
13443	152	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
13443	152	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
13444	157	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
13444	157	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
13445	160	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < nC
13445	160	20	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	l < $
13446	174	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nC
13446	174	16	GaussNewtonOptimizer.java	doOptimize	nC	int	0	NIL-FOR	i < $
1964	182	12	GaussNewtonOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	$ != null
1965	184	16	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	RET	$
4024	63	8	Gaussian.java	Gaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
4025	229	8	Gaussian.java	value	coeff	double	1	DEF	$ <= Precision.SAFE_MIN
14623	233	12	Gaussian.java	value	THIS	Gaussian	0	NIL-FOR	n < f.$.length
14623	233	12	Gaussian.java	value	n	int	0	NIL-FOR	$ < f.length
14623	233	12	Gaussian.java	value	f	double[]	0	NIL-FOR	n < $.length
14624	238	16	Gaussian.java	value	k	int	0	NIL-FOR	$ >= 0
4026	240	20	Gaussian.java	value	k	int	1	DEF	$ > 2
4027	242	27	Gaussian.java	value	k	int	0	DEF	$ == 2
4028	246	16	Gaussian.java	value	n	int	0	DEF	($ & 0x1) == 1
3232	74	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ < 0
3232	74	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ > 1
3233	78	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ < 0
3233	78	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ > 1
14219	120	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
14219	120	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
14220	154	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $.getPopulationLimit()
3234	159	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getCrossoverRate()
3234	159	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getCrossoverRate()
3235	165	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getMutationRate()
3235	165	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getMutationRate()
3236	175	12	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $.getPopulationLimit()
1217	60	8	GeometricDistribution.java	GeometricDistribution	p	double	0	OutOfRangeException	$ > 1
1217	60	8	GeometricDistribution.java	GeometricDistribution	p	double	0	OutOfRangeException	$ <= 0
1218	79	8	GeometricDistribution.java	probability	x	int	1	DEF	$ < 0
1219	91	8	GeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
2297	114	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
2298	208	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	MathIllegalStateException	$.getN() > 0
3478	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	1	DEF	$.previousState != null
3478	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
14367	118	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
14367	118	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
14368	135	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
14368	135	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
14722	46	8	GradientFunction.java	value	THIS	GradientFunction	0	NIL-FOR	i < point.$.length
14722	46	8	GradientFunction.java	value	i	int	0	NIL-FOR	$ < point.length
14722	46	8	GradientFunction.java	value	point	double[]	0	NIL-FOR	i < $.length
14723	56	8	GradientFunction.java	value	THIS	GradientFunction	0	NIL-FOR	i < point.$.length
14723	56	8	GradientFunction.java	value	i	int	0	NIL-FOR	$ < point.length
14723	56	8	GradientFunction.java	value	point	double[]	0	NIL-FOR	i < $.length
3043	95	12	GradientMultivariateOptimizer.java	parseOptimizationData	THIS	GradientMultivariateOptimizer	0	DEF	$.data instanceof ObjectiveFunctionGradient
3419	228	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ > 0.9999
3419	228	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ < 0.0001
3420	263	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ < 0.0001
3420	263	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ > 0.9999
3421	269	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ > 0.9999
3421	269	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ < 0.0001
3422	275	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ < 0.0001
3422	275	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ > 0.9999
3423	281	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ < 1.0001
3423	281	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ > 999.9
3424	315	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ % 2 != 0
3424	315	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ <= 6
3425	319	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ > 0.9999
3425	319	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ < 0.0001
3426	325	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ > 0.9999
3426	325	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ < 0.0001
3427	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
3427	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
3427	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
14327	377	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
14327	377	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
14328	384	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
14328	384	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
14329	389	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
14329	389	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
14330	391	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
14330	391	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
3428	414	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ >= 7
3428	414	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ <= 0
3429	428	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
14331	429	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
14331	429	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
14331	429	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
14332	434	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
14332	434	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
14332	434	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
14333	470	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
14333	470	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
14333	470	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
14334	477	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
14334	477	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
3430	479	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
3430	479	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
14335	485	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
14335	485	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
14335	485	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
3431	494	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
3431	494	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
3431	494	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
3431	494	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
3431	494	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
14336	496	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
14336	496	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
14336	496	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
14337	501	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
14337	501	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
14337	501	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
3432	505	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * FastMath.max(1.0e-15, $)
3432	505	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * FastMath.max(1.0e-15, initialNorm)
14338	513	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
14338	513	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
14338	513	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
14339	532	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
14339	532	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
14340	533	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
14340	533	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
14340	533	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
14341	541	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
14341	541	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
14341	541	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
14342	567	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
14342	567	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
14343	573	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
14343	573	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
14344	580	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
14344	580	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
14344	580	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
3433	586	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
3433	586	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
14345	624	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-DOWHILE	$.isLastStep
3434	629	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
3435	634	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
3436	638	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
3437	650	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
3437	650	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
3437	650	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
3437	650	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
3437	650	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
3437	650	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
14346	659	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
3438	664	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep($.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3438	664	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
3438	664	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3438	664	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
3438	664	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
3438	664	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3438	664	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
3438	664	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3438	664	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3438	664	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
3439	677	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
14347	686	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < $.mainSetDimension
14347	686	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < mainSetDimension
3440	692	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
3440	692	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
3440	692	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
3440	692	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
3441	713	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
3441	713	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
3442	716	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
3443	725	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
3443	725	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
3444	731	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
3444	731	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
3444	731	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
3445	743	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
3446	751	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
3446	751	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
3447	756	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
3447	756	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
3447	756	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
3448	767	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
3449	769	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
3449	769	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
3449	769	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
3450	780	16	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.isLastStep
3450	780	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
3450	780	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
3451	792	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
3452	799	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
14348	802	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
14348	802	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
14349	808	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
14349	808	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
14350	814	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
14350	814	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
14350	814	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
14351	817	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
14351	817	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
14351	817	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
14352	820	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
14352	820	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
14352	820	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
14353	825	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
14353	825	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
14353	825	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
14354	830	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
14354	830	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
14355	831	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
14355	831	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
14356	832	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
14356	832	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
14356	832	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
3453	840	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
3454	847	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
3455	852	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
3456	862	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
3457	875	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
3458	877	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
3459	880	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
3459	880	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
3460	882	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
3460	882	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
3461	884	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
3461	884	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
3462	889	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
3462	889	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
3462	889	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
3463	893	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
3463	893	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
3463	893	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
3464	898	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
3465	905	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
3465	905	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
3466	908	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
3466	908	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
3466	908	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
3466	908	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
3467	927	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
3468	933	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
3494	170	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynomials == null
3494	170	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials == null
14392	175	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynomials.$.length
14392	175	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynomials.length
3495	192	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
3496	199	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials != null
14393	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
14393	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
14393	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
14394	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
14394	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
14394	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
3497	212	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
14395	216	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
14395	216	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
14396	220	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
14396	220	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
3498	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials.$.length <= (mu + 4)
3498	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials == null
3498	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynomials.length <= ($ + 4)
14397	251	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
14397	251	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
3499	264	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
3500	272	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
3501	276	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
3502	280	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
14398	284	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
14398	284	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
3503	304	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
14399	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < scale.$.length
14399	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < scale.length
14399	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	scale	double[]	0	NIL-FOR	i < $.length
14400	330	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < dimension
14400	330	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	dimension	int	0	NIL-FOR	i < $
3504	339	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
14401	342	12	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ > 3
3505	353	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
14402	373	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
14402	373	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
14403	374	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
14403	374	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
14404	395	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
14404	395	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
14405	396	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
14405	396	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
3115	110	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	THIS	HaltonSequenceGenerator	0	OutOfRangeException	dimension > bases.$.length
3115	110	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	dimension	int	0	OutOfRangeException	$ > bases.length
3115	110	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	dimension	int	0	OutOfRangeException	$ < 1
3115	110	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	bases	int[]	0	OutOfRangeException	dimension > $.length
3116	114	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	THIS	HaltonSequenceGenerator	0	DimensionMismatchException	weights.$.length != bases.$.length
3116	114	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	bases	int[]	0	DimensionMismatchException	weights.length != $.length
3116	114	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	weights	int[]	0	DimensionMismatchException	$ != null
3116	114	8	HaltonSequenceGenerator.java	HaltonSequenceGenerator	weights	int[]	0	DimensionMismatchException	$.length != bases.length
14166	127	8	HaltonSequenceGenerator.java	nextVector	THIS	HaltonSequenceGenerator	0	NIL-FOR	i < $.dimension
14166	127	8	HaltonSequenceGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
14167	132	12	HaltonSequenceGenerator.java	nextVector	index	int	0	NIL-WHILE	$ > 0
4029	172	8	HarmonicOscillator.java	value	THIS	HarmonicOscillator	0	DEF	f.$.length > 1
4029	172	8	HarmonicOscillator.java	value	f	double[]	0	DEF	$.length > 1
14625	175	12	HarmonicOscillator.java	value	THIS	HarmonicOscillator	0	NIL-FOR	i < f.$.length
14625	175	12	HarmonicOscillator.java	value	i	int	0	NIL-FOR	$ < f.length
14625	175	12	HarmonicOscillator.java	value	f	double[]	0	NIL-FOR	i < $.length
14539	90	8	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	i < value.$.length
14539	90	8	HermiteInterpolator.java	addSamplePoint	i	int	0	NIL-FOR	$ < value.length
14539	90	8	HermiteInterpolator.java	addSamplePoint	value	double[]	0	NIL-FOR	i < $.length
3952	93	12	HermiteInterpolator.java	addSamplePoint	i	int	0	DEF	$ > 1
14540	95	16	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	j < y.$.length
14540	95	16	HermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < y.length
14540	95	16	HermiteInterpolator.java	addSamplePoint	y	double[]	0	NIL-FOR	j < $.length
14541	104	12	HermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < n
14541	104	12	HermiteInterpolator.java	addSamplePoint	n	int	0	NIL-FOR	j < $
3953	107	16	HermiteInterpolator.java	addSamplePoint	inv	double	0	ZeroException	Double.isInfinite($)
14542	110	16	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	k < y.$.length
14542	110	16	HermiteInterpolator.java	addSamplePoint	k	int	0	NIL-FOR	$ < y.length
14542	110	16	HermiteInterpolator.java	addSamplePoint	y	double[]	0	NIL-FOR	k < $.length
14543	139	8	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	i < polynomials.$.length
14543	139	8	HermiteInterpolator.java	getPolynomials	i	int	0	NIL-FOR	$ < polynomials.length
14543	139	8	HermiteInterpolator.java	getPolynomials	polynomials	PolynomialFunction[]	0	NIL-FOR	i < $.length
14544	145	8	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
14544	145	8	HermiteInterpolator.java	getPolynomials	i	int	0	NIL-FOR	$ < topDiagonal.size()
14545	147	12	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	k < polynomials.$.length
14545	147	12	HermiteInterpolator.java	getPolynomials	k	int	0	NIL-FOR	$ < polynomials.length
14545	147	12	HermiteInterpolator.java	getPolynomials	polynomials	PolynomialFunction[]	0	NIL-FOR	k < $.length
14546	176	8	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
14546	176	8	HermiteInterpolator.java	value	i	int	0	NIL-FOR	$ < topDiagonal.size()
14547	178	12	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	k < value.$.length
14547	178	12	HermiteInterpolator.java	value	k	int	0	NIL-FOR	$ < value.length
14547	178	12	HermiteInterpolator.java	value	value	double[]	0	NIL-FOR	k < $.length
14548	209	8	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
14548	209	8	HermiteInterpolator.java	value	i	int	0	NIL-FOR	$ < topDiagonal.size()
14549	211	12	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	k < value.$.length
14549	211	12	HermiteInterpolator.java	value	k	int	0	NIL-FOR	$ < value.length
14549	211	12	HermiteInterpolator.java	value	value	DerivativeStructure[]	0	NIL-FOR	k < $.length
3954	227	8	HermiteInterpolator.java	checkInterpolation	THIS	HermiteInterpolator	0	NoDataException	$.abscissae.isEmpty()
4279	66	8	HermiteRuleFactory.java	computeRule	numberOfPoints	int	0	RET	$ == 1
14766	87	8	HermiteRuleFactory.java	computeRule	i	int	0	NIL-FOR	$ < iMax
14766	87	8	HermiteRuleFactory.java	computeRule	iMax	int	0	NIL-FOR	i < $
14767	101	12	HermiteRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
14767	101	12	HermiteRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
14768	122	12	HermiteRuleFactory.java	computeRule	done	boolean	0	NIL-WHILE	$
14769	126	16	HermiteRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
14769	126	16	HermiteRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
4280	136	16	HermiteRuleFactory.java	computeRule	done	boolean	0	DEF	$
4281	137	20	HermiteRuleFactory.java	computeRule	ha	double	1	DEF	$ * hc < 0
4281	137	20	HermiteRuleFactory.java	computeRule	hc	double	1	DEF	ha * $ < 0
4282	164	8	HermiteRuleFactory.java	computeRule	numberOfPoints	int	0	DEF	$ % 2 != 0
14770	166	12	HermiteRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
14770	166	12	HermiteRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
1399	61	8	HessenbergTransformer.java	HessenbergTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1400	84	8	HessenbergTransformer.java	getP	THIS	HessenbergTransformer	0	DEF	$.cachedP == null
12724	89	12	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ < n
12724	89	12	HessenbergTransformer.java	getP	n	int	0	NIL-FOR	i < $
12725	90	16	HessenbergTransformer.java	getP	j	int	0	NIL-FOR	$ < n
12725	90	16	HessenbergTransformer.java	getP	n	int	0	NIL-FOR	j < $
12726	95	12	HessenbergTransformer.java	getP	m	int	0	NIL-FOR	$ >= 1
1401	96	16	HessenbergTransformer.java	getP	THIS	HessenbergTransformer	0	DEF	$.householderVectors[m][m - 1] != 0.0
1401	96	16	HessenbergTransformer.java	getP	m	int	0	DEF	householderVectors[$][$ - 1] != 0.0
12727	97	20	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
12727	97	20	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
12728	101	20	HessenbergTransformer.java	getP	j	int	0	NIL-FOR	$ <= high
12728	101	20	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	j <= $
12729	104	24	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
12729	104	24	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
12730	111	24	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
12730	111	24	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
1402	130	8	HessenbergTransformer.java	getPT	THIS	HessenbergTransformer	0	DEF	$.cachedPt == null
1403	144	8	HessenbergTransformer.java	getH	THIS	HessenbergTransformer	0	DEF	$.cachedH == null
12731	147	12	HessenbergTransformer.java	getH	i	int	0	NIL-FOR	$ < m
12731	147	12	HessenbergTransformer.java	getH	m	int	0	NIL-FOR	i < $
1404	148	16	HessenbergTransformer.java	getH	i	int	0	DEF	$ > 0
12732	154	16	HessenbergTransformer.java	getH	j	int	0	NIL-FOR	$ < m
12732	154	16	HessenbergTransformer.java	getH	m	int	0	NIL-FOR	j < $
12733	184	8	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	$ <= high - 1
12733	184	8	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	m <= $ - 1
12734	187	12	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
12734	187	12	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
1405	191	12	HessenbergTransformer.java	transform	scale	double	0	DEF	Precision.equals($, 0)
12735	194	16	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ >= m
12735	194	16	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	i >= $
12736	206	16	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ < n
12736	206	16	HessenbergTransformer.java	transform	n	int	0	NIL-FOR	j < $
12737	208	20	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ >= m
12737	208	20	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	i >= $
12738	212	20	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
12738	212	20	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
12739	217	16	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
12739	217	16	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
12740	219	20	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ >= m
12740	219	20	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	j >= $
12741	223	20	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ <= high
12741	223	20	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	j <= $
14435	117	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < $.mainSetDimension
14435	117	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
14436	119	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < STATIC_E.$.length
14436	119	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < STATIC_E.length
3525	80	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	1	DEF	$.previousState != null
3525	80	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
14433	87	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
14433	87	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
14434	105	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
14434	105	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1129	86	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NotStrictlyPositiveException	$ <= 0
1130	90	8	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NotPositiveException	$ < 0
1131	94	8	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NotPositiveException	$ < 0
1132	99	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	numberOfSuccesses > $
1132	99	8	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NumberIsTooLargeException	$ > populationSize
1133	103	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	sampleSize > $
1133	103	8	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NumberIsTooLargeException	$ > populationSize
1134	118	8	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
1134	118	8	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
1135	120	15	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
1135	120	15	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
1136	199	8	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x < $[0]
1136	199	8	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x > $[1]
1136	199	8	HypergeometricDistribution.java	probability	x	int	1	DEF	$ < domain[0]
1136	199	8	HypergeometricDistribution.java	probability	x	int	1	DEF	$ > domain[1]
1137	228	8	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x <= $[0]
1137	228	8	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ <= domain[0]
1138	230	15	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
1138	230	15	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
12486	254	8	HypergeometricDistribution.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
12486	254	8	HypergeometricDistribution.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
1139	279	8	HypergeometricDistribution.java	getNumericalVariance	THIS	HypergeometricDistribution	0	DEF	$.numericalVarianceIsCalculated
3110	121	8	ISAACRandom.java	setSeed	seed	int[]	0	RET	$ == null
3111	128	8	ISAACRandom.java	setSeed	seedLen	int	0	DEF	$ < rslLen
3111	128	8	ISAACRandom.java	setSeed	rslLen	int	0	DEF	seedLen < $
14157	129	12	ISAACRandom.java	setSeed	j	int	0	NIL-FOR	$ < rslLen
14157	129	12	ISAACRandom.java	setSeed	rslLen	int	0	NIL-FOR	j < $
3112	140	8	ISAACRandom.java	next	THIS	ISAACRandom	0	DEF	$.count < 0
14158	152	8	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacI < H_SIZE
14159	156	8	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacJ < H_SIZE
14160	193	8	ISAACRandom.java	initState	THIS	ISAACRandom	0	NIL-FOR	j < $.arr.$.length
14160	193	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < arr.length
14161	196	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < 4
14162	200	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
14163	213	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
189	81	8	Incrementor.java	Incrementor	cb	MaxCountExceededCallback	0	NullArgumentException	$ == null
12400	136	8	Incrementor.java	incrementCount	i	int	0	NIL-FOR	$ < value
12400	136	8	Incrementor.java	incrementCount	value	int	0	NIL-FOR	i < $
190	155	8	Incrementor.java	incrementCount	THIS	Incrementor	0	DEF	++$.count > $.maximalCount
801	121	8	Interval.java	checkPoint	THIS	Interval	1	RET	point > $.upper + tolerance
801	121	8	Interval.java	checkPoint	THIS	Interval	1	RET	point < $.lower - tolerance
801	121	8	Interval.java	checkPoint	point	double	1	RET	$ > upper + tolerance
801	121	8	Interval.java	checkPoint	point	double	1	RET	$ < lower - tolerance
801	121	8	Interval.java	checkPoint	tolerance	double	1	RET	point > upper + $
801	121	8	Interval.java	checkPoint	tolerance	double	1	RET	point < lower - $
802	123	15	Interval.java	checkPoint	THIS	Interval	1	RET	point > $.lower + tolerance
802	123	15	Interval.java	checkPoint	THIS	Interval	1	RET	point < $.upper - tolerance
802	123	15	Interval.java	checkPoint	point	double	1	RET	$ > lower + tolerance
802	123	15	Interval.java	checkPoint	point	double	1	RET	$ < upper - tolerance
802	123	15	Interval.java	checkPoint	tolerance	double	1	RET	point > lower + $
802	123	15	Interval.java	checkPoint	tolerance	double	1	RET	point < upper - $
808	94	8	IntervalsSet.java	buildTree	lower	double	0	RET	$ < 0
808	94	8	IntervalsSet.java	buildTree	lower	double	0	RET	Double.isInfinite($)
809	95	12	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
809	95	12	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
810	109	8	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
810	109	8	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
811	139	8	IntervalsSet.java	computeGeometricalProperties	THIS	IntervalsSet	1	DEF	$.getTree(false).getCut() == null
812	150	12	IntervalsSet.java	computeGeometricalProperties	size	double	1	DEF	Double.isInfinite($)
813	152	19	IntervalsSet.java	computeGeometricalProperties	size	double	1	DEF	$ >= Precision.SAFE_MIN
12440	169	8	IntervalsSet.java	getInf	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
12441	186	8	IntervalsSet.java	getSup	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
814	224	8	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	1	DEF	$.getCut() == null
815	225	12	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	0	DEF	(Boolean) $.getAttribute()
816	241	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(low, loc) == $.Location.INSIDE
816	241	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(high, loc) == $.Location.INSIDE
816	241	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(low, $) == Location.INSIDE
816	241	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(high, $) == Location.INSIDE
816	241	12	IntervalsSet.java	recurseList	low	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
816	241	12	IntervalsSet.java	recurseList	high	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
4291	76	8	IterativeLegendreGaussIntegrator.java	IterativeLegendreGaussIntegrator	n	int	0	NotStrictlyPositiveException	$ <= 0
4292	137	12	IterativeLegendreGaussIntegrator.java	doIntegrate	THIS	IterativeLegendreGaussIntegrator	0	RET	$.iterations.getCount() + 1 >= $.getMinimalIterationCount()
4292	137	12	IterativeLegendreGaussIntegrator.java	doIntegrate	delta	double	0	RET	$ <= limit
4292	137	12	IterativeLegendreGaussIntegrator.java	doIntegrate	limit	double	0	RET	delta <= $
14778	173	8	IterativeLegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
14778	173	8	IterativeLegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
1362	81	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != $.getColumnDimension()
1363	85	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	b.getDimension() != $.getRowDimension()
1363	85	8	IterativeLinearSolver.java	checkParameters	b	RealVector	0	DimensionMismatchException	$.getDimension() != a.getRowDimension()
1364	89	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	x0.getDimension() != $.getColumnDimension()
1364	89	8	IterativeLinearSolver.java	checkParameters	x0	RealVector	0	DimensionMismatchException	$.getDimension() != a.getColumnDimension()
1331	63	8	JacobiPreconditioner.java	create	n	int	0	NonSquareOperatorException	a.getRowDimension() != $
1331	63	8	JacobiPreconditioner.java	create	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != n
1332	67	8	JacobiPreconditioner.java	create	a	RealLinearOperator	1	DEF	$ instanceof AbstractRealMatrix
12655	69	12	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
12655	69	12	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
12656	74	12	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
12656	74	12	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
14641	48	8	JacobianFunction.java	value	THIS	JacobianFunction	0	NIL-FOR	i < point.$.length
14641	48	8	JacobianFunction.java	value	i	int	0	NIL-FOR	$ < point.length
14641	48	8	JacobianFunction.java	value	point	double[]	0	NIL-FOR	i < $.length
14642	58	8	JacobianFunction.java	value	THIS	JacobianFunction	0	NIL-FOR	i < dsY.$.length
14642	58	8	JacobianFunction.java	value	i	int	0	NIL-FOR	$ < dsY.length
14642	58	8	JacobianFunction.java	value	dsY	DerivativeStructure[]	0	NIL-FOR	i < $.length
14643	59	12	JacobianFunction.java	value	THIS	JacobianFunction	0	NIL-FOR	j < point.$.length
14643	59	12	JacobianFunction.java	value	j	int	0	NIL-FOR	$ < point.length
14643	59	12	JacobianFunction.java	value	point	double[]	0	NIL-FOR	j < $.length
3553	133	8	JacobianMatrices.java	JacobianMatrices	parameters	String	1	DEF	$ == null
14441	138	12	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < parameters.$.length
14441	138	12	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < parameters.length
14441	138	12	JacobianMatrices.java	JacobianMatrices	parameters	String	0	NIL-FOR	i < $.length
14442	150	8	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
14442	150	8	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < stateDim
3554	171	8	JacobianMatrices.java	registerVariationalEquations	ode	FirstOrderDifferentialEquations	0	MismatchedEquations	expandable.getPrimary() != $
3554	171	8	JacobianMatrices.java	registerVariationalEquations	expandable	ExpandableStatefulODE	0	MismatchedEquations	$.getPrimary() != ode
3555	217	12	JacobianMatrices.java	setParameterStep	THIS	JacobianMatrices	0	RET	parameter.equals($.param.getParameterName())
3555	217	12	JacobianMatrices.java	setParameterStep	parameter	String	0	RET	$.equals(param.getParameterName())
3556	250	8	JacobianMatrices.java	setInitialMainStateJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
3557	275	12	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	RET	pName.equals($.param.getParameterName())
3557	275	12	JacobianMatrices.java	setInitialParameterJacobian	pName	String	0	RET	$.equals(param.getParameterName())
3558	277	16	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
14443	298	8	JacobianMatrices.java	getCurrentMainSetJacobian	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
14443	298	8	JacobianMatrices.java	getCurrentMainSetJacobian	i	int	0	NIL-FOR	$ < stateDim
3559	316	12	JacobianMatrices.java	getCurrentParameterJacobian	THIS	JacobianMatrices	0	RET	$.param.getParameterName().equals(pName)
3559	316	12	JacobianMatrices.java	getCurrentParameterJacobian	pName	String	0	RET	param.getParameterName().equals($)
3560	333	8	JacobianMatrices.java	checkDimension	arrayDimension	int	0	DimensionMismatchException	$ != expected
3560	333	8	JacobianMatrices.java	checkDimension	expected	int	0	DimensionMismatchException	arrayDimension != $
3107	104	12	JacobianMultivariateVectorOptimizer.java	parseOptimizationData	THIS	JacobianMultivariateVectorOptimizer	0	DEF	$.data instanceof ModelFunctionJacobian
3271	203	8	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	NumberIsTooSmallException	points.size() < $.k
3271	203	8	KMeansPlusPlusClusterer.java	cluster	points	Collection<T>	0	NumberIsTooSmallException	$.size() < k
14236	217	8	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
14236	217	8	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
3272	222	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	1	ConvergenceException	$.cluster.getPoints().isEmpty()
3273	247	12	KMeansPlusPlusClusterer.java	cluster	emptyCluster	boolean	0	RET	$
3273	247	12	KMeansPlusPlusClusterer.java	cluster	changes	int	0	RET	$ == 0
3274	269	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	clusterIndex	int	0	DEF	$ != assignments[pointIndex]
3274	269	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	pointIndex	int	0	DEF	clusterIndex != assignments[$]
3274	269	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	assignments	int[]	0	DEF	clusterIndex != $[pointIndex]
14237	319	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
14237	319	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
3275	320	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	$ != firstPointIndex
3275	320	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	firstPointIndex	int	0	DEF	i != $
14238	326	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	THIS	KMeansPlusPlusClusterer	0	NIL-WHILE	resultSet.size() < $.k
14238	326	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<CentroidCluster<T>>	0	NIL-WHILE	$.size() < k
14239	332	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
14239	332	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
3276	333	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
3276	333	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
14240	348	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
14240	348	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
3277	349	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
3277	349	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
3278	351	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	sum >= $
3278	351	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	sum	double	0	DEF	$ >= r
3279	361	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	0	DEF	$ == -1
14241	362	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ >= 0
3280	363	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
3280	363	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
3281	371	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	1	DEF	$ >= 0
3282	380	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	THIS	KMeansPlusPlusClusterer	0	DEF	resultSet.size() < $.k
3282	380	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<CentroidCluster<T>>	0	DEF	$.size() < k
14242	383	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	NIL-FOR	$ < numPoints
14242	383	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	j < $
3283	385	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	taken[$]
3283	385	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[j]
3284	388	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	d2	double	0	DEF	$ < minDistSquared[j]
3284	388	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	d2 < minDistSquared[$]
3284	388	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	minDistSquared	double[]	0	DEF	d2 < $[j]
3285	419	12	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
3286	430	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	variance	double	0	DEF	$ > maxVariance
3286	430	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	maxVariance	double	0	DEF	variance > $
3287	439	8	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
3288	467	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	number	int	0	DEF	$ > maxNumber
3288	467	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	maxNumber	int	0	DEF	number > $
3289	475	8	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
14243	502	12	KMeansPlusPlusClusterer.java	getFarthestPoint	i	int	0	NIL-FOR	$ < points.size()
14243	502	12	KMeansPlusPlusClusterer.java	getFarthestPoint	points	List<T>	0	NIL-FOR	i < $.size()
3290	504	16	KMeansPlusPlusClusterer.java	getFarthestPoint	distance	double	0	DEF	$ > maxDistance
3290	504	16	KMeansPlusPlusClusterer.java	getFarthestPoint	maxDistance	double	0	DEF	distance > $
3291	514	8	KMeansPlusPlusClusterer.java	getFarthestPoint	selectedCluster	Cluster<T>	0	ConvergenceException	$ == null
3292	535	12	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
3292	535	12	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
14244	555	12	KMeansPlusPlusClusterer.java	centroidOf	THIS	KMeansPlusPlusClusterer	0	NIL-FOR	i < centroid.$.length
14244	555	12	KMeansPlusPlusClusterer.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
14244	555	12	KMeansPlusPlusClusterer.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
14245	559	8	KMeansPlusPlusClusterer.java	centroidOf	THIS	KMeansPlusPlusClusterer	0	NIL-FOR	i < centroid.$.length
14245	559	8	KMeansPlusPlusClusterer.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
14245	559	8	KMeansPlusPlusClusterer.java	centroidOf	centroid	double[]	0	NIL-FOR	i < $.length
13723	113	8	KMeansPlusPlusClusterer.java	cluster	i	int	0	NIL-FOR	$ < numTrials
13723	113	8	KMeansPlusPlusClusterer.java	cluster	numTrials	int	0	NIL-FOR	i < $
2446	121	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2447	134	12	KMeansPlusPlusClusterer.java	cluster	varianceSum	double	0	DEF	$ <= bestVarianceSum
2447	134	12	KMeansPlusPlusClusterer.java	cluster	bestVarianceSum	double	0	DEF	varianceSum <= $
2448	168	8	KMeansPlusPlusClusterer.java	cluster	points	Collection<T>	0	NumberIsTooSmallException	$.size() < k
2448	168	8	KMeansPlusPlusClusterer.java	cluster	k	int	0	NumberIsTooSmallException	points.size() < $
13724	182	8	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
13724	182	8	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
2449	187	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	1	ConvergenceException	$.cluster.getPoints().isEmpty()
2450	212	12	KMeansPlusPlusClusterer.java	cluster	emptyCluster	boolean	0	RET	$
2450	212	12	KMeansPlusPlusClusterer.java	cluster	changes	int	0	RET	$ == 0
2451	235	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	clusterIndex	int	0	DEF	$ != assignments[pointIndex]
2451	235	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	pointIndex	int	0	DEF	clusterIndex != assignments[$]
2451	235	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	assignments	int[]	0	DEF	clusterIndex != $[pointIndex]
13725	289	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
13725	289	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2452	290	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	$ != firstPointIndex
2452	290	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	firstPointIndex	int	0	DEF	i != $
13726	296	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	NIL-WHILE	$.size() < k
13726	296	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	NIL-WHILE	resultSet.size() < $
13727	302	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
13727	302	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2453	303	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2453	303	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
13728	318	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
13728	318	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2454	319	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2454	319	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2455	321	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	sum >= $
2455	321	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	sum	double	0	DEF	$ >= r
2456	331	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	0	DEF	$ == -1
13729	332	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ >= 0
2457	333	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2457	333	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2458	341	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	1	DEF	$ >= 0
2459	350	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	DEF	$.size() < k
2459	350	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	DEF	resultSet.size() < $
13730	353	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	NIL-FOR	$ < numPoints
13730	353	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	j < $
2460	355	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	taken[$]
2460	355	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[j]
2461	358	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	d2	double	0	DEF	$ < minDistSquared[j]
2461	358	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	d2 < minDistSquared[$]
2461	358	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	minDistSquared	double[]	0	DEF	d2 < $[j]
2462	389	12	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2463	400	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	variance	double	0	DEF	$ > maxVariance
2463	400	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	maxVariance	double	0	DEF	variance > $
2464	409	8	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
2465	436	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	number	int	0	DEF	$ > maxNumber
2465	436	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	maxNumber	int	0	DEF	number > $
2466	444	8	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
13731	471	12	KMeansPlusPlusClusterer.java	getFarthestPoint	i	int	0	NIL-FOR	$ < points.size()
13731	471	12	KMeansPlusPlusClusterer.java	getFarthestPoint	points	List<T>	0	NIL-FOR	i < $.size()
2467	473	16	KMeansPlusPlusClusterer.java	getFarthestPoint	distance	double	0	DEF	$ > maxDistance
2467	473	16	KMeansPlusPlusClusterer.java	getFarthestPoint	maxDistance	double	0	DEF	distance > $
2468	483	8	KMeansPlusPlusClusterer.java	getFarthestPoint	selectedCluster	Cluster<T>	0	ConvergenceException	$ == null
2469	506	12	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
2469	506	12	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
0	136	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getControlMatrix() == null
1	156	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialStateEstimate() == null
2	162	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	DimensionMismatchException	$.transitionMatrix.getColumnDimension() != $.stateEstimation.getDimension()
3	169	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialErrorCovariance() == null
4	178	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	NonSquareMatrixException	$.transitionMatrix.isSquare()
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() > 0
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix != null
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() > 0
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() != $.transitionMatrix.getRowDimension()
5	185	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() != 1
6	199	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.measurementMatrix.getColumnDimension() != $.transitionMatrix.getRowDimension()
7	207	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	measNoise.getRowDimension() != $.measurementMatrix.getRowDimension()
7	207	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
7	207	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != measurementMatrix.getRowDimension()
8	298	8	KalmanFilter.java	predict	THIS	KalmanFilter	0	DimensionMismatchException	u.getDimension() != $.controlMatrix.getColumnDimension()
8	298	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$ != null
8	298	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$.getDimension() != controlMatrix.getColumnDimension()
9	309	8	KalmanFilter.java	predict	u	RealVector	0	DEF	$ != null
10	354	8	KalmanFilter.java	correct	THIS	KalmanFilter	0	DimensionMismatchException	z.getDimension() != $.measurementMatrix.getRowDimension()
10	354	8	KalmanFilter.java	correct	z	RealVector	0	DimensionMismatchException	$.getDimension() != measurementMatrix.getRowDimension()
1269	86	8	KolmogorovSmirnovDistribution.java	KolmogorovSmirnovDistribution	n	int	0	NotStrictlyPositiveException	$ <= 0
1270	154	8	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	d <= $
1270	154	8	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninvhalf
1271	158	15	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	d <= $
1271	158	15	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	$ < d
1271	158	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	ninvhalf < $
1271	158	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninv
12516	164	12	KolmogorovSmirnovDistribution.java	cdf	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
12516	164	12	KolmogorovSmirnovDistribution.java	cdf	i	int	0	NIL-FOR	$ <= n
1272	170	15	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	1 - $ <= d
1272	170	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	1 - ninv <= $
1272	170	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ < 1
1273	174	15	KolmogorovSmirnovDistribution.java	cdf	d	double	0	RET	1 <= $
12517	203	8	KolmogorovSmirnovDistribution.java	exactK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
12517	203	8	KolmogorovSmirnovDistribution.java	exactK	i	int	0	NIL-FOR	$ <= n
12518	238	8	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ < m
12518	238	8	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	i < $
12519	239	12	KolmogorovSmirnovDistribution.java	roundedK	j	int	0	NIL-FOR	$ < m
12519	239	12	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	j < $
12520	248	8	KolmogorovSmirnovDistribution.java	roundedK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
12520	248	8	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ <= n
1274	274	8	KolmogorovSmirnovDistribution.java	createH	hDouble	double	0	NumberIsTooLargeException	$ >= 1
12521	295	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
12521	295	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
12522	296	12	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < m
12522	296	12	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	j < $
1275	297	16	KolmogorovSmirnovDistribution.java	createH	j	int	1	DEF	i - $ + 1 < 0
1275	297	16	KolmogorovSmirnovDistribution.java	createH	i	int	1	DEF	$ - j + 1 < 0
12523	311	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
12523	311	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
12524	318	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
12524	318	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
1276	328	8	KolmogorovSmirnovDistribution.java	createH	h	BigFraction	0	DEF	$.compareTo(BigFraction.ONE_HALF) == 1
12525	343	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
12525	343	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
12526	344	12	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < i + 1
12526	344	12	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	j < $ + 1
1277	345	16	KolmogorovSmirnovDistribution.java	createH	j	int	0	DEF	i - $ + 1 > 0
1277	345	16	KolmogorovSmirnovDistribution.java	createH	i	int	0	DEF	$ - j + 1 > 0
12527	346	20	KolmogorovSmirnovDistribution.java	createH	g	int	0	NIL-FOR	$ <= i - j + 1
12527	346	20	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	g <= i - $ + 1
12527	346	20	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	g <= $ - j + 1
2292	101	8	Kurtosis.java	increment	THIS	Kurtosis	0	DEF	$.incMoment
2293	112	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
2294	114	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
2294	114	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
2295	132	8	Kurtosis.java	clear	THIS	Kurtosis	0	DEF	$.incMoment
2296	167	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
2296	167	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2296	167	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
2296	167	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
2296	167	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
13682	178	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
13682	178	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
13682	178	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1304	87	8	LUDecomposition.java	LUDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
12533	100	8	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
12533	100	8	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
12534	107	8	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	$ < m
12534	107	8	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	col < $
12535	110	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < col
12535	110	12	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	row < $
12536	113	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < row
12536	113	16	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	i < $
12537	122	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
12537	122	12	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
12538	125	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < col
12538	125	16	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	i < $
1305	131	16	LUDecomposition.java	LUDecomposition	sum	double	0	DEF	FastMath.abs($) > largest
1305	131	16	LUDecomposition.java	LUDecomposition	largest	double	0	DEF	FastMath.abs(sum) > $
1306	138	12	LUDecomposition.java	LUDecomposition	THIS	LUDecomposition	0	RET	FastMath.abs($.lu[max][col]) < singularityThreshold
1306	138	12	LUDecomposition.java	LUDecomposition	max	int	0	RET	FastMath.abs(lu[$][col]) < singularityThreshold
1306	138	12	LUDecomposition.java	LUDecomposition	col	int	0	RET	FastMath.abs(lu[max][$]) < singularityThreshold
1306	138	12	LUDecomposition.java	LUDecomposition	singularityThreshold	double	0	RET	FastMath.abs(lu[max][col]) < $
1307	144	12	LUDecomposition.java	LUDecomposition	max	int	0	DEF	$ != col
1307	144	12	LUDecomposition.java	LUDecomposition	col	int	0	DEF	max != $
12539	148	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < m
12539	148	16	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	i < $
12540	161	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
12540	161	12	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
1308	173	8	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.cachedL == null
1308	173	8	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.singular
12541	176	12	LUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
12541	176	12	LUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
12542	178	16	LUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
12542	178	16	LUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1309	193	8	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.cachedU == null
1309	193	8	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.singular
12543	196	12	LUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
12543	196	12	LUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
12544	198	16	LUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
12544	198	16	LUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1310	216	8	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.singular
1310	216	8	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.cachedP == null
12545	219	12	LUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
12545	219	12	LUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1311	240	8	LUDecomposition.java	getDeterminant	THIS	LUDecomposition	1	RET	$.singular
12546	245	12	LUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
12546	245	12	LUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
4120	105	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
4120	105	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4121	111	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
4121	111	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4122	116	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
4122	116	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
4123	122	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
4123	122	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4124	127	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
4124	127	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
4125	161	8	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	1	RET	$.complexSolver.isRoot(lo, hi, z)
4125	161	8	LaguerreSolver.java	laguerre	z	Complex	1	RET	complexSolver.isRoot(lo, hi, $)
4125	161	8	LaguerreSolver.java	laguerre	lo	double	1	RET	complexSolver.isRoot($, hi, z)
4125	161	8	LaguerreSolver.java	laguerre	hi	double	1	RET	complexSolver.isRoot(lo, $, z)
14639	167	12	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
14639	167	12	LaguerreSolver.java	laguerre	i	int	0	NIL-FOR	$ < root.length
14639	167	12	LaguerreSolver.java	laguerre	root	Complex[]	0	NIL-FOR	i < $.length
4126	168	16	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	DEF	$.complexSolver.isRoot(lo, hi, root[i])
4126	168	16	LaguerreSolver.java	laguerre	i	int	0	DEF	complexSolver.isRoot(lo, hi, root[$])
4126	168	16	LaguerreSolver.java	laguerre	root	Complex[]	0	DEF	complexSolver.isRoot(lo, hi, $[i])
4126	168	16	LaguerreSolver.java	laguerre	lo	double	0	DEF	complexSolver.isRoot($, hi, root[i])
4126	168	16	LaguerreSolver.java	laguerre	hi	double	0	DEF	complexSolver.isRoot(lo, $, root[i])
2799	114	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != weights.$.length
2799	114	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != weights.length
2799	114	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DimensionMismatchException	observations.length != $.length
2800	148	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != scale.getColumnDimension()
2800	148	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != scale.getColumnDimension()
2800	148	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DimensionMismatchException	observations.length != $.getColumnDimension()
2801	161	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	DimensionMismatchException	residuals.$.length != $.observations.$.length
2801	161	8	LeastSquaresConverter.java	value	residuals	double[]	0	DimensionMismatchException	$.length != observations.length
13876	164	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
13876	164	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
13876	164	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
2802	170	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
13877	171	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
13877	171	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
13877	171	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
2803	175	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
1914	114	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != weights.$.length
1914	114	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != weights.length
1914	114	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DimensionMismatchException	observations.length != $.length
1915	144	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != scale.getColumnDimension()
1915	144	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != scale.getColumnDimension()
1915	144	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DimensionMismatchException	observations.length != $.getColumnDimension()
1916	157	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	DimensionMismatchException	residuals.$.length != $.observations.$.length
1916	157	8	LeastSquaresConverter.java	value	residuals	double[]	0	DimensionMismatchException	$.length != observations.length
13372	160	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
13372	160	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
13372	160	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1917	166	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
13373	167	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
13373	167	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
13373	167	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1918	171	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
4300	224	12	LegendreGaussIntegrator.java	doIntegrate	THIS	LegendreGaussIntegrator	0	RET	$.iterations.getCount() + 1 >= $.getMinimalIterationCount()
4300	224	12	LegendreGaussIntegrator.java	doIntegrate	delta	double	0	RET	$ <= limit
4300	224	12	LegendreGaussIntegrator.java	doIntegrate	limit	double	0	RET	delta <= $
14780	255	8	LegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
14780	255	8	LegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
14781	256	12	LegendreGaussIntegrator.java	stage	THIS	LegendreGaussIntegrator	0	NIL-FOR	j < $.abscissas.$.length
14781	256	12	LegendreGaussIntegrator.java	stage	j	int	0	NIL-FOR	$ < abscissas.length
4272	68	8	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	RET	$ == 1
14759	85	8	LegendreHighPrecisionRuleFactory.java	computeRule	i	int	0	NIL-FOR	$ < iMax
14759	85	8	LegendreHighPrecisionRuleFactory.java	computeRule	iMax	int	0	NIL-FOR	i < $
14760	98	12	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
14760	98	12	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
14761	136	12	LegendreHighPrecisionRuleFactory.java	computeRule	done	boolean	0	NIL-WHILE	$
14762	142	16	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
14762	142	16	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
4273	159	16	LegendreHighPrecisionRuleFactory.java	computeRule	done	boolean	0	DEF	$
4274	160	20	LegendreHighPrecisionRuleFactory.java	computeRule	pa	BigDecimal	1	DEF	$.signum() * pc.signum() <= 0
4274	160	20	LegendreHighPrecisionRuleFactory.java	computeRule	pc	BigDecimal	1	DEF	pa.signum() * $.signum() <= 0
4275	192	8	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	DEF	$ % 2 != 0
14763	194	12	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
14763	194	12	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
4283	39	8	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	RET	$ == 1
14771	56	8	LegendreRuleFactory.java	computeRule	i	int	0	NIL-FOR	$ < iMax
14771	56	8	LegendreRuleFactory.java	computeRule	iMax	int	0	NIL-FOR	i < $
14772	69	12	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
14772	69	12	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
14773	89	12	LegendreRuleFactory.java	computeRule	done	boolean	0	NIL-WHILE	$
14774	93	16	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
14774	93	16	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
4284	100	16	LegendreRuleFactory.java	computeRule	done	boolean	0	DEF	$
4285	101	20	LegendreRuleFactory.java	computeRule	pa	double	1	DEF	$ * pc <= 0
4285	101	20	LegendreRuleFactory.java	computeRule	pc	double	1	DEF	pa * $ <= 0
4286	127	8	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	DEF	$ % 2 != 0
14775	129	12	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
14775	129	12	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
14092	334	12	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
14092	334	12	LevenbergMarquardtOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
14093	343	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
14093	343	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
3066	348	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
14094	352	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
14094	352	16	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
3067	354	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
3068	369	12	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	$ != 0
14095	370	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
14095	370	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3069	373	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
14096	375	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
14096	375	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
3070	382	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
3070	382	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
14097	389	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
14097	389	12	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
14098	394	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
14099	397	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
14099	397	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
14100	414	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
14100	414	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3071	423	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
3072	435	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost < $
3072	435	16	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ < previousCost
14101	442	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
14101	442	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
14102	446	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
14102	446	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
14103	451	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
14103	451	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3073	464	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
3074	467	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
3074	467	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost >= $
3074	467	24	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ >= previousCost
3075	472	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
3075	472	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
3076	478	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	RET	$ >= 1.0e-4
14104	482	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
14104	482	20	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
3077	489	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	checker.converged($.getIterations(), previous, current)
3077	489	20	LevenbergMarquardtOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	checker.converged(getIterations(), $, current)
3077	489	20	LevenbergMarquardtOptimizer.java	doOptimize	current	PointVectorValuePair	0	RET	checker.converged(getIterations(), previous, $)
3077	489	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$ != null
3077	489	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$.converged(getIterations(), previous, current)
14105	496	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
14105	496	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
3078	511	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	FastMath.abs(actRed) <= $.costRelativeTolerance
3078	511	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
3078	511	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
3078	511	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
3078	511	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
3078	511	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
3078	511	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
3078	511	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
3079	520	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	ConvergenceException	FastMath.abs($) <= TWO_EPS
3079	520	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	ConvergenceException	$ <= TWO_EPS
3079	520	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	ConvergenceException	$ <= 2.0
3080	525	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	ConvergenceException	$ <= TWO_EPS * xNorm
3080	525	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	ConvergenceException	delta <= TWO_EPS * $
3081	528	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	ConvergenceException	$ <= TWO_EPS
14106	564	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
14106	564	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
14107	567	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < nC
14107	567	8	LevenbergMarquardtOptimizer.java	determineLMParameter	nC	int	0	NIL-FOR	j < $
14108	570	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
14109	573	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
14109	573	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
14110	582	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
14110	582	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
3082	590	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
3082	590	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
3083	600	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
14111	601	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
14111	601	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
14112	606	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
14112	606	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
14113	609	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
14113	609	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
14114	621	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
14114	621	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
14115	624	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
14115	624	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
3084	632	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
3085	639	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
14116	643	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
3086	646	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
14117	650	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
14117	650	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
14118	657	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
14118	657	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
3087	669	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
3087	669	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
3087	669	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
3087	669	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
3087	669	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
3087	669	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
14119	675	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
14119	675	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
14120	679	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
14120	679	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
14121	683	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
14121	683	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
14122	688	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
14122	688	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
3088	695	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
3089	697	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
14123	732	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
14123	732	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
14124	734	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
14124	734	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
14125	742	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
14125	742	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
3090	748	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
14126	757	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
14126	757	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
3091	762	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
3091	762	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
3092	767	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
3092	767	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
3092	767	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
14127	785	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
14127	785	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
14128	803	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
14128	803	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
3093	804	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
3093	804	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
3093	804	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
3093	804	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
3094	807	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
3094	807	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
3095	811	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
14129	812	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
14130	815	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
14130	815	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
14131	823	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
14131	823	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
14132	861	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
14132	861	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
14133	864	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nR
14133	864	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	i < $
14134	872	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
14134	872	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
14135	877	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nC
14135	877	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	i < $
14136	879	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
14136	879	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
3096	883	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isNaN($)
3096	883	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isInfinite($)
3097	887	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
3097	887	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
3098	892	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	RET	ak2 <= $.qrRankingThreshold
3098	892	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ <= qrRankingThreshold
14137	911	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
14138	913	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
14138	913	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
14139	917	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
14139	917	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
14140	934	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < nC
14140	934	8	LevenbergMarquardtOptimizer.java	qTy	nC	int	0	NIL-FOR	k < $
14141	937	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
14141	937	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
14142	941	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
14142	941	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
3099	952	8	LevenbergMarquardtOptimizer.java	checkParameters	THIS	LevenbergMarquardtOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
3099	952	8	LevenbergMarquardtOptimizer.java	checkParameters	THIS	LevenbergMarquardtOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
13374	326	12	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < nR
13374	326	12	LevenbergMarquardtOptimizer.java	doOptimize	nR	int	0	NIL-FOR	i < $
13375	335	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
13375	335	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
1919	340	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
13376	344	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
13376	344	16	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
1920	346	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
1921	361	12	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	$ != 0
13377	362	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
13377	362	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1922	365	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
13378	367	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
13378	367	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
1923	374	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
1923	374	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
13379	383	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < nC
13379	383	12	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	j < $
13380	388	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
13381	391	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
13381	391	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
13382	408	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
13382	408	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1924	417	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
1925	429	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost < $
1925	429	16	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ < previousCost
13383	436	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
13383	436	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
13384	440	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
13384	440	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
13385	445	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
13385	445	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1926	458	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
1927	461	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
1927	461	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * currentCost >= $
1927	461	24	LevenbergMarquardtOptimizer.java	doOptimize	currentCost	double	0	DEF	0.1 * $ >= previousCost
1928	466	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
1928	466	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
1929	472	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	RET	$ >= 1.0e-4
13386	476	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < nC
13386	476	20	LevenbergMarquardtOptimizer.java	doOptimize	nC	int	0	NIL-FOR	k < $
1930	483	20	LevenbergMarquardtOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	checker.converged(iter, $, current)
1930	483	20	LevenbergMarquardtOptimizer.java	doOptimize	current	PointVectorValuePair	0	RET	checker.converged(iter, previous, $)
1930	483	20	LevenbergMarquardtOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1930	483	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$.converged(iter, previous, current)
1930	483	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$ != null
13387	492	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
13387	492	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1931	507	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	FastMath.abs(actRed) <= $.costRelativeTolerance
1931	507	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
1931	507	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
1931	507	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
1931	507	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
1931	507	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
1931	507	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1931	507	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1932	519	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	ConvergenceException	FastMath.abs($) <= 2.2204e-16
1932	519	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	ConvergenceException	$ <= 2.2204e-16
1932	519	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	ConvergenceException	$ <= 2.0
1933	522	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	ConvergenceException	$ <= 2.2204e-16 * xNorm
1933	522	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	ConvergenceException	delta <= 2.2204e-16 * $
1934	525	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	ConvergenceException	$ <= 2.2204e-16
13388	561	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
13388	561	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
13389	564	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < nC
13389	564	8	LevenbergMarquardtOptimizer.java	determineLMParameter	nC	int	0	NIL-FOR	j < $
13390	567	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
13391	570	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
13391	570	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
13392	579	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
13392	579	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1935	587	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1935	587	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1936	597	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
13393	598	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
13393	598	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
13394	603	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
13394	603	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
13395	606	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
13395	606	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
13396	618	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
13396	618	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
13397	621	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
13397	621	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1937	629	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
1938	637	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
13398	641	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1939	644	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
13399	648	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
13399	648	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
13400	655	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
13400	655	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1940	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1940	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1940	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
1940	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1940	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
1940	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
13401	673	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
13401	673	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
13402	677	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
13402	677	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
13403	681	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
13403	681	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
13404	686	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
13404	686	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1941	693	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
1942	695	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
13405	730	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
13405	730	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
13406	732	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
13406	732	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
13407	740	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
13407	740	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1943	746	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
13408	755	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
13408	755	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1944	760	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1944	760	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1945	765	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
1945	765	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
1945	765	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
13409	783	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
13409	783	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
13410	801	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
13410	801	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1946	802	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
1946	802	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1946	802	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1946	802	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1947	805	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
1947	805	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1948	809	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
13411	810	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
13412	813	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
13412	813	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
13413	821	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
13413	821	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
13414	859	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
13414	859	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
13415	862	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nR
13415	862	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	i < $
13416	870	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < nC
13416	870	8	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	k < $
13417	875	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < nC
13417	875	12	LevenbergMarquardtOptimizer.java	qrDecomposition	nC	int	0	NIL-FOR	i < $
13418	877	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
13418	877	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
1949	881	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isNaN($)
1949	881	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isInfinite($)
1950	885	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1950	885	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1951	890	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	RET	ak2 <= $.qrRankingThreshold
1951	890	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ <= qrRankingThreshold
13419	909	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
13420	911	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
13420	911	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
13421	915	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < nR
13421	915	16	LevenbergMarquardtOptimizer.java	qrDecomposition	nR	int	0	NIL-FOR	j < $
13422	932	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < nC
13422	932	8	LevenbergMarquardtOptimizer.java	qTy	nC	int	0	NIL-FOR	k < $
13423	935	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
13423	935	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
13424	939	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < nR
13424	939	12	LevenbergMarquardtOptimizer.java	qTy	nR	int	0	NIL-FOR	i < $
1203	73	8	LevyDistribution.java	density	THIS	LevyDistribution	0	RET	x < $.mu
1203	73	8	LevyDistribution.java	density	x	double	0	RET	$ < mu
1204	91	8	LevyDistribution.java	cumulativeProbability	THIS	LevyDistribution	0	RET	x < $.mu
1204	91	8	LevyDistribution.java	cumulativeProbability	x	double	0	RET	$ < mu
1205	100	8	LevyDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1205	100	8	LevyDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
706	76	8	Line.java	reset	norm2	double	0	MathIllegalArgumentException	$ == 0.0
707	177	8	Line.java	distance	n	double	0	RET	$ < Precision.SAFE_MIN
708	197	8	Line.java	closestPoint	n	double	0	RET	$ < Precision.EPSILON
819	132	8	Line.java	reset	d	double	1	DEF	$ == 0.0
820	159	8	Line.java	revertSelf	THIS	Line	1	DEF	$.angle < FastMath.PI
821	199	8	Line.java	intersection	d	double	0	RET	FastMath.abs($) < 1.0e-10
13846	124	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
13846	124	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
13846	124	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
2729	188	8	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
2729	188	8	LinearConstraint.java	equals	other	Object	0	RET	this == $
2730	191	8	LinearConstraint.java	equals	other	Object	0	RET	$ instanceof LinearConstraint
13348	130	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
13348	130	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
13348	130	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
1866	192	6	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
1866	192	6	LinearConstraint.java	equals	other	Object	0	RET	this == $
1867	196	6	LinearConstraint.java	equals	other	Object	0	RET	$ instanceof LinearConstraint
3917	50	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
3917	50	8	LinearInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
3917	50	8	LinearInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
3918	54	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	NumberIsTooSmallException	x.$.length < 2
3918	54	8	LinearInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 2
14525	66	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
14525	66	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
14526	72	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
14526	72	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
2745	111	8	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
2745	111	8	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
2746	114	8	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ instanceof LinearObjectiveFunction
1883	109	6	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
1883	109	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
1884	113	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ instanceof LinearObjectiveFunction
2747	118	12	LinearOptimizer.java	parseOptimizationData	THIS	LinearOptimizer	0	DEF	$.data instanceof LinearObjectiveFunction
2748	122	12	LinearOptimizer.java	parseOptimizationData	THIS	LinearOptimizer	0	DEF	$.data instanceof LinearConstraintSet
2749	126	12	LinearOptimizer.java	parseOptimizationData	THIS	LinearOptimizer	0	DEF	$.data instanceof NonNegativeConstraint
3222	69	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NullArgumentException	$ == null
3223	72	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NotPositiveException	$ <= 0
3224	75	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
3224	75	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NumberIsTooLargeException	chromosomes.size() > $
3225	99	8	ListPopulation.java	setChromosomes	chromosomes	List<Chromosome>	0	NullArgumentException	$ == null
3226	102	8	ListPopulation.java	setChromosomes	THIS	ListPopulation	0	NumberIsTooLargeException	chromosomes.size() > $.populationLimit
3226	102	8	ListPopulation.java	setChromosomes	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
3227	118	8	ListPopulation.java	addChromosomes	THIS	ListPopulation	0	NumberIsTooLargeException	$.chromosomes.size() + chromosomeColl.size() > $.populationLimit
3227	118	8	ListPopulation.java	addChromosomes	chromosomeColl	Collection<Chromosome>	0	NumberIsTooLargeException	chromosomes.size() + $.size() > populationLimit
3228	150	8	ListPopulation.java	addChromosome	THIS	ListPopulation	0	NumberIsTooLargeException	$.chromosomes.size() >= $.populationLimit
3229	165	12	ListPopulation.java	getFittestChromosome	THIS	ListPopulation	0	DEF	$.chromosome.compareTo(bestChromosome) > 0
3229	165	12	ListPopulation.java	getFittestChromosome	bestChromosome	Chromosome	0	DEF	chromosome.compareTo($) > 0
3230	189	8	ListPopulation.java	setPopulationLimit	populationLimit	int	0	NotPositiveException	$ <= 0
3231	192	8	ListPopulation.java	setPopulationLimit	THIS	ListPopulation	0	NumberIsTooSmallException	populationLimit < $.chromosomes.size()
3231	192	8	ListPopulation.java	setPopulationLimit	populationLimit	int	0	NumberIsTooSmallException	$ < chromosomes.size()
3999	151	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ > 1
3999	151	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ < 0
4000	156	8	LoessInterpolator.java	LoessInterpolator	robustnessIters	int	0	NotPositiveException	$ < 0
4001	221	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
4001	221	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
4001	221	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
4002	227	8	LoessInterpolator.java	smooth	n	int	0	NoDataException	$ == 0
4003	237	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 1
4004	241	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 2
4005	247	8	LoessInterpolator.java	smooth	bandwidthInPoints	int	0	NumberIsTooSmallException	$ < 2
14606	264	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	NIL-FOR	iter <= $.robustnessIters
14606	264	8	LoessInterpolator.java	smooth	iter	int	0	NIL-FOR	$ <= robustnessIters
14607	267	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
14607	267	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
4006	272	16	LoessInterpolator.java	smooth	i	int	0	DEF	$ > 0
4007	282	16	LoessInterpolator.java	smooth	ileft	int	1	DEF	xval[i] - xval[$] > xval[iright] - xval[i]
4007	282	16	LoessInterpolator.java	smooth	iright	int	1	DEF	xval[i] - xval[ileft] > xval[$] - xval[i]
4007	282	16	LoessInterpolator.java	smooth	i	int	1	DEF	xval[$] - xval[ileft] > xval[iright] - xval[$]
4007	282	16	LoessInterpolator.java	smooth	xval	double[]	1	DEF	$[i] - $[ileft] > $[iright] - $[i]
14608	301	16	LoessInterpolator.java	smooth	k	int	0	NIL-FOR	$ <= iright
14608	301	16	LoessInterpolator.java	smooth	iright	int	0	NIL-FOR	k <= $
4008	320	16	LoessInterpolator.java	smooth	THIS	LoessInterpolator	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - meanX * meanX)) < $.accuracy
4008	320	16	LoessInterpolator.java	smooth	meanX	double	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
4008	320	16	LoessInterpolator.java	smooth	meanXSquared	double	1	DEF	FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
4009	334	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	iter == $.robustnessIters
4009	334	12	LoessInterpolator.java	smooth	iter	int	0	DEF	$ == robustnessIters
4010	347	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	FastMath.abs(medianResidual) < $.accuracy
4010	347	12	LoessInterpolator.java	smooth	medianResidual	double	0	DEF	FastMath.abs($) < accuracy
14609	351	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
14609	351	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
4011	353	16	LoessInterpolator.java	smooth	arg	double	1	DEF	$ >= 1
4012	388	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
4012	388	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
4012	388	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
4013	422	8	LoessInterpolator.java	updateBandwidthInterval	THIS	LoessInterpolator	0	DEF	nextRight < xval.$.length
4013	422	8	LoessInterpolator.java	updateBandwidthInterval	left	int	0	DEF	xval[nextRight] - xval[i] < xval[i] - xval[$]
4013	422	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	$ < xval.length
4013	422	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	xval[$] - xval[i] < xval[i] - xval[left]
4013	422	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	nextRight < $.length
4013	422	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	$[nextRight] - $[i] < $[i] - $[left]
4013	422	8	LoessInterpolator.java	updateBandwidthInterval	i	int	0	DEF	xval[nextRight] - xval[$] < xval[$] - xval[left]
14610	439	8	LoessInterpolator.java	nextNonzero	THIS	LoessInterpolator	0	NIL-WHILE	j < weights.$.length
14610	439	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	weights[$] == 0
14610	439	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	$ < weights.length
14610	439	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	$[j] == 0
14610	439	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	j < $.length
4014	455	8	LoessInterpolator.java	tricube	absX	double	0	RET	$ >= 1.0
14611	470	8	LoessInterpolator.java	checkAllFiniteReal	THIS	LoessInterpolator	0	NIL-FOR	i < values.$.length
14611	470	8	LoessInterpolator.java	checkAllFiniteReal	i	int	0	NIL-FOR	$ < values.length
14611	470	8	LoessInterpolator.java	checkAllFiniteReal	values	double[]	0	NIL-FOR	i < $.length
1291	132	8	LogNormalDistribution.java	LogNormalDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1292	171	8	LogNormalDistribution.java	density	x	double	0	RET	$ <= 0
1293	195	8	LogNormalDistribution.java	cumulativeProbability	x	double	0	RET	$ <= 0
1294	199	8	LogNormalDistribution.java	cumulativeProbability	THIS	LogNormalDistribution	0	RET	FastMath.abs(dev) > 40 * $.shape
1294	199	8	LogNormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * shape
1295	221	8	LogNormalDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1295	221	8	LogNormalDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
1296	225	8	LogNormalDistribution.java	probability	x0	double	0	RET	$ <= 0
1296	225	8	LogNormalDistribution.java	probability	x1	double	0	RET	$ <= 0
4035	72	8	Logistic.java	Logistic	n	double	0	NotStrictlyPositiveException	$ <= 0
4020	162	8	Logit.java	value	x	double	0	OutOfRangeException	$ > hi
4020	162	8	Logit.java	value	x	double	0	OutOfRangeException	$ < lo
4020	162	8	Logit.java	value	lo	double	0	OutOfRangeException	x < $
4020	162	8	Logit.java	value	hi	double	0	OutOfRangeException	x > $
4021	175	8	Logit.java	value	THIS	Logit	0	OutOfRangeException	x < $.lo
4021	175	8	Logit.java	value	THIS	Logit	0	OutOfRangeException	x > $.hi
4021	175	8	Logit.java	value	x	double	0	OutOfRangeException	$ < lo
4021	175	8	Logit.java	value	x	double	0	OutOfRangeException	$ > hi
4022	183	8	Logit.java	value	f	double[]	1	DEF	Double.isInfinite($[0])
4023	185	12	Logit.java	value	THIS	Logit	0	DEF	f.$.length > 1
4023	185	12	Logit.java	value	f	double[]	0	DEF	$.length > 1
14621	193	12	Logit.java	value	THIS	Logit	0	NIL-FOR	i < f.$.length
14621	193	12	Logit.java	value	i	int	0	NIL-FOR	$ < f.length
14621	193	12	Logit.java	value	f	double[]	0	NIL-FOR	i < $.length
14622	204	12	Logit.java	value	THIS	Logit	0	NIL-FOR	i < f.$.length
14622	204	12	Logit.java	value	i	int	0	NIL-FOR	$ < f.length
14622	204	12	Logit.java	value	f	double[]	0	NIL-FOR	i < $.length
2398	74	8	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
2398	74	8	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
2399	78	8	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	x.$.length == 0
2399	78	8	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	y.$.length == 0
2399	78	8	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
2399	78	8	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
13702	140	8	MannWhitneyUTest.java	mannWhitneyU	THIS	MannWhitneyUTest	0	NIL-FOR	i < x.$.length
13702	140	8	MannWhitneyUTest.java	mannWhitneyU	i	int	0	NIL-FOR	$ < x.length
13702	140	8	MannWhitneyUTest.java	mannWhitneyU	x	double[]	0	NIL-FOR	i < $.length
12354	87	8	MathArrays.java	scale	THIS	MathArrays	0	NIL-FOR	i < arr.$.length
12354	87	8	MathArrays.java	scale	i	int	0	NIL-FOR	$ < arr.length
12354	87	8	MathArrays.java	scale	arr	double[]	0	NIL-FOR	i < $.length
12355	103	8	MathArrays.java	scaleInPlace	THIS	MathArrays	0	NIL-FOR	i < arr.$.length
12355	103	8	MathArrays.java	scaleInPlace	i	int	0	NIL-FOR	$ < arr.length
12355	103	8	MathArrays.java	scaleInPlace	arr	double[]	0	NIL-FOR	i < $.length
113	120	8	MathArrays.java	ebeAdd	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
113	120	8	MathArrays.java	ebeAdd	a	double[]	0	DimensionMismatchException	$.length != b.length
113	120	8	MathArrays.java	ebeAdd	b	double[]	0	DimensionMismatchException	a.length != $.length
12356	125	8	MathArrays.java	ebeAdd	THIS	MathArrays	0	NIL-FOR	i < a.$.length
12356	125	8	MathArrays.java	ebeAdd	i	int	0	NIL-FOR	$ < a.length
12356	125	8	MathArrays.java	ebeAdd	a	double[]	0	NIL-FOR	i < $.length
114	142	8	MathArrays.java	ebeSubtract	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
114	142	8	MathArrays.java	ebeSubtract	a	double[]	0	DimensionMismatchException	$.length != b.length
114	142	8	MathArrays.java	ebeSubtract	b	double[]	0	DimensionMismatchException	a.length != $.length
12357	147	8	MathArrays.java	ebeSubtract	THIS	MathArrays	0	NIL-FOR	i < a.$.length
12357	147	8	MathArrays.java	ebeSubtract	i	int	0	NIL-FOR	$ < a.length
12357	147	8	MathArrays.java	ebeSubtract	a	double[]	0	NIL-FOR	i < $.length
115	164	8	MathArrays.java	ebeMultiply	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
115	164	8	MathArrays.java	ebeMultiply	a	double[]	0	DimensionMismatchException	$.length != b.length
115	164	8	MathArrays.java	ebeMultiply	b	double[]	0	DimensionMismatchException	a.length != $.length
12358	169	8	MathArrays.java	ebeMultiply	THIS	MathArrays	0	NIL-FOR	i < a.$.length
12358	169	8	MathArrays.java	ebeMultiply	i	int	0	NIL-FOR	$ < a.length
12358	169	8	MathArrays.java	ebeMultiply	a	double[]	0	NIL-FOR	i < $.length
116	186	8	MathArrays.java	ebeDivide	THIS	MathArrays	0	DimensionMismatchException	a.$.length != b.$.length
116	186	8	MathArrays.java	ebeDivide	a	double[]	0	DimensionMismatchException	$.length != b.length
116	186	8	MathArrays.java	ebeDivide	b	double[]	0	DimensionMismatchException	a.length != $.length
12359	191	8	MathArrays.java	ebeDivide	THIS	MathArrays	0	NIL-FOR	i < a.$.length
12359	191	8	MathArrays.java	ebeDivide	i	int	0	NIL-FOR	$ < a.length
12359	191	8	MathArrays.java	ebeDivide	a	double[]	0	NIL-FOR	i < $.length
12360	206	8	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
12360	206	8	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
12360	206	8	MathArrays.java	distance1	p1	double[]	0	NIL-FOR	i < $.length
12361	221	6	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
12361	221	6	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
12361	221	6	MathArrays.java	distance1	p1	int[]	0	NIL-FOR	i < $.length
12362	236	8	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
12362	236	8	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
12362	236	8	MathArrays.java	distance	p1	double[]	0	NIL-FOR	i < $.length
12363	252	6	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
12363	252	6	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
12363	252	6	MathArrays.java	distance	p1	int[]	0	NIL-FOR	i < $.length
12364	268	8	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
12364	268	8	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
12364	268	8	MathArrays.java	distanceInf	p1	double[]	0	NIL-FOR	i < $.length
12365	283	8	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
12365	283	8	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
12365	283	8	MathArrays.java	distanceInf	p1	int[]	0	NIL-FOR	i < $.length
12366	313	8	MathArrays.java	isMonotonic	i	int	0	NIL-FOR	$ < max
12366	313	8	MathArrays.java	isMonotonic	max	int	0	NIL-FOR	i < $
117	318	16	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
118	319	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
119	323	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
120	330	16	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
121	331	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
122	335	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
12367	381	8	MathArrays.java	checkOrder	max	int	0	NIL-FOR	index < $
12367	381	8	MathArrays.java	checkOrder	index	int	0	NIL-FOR	$ < max
123	384	16	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
124	385	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] <= $
124	385	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] <= previous
124	385	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] <= previous
125	389	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] < $
125	389	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] < previous
125	389	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] < previous
126	395	16	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
127	396	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] >= $
127	396	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] >= previous
127	396	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] >= previous
128	400	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] > $
128	400	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] > previous
128	400	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] > previous
129	413	8	MathArrays.java	checkOrder	max	int	0	RET	index == $
129	413	8	MathArrays.java	checkOrder	index	int	0	RET	$ == max
130	419	8	MathArrays.java	checkOrder	abort	boolean	1	NonMonotonicSequenceException	$
12368	462	8	MathArrays.java	checkRectangular	THIS	MathArrays	0	NIL-FOR	i < in.$.length
12368	462	8	MathArrays.java	checkRectangular	i	int	0	NIL-FOR	$ < in.length
12368	462	8	MathArrays.java	checkRectangular	in	long[][]	0	NIL-FOR	i < $.length
131	463	12	MathArrays.java	checkRectangular	THIS	MathArrays	0	DimensionMismatchException	in[i].length != in[0].length
131	463	12	MathArrays.java	checkRectangular	i	int	0	DimensionMismatchException	in[$].length != in[0].length
131	463	12	MathArrays.java	checkRectangular	in	long[][]	0	DimensionMismatchException	$[i].length != $[0].length
12369	481	8	MathArrays.java	checkPositive	THIS	MathArrays	0	NIL-FOR	i < in.$.length
12369	481	8	MathArrays.java	checkPositive	i	int	0	NIL-FOR	$ < in.length
12369	481	8	MathArrays.java	checkPositive	in	double[]	0	NIL-FOR	i < $.length
132	482	12	MathArrays.java	checkPositive	i	int	0	NotStrictlyPositiveException	in[$] <= 0
132	482	12	MathArrays.java	checkPositive	in	double[]	0	NotStrictlyPositiveException	$[i] <= 0
12370	497	8	MathArrays.java	checkNonNegative	THIS	MathArrays	0	NIL-FOR	i < in.$.length
12370	497	8	MathArrays.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
12370	497	8	MathArrays.java	checkNonNegative	in	long[]	0	NIL-FOR	i < $.length
133	498	12	MathArrays.java	checkNonNegative	i	int	0	NotPositiveException	in[$] < 0
133	498	12	MathArrays.java	checkNonNegative	in	long[]	0	NotPositiveException	$[i] < 0
12371	513	8	MathArrays.java	checkNonNegative	THIS	MathArrays	0	NIL-FOR	i < in.$.length
12371	513	8	MathArrays.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
12371	513	8	MathArrays.java	checkNonNegative	in	long[][]	0	NIL-FOR	i < $.length
12372	514	12	MathArrays.java	checkNonNegative	THIS	MathArrays	0	NIL-FOR	j < in[i].length
12372	514	12	MathArrays.java	checkNonNegative	j	int	0	NIL-FOR	$ < in[i].length
12372	514	12	MathArrays.java	checkNonNegative	i	int	0	NIL-FOR	j < in[$].length
12372	514	12	MathArrays.java	checkNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
134	515	16	MathArrays.java	checkNonNegative	j	int	0	NotPositiveException	in[i][$] < 0
134	515	16	MathArrays.java	checkNonNegative	i	int	0	NotPositiveException	in[$][j] < 0
134	515	16	MathArrays.java	checkNonNegative	in	long[][]	0	NotPositiveException	$[i][j] < 0
12373	592	8	MathArrays.java	safeNorm	THIS	MathArrays	0	NIL-FOR	i < v.$.length
12373	592	8	MathArrays.java	safeNorm	i	int	0	NIL-FOR	$ < v.length
12373	592	8	MathArrays.java	safeNorm	v	double[]	0	NIL-FOR	i < $.length
135	594	12	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > agiant
135	594	12	MathArrays.java	safeNorm	xabs	double	1	DEF	$ < rdwarf
135	594	12	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs < $
135	594	12	MathArrays.java	safeNorm	agiant	double	1	DEF	xabs > $
136	595	16	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > rdwarf
136	595	16	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs > $
137	596	20	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x1max
137	596	20	MathArrays.java	safeNorm	x1max	double	1	DEF	xabs > $
138	605	20	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x3max
138	605	20	MathArrays.java	safeNorm	x3max	double	1	DEF	xabs > $
139	610	24	MathArrays.java	safeNorm	xabs	double	0	DEF	$ != 0
140	621	8	MathArrays.java	safeNorm	s1	double	1	DEF	$ != 0
141	624	12	MathArrays.java	safeNorm	s2	double	1	DEF	$ == 0
142	627	16	MathArrays.java	safeNorm	s2	double	1	DEF	$ >= x3max
142	627	16	MathArrays.java	safeNorm	x3max	double	1	DEF	s2 >= $
143	682	8	MathArrays.java	sortInPlace	x	double[]	0	NullArgumentException	$ == null
12374	689	8	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
12374	689	8	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
144	691	12	MathArrays.java	sortInPlace	y	double[]	0	NullArgumentException	$ == null
145	694	12	MathArrays.java	sortInPlace	THIS	MathArrays	0	DimensionMismatchException	y.$.length != len
145	694	12	MathArrays.java	sortInPlace	y	double[]	0	DimensionMismatchException	$.length != len
145	694	12	MathArrays.java	sortInPlace	len	int	0	DimensionMismatchException	y.length != $
12375	702	8	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
12375	702	8	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
12376	728	8	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
12376	728	8	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
12377	736	8	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
12377	736	8	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
12378	741	12	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
12378	741	12	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
146	817	8	MathArrays.java	linearCombination	THIS	MathArrays	0	DimensionMismatchException	len != b.$.length
146	817	8	MathArrays.java	linearCombination	len	int	0	DimensionMismatchException	$ != b.length
146	817	8	MathArrays.java	linearCombination	b	double[]	0	DimensionMismatchException	len != $.length
12379	826	8	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
12379	826	8	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
12380	852	8	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < lenMinusOne
12380	852	8	MathArrays.java	linearCombination	lenMinusOne	int	0	NIL-FOR	i < $
147	862	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
12381	866	12	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
12381	866	12	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
148	942	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
149	1039	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
150	1158	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
151	1178	8	MathArrays.java	equals	x	float[]	0	RET	$ == null
151	1178	8	MathArrays.java	equals	y	float[]	0	RET	$ == null
152	1181	8	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
152	1181	8	MathArrays.java	equals	x	float[]	0	RET	$.length != y.length
152	1181	8	MathArrays.java	equals	y	float[]	0	RET	x.length != $.length
12382	1184	8	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
12382	1184	8	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
12382	1184	8	MathArrays.java	equals	x	float[]	0	NIL-FOR	i < $.length
153	1185	12	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$], y[$])
153	1185	12	MathArrays.java	equals	x	float[]	0	RET	Precision.equals($[i], y[i])
153	1185	12	MathArrays.java	equals	y	float[]	0	RET	Precision.equals(x[i], $[i])
154	1204	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$ == null
154	1204	8	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	$ == null
155	1207	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
155	1207	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$.length != y.length
155	1207	8	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	x.length != $.length
12383	1210	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
12383	1210	8	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
12383	1210	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	NIL-FOR	i < $.length
156	1211	12	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$], y[$])
156	1211	12	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	Precision.equalsIncludingNaN($[i], y[i])
156	1211	12	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	Precision.equalsIncludingNaN(x[i], $[i])
157	1229	8	MathArrays.java	equals	x	double[]	0	RET	$ == null
157	1229	8	MathArrays.java	equals	y	double[]	0	RET	$ == null
158	1232	8	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
158	1232	8	MathArrays.java	equals	x	double[]	0	RET	$.length != y.length
158	1232	8	MathArrays.java	equals	y	double[]	0	RET	x.length != $.length
12384	1235	8	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
12384	1235	8	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
12384	1235	8	MathArrays.java	equals	x	double[]	0	NIL-FOR	i < $.length
159	1236	12	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$], y[$])
159	1236	12	MathArrays.java	equals	x	double[]	0	RET	Precision.equals($[i], y[i])
159	1236	12	MathArrays.java	equals	y	double[]	0	RET	Precision.equals(x[i], $[i])
160	1255	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$ == null
160	1255	8	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	$ == null
161	1258	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
161	1258	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$.length != y.length
161	1258	8	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	x.length != $.length
12385	1261	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
12385	1261	8	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
12385	1261	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	NIL-FOR	i < $.length
162	1262	12	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$], y[$])
162	1262	12	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	Precision.equalsIncludingNaN($[i], y[i])
162	1262	12	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	Precision.equalsIncludingNaN(x[i], $[i])
163	1293	9	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isInfinite($)
164	1296	9	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isNaN($)
12386	1302	9	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
12386	1302	9	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
165	1303	13	MathArrays.java	normalizeArray	i	int	0	MathIllegalArgumentException	Double.isInfinite(values[$])
165	1303	13	MathArrays.java	normalizeArray	values	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
166	1306	13	MathArrays.java	normalizeArray	i	int	0	DEF	Double.isNaN(values[$])
166	1306	13	MathArrays.java	normalizeArray	values	double[]	0	DEF	Double.isNaN($[i])
167	1310	9	MathArrays.java	normalizeArray	sum	double	0	MathArithmeticException	$ == 0
12387	1313	9	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
12387	1313	9	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
168	1314	13	MathArrays.java	normalizeArray	i	int	1	DEF	Double.isNaN(values[$])
168	1314	13	MathArrays.java	normalizeArray	values	double[]	1	DEF	Double.isNaN($[i])
169	1355	9	MathArrays.java	buildArray	columns	int	1	DEF	$ < 0
12388	1363	13	MathArrays.java	buildArray	i	int	0	NIL-FOR	$ < rows
12388	1363	13	MathArrays.java	buildArray	rows	int	0	NIL-FOR	i < $
170	1401	9	MathArrays.java	convolve	xLen	int	0	NoDataException	$ == 0
170	1401	9	MathArrays.java	convolve	hLen	int	0	NoDataException	$ == 0
12389	1410	9	MathArrays.java	convolve	n	int	0	NIL-FOR	$ < totalLength
12389	1410	9	MathArrays.java	convolve	totalLength	int	0	NIL-FOR	n < $
12390	1414	13	MathArrays.java	convolve	k	int	0	NIL-WHILE	$ < hLen
12390	1414	13	MathArrays.java	convolve	j	int	0	NIL-WHILE	$ >= 0
12390	1414	13	MathArrays.java	convolve	hLen	int	0	NIL-WHILE	k < $
512	129	8	MathUtils.java	copySign	magnitude	byte	1	RET	$ >= 0
512	129	8	MathUtils.java	copySign	magnitude	byte	1	RET	$ < 0
512	129	8	MathUtils.java	copySign	sign	byte	1	RET	$ < 0
512	129	8	MathUtils.java	copySign	sign	byte	1	RET	$ >= 0
513	132	15	MathUtils.java	copySign	magnitude	byte	1	MathArithmeticException	$ == Byte.MIN_VALUE
513	132	15	MathUtils.java	copySign	sign	byte	1	MathArithmeticException	$ >= 0
514	152	8	MathUtils.java	copySign	magnitude	short	1	RET	$ < 0
514	152	8	MathUtils.java	copySign	magnitude	short	1	RET	$ >= 0
514	152	8	MathUtils.java	copySign	sign	short	1	RET	$ >= 0
514	152	8	MathUtils.java	copySign	sign	short	1	RET	$ < 0
515	155	15	MathUtils.java	copySign	magnitude	short	1	MathArithmeticException	$ == Short.MIN_VALUE
515	155	15	MathUtils.java	copySign	sign	short	1	MathArithmeticException	$ >= 0
516	175	8	MathUtils.java	copySign	magnitude	int	1	RET	$ >= 0
516	175	8	MathUtils.java	copySign	magnitude	int	1	RET	$ < 0
516	175	8	MathUtils.java	copySign	sign	int	1	RET	$ < 0
516	175	8	MathUtils.java	copySign	sign	int	1	RET	$ >= 0
517	178	15	MathUtils.java	copySign	magnitude	int	1	MathArithmeticException	$ == Integer.MIN_VALUE
517	178	15	MathUtils.java	copySign	sign	int	1	MathArithmeticException	$ >= 0
518	198	8	MathUtils.java	copySign	magnitude	long	1	RET	$ >= 0
518	198	8	MathUtils.java	copySign	magnitude	long	1	RET	$ < 0
518	198	8	MathUtils.java	copySign	sign	long	1	RET	$ < 0
518	198	8	MathUtils.java	copySign	sign	long	1	RET	$ >= 0
519	201	15	MathUtils.java	copySign	magnitude	long	1	MathArithmeticException	$ == Long.MIN_VALUE
519	201	15	MathUtils.java	copySign	sign	long	1	MathArithmeticException	$ >= 0
520	217	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
520	217	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
12413	231	8	MathUtils.java	checkFinite	THIS	MathUtils	0	NIL-FOR	i < val.$.length
12413	231	8	MathUtils.java	checkFinite	i	int	0	NIL-FOR	$ < val.length
12413	231	8	MathUtils.java	checkFinite	val	double[]	0	NIL-FOR	i < $.length
521	233	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
521	233	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
522	251	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
523	264	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
1587	130	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$ == null
1587	130	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$[0] == null
1588	159	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$[0] == null
1588	159	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$ == null
13012	177	8	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
13012	177	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
13013	198	8	MatrixUtils.java	createFieldIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
13013	198	8	MatrixUtils.java	createFieldIdentityMatrix	dimension	int	0	NIL-FOR	row < $
13014	216	8	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
13014	216	8	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
13014	216	8	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
13015	235	8	MatrixUtils.java	createFieldDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
13015	235	8	MatrixUtils.java	createFieldDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
13015	235	8	MatrixUtils.java	createFieldDiagonalMatrix	diagonal	T[]	0	NIL-FOR	i < $.length
1589	251	8	MatrixUtils.java	createRealVector	data	double[]	0	NullArgumentException	$ == null
1590	269	8	MatrixUtils.java	createFieldVector	data	T[]	0	NullArgumentException	$ == null
1591	272	8	MatrixUtils.java	createFieldVector	THIS	MatrixUtils	0	ZeroException	data.$.length == 0
1591	272	8	MatrixUtils.java	createFieldVector	data	T[]	0	ZeroException	$.length == 0
1592	289	8	MatrixUtils.java	createRowRealMatrix	rowData	double[]	0	NullArgumentException	$ == null
13016	294	8	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
13016	294	8	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
1593	313	8	MatrixUtils.java	createRowFieldMatrix	rowData	T[]	0	NullArgumentException	$ == null
1594	317	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
13017	321	8	MatrixUtils.java	createRowFieldMatrix	i	int	0	NIL-FOR	$ < nCols
13017	321	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NIL-FOR	i < $
1595	338	8	MatrixUtils.java	createColumnRealMatrix	columnData	double[]	0	NullArgumentException	$ == null
13018	343	8	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
13018	343	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
1596	362	8	MatrixUtils.java	createColumnFieldMatrix	columnData	T[]	0	NullArgumentException	$ == null
1597	366	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NoDataException	$ == 0
13019	370	8	MatrixUtils.java	createColumnFieldMatrix	i	int	0	NIL-FOR	$ < nRows
13019	370	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NIL-FOR	i < $
1598	391	8	MatrixUtils.java	isSymmetricInternal	rows	int	0	NonSquareMatrixException:RET	$ != matrix.getColumnDimension()
1598	391	8	MatrixUtils.java	isSymmetricInternal	matrix	RealMatrix	0	NonSquareMatrixException:RET	rows != $.getColumnDimension()
1599	392	12	MatrixUtils.java	isSymmetricInternal	raiseException	boolean	1	NonSquareMatrixException	$
13020	398	8	MatrixUtils.java	isSymmetricInternal	i	int	0	NIL-FOR	$ < rows
13020	398	8	MatrixUtils.java	isSymmetricInternal	rows	int	0	NIL-FOR	i < $
13021	399	12	MatrixUtils.java	isSymmetricInternal	j	int	0	NIL-FOR	$ < rows
13021	399	12	MatrixUtils.java	isSymmetricInternal	rows	int	0	NIL-FOR	j < $
1600	402	16	MatrixUtils.java	isSymmetricInternal	mij	double	0	NonSymmetricMatrixException:RET	FastMath.abs($ - mji) > FastMath.max(FastMath.abs($), FastMath.abs(mji)) * relativeTolerance
1600	402	16	MatrixUtils.java	isSymmetricInternal	mji	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - $) > FastMath.max(FastMath.abs(mij), FastMath.abs($)) * relativeTolerance
1600	402	16	MatrixUtils.java	isSymmetricInternal	relativeTolerance	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - mji) > FastMath.max(FastMath.abs(mij), FastMath.abs(mji)) * $
1601	404	20	MatrixUtils.java	isSymmetricInternal	raiseException	boolean	1	NonSymmetricMatrixException	$
1602	467	8	MatrixUtils.java	checkRowIndex	m	AnyMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1602	467	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1602	467	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= m.getRowDimension()
1603	483	8	MatrixUtils.java	checkColumnIndex	m	AnyMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1603	483	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1603	483	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= m.getColumnDimension()
1604	508	8	MatrixUtils.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1604	508	8	MatrixUtils.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1605	515	8	MatrixUtils.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1605	515	8	MatrixUtils.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1606	540	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1607	543	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1608	546	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedRows.$.length == 0
1608	546	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1609	549	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedColumns.$.length == 0
1609	549	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1610	571	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1610	571	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1610	571	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1610	571	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1611	588	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1611	588	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1611	588	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1611	588	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1612	606	8	MatrixUtils.java	checkMultiplicationCompatible	left	AnyMatrix	0	DimensionMismatchException	$.getColumnDimension() != right.getRowDimension()
1612	606	8	MatrixUtils.java	checkMultiplicationCompatible	right	AnyMatrix	0	DimensionMismatchException	left.getColumnDimension() != $.getRowDimension()
13022	745	8	MatrixUtils.java	serializeRealVector	i	int	0	NIL-FOR	$ < n
13022	745	8	MatrixUtils.java	serializeRealVector	n	int	0	NIL-FOR	i < $
13023	776	12	MatrixUtils.java	deserializeRealVector	i	int	0	NIL-FOR	$ < n
13023	776	12	MatrixUtils.java	deserializeRealVector	n	int	0	NIL-FOR	i < $
13024	848	8	MatrixUtils.java	serializeRealMatrix	i	int	0	NIL-FOR	$ < n
13024	848	8	MatrixUtils.java	serializeRealMatrix	n	int	0	NIL-FOR	i < $
13025	849	12	MatrixUtils.java	serializeRealMatrix	j	int	0	NIL-FOR	$ < m
13025	849	12	MatrixUtils.java	serializeRealMatrix	m	int	0	NIL-FOR	j < $
13026	882	12	MatrixUtils.java	deserializeRealMatrix	i	int	0	NIL-FOR	$ < n
13026	882	12	MatrixUtils.java	deserializeRealMatrix	n	int	0	NIL-FOR	i < $
13027	884	16	MatrixUtils.java	deserializeRealMatrix	j	int	0	NIL-FOR	$ < m
13027	884	16	MatrixUtils.java	deserializeRealMatrix	m	int	0	NIL-FOR	j < $
1613	930	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$.getRowDimension() != b.getDimension()
1613	930	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$ == null
1613	930	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	DimensionMismatchException	rm.getRowDimension() != $.getDimension()
1613	930	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	DimensionMismatchException	$ == null
1614	935	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
13028	940	8	MatrixUtils.java	solveLowerTriangularSystem	i	int	0	NIL-FOR	$ < rows
13028	940	8	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	i < $
1615	942	12	MatrixUtils.java	solveLowerTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
13029	947	12	MatrixUtils.java	solveLowerTriangularSystem	j	int	0	NIL-FOR	$< rows
13029	947	12	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	j< $
1616	975	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$ == null
1616	975	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	DimensionMismatchException	$.getRowDimension() != b.getDimension()
1616	975	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	DimensionMismatchException	$ == null
1616	975	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	DimensionMismatchException	rm.getRowDimension() != $.getDimension()
1617	980	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
13030	985	8	MatrixUtils.java	solveUpperTriangularSystem	i	int	0	NIL-FOR	$ >-1
1618	987	12	MatrixUtils.java	solveUpperTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
13031	992	12	MatrixUtils.java	solveUpperTriangularSystem	j	int	0	NIL-FOR	$>-1
1619	1013	8	MatrixUtils.java	blockInverse	n	int	0	NonSquareMatrixException	m.getColumnDimension() != $
1619	1013	8	MatrixUtils.java	blockInverse	m	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != n
1620	1027	8	MatrixUtils.java	blockInverse	aSolver	DecompositionSolver	0	SingularMatrixException	$.isNonSingular()
1621	1034	8	MatrixUtils.java	blockInverse	dSolver	DecompositionSolver	0	SingularMatrixException	$.isNonSingular()
1622	1042	8	MatrixUtils.java	blockInverse	tmp1Solver	DecompositionSolver	0	SingularMatrixException	$.isNonSingular()
1623	1050	8	MatrixUtils.java	blockInverse	tmp2Solver	DecompositionSolver	0	SingularMatrixException	$.isNonSingular()
2342	78	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
2342	78	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
2342	78	8	Max.java	increment	d	double	0	DEF	$ > value
2343	134	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
2343	134	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2343	134	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
2343	134	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
13688	136	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
13688	136	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
13688	136	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2344	137	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
2344	137	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
2779	36	8	MaxEval.java	MaxEval	max	int	0	NotStrictlyPositiveException	$ <= 0
2780	36	8	MaxIter.java	MaxIter	max	int	0	NotStrictlyPositiveException	$ <= 0
2273	114	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
2274	124	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
2275	163	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
2275	163	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
2275	163	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
2275	163	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
13674	172	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
13674	172	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
13674	172	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2276	211	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, weights, begin, length)
2276	211	8	Mean.java	evaluate	values	double[]	0	RET	test($, weights, begin, length)
2276	211	8	Mean.java	evaluate	weights	double[]	0	RET	test(values, $, begin, length)
2276	211	8	Mean.java	evaluate	begin	int	0	RET	test(values, weights, $, length)
2276	211	8	Mean.java	evaluate	length	int	0	RET	test(values, weights, begin, $)
13675	220	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
13675	220	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
13675	220	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
14178	147	8	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	NIL-FOR	$.mti < N
3147	167	8	MersenneTwister.java	setSeed	seed	int[]	0	RET	$ == null
14179	176	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
3148	182	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
3149	186	12	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	DEF	j >= seed.$.length
3149	186	12	MersenneTwister.java	setSeed	j	int	0	DEF	$ >= seed.length
3149	186	12	MersenneTwister.java	setSeed	seed	int[]	0	DEF	j >= $.length
14180	191	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
3150	197	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
3151	233	8	MersenneTwister.java	next	THIS	MersenneTwister	0	DEF	$.mti >= N
14181	235	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - M
14182	241	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - 1
3955	154	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$ == null
3955	154	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	NullArgumentException	$ == null
3956	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NoDataException	xval.$.length == 0
3956	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NoDataException	$.length == 0
3957	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xval.$.length != yval.$.length
3957	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	DimensionMismatchException	$.length != yval.length
3957	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3958	164	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$[0] == null
14550	173	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NIL-FOR	i < xval.$.length
14550	173	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < xval.length
14550	173	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NIL-FOR	i < $.length
3959	175	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	NullArgumentException	$ == null
3960	178	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xvalI.$.length != $.dimension
3960	178	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	DimensionMismatchException	$.length != dimension
14551	188	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < microsphereElements
14551	188	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	microsphereElements	int	0	NIL-FOR	i < $
3961	213	12	MicrosphereInterpolatingFunction.java	value	diffNorm	double	0	RET	FastMath.abs($) < FastMath.ulp(1d)
3962	232	12	MicrosphereInterpolatingFunction.java	value	sd	Entry<RealVector,Double>	0	DEF	$ != null
3987	77	8	MicrosphereInterpolator.java	MicrosphereInterpolator	exponent	int	0	NotPositiveException	$ < 0
3988	80	8	MicrosphereInterpolator.java	MicrosphereInterpolator	elements	int	0	NotStrictlyPositiveException	$ <= 0
4263	63	8	MidPointIntegrator.java	MidPointIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > MIDPOINT_MAX_ITERATIONS_COUNT
4264	85	8	MidPointIntegrator.java	MidPointIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > MIDPOINT_MAX_ITERATIONS_COUNT
14758	133	8	MidPointIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
14758	133	8	MidPointIntegrator.java	stage	np	long	0	NIL-FOR	i < $
4265	157	12	MidPointIntegrator.java	doIntegrate	THIS	MidPointIntegrator	0	RET	i >= $.getMinimalIterationCount()
4265	157	12	MidPointIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
4266	161	16	MidPointIntegrator.java	doIntegrate	THIS	MidPointIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
4266	161	16	MidPointIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
4266	161	16	MidPointIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
4266	161	16	MidPointIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
3506	92	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	1	DEF	$.previousState != null
3506	92	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
14406	95	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
14406	95	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
14407	104	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
14407	104	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2526	102	8	MillerUpdatingRegression.java	MillerUpdatingRegression	numberOfVariables	int	0	ModelSpecificationException	$ < 1
2527	105	8	MillerUpdatingRegression.java	MillerUpdatingRegression	includeConstant	boolean	1	DEF	$
13778	122	8	MillerUpdatingRegression.java	MillerUpdatingRegression	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
13778	122	8	MillerUpdatingRegression.java	MillerUpdatingRegression	i	int	0	NIL-FOR	$ < this.nvars
2528	125	8	MillerUpdatingRegression.java	MillerUpdatingRegression	errorTolerance	double	1	DEF	$ > 0
2529	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length + 1 != $.nvars
2529	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2529	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != $.nvars
2529	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2529	170	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length + 1 != nvars
2529	170	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length != nvars
2530	175	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
2531	195	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != y.$.length
2531	195	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
2531	195	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
2531	195	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
2531	195	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
2532	201	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length == 0
2532	201	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length == 0
2533	205	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x[0].length + 1 > x.$.length
2533	205	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$[0].length + 1 > $.length
13779	210	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
13779	210	8	MillerUpdatingRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
13779	210	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
13780	242	8	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
13780	242	8	MillerUpdatingRegression.java	include	i	int	0	NIL-FOR	$ < x.length
13780	242	8	MillerUpdatingRegression.java	include	x	double[]	0	NIL-FOR	i < $.length
2534	243	12	MillerUpdatingRegression.java	include	w	double	0	RET	$ == 0.0
2535	248	12	MillerUpdatingRegression.java	include	xi	double	0	DEF	$ == 0.0
2536	255	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2537	258	16	MillerUpdatingRegression.java	include	tmp	double	0	DEF	FastMath.abs($) > Precision.EPSILON
13781	266	12	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	k < $.nvars
13781	266	12	MillerUpdatingRegression.java	include	k	int	0	NIL-FOR	$ < nvars
2538	269	16	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2539	278	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2540	297	8	MillerUpdatingRegression.java	smartAdd	_a	double	1	RET	$ > _b
2540	297	8	MillerUpdatingRegression.java	smartAdd	_b	double	1	RET	_a > $
2541	299	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_b > $
2541	299	12	MillerUpdatingRegression.java	smartAdd	_b	double	0	RET	$ > eps
2542	305	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_a > $
2542	305	12	MillerUpdatingRegression.java	smartAdd	_a	double	0	RET	$ > eps
13782	326	8	MillerUpdatingRegression.java	clear	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
13782	326	8	MillerUpdatingRegression.java	clear	i	int	0	NIL-FOR	$ < nvars
13783	344	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
13783	344	8	MillerUpdatingRegression.java	tolset	i	int	0	NIL-FOR	$ < nvars
13784	348	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
13784	348	8	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	$ < nvars
13785	351	12	MillerUpdatingRegression.java	tolset	row	int	0	NIL-FOR	$ < col
13785	351	12	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	row < $
2543	373	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ < 1
2544	376	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	ModelSpecificationException	nreq > $.nvars
2544	376	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ > this.nvars
2545	380	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.tol_set
13786	385	8	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ > -1
2546	386	12	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[i]) < $.tol[i]
2546	386	12	MillerUpdatingRegression.java	regcf	i	int	1	DEF	Math.sqrt(d[$]) < tol[$]
13787	393	16	MillerUpdatingRegression.java	regcf	j	int	0	NIL-FOR	$ < nreq
13787	393	16	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	j < $
2547	399	8	MillerUpdatingRegression.java	regcf	rankProblem	boolean	0	DEF	$
13788	400	12	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ < nreq
13788	400	12	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	i < $
2548	401	16	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2548	401	16	MillerUpdatingRegression.java	regcf	i	int	0	DEF	this.lindep[$]
13789	415	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
13789	415	8	MillerUpdatingRegression.java	singcheck	i	int	0	NIL-FOR	$ < nvars
13790	418	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
13790	418	8	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	$ < nvars
13791	424	12	MillerUpdatingRegression.java	singcheck	row	int	0	NIL-FOR	$ < col - 1
13791	424	12	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	row < $ - 1
2549	425	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	Math.abs($.r[pos]) * $.work_sing[row] < temp
2549	425	16	MillerUpdatingRegression.java	singcheck	row	int	0	DEF	Math.abs(r[pos]) * work_sing[$] < temp
2549	425	16	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	Math.abs(r[pos]) * work_sing[row] < $
2549	425	16	MillerUpdatingRegression.java	singcheck	pos	int	0	DEF	Math.abs(r[$]) * work_sing[row] < temp
2550	434	12	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	$.work_sing[col] < temp
2550	434	12	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	work_sing[col] < $
2550	434	12	MillerUpdatingRegression.java	singcheck	col	int	0	DEF	work_sing[$] < temp
2551	436	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	1	DEF	col < $.nvars - 1
2551	436	16	MillerUpdatingRegression.java	singcheck	col	int	1	DEF	$ < nvars - 1
13792	439	20	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	_xi < $.nvars
13792	439	20	MillerUpdatingRegression.java	singcheck	_xi	int	0	NIL-FOR	$ < nvars
13793	467	8	MillerUpdatingRegression.java	ss	i	int	0	NIL-FOR	$ > 0
2552	493	8	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	RET	$.nobs <= nreq
2552	493	8	MillerUpdatingRegression.java	cov	nreq	int	0	RET	this.nobs <= $
13794	497	8	MillerUpdatingRegression.java	cov	i	int	0	NIL-FOR	$ < nreq
13794	497	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	i < $
2553	498	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2553	498	12	MillerUpdatingRegression.java	cov	i	int	0	DEF	this.lindep[$]
13795	511	8	MillerUpdatingRegression.java	cov	row	int	0	NIL-FOR	$ < nreq
13795	511	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	row < $
2554	513	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[row]
2554	513	12	MillerUpdatingRegression.java	cov	row	int	0	DEF	this.lindep[$]
13796	514	16	MillerUpdatingRegression.java	cov	col	int	0	NIL-FOR	$ < nreq
13796	514	16	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	col < $
2555	515	20	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	1	DEF	$.lindep[col]
2555	515	20	MillerUpdatingRegression.java	cov	col	int	1	DEF	this.lindep[$]
2556	517	24	MillerUpdatingRegression.java	cov	col	int	1	DEF	row == $
2556	517	24	MillerUpdatingRegression.java	cov	row	int	1	DEF	$ == col
13797	522	24	MillerUpdatingRegression.java	cov	k	int	0	NIL-FOR	$ < nreq
13797	522	24	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	k < $
2557	523	28	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2557	523	28	MillerUpdatingRegression.java	cov	k	int	0	DEF	this.lindep[$]
13798	553	8	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	$ > 0
2558	554	12	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	1	DEF	$.lindep[row]
2558	554	12	MillerUpdatingRegression.java	inverse	row	int	1	DEF	this.lindep[$]
13799	556	16	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	$ > row
13799	556	16	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	col > $
13800	560	20	MillerUpdatingRegression.java	inverse	k	int	0	NIL-FOR	$ < col - 1
13800	560	20	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	k < $ - 1
2559	562	24	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2559	562	24	MillerUpdatingRegression.java	inverse	k	int	0	DEF	this.lindep[$]
2560	622	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	RET	in >= $.nvars
2560	622	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ >= nvars
2560	622	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ < -1
2561	627	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	DEF	$.d[in] > 0.0
2561	627	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	DEF	d[$] > 0.0
13801	630	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
13801	630	8	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	$ < nvars
13802	633	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col
13802	633	12	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	row < $
2562	637	12	MillerUpdatingRegression.java	getPartialCorrelations	sumxx	double	1	DEF	$ > 0.0
13803	644	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	row < $.nvars
13803	644	8	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < nvars
2563	647	8	MillerUpdatingRegression.java	getPartialCorrelations	sumyy	double	0	DEF	$ > 0.0
13804	651	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col1 < $.nvars
13804	651	8	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	$ < nvars
13805	655	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col1
13805	655	12	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	row < $
13806	657	16	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
13806	657	16	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
13807	665	12	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
13807	665	12	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
2564	703	8	MillerUpdatingRegression.java	vmove	from	int	0	RET	$ == to
2564	703	8	MillerUpdatingRegression.java	vmove	to	int	0	RET	from == $
2565	706	8	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	$.rss_set
2566	710	8	MillerUpdatingRegression.java	vmove	from	int	1	DEF	$ < to
2566	710	8	MillerUpdatingRegression.java	vmove	to	int	1	DEF	from < $
13808	722	8	MillerUpdatingRegression.java	vmove	count	int	0	NIL-WHILE	idx < $
13808	722	8	MillerUpdatingRegression.java	vmove	idx	int	0	NIL-WHILE	$ < count
2567	730	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d1 > $.epsilon
2567	730	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 > $.epsilon
2567	730	12	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	$ > this.epsilon
2567	730	12	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ > this.epsilon
2568	732	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	Math.abs(X) * Math.sqrt(d1) < $.tol[mp1]
2568	732	16	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	Math.abs(X) * Math.sqrt($) < tol[mp1]
2568	732	16	MillerUpdatingRegression.java	vmove	mp1	int	0	DEF	Math.abs(X) * Math.sqrt(d1) < tol[$]
2569	735	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	Math.abs(X) < $.epsilon
2569	735	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	d1 < $.epsilon
2569	735	16	MillerUpdatingRegression.java	vmove	d1	double	1	DEF	$ < this.epsilon
13809	739	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
13809	739	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2570	751	23	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 < $.epsilon
2570	751	23	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ < this.epsilon
13810	754	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	_i < m1 + $.nvars - m - 1
13810	754	20	MillerUpdatingRegression.java	vmove	_i	int	0	NIL-FOR	$ < m1 + nvars - m - 1
13810	754	20	MillerUpdatingRegression.java	vmove	m1	int	0	NIL-FOR	_i < $ + nvars - m - 1
13810	754	20	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	_i < m1 + nvars - $ - 1
2571	761	16	MillerUpdatingRegression.java	vmove	bSkipTo40	boolean	0	DEF	$
13811	769	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
13811	769	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2572	781	12	MillerUpdatingRegression.java	vmove	m	int	0	DEF	$ > 0
13812	783	16	MillerUpdatingRegression.java	vmove	row	int	0	NIL-FOR	$ < m
13812	783	16	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	row < $
2573	824	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length > $.nvars + 1 - pos1
2573	824	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length < 1
2573	824	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length > nvars + 1 - pos1
2573	824	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length < 1
2573	824	8	MillerUpdatingRegression.java	reorderRegressors	pos1	int	0	RET	list.length > nvars + 1 - $
13813	829	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-WHILE	i < $.nvars
13813	829	8	MillerUpdatingRegression.java	reorderRegressors	i	int	0	NIL-WHILE	$ < nvars
13814	831	12	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-FOR	j < list.$.length
13814	831	12	MillerUpdatingRegression.java	reorderRegressors	j	int	0	NIL-FOR	$ < list.length
13814	831	12	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	NIL-FOR	j < $.length
2574	832	16	MillerUpdatingRegression.java	reorderRegressors	j	int	0	RET	l == list[$]
2574	832	16	MillerUpdatingRegression.java	reorderRegressors	next	int	0	RET	i > $
2574	832	16	MillerUpdatingRegression.java	reorderRegressors	i	int	0	RET	$ > next
2574	832	16	MillerUpdatingRegression.java	reorderRegressors	l	int	0	RET	$ == list[j]
2574	832	16	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	l == $[j]
2575	835	20	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	1	RET	next >= list.$.length + pos1
2575	835	20	MillerUpdatingRegression.java	reorderRegressors	next	int	1	RET	$ >= list.length + pos1
2575	835	20	MillerUpdatingRegression.java	reorderRegressors	list	int[]	1	RET	next >= $.length + pos1
2575	835	20	MillerUpdatingRegression.java	reorderRegressors	pos1	int	1	RET	next >= list.length + $
2576	858	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	RET	row_data.$.length > $.nvars
2576	858	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row_data	double[]	0	RET	$.length > nvars
2577	862	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
13815	870	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	NIL-FOR	col < xrow.$.length
13815	870	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	$ < xrow.length
13815	870	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	xrow	double[]	0	NIL-FOR	col < $.length
2578	871	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[col]) < $.tol[col]
2578	871	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	1	DEF	Math.sqrt(d[$]) < tol[$]
13816	876	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row	int	0	NIL-FOR	$ < col
13816	876	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	row < $
2579	920	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= numberOfRegressors
2579	920	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	this.nobs <= $
2580	925	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	numberOfRegressors > $.nvars
2580	925	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	$ > this.nvars
13817	940	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
13817	940	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2581	941	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2581	941	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
13818	947	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < numberOfRegressors
13818	947	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	i < $
2582	948	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != i
2582	948	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != $
2583	953	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
13819	962	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
13819	962	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < nvars
13820	963	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < numberOfRegressors
13820	963	16	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	j < $
2584	964	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == i
2584	964	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == i
2584	964	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == $
13821	975	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
13821	975	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
13821	975	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
13822	977	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
13822	977	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2585	979	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2585	979	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
2586	1006	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	variablesToInclude.$.length > $.nvars
2586	1006	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > this.nvars
2587	1010	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= $.nvars
13823	1017	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
13823	1017	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
13823	1017	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2588	1018	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	i >= $.nvars
2588	1018	12	MillerUpdatingRegression.java	regress	i	int	0	ModelSpecificationException	$ >= this.nvars
2589	1022	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	$ > 0
2589	1022	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] == variablesToInclude[$ - 1]
2589	1022	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] == $[i - 1]
2590	1028	8	MillerUpdatingRegression.java	regress	iExclude	int	1	DEF	$ > 0
13824	1031	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
13824	1031	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
13824	1031	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2591	1032	16	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] > -1
2591	1032	16	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] > -1
13825	1052	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
13825	1052	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2592	1053	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2592	1053	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
13826	1059	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
13826	1059	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.nvars
2593	1060	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != series[i]
2593	1060	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != series[$]
2593	1060	12	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[i] != $[i]
2594	1065	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
13827	1072	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < series.$.length
13827	1072	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < series.length
13827	1072	12	MillerUpdatingRegression.java	regress	series	int[]	0	NIL-FOR	i < $.length
13828	1073	16	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	j < $.vorder.length
13828	1073	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < this.vorder.length
2595	1074	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == series[i]
2595	1074	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == series[i]
2595	1074	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == series[$]
2595	1074	20	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[j] == $[i]
13829	1085	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
13829	1085	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
13829	1085	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
13830	1087	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
13830	1087	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2596	1089	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2596	1089	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
2339	78	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
2339	78	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
2339	78	8	Min.java	increment	d	double	0	DEF	$ < value
2340	134	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
2340	134	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2340	134	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
2340	134	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
13687	136	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
13687	136	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
13687	136	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2341	137	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
2341	137	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
12489	88	8	MixtureMultivariateNormalDistribution.java	createComponents	THIS	MixtureMultivariateNormalDistribution	0	NIL-FOR	i < weights.$.length
12489	88	8	MixtureMultivariateNormalDistribution.java	createComponents	i	int	0	NIL-FOR	$ < weights.length
12489	88	8	MixtureMultivariateNormalDistribution.java	createComponents	weights	double[]	0	NIL-FOR	i < $.length
12508	72	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	i	int	0	NIL-FOR	$ < numComp
12508	72	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	numComp	int	0	NIL-FOR	i < $
1238	74	12	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	comp	Pair<Double,T>	0	DimensionMismatchException	$.getSecond().getDimension() != dim
1238	74	12	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	dim	int	0	DimensionMismatchException	comp.getSecond().getDimension() != $
1239	77	12	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	comp	Pair<Double,T>	0	NotPositiveException	$.getFirst() < 0
1240	84	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	weightSum	double	0	MathArithmeticException	Double.isInfinite($)
12509	91	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	i	int	0	NIL-FOR	$ < numComp
12509	91	8	MixtureMultivariateRealDistribution.java	MixtureMultivariateRealDistribution	numComp	int	0	NIL-FOR	i < $
12510	101	8	MixtureMultivariateRealDistribution.java	density	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.weight.$.length
12510	101	8	MixtureMultivariateRealDistribution.java	density	i	int	0	NIL-FOR	$ < weight.length
12511	116	8	MixtureMultivariateRealDistribution.java	sample	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.weight.$.length
12511	116	8	MixtureMultivariateRealDistribution.java	sample	i	int	0	NIL-FOR	$ < weight.length
1241	118	12	MixtureMultivariateRealDistribution.java	sample	randomValue	double	0	DEF	$ <= sum
1241	118	12	MixtureMultivariateRealDistribution.java	sample	sum	double	0	DEF	randomValue <= $
1242	125	8	MixtureMultivariateRealDistribution.java	sample	vals	double[]	0	DEF	$ == null
12512	141	8	MixtureMultivariateRealDistribution.java	reseedRandomGenerator	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.distribution.size()
12512	141	8	MixtureMultivariateRealDistribution.java	reseedRandomGenerator	i	int	0	NIL-FOR	$ < distribution.size()
12513	156	8	MixtureMultivariateRealDistribution.java	getComponents	THIS	MixtureMultivariateRealDistribution	0	NIL-FOR	i < $.weight.$.length
12513	156	8	MixtureMultivariateRealDistribution.java	getComponents	i	int	0	NIL-FOR	$ < weight.length
4106	98	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMin) < $
4106	98	8	MullerSolver.java	doSolve	fMin	double	0	RET	FastMath.abs($) < functionValueAccuracy
4107	102	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMax) < $
4107	102	8	MullerSolver.java	doSolve	fMax	double	0	RET	FastMath.abs($) < functionValueAccuracy
4108	106	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fInitial) < $
4108	106	8	MullerSolver.java	doSolve	fInitial	double	0	RET	FastMath.abs($) < functionValueAccuracy
4109	112	8	MullerSolver.java	doSolve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial)
4109	112	8	MullerSolver.java	doSolve	min	double	1	RET	isBracketing($, initial)
4109	112	8	MullerSolver.java	doSolve	initial	double	1	RET	isBracketing(min, $)
4110	169	12	MullerSolver.java	solve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
4110	169	12	MullerSolver.java	solve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4110	169	12	MullerSolver.java	solve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
4110	169	12	MullerSolver.java	solve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
4110	169	12	MullerSolver.java	solve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
4111	182	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
4112	192	16	MullerSolver.java	solve	ym	double	1	DEF	FastMath.signum(y0) + FastMath.signum($) == 0.0
4112	192	16	MullerSolver.java	solve	y0	double	1	DEF	FastMath.signum($) + FastMath.signum(ym) == 0.0
4100	103	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y0) < $
4100	103	8	MullerSolver2.java	doSolve	y0	double	0	RET	FastMath.abs($) < functionValueAccuracy
4101	108	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y1) < $
4101	108	8	MullerSolver2.java	doSolve	y1	double	0	RET	FastMath.abs($) < functionValueAccuracy
4102	112	8	MullerSolver2.java	doSolve	y0	double	0	NoBracketingException	$ * y1 > 0
4102	112	8	MullerSolver2.java	doSolve	y1	double	0	NoBracketingException	y0 * $ > 0
4103	129	12	MullerSolver2.java	doSolve	delta	double	1	DEF	$ >= 0.0
4104	138	12	MullerSolver2.java	doSolve	denominator	double	1	DEF	$ != 0
14638	142	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x2
14638	142	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x1
14638	142	16	MullerSolver2.java	doSolve	x1	double	0	NIL-WHILE	x == $
14638	142	16	MullerSolver2.java	doSolve	x2	double	0	NIL-WHILE	x == $
4105	154	12	MullerSolver2.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
4105	154	12	MullerSolver2.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4105	154	12	MullerSolver2.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
4105	154	12	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
4105	154	12	MullerSolver2.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
2818	163	8	MultiDirectionalSimplex.java	iterate	best	PointValuePair	0	RET	comparator.compare(reflected, $) < 0
2818	163	8	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare($, best) < 0
2818	163	8	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(reflected, best) < 0
2819	168	12	MultiDirectionalSimplex.java	iterate	expanded	PointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
2819	168	12	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	DEF	comparator.compare($, expanded) <= 0
2819	168	12	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
13889	202	8	MultiDirectionalSimplex.java	evaluateNewSimplex	THIS	MultiDirectionalSimplex	0	NIL-FOR	i < $.getSize()
13889	202	8	MultiDirectionalSimplex.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ < getSize()
13890	205	12	MultiDirectionalSimplex.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < dim
13890	205	12	MultiDirectionalSimplex.java	evaluateNewSimplex	dim	int	0	NIL-FOR	j < $
1989	166	8	MultiDirectionalSimplex.java	iterate	best	PointValuePair	0	RET	comparator.compare(reflected, $) < 0
1989	166	8	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare($, best) < 0
1989	166	8	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(reflected, best) < 0
1990	171	12	MultiDirectionalSimplex.java	iterate	expanded	PointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
1990	171	12	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	DEF	comparator.compare($, expanded) <= 0
1990	171	12	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
13459	205	8	MultiDirectionalSimplex.java	evaluateNewSimplex	THIS	MultiDirectionalSimplex	0	NIL-FOR	i < $.getSize()
13459	205	8	MultiDirectionalSimplex.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ < getSize()
13460	208	12	MultiDirectionalSimplex.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < dim
13460	208	12	MultiDirectionalSimplex.java	evaluateNewSimplex	dim	int	0	NIL-FOR	j < $
14235	88	8	MultiKMeansPlusPlusClusterer.java	cluster	THIS	MultiKMeansPlusPlusClusterer	0	NIL-FOR	i < $.numTrials
14235	88	8	MultiKMeansPlusPlusClusterer.java	cluster	i	int	0	NIL-FOR	$ < numTrials
3269	96	16	MultiKMeansPlusPlusClusterer.java	cluster	THIS	MultiKMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
3270	109	12	MultiKMeansPlusPlusClusterer.java	cluster	varianceSum	double	0	DEF	$ <= bestVarianceSum
3270	109	12	MultiKMeansPlusPlusClusterer.java	cluster	bestVarianceSum	double	0	DEF	varianceSum <= $
2722	81	8	MultiStartUnivariateOptimizer.java	MultiStartUnivariateOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
2723	119	8	MultiStartUnivariateOptimizer.java	getOptima	THIS	MultiStartUnivariateOptimizer	0	MathIllegalStateException	$.optima == null
13844	147	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	NIL-FOR	i < $.optimData.$.length
13844	147	8	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < optimData.length
2724	148	12	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	DEF	$.optimData[i] instanceof MaxEval
2724	148	12	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof MaxEval
2725	153	12	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	DEF	$.optimData[i] instanceof SearchInterval
2725	153	12	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	DEF	optimData[$] instanceof SearchInterval
2726	159	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	MathIllegalStateException	$.maxEvalIndex == -1
2727	162	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	MathIllegalStateException	$.searchIntervalIndex == -1
13845	176	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	NIL-FOR	i < $.starts
13845	176	8	MultiStartUnivariateOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < starts
2728	199	8	MultiStartUnivariateOptimizer.java	doOptimize	THIS	MultiStartUnivariateOptimizer	0	DEF	$.optima[0] == null
12348	173	8	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
12348	173	8	MultidimensionalCounter.java	MultidimensionalCounter	i	int	0	NIL-FOR	$ < last
12349	175	12	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	j < $.dimension
12349	175	12	MultidimensionalCounter.java	MultidimensionalCounter	j	int	0	NIL-FOR	$ < dimension
109	183	8	MultidimensionalCounter.java	MultidimensionalCounter	tS	int	0	NotStrictlyPositiveException	$ <= 0
110	217	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.totalSize
110	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ >= totalSize
110	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ < 0
12350	225	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
12350	225	8	MultidimensionalCounter.java	getCounts	i	int	0	NIL-FOR	$ < last
12351	228	12	MultidimensionalCounter.java	getCounts	count	int	0	NIL-WHILE	$ <= index
12351	228	12	MultidimensionalCounter.java	getCounts	index	int	0	NIL-WHILE	count <= $
111	255	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	DimensionMismatchException	c.$.length != $.dimension
111	255	8	MultidimensionalCounter.java	getCount	c	int	0	DimensionMismatchException	$.length != dimension
12352	259	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
12352	259	8	MultidimensionalCounter.java	getCount	i	int	0	NIL-FOR	$ < dimension
112	261	12	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.size[i]
112	261	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ >= size[i]
112	261	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ < 0
112	261	12	MultidimensionalCounter.java	getCount	i	int	0	OutOfRangeException	index >= size[$]
12353	293	8	MultidimensionalCounter.java	toString	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
12353	293	8	MultidimensionalCounter.java	toString	i	int	0	NIL-FOR	$ < dimension
3582	120	8	MultistepIntegrator.java	MultistepIntegrator	nSteps	int	0	NumberIsTooSmallException	$ < 2
3583	232	12	MultistepIntegrator.java	start	THIS	MultistepIntegrator	1	DEF	$.starter instanceof AbstractIntegrator
3050	104	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
3050	104	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
3050	104	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
14080	107	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < lower.$.length
14080	107	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < lower.length
14080	107	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NIL-FOR	i < $.length
3051	109	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
3051	109	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
3051	109	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
14081	116	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
14081	116	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < mappers.length
3052	117	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(lower[$])
3052	117	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	1	DEF	Double.isInfinite($[i])
3053	118	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
3053	118	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
3054	126	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
3054	126	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
14082	146	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
14082	146	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	i	int	0	NIL-FOR	$ < mappers.length
14083	162	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
14083	162	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	i	int	0	NIL-FOR	$ < mappers.length
2228	105	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
2228	105	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
2228	105	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
13654	108	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < lower.$.length
13654	108	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < lower.length
13654	108	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NIL-FOR	i < $.length
2229	110	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
2229	110	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
2229	110	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
13655	117	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
13655	117	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < mappers.length
2230	118	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(lower[$])
2230	118	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	1	DEF	Double.isInfinite($[i])
2231	119	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
2231	119	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
2232	127	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
2232	127	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
13656	147	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
13656	147	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	i	int	0	NIL-FOR	$ < mappers.length
13657	163	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
13657	163	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	i	int	0	NIL-FOR	$ < mappers.length
3044	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
3044	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
3044	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
3045	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != scale.$.length
3045	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != scale.length
3045	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	scale	double[]	0	DimensionMismatchException	lower.length != $.length
14077	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < lower.$.length
14077	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NIL-FOR	$ < lower.length
14077	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NIL-FOR	i < $.length
3046	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
3046	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
3046	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
14078	164	8	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < $.scale.$.length
14078	164	8	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	NIL-FOR	$ < scale.length
3047	165	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] > $.upper[i]
3047	165	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] < $.lower[i]
3047	165	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] > upper[$]
3047	165	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] < lower[$]
3047	165	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] > upper[i]
3047	165	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] < lower[i]
14079	168	16	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	j < $.scale.$.length
14079	168	16	MultivariateFunctionPenaltyAdapter.java	value	j	int	0	NIL-FOR	$ < scale.length
3048	170	20	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] < $.lower[j]
3048	170	20	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] < lower[$]
3048	170	20	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] < lower[j]
3049	172	27	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] > $.upper[j]
3049	172	27	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] > upper[$]
3049	172	27	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] > upper[j]
2222	133	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
2222	133	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
2222	133	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
2223	136	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != scale.$.length
2223	136	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != scale.length
2223	136	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	scale	double[]	0	DimensionMismatchException	lower.length != $.length
13651	139	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < lower.$.length
13651	139	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NIL-FOR	$ < lower.length
13651	139	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NIL-FOR	i < $.length
2224	141	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
2224	141	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
2224	141	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
13652	166	8	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < $.scale.$.length
13652	166	8	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	NIL-FOR	$ < scale.length
2225	167	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] > $.upper[i]
2225	167	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] < $.lower[i]
2225	167	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] > upper[$]
2225	167	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] < lower[$]
2225	167	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] > upper[i]
2225	167	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] < lower[i]
13653	170	16	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	j < $.scale.$.length
13653	170	16	MultivariateFunctionPenaltyAdapter.java	value	j	int	0	NIL-FOR	$ < scale.length
2226	172	20	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] < $.lower[j]
2226	172	20	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] < lower[$]
2226	172	20	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] < lower[j]
2227	174	27	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] > $.upper[j]
2227	174	27	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] > upper[$]
2227	174	27	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] > upper[j]
1099	107	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	covariances.$.length != dim
1099	107	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	DimensionMismatchException	covariances.length != $
1099	107	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covariances	double[][]	0	DimensionMismatchException	$.length != dim
12469	111	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NIL-FOR	$ < dim
12469	111	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	i < $
1100	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	dim != covariances[i].length
1100	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	DimensionMismatchException	dim != covariances[$].length
1100	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	DimensionMismatchException	$ != covariances[i].length
1100	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covariances	double[][]	0	DimensionMismatchException	dim != $[i].length
12470	132	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < covMatEigenvalues.$.length
12470	132	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NIL-FOR	$ < covMatEigenvalues.length
12470	132	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covMatEigenvalues	double[]	0	NIL-FOR	i < $.length
1101	133	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NonPositiveDefiniteMatrixException	covMatEigenvalues[$] < 0
1101	133	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covMatEigenvalues	double[]	0	NonPositiveDefiniteMatrixException	$[i] < 0
12471	140	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	v	int	0	NIL-FOR	$ < dim
12471	140	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	v < $
12472	148	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	row	int	0	NIL-FOR	$ < dim
12472	148	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	row < $
12473	150	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	col	int	0	NIL-FOR	$ < dim
12473	150	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	col < $
1102	179	8	MultivariateNormalDistribution.java	density	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	vals.$.length != dim
1102	179	8	MultivariateNormalDistribution.java	density	dim	int	0	DimensionMismatchException	vals.length != $
1102	179	8	MultivariateNormalDistribution.java	density	vals	double[]	0	DimensionMismatchException	$.length != dim
12474	198	8	MultivariateNormalDistribution.java	getStandardDeviations	i	int	0	NIL-FOR	$ < dim
12474	198	8	MultivariateNormalDistribution.java	getStandardDeviations	dim	int	0	NIL-FOR	i < $
12475	209	8	MultivariateNormalDistribution.java	sample	i	int	0	NIL-FOR	$ < dim
12475	209	8	MultivariateNormalDistribution.java	sample	dim	int	0	NIL-FOR	i < $
12476	215	8	MultivariateNormalDistribution.java	sample	i	int	0	NIL-FOR	$ < dim
12476	215	8	MultivariateNormalDistribution.java	sample	dim	int	0	NIL-FOR	i < $
12477	230	8	MultivariateNormalDistribution.java	getExponentTerm	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < centered.$.length
12477	230	8	MultivariateNormalDistribution.java	getExponentTerm	i	int	0	NIL-FOR	$ < centered.length
12477	230	8	MultivariateNormalDistribution.java	getExponentTerm	centered	double[]	0	NIL-FOR	i < $.length
12478	235	8	MultivariateNormalDistribution.java	getExponentTerm	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < preMultiplied.$.length
12478	235	8	MultivariateNormalDistribution.java	getExponentTerm	i	int	0	NIL-FOR	$ < preMultiplied.length
12478	235	8	MultivariateNormalDistribution.java	getExponentTerm	preMultiplied	double[]	0	NIL-FOR	i < $.length
1180	89	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	NotStrictlyPositiveException	data.$.length < 1
1180	89	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	NotStrictlyPositiveException	$.length < 1
12490	95	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	NIL-FOR	i < data.$.length
12490	95	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	i	int	0	NIL-FOR	$ < data.length
12490	95	8	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	NIL-FOR	i < $.length
1181	96	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	DimensionMismatchException	data[i].length != data[0].length
1181	96	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	i	int	0	DimensionMismatchException	data[$].length != data[0].length
1181	96	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	DimensionMismatchException	$[i].length != $[0].length
1182	101	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	THIS	MultivariateNormalMixtureExpectationMaximization	0	NumberIsTooSmallException	data[i].length < 2
1182	101	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	i	int	0	NumberIsTooSmallException	data[$].length < 2
1182	101	12	MultivariateNormalMixtureExpectationMaximization.java	MultivariateNormalMixtureExpectationMaximization	data	double[][]	0	NumberIsTooSmallException	$[i].length < 2
1183	137	8	MultivariateNormalMixtureExpectationMaximization.java	fit	maxIterations	int	0	NotStrictlyPositiveException	$ < 1
1184	141	8	MultivariateNormalMixtureExpectationMaximization.java	fit	threshold	double	0	NotStrictlyPositiveException	$ < Double.MIN_VALUE
1185	155	8	MultivariateNormalMixtureExpectationMaximization.java	fit	numCols	int	0	DimensionMismatchException	numMeanColumns != $
1185	155	8	MultivariateNormalMixtureExpectationMaximization.java	fit	numMeanColumns	int	0	DimensionMismatchException	$ != numCols
12491	167	8	MultivariateNormalMixtureExpectationMaximization.java	fit	THIS	MultivariateNormalMixtureExpectationMaximization	0	NIL-WHILE	Math.abs(previousLogLikelihood - $.logLikelihood) > threshold
12491	167	8	MultivariateNormalMixtureExpectationMaximization.java	fit	numIterations	int	0	NIL-WHILE	$++ <= maxIterations
12491	167	8	MultivariateNormalMixtureExpectationMaximization.java	fit	previousLogLikelihood	double	0	NIL-WHILE	Math.abs($ - logLikelihood) > threshold
12491	167	8	MultivariateNormalMixtureExpectationMaximization.java	fit	maxIterations	int	0	NIL-WHILE	numIterations++ <= $
12491	167	8	MultivariateNormalMixtureExpectationMaximization.java	fit	threshold	double	0	NIL-WHILE	Math.abs(previousLogLikelihood - logLikelihood) > $
12492	181	12	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
12492	181	12	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
12493	198	12	MultivariateNormalMixtureExpectationMaximization.java	fit	i	int	0	NIL-FOR	$ < n
12493	198	12	MultivariateNormalMixtureExpectationMaximization.java	fit	n	int	0	NIL-FOR	i < $
12494	202	16	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
12494	202	16	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
12495	206	20	MultivariateNormalMixtureExpectationMaximization.java	fit	col	int	0	NIL-FOR	$ < numCols
12495	206	20	MultivariateNormalMixtureExpectationMaximization.java	fit	numCols	int	0	NIL-FOR	col < $
12496	219	12	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
12496	219	12	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
12497	221	16	MultivariateNormalMixtureExpectationMaximization.java	fit	col	int	0	NIL-FOR	$ < numCols
12497	221	16	MultivariateNormalMixtureExpectationMaximization.java	fit	numCols	int	0	NIL-FOR	col < $
12498	228	12	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
12498	228	12	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
12499	231	12	MultivariateNormalMixtureExpectationMaximization.java	fit	i	int	0	NIL-FOR	$ < n
12499	231	12	MultivariateNormalMixtureExpectationMaximization.java	fit	n	int	0	NIL-FOR	i < $
12500	232	16	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
12500	232	16	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
12501	243	12	MultivariateNormalMixtureExpectationMaximization.java	fit	j	int	0	NIL-FOR	$ < k
12501	243	12	MultivariateNormalMixtureExpectationMaximization.java	fit	k	int	0	NIL-FOR	j < $
1186	254	8	MultivariateNormalMixtureExpectationMaximization.java	fit	THIS	MultivariateNormalMixtureExpectationMaximization	0	ConvergenceException	Math.abs(previousLogLikelihood - $.logLikelihood) > threshold
1186	254	8	MultivariateNormalMixtureExpectationMaximization.java	fit	previousLogLikelihood	double	0	ConvergenceException	Math.abs($ - logLikelihood) > threshold
1186	254	8	MultivariateNormalMixtureExpectationMaximization.java	fit	threshold	double	0	ConvergenceException	Math.abs(previousLogLikelihood - logLikelihood) > $
1187	305	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	THIS	MultivariateNormalMixtureExpectationMaximization	0	NotStrictlyPositiveException	data.$.length < 2
1187	305	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	data	double[][]	0	NotStrictlyPositiveException	$.length < 2
1188	308	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	numComponents	int	0	NumberIsTooSmallException	$ < 2
1189	311	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	THIS	MultivariateNormalMixtureExpectationMaximization	0	NumberIsTooLargeException	numComponents > data.$.length
1189	311	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	data	double[][]	0	NumberIsTooLargeException	numComponents > $.length
1189	311	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	numComponents	int	0	NumberIsTooLargeException	$ > data.length
12502	320	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	i	int	0	NIL-FOR	$ < numRows
12502	320	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	numRows	int	0	NIL-FOR	i < $
12503	333	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	binIndex	int	0	NIL-FOR	$ < numComponents
12503	333	8	MultivariateNormalMixtureExpectationMaximization.java	estimate	numComponents	int	0	NIL-FOR	binIndex < $
12504	350	12	MultivariateNormalMixtureExpectationMaximization.java	estimate	i	int	0	NIL-FOR	$ < maxIndex
12504	350	12	MultivariateNormalMixtureExpectationMaximization.java	estimate	maxIndex	int	0	NIL-FOR	i < $
12505	351	16	MultivariateNormalMixtureExpectationMaximization.java	estimate	j	int	0	NIL-FOR	$ < numCols
12505	351	16	MultivariateNormalMixtureExpectationMaximization.java	estimate	numCols	int	0	NIL-FOR	j < $
3041	86	12	MultivariateOptimizer.java	parseOptimizationData	THIS	MultivariateOptimizer	0	DEF	$.data instanceof GoalType
3042	90	12	MultivariateOptimizer.java	parseOptimizationData	THIS	MultivariateOptimizer	0	DEF	$.data instanceof ObjectiveFunction
13658	126	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
13658	126	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
13659	150	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
13659	150	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
13660	187	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
13660	187	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
13660	187	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
2234	246	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
2235	248	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
13661	252	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
13661	252	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
13662	336	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
13662	336	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
13662	336	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
2236	337	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
13663	350	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
13663	350	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
2237	370	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
2237	370	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
2238	373	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
2239	620	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	MathIllegalStateException	$.n > 0
2240	632	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
2240	632	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
3062	136	12	MultivariateVectorOptimizer.java	parseOptimizationData	THIS	MultivariateVectorOptimizer	0	DEF	$.data instanceof ModelFunction
3063	140	12	MultivariateVectorOptimizer.java	parseOptimizationData	THIS	MultivariateVectorOptimizer	0	DEF	$.data instanceof Target
3064	144	12	MultivariateVectorOptimizer.java	parseOptimizationData	THIS	MultivariateVectorOptimizer	0	DEF	$.data instanceof Weight
3065	161	8	MultivariateVectorOptimizer.java	checkParameters	THIS	MultivariateVectorOptimizer	0	DimensionMismatchException	$.target.$.length != $.weightMatrix.getColumnDimension()
3205	68	8	NPointCrossover.java	NPointCrossover	crossoverPoints	int	0	NotStrictlyPositiveException	$ <= 0
3206	111	8	NPointCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3206	111	8	NPointCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3207	131	8	NPointCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
3207	131	8	NPointCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
3208	134	8	NPointCrossover.java	mate	THIS	NPointCrossover	0	NumberIsTooLargeException	$.crossoverPoints >= length
3208	134	8	NPointCrossover.java	mate	length	int	0	NumberIsTooLargeException	crossoverPoints >= $
14211	152	8	NPointCrossover.java	mate	THIS	NPointCrossover	0	NIL-FOR	i < $.crossoverPoints
14211	152	8	NPointCrossover.java	mate	i	int	0	NIL-FOR	$ < crossoverPoints
14212	157	12	NPointCrossover.java	mate	j	int	0	NIL-FOR	$ < crossoverIndex
14212	157	12	NPointCrossover.java	mate	crossoverIndex	int	0	NIL-FOR	j < $
14213	171	8	NPointCrossover.java	mate	j	int	0	NIL-FOR	$ < length
14213	171	8	NPointCrossover.java	mate	length	int	0	NIL-FOR	j < $
13759	196	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < data.$.length
13759	196	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < data.length
13759	196	8	NaturalRanking.java	rank	data	double[]	0	NIL-FOR	i < $.length
2492	217	16	NaturalRanking.java	rank	nanPositions	List<Integer>	0	NotANumberException	$.size() > 0
13760	235	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
13760	235	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < ranks.length
13760	235	8	NaturalRanking.java	rank	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2493	236	12	NaturalRanking.java	rank	i	int	1	DEF	Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
2493	236	12	NaturalRanking.java	rank	ranks	IntDoublePair[]	1	DEF	Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
2494	239	16	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2495	250	8	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2496	253	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	DEF	$.nanStrategy == $.NaNStrategy.FIXED
2497	267	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	RET	$.containsNaNs(ranks)
2497	267	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	RET	containsNaNs($)
13761	272	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
13761	272	8	NaturalRanking.java	removeNaNs	i	int	0	NIL-FOR	$ < ranks.length
13761	272	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2498	273	12	NaturalRanking.java	removeNaNs	i	int	1	DEF	Double.isNaN(ranks[$].getValue())
2498	273	12	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	1	DEF	Double.isNaN($[i].getValue())
13762	275	16	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	k < ranks.$.length
13762	275	16	NaturalRanking.java	removeNaNs	k	int	0	NIL-FOR	$ < ranks.length
13762	275	16	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	k < $.length
13763	297	8	NaturalRanking.java	recodeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
13763	297	8	NaturalRanking.java	recodeNaNs	i	int	0	NIL-FOR	$ < ranks.length
13763	297	8	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2499	298	12	NaturalRanking.java	recodeNaNs	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2499	298	12	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
13764	312	8	NaturalRanking.java	containsNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
13764	312	8	NaturalRanking.java	containsNaNs	i	int	0	NIL-FOR	$ < ranks.length
13764	312	8	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2500	313	12	NaturalRanking.java	containsNaNs	i	int	0	RET	Double.isNaN(ranks[$].getValue())
2500	313	12	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	RET	Double.isNaN($[i].getValue())
13765	355	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
13766	366	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
13767	384	8	NaturalRanking.java	fill	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
2501	396	8	NaturalRanking.java	restoreNaNs	nanPositions	List<Integer>	0	RET	$.size() == 0
13768	400	8	NaturalRanking.java	restoreNaNs	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
13769	414	8	NaturalRanking.java	getNanPositions	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
13769	414	8	NaturalRanking.java	getNanPositions	i	int	0	NIL-FOR	$ < ranks.length
13769	414	8	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2502	415	12	NaturalRanking.java	getNanPositions	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2502	415	12	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
14067	200	8	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ < n
14067	200	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i < $
14068	202	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
14068	202	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
14069	207	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
14069	207	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
14070	213	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
14070	213	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3030	219	8	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare($, reflected) <= 0
3030	219	8	NelderMeadSimplex.java	iterate	secondBest	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
3030	219	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(best, $) <= 0
3030	219	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, secondBest) < 0
3030	219	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(best, reflected) <= 0
3030	219	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
3031	223	15	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
3031	223	15	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, best) < 0
3031	223	15	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, best) < 0
14071	226	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
14071	226	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3032	232	12	NelderMeadSimplex.java	iterate	expanded	PointValuePair	1	DEF	comparator.compare($, reflected) < 0
3032	232	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(expanded, $) < 0
3032	232	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
3033	240	12	NelderMeadSimplex.java	iterate	worst	PointValuePair	1	RET	comparator.compare(reflected, $) < 0
3033	240	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	RET	comparator.compare($, worst) < 0
3033	240	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	RET	$.compare(reflected, worst) < 0
14072	243	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
14072	243	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3034	248	16	NelderMeadSimplex.java	iterate	outContracted	PointValuePair	0	RET	comparator.compare($, reflected) <= 0
3034	248	16	NelderMeadSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
3034	248	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
14073	256	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
14073	256	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
3035	262	16	NelderMeadSimplex.java	iterate	inContracted	PointValuePair	0	RET	comparator.compare($, worst) < 0
3035	262	16	NelderMeadSimplex.java	iterate	worst	PointValuePair	0	RET	comparator.compare(inContracted, $) < 0
3035	262	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(inContracted, worst) < 0
14074	271	12	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ <= n
14074	271	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i <= $
14075	273	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
14075	273	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
13637	203	8	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ < n
13637	203	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i < $
13638	205	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
13638	205	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
13639	210	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
13639	210	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
13640	216	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
13640	216	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2201	222	8	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare($, reflected) <= 0
2201	222	8	NelderMeadSimplex.java	iterate	secondBest	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
2201	222	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(best, $) <= 0
2201	222	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, secondBest) < 0
2201	222	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(best, reflected) <= 0
2201	222	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
2202	226	15	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
2202	226	15	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, best) < 0
2202	226	15	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, best) < 0
13641	229	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
13641	229	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2203	235	12	NelderMeadSimplex.java	iterate	expanded	PointValuePair	1	DEF	comparator.compare($, reflected) < 0
2203	235	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(expanded, $) < 0
2203	235	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
2204	243	12	NelderMeadSimplex.java	iterate	worst	PointValuePair	1	RET	comparator.compare(reflected, $) < 0
2204	243	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	RET	comparator.compare($, worst) < 0
2204	243	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	RET	$.compare(reflected, worst) < 0
13642	246	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
13642	246	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2205	251	16	NelderMeadSimplex.java	iterate	outContracted	PointValuePair	0	RET	comparator.compare($, reflected) <= 0
2205	251	16	NelderMeadSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
2205	251	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
13643	259	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
13643	259	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2206	265	16	NelderMeadSimplex.java	iterate	inContracted	PointValuePair	0	RET	comparator.compare($, worst) < 0
2206	265	16	NelderMeadSimplex.java	iterate	worst	PointValuePair	0	RET	comparator.compare(inContracted, $) < 0
2206	265	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(inContracted, worst) < 0
13644	274	12	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ <= n
13644	274	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i <= $
13645	276	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
13645	276	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
857	78	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	MathIllegalArgumentException	$[0] == null
12448	88	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	0	NIL-FOR	i < loop.$.length
12448	88	8	NestedLoops.java	NestedLoops	i	int	0	NIL-FOR	$ < loop.length
12448	88	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	NIL-FOR	i < $.length
858	99	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	1	DEF	Double.isInfinite($.polygon.getSize())
859	126	12	NestedLoops.java	add	THIS	NestedLoops	0	RET	$.child.$.polygon.contains(node.$.polygon)
859	126	12	NestedLoops.java	add	node	NestedLoops	0	RET	child.polygon.contains($.polygon)
12449	133	8	NestedLoops.java	add	iterator	Iterator<NestedLoops>	0	NIL-FOR	$.hasNext()
860	135	12	NestedLoops.java	add	THIS	NestedLoops	0	DEF	node.$.polygon.contains(child.$.polygon)
860	135	12	NestedLoops.java	add	child	NestedLoops	0	DEF	node.polygon.contains($.polygon)
860	135	12	NestedLoops.java	add	node	NestedLoops	0	DEF	$.polygon.contains(child.polygon)
861	144	12	NestedLoops.java	add	THIS	NestedLoops	0	MathIllegalArgumentException	factory.intersection(node.$.polygon, $.child.$.polygon).isEmpty()
861	144	12	NestedLoops.java	add	factory	RegionFactory<Euclidean2D>	0	MathIllegalArgumentException	$.intersection(node.polygon, child.polygon).isEmpty()
861	144	12	NestedLoops.java	add	node	NestedLoops	0	MathIllegalArgumentException	factory.intersection($.polygon, child.polygon).isEmpty()
862	170	8	NestedLoops.java	setClockWise	THIS	NestedLoops	0	DEF	$.originalIsClockwise ^ clockwise
862	170	8	NestedLoops.java	setClockWise	clockwise	boolean	0	DEF	originalIsClockwise ^ $
12450	174	12	NestedLoops.java	setClockWise	min	int	0	NIL-WHILE	++$ < --max
12450	174	12	NestedLoops.java	setClockWise	max	int	0	NIL-WHILE	++min < --$
4071	86	12	NewtonRaphsonSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(x1 - x0) <= $
4071	86	12	NewtonRaphsonSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) <= absoluteAccuracy
4071	86	12	NewtonRaphsonSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) <= absoluteAccuracy
4072	86	12	NewtonSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(x1 - x0) <= $
4072	86	12	NewtonSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) <= absoluteAccuracy
4072	86	12	NewtonSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) <= absoluteAccuracy
3055	198	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
3055	198	8	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
14084	199	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
14084	199	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
14085	209	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
14085	209	8	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3056	221	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	RET	checker.converged($.getIterations(), previous, current)
3056	221	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	checker.converged(getIterations(), $, current)
3056	221	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	$ != null
3056	221	12	NonLinearConjugateGradientOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	RET	$.converged(getIterations(), previous, current)
3056	221	12	NonLinearConjugateGradientOptimizer.java	doOptimize	current	PointValuePair	0	RET	checker.converged(getIterations(), previous, $)
14086	236	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < point.$.length
14086	236	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
14086	236	12	NonLinearConjugateGradientOptimizer.java	doOptimize	point	double[]	0	NIL-FOR	i < $.length
3057	241	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
3057	241	12	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
14087	242	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
14087	242	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
14088	251	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
14088	251	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
14089	262	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
14089	262	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
14089	262	16	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
3058	274	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.getIterations() % n == 0
3058	274	12	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
3058	274	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	getIterations() % $ == 0
14090	280	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
14090	280	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3059	305	12	NonLinearConjugateGradientOptimizer.java	parseOptimizationData	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.data instanceof BracketingStep
14091	329	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
3060	332	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
3060	332	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
3061	399	8	NonLinearConjugateGradientOptimizer.java	checkParameters	THIS	NonLinearConjugateGradientOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
3061	399	8	NonLinearConjugateGradientOptimizer.java	checkParameters	THIS	NonLinearConjugateGradientOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
1956	141	8	NonLinearConjugateGradientOptimizer.java	setInitialStep	initialStep	double	1	DEF	$ <= 0
1957	156	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1957	156	8	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
13432	157	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
13432	157	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
13433	167	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
13433	167	8	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1958	180	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	$ != null
1958	180	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	checker.converged(iter, $, current)
1958	180	12	NonLinearConjugateGradientOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	RET	$.converged(iter, previous, current)
1958	180	12	NonLinearConjugateGradientOptimizer.java	doOptimize	current	PointValuePair	0	RET	checker.converged(iter, previous, $)
1958	180	12	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
13434	195	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < $.point.$.length
13434	195	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
1959	200	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1959	200	12	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
13435	201	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
13435	201	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
13436	210	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
13436	210	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1960	215	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.updateFormula == $.ConjugateGradientFormula.FLETCHER_REEVES
13437	219	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
13437	219	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
13437	219	16	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
1961	227	12	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
1961	227	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	iter % $ == 0
1961	227	12	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	1	DEF	$ % n == 0
13438	233	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
13438	233	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
13439	253	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
1962	256	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
1962	256	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
3404	86	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.scaled != null
3404	86	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.scaled != null
3405	89	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.nordsieck != null
3405	89	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.nordsieck != null
3406	92	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.stateVariation != null
3406	92	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.stateVariation != null
14309	151	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < $.scaled.$.length
14309	151	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < scaled.length
14310	157	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < nData.$.length
14310	157	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < nData.length
14310	157	8	NordsieckStepInterpolator.java	rescale	nData	double[][]	0	NIL-FOR	i < $.length
14311	160	12	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
14311	160	12	NordsieckStepInterpolator.java	rescale	j	int	0	NIL-FOR	$ < nDataI.length
14311	160	12	NordsieckStepInterpolator.java	rescale	nDataI	double[]	0	NIL-FOR	j < $.length
14312	201	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ >= 0
14313	205	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
14313	205	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < nDataI.length
14313	205	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	nDataI	double[]	0	NIL-FOR	j < $.length
14314	212	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < $.currentState.$.length
14314	212	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < currentState.length
3407	234	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.scaled == null
14315	238	12	NordsieckStepInterpolator.java	writeExternal	j	int	0	NIL-FOR	$ < n
14315	238	12	NordsieckStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	j < $
3408	243	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.nordsieck == null
3409	268	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
14316	270	12	NordsieckStepInterpolator.java	readExternal	j	int	0	NIL-FOR	$ < n
14316	270	12	NordsieckStepInterpolator.java	readExternal	n	int	0	NIL-FOR	j < $
3410	278	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
3411	284	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
3411	284	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
1112	107	8	NormalDistribution.java	NormalDistribution	sd	double	0	NotStrictlyPositiveException	$ <= 0
1113	150	8	NormalDistribution.java	cumulativeProbability	THIS	NormalDistribution	0	RET	FastMath.abs(dev) > 40 * $.standardDeviation
1113	150	8	NormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * standardDeviation
1114	161	8	NormalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1114	161	8	NormalDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1115	183	8	NormalDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1115	183	8	NormalDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
13831	112	8	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
13831	112	8	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
13832	113	12	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
13832	113	12	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
2597	114	16	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
2597	114	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
2597	114	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
2597	114	16	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
2598	143	8	OLSMultipleLinearRegression.java	calculateTotalSumOfSquares	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
2599	198	8	OLSMultipleLinearRegression.java	calculateAdjustedRSquared	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
3254	82	8	OnePointCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3254	82	8	OnePointCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3255	100	8	OnePointCrossover.java	crossover	length	int	0	DimensionMismatchException	$ != second.getLength()
3255	100	8	OnePointCrossover.java	crossover	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
14229	115	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < crossoverIndex
14229	115	8	OnePointCrossover.java	crossover	crossoverIndex	int	0	NIL-FOR	i < $
14230	120	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < length
14230	120	8	OnePointCrossover.java	crossover	length	int	0	NIL-FOR	i < $
2400	251	8	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ <= 0
2400	251	8	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ > 0.5
2401	279	8	OneWayAnova.java	anovaStats	allowOneElementData	boolean	0	DimensionMismatchException	$
2402	281	12	OneWayAnova.java	anovaStats	categoryData	Collection<SummaryStatistics>	0	DimensionMismatchException	$.size() < 2
2403	288	16	OneWayAnova.java	anovaStats	THIS	OneWayAnova	0	DimensionMismatchException	$.array.getN() <= 1
239	150	8	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
240	155	8	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
240	155	8	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
241	179	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
241	179	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
241	179	8	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
242	183	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
242	183	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
12401	188	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
12401	188	8	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
243	191	12	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
243	191	12	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
243	191	12	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
244	209	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
244	209	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
244	209	8	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
245	213	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
245	213	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
12402	218	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
12402	218	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
246	221	12	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
246	221	12	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
246	221	12	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
247	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
247	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
248	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
248	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
248	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
248	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
248	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
249	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
249	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
250	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
250	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
250	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
250	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
250	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
251	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
251	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
252	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
252	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
253	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
253	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
254	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
254	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
254	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
254	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
254	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
255	353	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
255	353	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
255	353	8	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
256	357	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
256	357	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
12403	362	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
12403	362	8	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
257	365	12	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
257	365	12	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
257	365	12	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
258	410	8	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
259	418	8	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
260	420	12	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
12404	444	8	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
12404	444	8	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
261	445	12	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
261	445	12	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
527	163	8	OpenIntToFieldHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
528	168	8	OpenIntToFieldHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
528	168	8	OpenIntToFieldHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
529	192	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
529	192	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
529	192	8	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
530	196	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
530	196	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	states[$] == FREE
12414	201	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
12414	201	8	OpenIntToFieldHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
531	204	12	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
531	204	12	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
531	204	12	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
532	222	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
532	222	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
532	222	8	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
533	226	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
533	226	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
12415	231	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
12415	231	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
534	234	12	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
534	234	12	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
534	234	12	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
535	284	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
535	284	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
536	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
536	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
536	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
536	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
536	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
537	292	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
537	292	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
538	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
538	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
538	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
538	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
538	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
539	304	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
539	304	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
540	306	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
540	306	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
541	317	12	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
541	317	12	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
542	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
542	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
542	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
542	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
542	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
543	366	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
543	366	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
543	366	8	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
544	370	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
544	370	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	states[$] == FREE
12416	375	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
12416	375	8	OpenIntToFieldHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
545	378	12	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
545	378	12	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
545	378	12	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
546	423	8	OpenIntToFieldHashMap.java	put	index	int	0	DEF	$ < 0
547	431	8	OpenIntToFieldHashMap.java	put	newMapping	boolean	0	DEF	$
548	433	12	OpenIntToFieldHashMap.java	put	THIS	OpenIntToFieldHashMap	0	DEF	$.shouldGrowTable()
12417	457	8	OpenIntToFieldHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
12417	457	8	OpenIntToFieldHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
549	458	12	OpenIntToFieldHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
549	458	12	OpenIntToFieldHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
1807	66	8	OpenMapRealMatrix.java	OpenMapRealMatrix	lRow	long	0	NumberIsTooLargeException	$ * lCol >= Integer.MAX_VALUE
1807	66	8	OpenMapRealMatrix.java	OpenMapRealMatrix	lCol	long	0	NumberIsTooLargeException	lRow * $ >= Integer.MAX_VALUE
13338	123	8	OpenMapRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
13339	158	8	OpenMapRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
13340	186	12	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
13341	192	16	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
13341	192	16	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
13342	218	8	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
13343	224	12	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
13343	224	12	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
1808	226	16	OpenMapRealMatrix.java	multiply	THIS	OpenMapRealMatrix	0	DEF	m.$.entries.containsKey(rightKey)
1808	226	16	OpenMapRealMatrix.java	multiply	rightKey	int	0	DEF	m.entries.containsKey($)
1808	226	16	OpenMapRealMatrix.java	multiply	m	OpenMapRealMatrix	0	DEF	$.entries.containsKey(rightKey)
1809	230	20	OpenMapRealMatrix.java	multiply	outValue	double	1	DEF	$ == 0.0
1810	262	8	OpenMapRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
1811	277	8	OpenMapRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
1812	292	8	OpenMapRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
13263	144	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
13263	144	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
13263	144	8	OpenMapRealVector.java	OpenMapRealVector	values	double[]	0	NIL-FOR	key < $.length
1742	146	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1742	146	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
13264	173	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
13264	173	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
13264	173	8	OpenMapRealVector.java	OpenMapRealVector	values	Double[]	0	NIL-FOR	key < $.length
1743	175	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1743	175	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
13265	201	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < $.virtualSize
13265	201	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < virtualSize
1744	203	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1744	203	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
1745	235	8	OpenMapRealVector.java	add	v	RealVector	1	RET	$ instanceof OpenMapRealVector
13266	257	8	OpenMapRealVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1746	260	12	OpenMapRealVector.java	add	key	int	1	DEF	randomAccess.containsKey($)
1746	260	12	OpenMapRealVector.java	add	randomAccess	OpenIntToDoubleHashMap	1	DEF	$.containsKey(key)
13267	277	8	OpenMapRealVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1747	287	8	OpenMapRealVector.java	append	v	RealVector	1	RET	$ instanceof OpenMapRealVector
13268	291	12	OpenMapRealVector.java	append	i	int	0	NIL-FOR	$ < v.getDimension()
13268	291	12	OpenMapRealVector.java	append	v	RealVector	0	NIL-FOR	i < $.getDimension()
13269	350	8	OpenMapRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < n
13269	350	8	OpenMapRealVector.java	ebeDivide	n	int	0	NIL-FOR	i < $
13270	363	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
1748	374	8	OpenMapRealVector.java	ebeMultiply	v	RealVector	0	DEF	$.isNaN()
1748	374	8	OpenMapRealVector.java	ebeMultiply	v	RealVector	0	DEF	$.isInfinite()
13271	376	12	OpenMapRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < n
13271	376	12	OpenMapRealVector.java	ebeMultiply	n	int	0	NIL-FOR	i < $
1749	378	16	OpenMapRealVector.java	ebeMultiply	y	double	1	DEF	Double.isNaN($)
1750	380	23	OpenMapRealVector.java	ebeMultiply	y	double	0	DEF	Double.isInfinite($)
1751	394	8	OpenMapRealVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
13272	401	8	OpenMapRealVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1752	404	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ >= index
1752	404	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ < end
1752	404	12	OpenMapRealVector.java	getSubVector	end	int	0	DEF	key < $
1752	404	12	OpenMapRealVector.java	getSubVector	index	int	0	DEF	key >= $
13273	429	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
13274	437	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1753	440	12	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1753	440	12	OpenMapRealVector.java	getDistance	key	int	0	DEF	entries.containsKey($)
1754	452	8	OpenMapRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
13275	481	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
13276	487	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1755	490	12	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1755	490	12	OpenMapRealVector.java	getL1Distance	key	int	0	DEF	entries.containsKey($)
1756	503	8	OpenMapRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
13277	522	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1757	525	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
1757	525	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
13278	530	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1758	533	12	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1758	533	12	OpenMapRealVector.java	getLInfDistance	key	int	0	DEF	entries.containsKey($)
1758	533	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	iter.value() > $
1758	533	12	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	DEF	$.value() > max
1759	545	8	OpenMapRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
13279	557	8	OpenMapRealVector.java	isInfinite	iter	Iterator	0	NIL-WHILE	$.hasNext()
1760	560	12	OpenMapRealVector.java	isInfinite	value	double	0	RET	Double.isNaN($)
1761	563	12	OpenMapRealVector.java	isInfinite	value	double	0	DEF	Double.isInfinite($)
13280	574	8	OpenMapRealVector.java	isNaN	iter	Iterator	0	NIL-WHILE	$.hasNext()
1762	576	12	OpenMapRealVector.java	isNaN	iter	Iterator	0	RET	Double.isNaN($.value())
13281	592	8	OpenMapRealVector.java	mapAddToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
13281	592	8	OpenMapRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
1763	603	8	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	1	DEF	$.isDefaultValue(value)
1763	603	8	OpenMapRealVector.java	setEntry	value	double	1	DEF	isDefaultValue($)
1764	605	15	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(index)
1764	605	15	OpenMapRealVector.java	setEntry	index	int	0	DEF	entries.containsKey($)
13282	616	8	OpenMapRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.getDimension()
13282	616	8	OpenMapRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < $.getDimension()
13283	624	8	OpenMapRealVector.java	set	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
13283	624	8	OpenMapRealVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
13284	641	8	OpenMapRealVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1765	644	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
1765	644	12	OpenMapRealVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1766	658	8	OpenMapRealVector.java	subtract	v	RealVector	1	RET	$ instanceof OpenMapRealVector
1767	677	8	OpenMapRealVector.java	unitize	THIS	OpenMapRealVector	0	MathArithmeticException	$.isDefaultValue(norm)
1767	677	8	OpenMapRealVector.java	unitize	norm	double	0	MathArithmeticException	isDefaultValue($)
13285	681	8	OpenMapRealVector.java	unitize	iter	Iterator	0	NIL-WHILE	$.hasNext()
13286	692	8	OpenMapRealVector.java	toArray	iter	Iterator	0	NIL-WHILE	$.hasNext()
13287	714	8	OpenMapRealVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1768	730	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$ == obj
1768	730	8	OpenMapRealVector.java	equals	obj	Object	0	RET	this == $
1769	733	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ instanceof OpenMapRealVector
1770	737	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$.virtualSize != other.$.virtualSize
1770	737	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	virtualSize != $.virtualSize
1771	740	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits($.epsilon) != Double.doubleToLongBits(other.$.epsilon)
1771	740	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	Double.doubleToLongBits(epsilon) != Double.doubleToLongBits($.epsilon)
13288	745	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1772	748	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(iter.value())
1772	748	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.value())
13289	753	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1773	756	12	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.getEntry(iter.key()))
1773	756	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(getEntry(iter.key()))
1773	756	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry($.key()))
3256	74	8	OrderedCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3256	74	8	OrderedCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3257	92	8	OrderedCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
3257	92	8	OrderedCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
14231	110	8	OrderedCrossover.java	mate	a	int	0	NIL-DOWHILE	$ == b
14231	110	8	OrderedCrossover.java	mate	b	int	0	NIL-DOWHILE	a == $
14232	124	8	OrderedCrossover.java	mate	i	int	0	NIL-FOR	$ <= length
14232	124	8	OrderedCrossover.java	mate	length	int	0	NIL-FOR	i <= $
3258	132	12	OrderedCrossover.java	mate	item2	T	0	DEF	child1Set.contains($)
3258	132	12	OrderedCrossover.java	mate	child1Set	Set<T>	0	DEF	$.contains(item2)
3259	138	12	OrderedCrossover.java	mate	item1	T	0	DEF	child2Set.contains($)
3259	138	12	OrderedCrossover.java	mate	child2Set	Set<T>	0	DEF	$.contains(item1)
12423	139	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	NIL-FOR	i < components.$.length
12423	139	8	OrderedTuple.java	OrderedTuple	i	int	0	NIL-FOR	$ < components.length
12423	139	8	OrderedTuple.java	OrderedTuple	components	double	0	NIL-FOR	i < $.length
565	140	12	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isInfinite(components[$])
565	140	12	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isInfinite($[i])
566	141	16	OrderedTuple.java	OrderedTuple	i	int	1	DEF	components[$] < 0
566	141	16	OrderedTuple.java	OrderedTuple	components	double	1	DEF	$[i] < 0
567	146	19	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isNaN(components[$])
567	146	19	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isNaN($[i])
568	151	16	OrderedTuple.java	OrderedTuple	m	long	0	DEF	$ != 0
569	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.posInf
569	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.negInf
570	166	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	1	DEF	$.lsb <= msb
570	166	8	OrderedTuple.java	OrderedTuple	msb	int	1	DEF	lsb <= $
571	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding[0] == 0x0L
571	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding.$.length == 1
571	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding != null
12424	202	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	eIndex < $.encoding.$.length
12424	202	8	OrderedTuple.java	encode	eIndex	int	0	NIL-FOR	$ < encoding.length
12425	203	12	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	vIndex < $.components.$.length
12425	203	12	OrderedTuple.java	encode	vIndex	int	0	NIL-FOR	$ < components.length
572	204	16	OrderedTuple.java	encode	THIS	OrderedTuple	0	DEF	$.getBit(vIndex, k) != 0
572	204	16	OrderedTuple.java	encode	vIndex	int	0	DEF	getBit($, k) != 0
572	204	16	OrderedTuple.java	encode	k	int	0	DEF	getBit(vIndex, $) != 0
573	207	16	OrderedTuple.java	encode	shift	int	0	DEF	$-- == 0
574	248	8	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.components.$.length == ot.$.components.$.length
574	248	8	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	components.length == $.components.length
575	249	12	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.nan
576	251	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.nan
576	251	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.nan
577	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.posInf
577	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.negInf
577	253	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.posInf
578	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.posInf
578	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.negInf
578	255	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.negInf
579	259	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	DEF	$.offset < ot.$.offset
579	259	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	DEF	offset < $.offset
580	261	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	DEF	$.offset > ot.$.offset
580	261	23	OrderedTuple.java	compareTo	ot	OrderedTuple	0	DEF	offset > $.offset
12426	266	16	OrderedTuple.java	compareTo	i	int	0	NIL-FOR	$ < limit
12426	266	16	OrderedTuple.java	compareTo	limit	int	0	NIL-FOR	i < $
581	267	20	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding[i] < ot.$.encoding[i]
581	267	20	OrderedTuple.java	compareTo	i	int	1	RET	encoding[$] < ot.encoding[$]
581	267	20	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding[i] < $.encoding[i]
582	269	27	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.encoding[i] > ot.$.encoding[i]
582	269	27	OrderedTuple.java	compareTo	i	int	0	RET	encoding[$] > ot.encoding[$]
582	269	27	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	encoding[i] > $.encoding[i]
583	274	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length < ot.$.encoding.$.length
583	274	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length < $.encoding.length
584	276	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length > ot.$.encoding.$.length
584	276	23	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length > $.encoding.length
585	292	8	OrderedTuple.java	equals	THIS	OrderedTuple	1	RET	$ == other
585	292	8	OrderedTuple.java	equals	other	Object	1	RET	this == $
586	294	15	OrderedTuple.java	equals	other	Object	1	RET	$ instanceof OrderedTuple
12427	369	8	OrderedTuple.java	computeMSB	scale	int	0	NIL-WHILE	$ != 0
587	370	12	OrderedTuple.java	computeMSB	ll	long	0	DEF	($ & mask) != $
587	370	12	OrderedTuple.java	computeMSB	mask	long	0	DEF	(ll & $) != ll
12428	395	8	OrderedTuple.java	computeLSB	scale	int	0	NIL-WHILE	$ != 0
588	396	12	OrderedTuple.java	computeLSB	ll	long	0	DEF	($ & mask) == $
588	396	12	OrderedTuple.java	computeLSB	mask	long	0	DEF	(ll & $) == ll
589	417	8	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k > $.offset
589	417	8	OrderedTuple.java	getBit	e	int	1	RET	k < $
589	417	8	OrderedTuple.java	getBit	k	int	1	RET	$ > offset
589	417	8	OrderedTuple.java	getBit	k	int	1	RET	$ < e
590	419	15	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k == $.offset
590	419	15	OrderedTuple.java	getBit	k	int	1	RET	$ == offset
591	421	15	OrderedTuple.java	getBit	e	int	1	RET	k > ($ + 52)
591	421	15	OrderedTuple.java	getBit	k	int	1	RET	$ > (e + 52)
12437	72	8	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	NIL-FOR	i < outline.$.length
12437	72	8	OutlineExtractor.java	getOutline	i	int	0	NIL-FOR	$ < outline.length
12437	72	8	OutlineExtractor.java	getOutline	outline	Vector2D[][]	0	NIL-FOR	i < $.length
12438	76	12	OutlineExtractor.java	getOutline	end	int	0	NIL-WHILE	j < $
12438	76	12	OutlineExtractor.java	getOutline	j	int	0	NIL-WHILE	$ < end
762	77	16	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	1	DEF	$.pointIsBetween(rawLoop, end, j)
762	77	16	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	1	DEF	pointIsBetween($, end, j)
762	77	16	OutlineExtractor.java	getOutline	end	int	1	DEF	pointIsBetween(rawLoop, $, j)
762	77	16	OutlineExtractor.java	getOutline	j	int	1	DEF	pointIsBetween(rawLoop, end, $)
12439	79	20	OutlineExtractor.java	getOutline	k	int	0	NIL-FOR	$ < (end - 1)
12439	79	20	OutlineExtractor.java	getOutline	end	int	0	NIL-FOR	k < ($ - 1)
763	88	12	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	DEF	end != rawLoop.$.length
763	88	12	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	0	DEF	end != $.length
763	88	12	OutlineExtractor.java	getOutline	end	int	0	DEF	$ != rawLoop.length
171	106	8	Pair.java	equals	THIS	Pair	0	RET	$ == o
171	106	8	Pair.java	equals	o	Object	0	RET	this == $
172	109	8	Pair.java	equals	o	Object	1	RET	$ instanceof Pair
3388	60	12	ParameterJacobianWrapper.java	ParameterJacobianWrapper	name	String	0	DEF	pode.isSupported($)
3388	60	12	ParameterJacobianWrapper.java	ParameterJacobianWrapper	pode	ParameterizedODE	0	DEF	$.isSupported(name)
3389	82	8	ParameterJacobianWrapper.java	computeParameterJacobian	THIS	ParameterJacobianWrapper	1	DEF	$.pode.isSupported(paramName)
3389	82	8	ParameterJacobianWrapper.java	computeParameterJacobian	paramName	String	1	DEF	pode.isSupported($)
14302	90	12	ParameterJacobianWrapper.java	computeParameterJacobian	i	int	0	NIL-FOR	$ < n
14302	90	12	ParameterJacobianWrapper.java	computeParameterJacobian	n	int	0	NIL-FOR	i < $
3534	75	8	ParameterizedWrapper.java	getParameter	THIS	ParameterizedWrapper	0	UnknownParameterException	$.isSupported(name)
3534	75	8	ParameterizedWrapper.java	getParameter	name	String	0	UnknownParameterException	isSupported($)
1243	116	8	ParetoDistribution.java	ParetoDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1244	120	8	ParetoDistribution.java	ParetoDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1245	158	8	ParetoDistribution.java	density	THIS	ParetoDistribution	0	RET	x < $.scale
1245	158	8	ParetoDistribution.java	density	x	double	0	RET	$ < scale
1246	174	8	ParetoDistribution.java	cumulativeProbability	THIS	ParetoDistribution	0	RET	x <= $.scale
1246	174	8	ParetoDistribution.java	cumulativeProbability	x	double	0	RET	$ <= scale
1247	208	8	ParetoDistribution.java	getNumericalMean	THIS	ParetoDistribution	0	RET	$.shape <= 1
1248	224	8	ParetoDistribution.java	getNumericalVariance	THIS	ParetoDistribution	0	RET	$.shape <= 2
1161	105	8	PascalDistribution.java	PascalDistribution	r	int	0	NotStrictlyPositiveException	$ <= 0
1162	109	8	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ > 1
1162	109	8	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ < 0
1163	138	8	PascalDistribution.java	probability	x	int	1	DEF	$ < 0
1164	152	8	PascalDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
2475	95	8	PearsonsCorrelation.java	PearsonsCorrelation	covarianceMatrix	RealMatrix	0	NullArgumentException	$ == null
13742	140	8	PearsonsCorrelation.java	getCorrelationStandardErrors	i	int	0	NIL-FOR	$ < nVars
13742	140	8	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	i < $
13743	141	12	PearsonsCorrelation.java	getCorrelationStandardErrors	j	int	0	NIL-FOR	$ < nVars
13743	141	12	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	j < $
13744	167	8	PearsonsCorrelation.java	getCorrelationPValues	i	int	0	NIL-FOR	$ < nVars
13744	167	8	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	i < $
13745	168	12	PearsonsCorrelation.java	getCorrelationPValues	j	int	0	NIL-FOR	$ < nVars
13745	168	12	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	j < $
2476	169	16	PearsonsCorrelation.java	getCorrelationPValues	j	int	1	DEF	i == $
2476	169	16	PearsonsCorrelation.java	getCorrelationPValues	i	int	1	DEF	$ == j
13746	192	8	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	$ < nVars
13746	192	8	PearsonsCorrelation.java	computeCorrelationMatrix	nVars	int	0	NIL-FOR	i < $
13747	193	12	PearsonsCorrelation.java	computeCorrelationMatrix	j	int	0	NIL-FOR	$ < i
13747	193	12	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	j < $
2477	229	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
2477	229	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
2477	229	8	PearsonsCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
2478	231	15	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
2478	231	15	PearsonsCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
13748	235	12	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	0	NIL-FOR	i<xArray.$.length
13748	235	12	PearsonsCorrelation.java	correlation	i	int	0	NIL-FOR	$<xArray.length
13748	235	12	PearsonsCorrelation.java	correlation	xArray	double[]	0	NIL-FOR	i<$.length
13749	256	8	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	$ < nVars
13749	256	8	PearsonsCorrelation.java	covarianceToCorrelation	nVars	int	0	NIL-FOR	i < $
13750	259	12	PearsonsCorrelation.java	covarianceToCorrelation	j	int	0	NIL-FOR	$ < i
13750	259	12	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	j < $
2479	279	8	PearsonsCorrelation.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
2479	279	8	PearsonsCorrelation.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 2
2345	136	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
2346	149	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
2347	269	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ <= 0
2347	269	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ > 100
2348	273	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
2349	276	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
2350	286	8	Percentile.java	evaluate	THIS	Percentile	1	DEF	values == $.getDataRef()
2350	286	8	Percentile.java	evaluate	values	double[]	1	DEF	$ == getDataRef()
2351	296	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
2352	299	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
2352	299	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
13689	324	8	Percentile.java	select	begin	int	0	NIL-WHILE	end - $ > MIN_SELECT_SIZE
13689	324	8	Percentile.java	select	end	int	0	NIL-WHILE	$ - begin > MIN_SELECT_SIZE
2353	327	12	Percentile.java	select	THIS	Percentile	1	DEF	node < pivotsHeap.$.length
2353	327	12	Percentile.java	select	node	int	1	DEF	$ < pivotsHeap.length
2353	327	12	Percentile.java	select	node	int	1	DEF	pivotsHeap[$] >= 0
2353	327	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	node < $.length
2353	327	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	$[node] >= 0
2354	334	16	Percentile.java	select	THIS	Percentile	0	DEF	node < pivotsHeap.$.length
2354	334	16	Percentile.java	select	node	int	0	DEF	$ < pivotsHeap.length
2354	334	16	Percentile.java	select	pivotsHeap	int[]	0	DEF	node < $.length
2355	339	12	Percentile.java	select	pivot	int	1	RET	k == $
2355	339	12	Percentile.java	select	k	int	1	RET	$ == pivot
2356	342	19	Percentile.java	select	pivot	int	1	DEF	k < $
2356	342	19	Percentile.java	select	k	int	1	DEF	$ < pivot
2357	376	8	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wMiddle
2357	376	8	Percentile.java	medianOf3	wMiddle	double	1	RET	wBegin < $
2358	377	12	Percentile.java	medianOf3	wMiddle	double	1	RET	$ < wEnd
2358	377	12	Percentile.java	medianOf3	wEnd	double	1	RET	wMiddle < $
2359	383	12	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wEnd
2359	383	12	Percentile.java	medianOf3	wEnd	double	1	RET	wBegin < $
13690	412	8	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
13690	412	8	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
13691	413	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[j] > $
13691	413	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
13691	413	12	Percentile.java	partition	j	int	0	NIL-WHILE	work[$] > value
13691	413	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
13691	413	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[j] > value
13692	416	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[i] < $
13692	416	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
13692	416	12	Percentile.java	partition	i	int	0	NIL-WHILE	work[$] < value
13692	416	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
13692	416	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[i] < value
2360	420	12	Percentile.java	partition	i	int	0	DEF	$ < j
2360	420	12	Percentile.java	partition	j	int	0	DEF	i < $
2361	427	8	Percentile.java	partition	value	double	0	DEF	work[i] > $
2361	427	8	Percentile.java	partition	i	int	0	DEF	$ >= end
2361	427	8	Percentile.java	partition	i	int	0	DEF	work[$] > value
2361	427	8	Percentile.java	partition	work	double[]	0	DEF	$[i] > value
2361	427	8	Percentile.java	partition	end	int	0	DEF	i >= $
13693	443	8	Percentile.java	insertionSort	j	int	0	NIL-FOR	$ < end
13693	443	8	Percentile.java	insertionSort	end	int	0	NIL-FOR	j < $
13694	446	12	Percentile.java	insertionSort	saved	double	0	NIL-WHILE	$ < work[i]
13694	446	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	$ >= begin
13694	446	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	saved < work[$]
13694	446	12	Percentile.java	insertionSort	work	double[]	0	NIL-WHILE	saved < $[i]
13694	446	12	Percentile.java	insertionSort	begin	int	0	NIL-WHILE	i >= $
2362	473	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ <= 0
2362	473	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ > 100
2363	504	8	Percentile.java	copy	THIS	Percentile	0	DEF	source.$.cachedPivots != null
2363	504	8	Percentile.java	copy	source	Percentile	0	DEF	$.cachedPivots != null
702	140	8	Plane.java	setNormal	norm	double	0	MathArithmeticException	$ < 1.0e-10
703	310	8	Plane.java	intersection	dot	double	0	RET	FastMath.abs($) < 1.0e-10
704	325	8	Plane.java	intersection	direction	Vector3D	0	RET	$.getNorm() < 1.0e-10
705	362	8	Plane.java	intersection	determinant	double	0	RET	FastMath.abs($) < 1.0e-10
1220	112	8	PoissonDistribution.java	PoissonDistribution	p	double	0	NotStrictlyPositiveException	$ <= 0
1221	165	8	PoissonDistribution.java	probability	x	int	1	DEF	$ < 0
1221	165	8	PoissonDistribution.java	probability	x	int	1	DEF	$ == Integer.MAX_VALUE
1222	167	15	PoissonDistribution.java	probability	x	int	1	DEF	$ == 0
1223	179	8	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ < 0
1224	182	8	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
1225	292	8	PoissonDistribution.java	nextPoisson	pivot	double	1	RET	meanPoisson < $
1225	292	8	PoissonDistribution.java	nextPoisson	meanPoisson	double	1	RET	$ < pivot
12506	298	12	PoissonDistribution.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * meanPoisson
12506	298	12	PoissonDistribution.java	nextPoisson	meanPoisson	double	0	NIL-WHILE	n < 1000 * $
1226	301	16	PoissonDistribution.java	nextPoisson	p	double	1	DEF	r >= $
1226	301	16	PoissonDistribution.java	nextPoisson	r	double	1	DEF	$ >= p
1227	333	16	PoissonDistribution.java	nextPoisson	u	double	1	DEF	$ <= p1
1227	333	16	PoissonDistribution.java	nextPoisson	p1	double	1	DEF	u <= $
1228	336	20	PoissonDistribution.java	nextPoisson	lambda	double	0	DEF	x < -$
1228	336	20	PoissonDistribution.java	nextPoisson	delta	double	0	DEF	x > $
1228	336	20	PoissonDistribution.java	nextPoisson	x	double	0	DEF	$ > delta
1228	336	20	PoissonDistribution.java	nextPoisson	x	double	0	DEF	$ < -lambda
1229	343	20	PoissonDistribution.java	nextPoisson	u	double	1	DEF	$ > p1 + p2
1229	343	20	PoissonDistribution.java	nextPoisson	p1	double	1	DEF	u > $ + p2
1229	343	20	PoissonDistribution.java	nextPoisson	p2	double	1	DEF	u > p1 + $
1230	354	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < -t
1230	354	16	PoissonDistribution.java	nextPoisson	a	int	0	DEF	$ == 0
1230	354	16	PoissonDistribution.java	nextPoisson	t	double	0	DEF	v < -$
1231	360	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < qa
1231	360	16	PoissonDistribution.java	nextPoisson	qa	double	0	DEF	v < $
1232	364	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ > qr
1232	364	16	PoissonDistribution.java	nextPoisson	qr	double	0	DEF	v > $
1233	367	16	PoissonDistribution.java	nextPoisson	lambda	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + $)) + logLambdaFactorial
1233	367	16	PoissonDistribution.java	nextPoisson	logLambda	double	0	DEF	v < y * $ - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1233	367	16	PoissonDistribution.java	nextPoisson	logLambdaFactorial	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + $
1233	367	16	PoissonDistribution.java	nextPoisson	y	double	0	DEF	v < $ * logLambda - ArithmeticUtils.factorialLog((int) ($ + lambda)) + logLambdaFactorial
1233	367	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1079	46	8	PollardRho.java	primeFactors	n	int	0	RET	1 == $
1080	50	8	PollardRho.java	primeFactors	n	int	0	RET	SmallPrimes.millerRabinPrimeTest($)
12463	81	12	PollardRho.java	rhoBrent	i	int	0	NIL-FOR	$ < r
12463	81	12	PollardRho.java	rhoBrent	r	int	0	NIL-FOR	i < $
12464	86	12	PollardRho.java	rhoBrent	k	int	0	NIL-DOWHILE	$ < r
12464	86	12	PollardRho.java	rhoBrent	r	int	0	NIL-DOWHILE	k < $
12465	89	16	PollardRho.java	rhoBrent	i	int	0	NIL-FOR	$ < bound
12465	89	16	PollardRho.java	rhoBrent	bound	int	0	NIL-FOR	i < $
1081	93	20	PollardRho.java	rhoBrent	divisor	long	0	DEF	0 == $
1082	102	20	PollardRho.java	rhoBrent	q	int	0	RET	0 == $
1083	107	16	PollardRho.java	rhoBrent	out	int	0	RET	1 != $
1084	136	8	PollardRho.java	gcdPositive	a	int	1	RET	$ == 0
1085	138	15	PollardRho.java	gcdPositive	b	int	0	RET	$ == 0
12466	153	8	PollardRho.java	gcdPositive	a	int	0	NIL-WHILE	$ != b
12466	153	8	PollardRho.java	gcdPositive	b	int	0	NIL-WHILE	a != $
827	177	8	PolygonsSet.java	verticesToTree	n	int	0	RET	$ == 0
12442	184	8	PolygonsSet.java	verticesToTree	i	int	0	NIL-FOR	$ < n
12442	184	8	PolygonsSet.java	verticesToTree	n	int	0	NIL-FOR	i < $
12443	190	8	PolygonsSet.java	verticesToTree	i	int	0	NIL-FOR	$ < n
12443	190	8	PolygonsSet.java	verticesToTree	n	int	0	NIL-FOR	i < $
828	200	12	PolygonsSet.java	verticesToTree	line	Line	0	DEF	$ == null
829	209	16	PolygonsSet.java	verticesToTree	THIS	PolygonsSet	0	DEF	FastMath.abs(line.getOffset($.vertex.getLocation())) <= hyperplaneThickness
829	209	16	PolygonsSet.java	verticesToTree	THIS	PolygonsSet	0	DEF	$.vertex != start
829	209	16	PolygonsSet.java	verticesToTree	THIS	PolygonsSet	0	DEF	$.vertex != end
829	209	16	PolygonsSet.java	verticesToTree	start	Vertex	0	DEF	vertex != $
829	209	16	PolygonsSet.java	verticesToTree	end	Vertex	0	DEF	vertex != $
829	209	16	PolygonsSet.java	verticesToTree	line	Line	0	DEF	FastMath.abs($.getOffset(vertex.getLocation())) <= hyperplaneThickness
829	209	16	PolygonsSet.java	verticesToTree	hyperplaneThickness	double	0	DEF	FastMath.abs(line.getOffset(vertex.getLocation())) <= $
12444	240	8	PolygonsSet.java	insertEdges	index	int	0	NIL-WHILE	$ < edges.size()
12444	240	8	PolygonsSet.java	insertEdges	inserted	Edge	0	NIL-WHILE	$ == null
12444	240	8	PolygonsSet.java	insertEdges	edges	List<Edge>	0	NIL-WHILE	index < $.size()
830	242	12	PolygonsSet.java	insertEdges	inserted	Edge	1	DEF	$.getNode() == null
831	243	16	PolygonsSet.java	insertEdges	inserted	Edge	1	DEF	node.insertCut($.getLine())
831	243	16	PolygonsSet.java	insertEdges	node	BSPTree<Euclidean2D>	1	DEF	$.insertCut(inserted.getLine())
832	253	8	PolygonsSet.java	insertEdges	inserted	Edge	0	RET	$ == null
833	257	12	PolygonsSet.java	insertEdges	parent	BSPTree<Euclidean2D>	1	DEF	$ == null
833	257	12	PolygonsSet.java	insertEdges	parent	BSPTree<Euclidean2D>	1	DEF	node == $.getMinus()
833	257	12	PolygonsSet.java	insertEdges	node	BSPTree<Euclidean2D>	1	DEF	$ == parent.getMinus()
834	270	12	PolygonsSet.java	insertEdges	THIS	PolygonsSet	0	DEF	$.edge != inserted
834	270	12	PolygonsSet.java	insertEdges	inserted	Edge	0	DEF	edge != $
835	279	24	PolygonsSet.java	insertEdges	THIS	PolygonsSet	1	DEF	endSide == $.Side.MINUS
835	279	24	PolygonsSet.java	insertEdges	endSide	Side	1	DEF	$ == Side.MINUS
836	289	24	PolygonsSet.java	insertEdges	THIS	PolygonsSet	1	DEF	endSide == $.Side.PLUS
836	289	24	PolygonsSet.java	insertEdges	endSide	Side	1	DEF	$ == Side.PLUS
837	299	24	PolygonsSet.java	insertEdges	THIS	PolygonsSet	1	DEF	endSide == $.Side.PLUS
837	299	24	PolygonsSet.java	insertEdges	endSide	Side	1	DEF	$ == Side.PLUS
838	301	31	PolygonsSet.java	insertEdges	THIS	PolygonsSet	0	DEF	endSide == $.Side.MINUS
838	301	31	PolygonsSet.java	insertEdges	endSide	Side	0	DEF	$ == Side.MINUS
839	310	8	PolygonsSet.java	insertEdges	plusList	List<Edge>	1	DEF	$.isEmpty()
840	315	8	PolygonsSet.java	insertEdges	minusList	List<Edge>	1	DEF	$.isEmpty()
841	525	8	PolygonsSet.java	computeGeometricalProperties	THIS	PolygonsSet	1	DEF	v.$.length == 0
841	525	8	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$.length == 0
842	527	12	PolygonsSet.java	computeGeometricalProperties	tree	BSPTree<Euclidean2D>	1	DEF	(Boolean) $.getAttribute()
842	527	12	PolygonsSet.java	computeGeometricalProperties	tree	BSPTree<Euclidean2D>	1	DEF	$.getCut() == null
843	535	15	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$[0][0] == null
844	561	12	PolygonsSet.java	computeGeometricalProperties	sum	double	1	DEF	$ < 0
845	598	8	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	$.vertices == null
846	599	12	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.getTree(false).getCut() == null
12445	611	16	PolygonsSet.java	getVertices	sorted	AVLTree<ComparableSegment>	0	NIL-WHILE	$.isEmpty()
847	614	20	PolygonsSet.java	getVertices	loop	List<ComparableSegment>	0	DEF	$ != null
848	624	20	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.size() < 2
849	632	27	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.get(0).getStart() == null
850	638	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == 0
851	646	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j < (array.$.length - 1)
851	646	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j < ($.length - 1)
851	646	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ < (array.length - 1)
852	651	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j == (array.$.length - 1)
852	651	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j == ($.length - 1)
852	651	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == (array.length - 1)
12446	697	8	PolygonsSet.java	followLoop	globalStart	Vector2D	0	NIL-WHILE	$.distance(end) > 1.0e-10
12446	697	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	$ != null
12446	697	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	globalStart.distance($) > 1.0e-10
12446	697	8	PolygonsSet.java	followLoop	open	boolean	0	NIL-WHILE	$
12447	705	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$.getElement().compareTo(upperRight) <= 0
12447	705	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$ != null
12447	705	12	PolygonsSet.java	followLoop	upperRight	ComparableSegment	0	NIL-FOR	n.getElement().compareTo($) <= 0
853	710	16	PolygonsSet.java	followLoop	distance	double	0	DEF	$ < selectedDistance
853	710	16	PolygonsSet.java	followLoop	selectedDistance	double	0	DEF	distance < $
854	717	12	PolygonsSet.java	followLoop	selectedDistance	double	0	RET	$ > 1.0e-10
855	730	8	PolygonsSet.java	followLoop	loop	ArrayList<ComparableSegment>	0	RET	$.size() == 2
855	730	8	PolygonsSet.java	followLoop	open	boolean	0	RET	$
856	735	8	PolygonsSet.java	followLoop	end	Vector2D	0	MathInternalError	$ == null
856	735	8	PolygonsSet.java	followLoop	open	boolean	0	MathInternalError	$
764	137	8	PolyhedronsSet.java	computeGeometricalProperties	THIS	PolyhedronsSet	1	DEF	$.getSize() < 0
765	235	8	PolyhedronsSet.java	recurseFirstIntersection	cut	SubHyperplane<Euclidean3D>	0	RET	$ == null
766	247	8	PolyhedronsSet.java	recurseFirstIntersection	offset	double	1	DEF	$ < 0
767	255	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
768	258	12	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
769	265	8	PolyhedronsSet.java	recurseFirstIntersection	crossed	SubHyperplane<Euclidean3D>	0	RET	$ != null
770	269	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
771	272	12	PolyhedronsSet.java	recurseFirstIntersection	hit3D	Vector3D	0	RET	$ != null
772	274	16	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
773	297	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
773	297	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint($) == Location.INSIDE
773	297	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusOutside() != null
773	297	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
774	301	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
774	301	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint($) == Location.INSIDE
774	301	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusInside() != null
774	301	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
4240	72	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NoDataException	$ == 0
14734	75	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	$ > 1
14734	75	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	c[$ - 1] == 0
14734	75	8	PolynomialFunction.java	PolynomialFunction	c	double	0	NIL-WHILE	$[n - 1] == 0
4241	132	8	PolynomialFunction.java	evaluate	n	int	0	NoDataException	$ == 0
14735	136	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >= 0
4242	152	8	PolynomialFunction.java	value	n	int	0	NoDataException	$ == 0
14736	157	8	PolynomialFunction.java	value	j	int	0	NIL-FOR	$ >= 0
14737	176	8	PolynomialFunction.java	add	i	int	0	NIL-FOR	$ < lowLength
14737	176	8	PolynomialFunction.java	add	lowLength	int	0	NIL-FOR	i < $
14738	201	8	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < lowLength
14738	201	8	PolynomialFunction.java	subtract	lowLength	int	0	NIL-FOR	i < $
4243	204	8	PolynomialFunction.java	subtract	THIS	PolynomialFunction	1	DEF	$.coefficients.$.length < p.$.coefficients.$.length
4243	204	8	PolynomialFunction.java	subtract	p	PolynomialFunction	1	DEF	coefficients.length < $.coefficients.length
14739	205	12	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < highLength
14739	205	12	PolynomialFunction.java	subtract	highLength	int	0	NIL-FOR	i < $
14740	223	8	PolynomialFunction.java	negate	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
14740	223	8	PolynomialFunction.java	negate	i	int	0	NIL-FOR	$ < coefficients.length
14741	238	8	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	i < newCoefficients.$.length
14741	238	8	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	$ < newCoefficients.length
14741	238	8	PolynomialFunction.java	multiply	newCoefficients	double[]	0	NIL-FOR	i < $.length
14742	240	12	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	j < FastMath.min($.coefficients.$.length, i + 1)
14742	240	12	PolynomialFunction.java	multiply	j	int	0	NIL-FOR	$ < FastMath.min(coefficients.length, i + 1)
14742	240	12	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	j < FastMath.min(coefficients.length, $ + 1)
4244	262	8	PolynomialFunction.java	differentiate	n	int	0	NoDataException	$ == 0
4245	265	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
14743	269	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
4246	311	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	RET	$.coefficients[0] == 0.0
4247	312	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	RET	$.coefficients.$.length == 1
14744	319	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
14744	319	8	PolynomialFunction.java	toString	i	int	0	NIL-FOR	$ < coefficients.length
4248	320	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] != 0
4248	320	12	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] != 0
4249	321	16	PolynomialFunction.java	toString	s	StringBuilder	1	DEF	$.length() > 0
4250	322	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	DEF	$.coefficients[i] < 0
4250	322	20	PolynomialFunction.java	toString	i	int	1	DEF	coefficients[$] < 0
4251	328	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] < 0
4251	328	20	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] < 0
4252	334	16	PolynomialFunction.java	toString	absAi	double	0	DEF	($ - 1) != 0
4253	340	16	PolynomialFunction.java	toString	i	int	0	DEF	$ > 1
4254	358	8	PolynomialFunction.java	toString	c	String	1	RET	$.endsWith(".0")
4255	377	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	$ == obj
4255	377	8	PolynomialFunction.java	equals	obj	Object	0	RET	this == $
4256	380	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ instanceof PolynomialFunction
4257	384	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	Arrays.equals($.coefficients, other.$.coefficients)
4257	384	8	PolynomialFunction.java	equals	other	PolynomialFunction	0	RET	Arrays.equals(coefficients, $.coefficients)
4232	80	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.verifyInterpolationArray(x, y, false)
4232	80	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	x	double	0	DEF	verifyInterpolationArray($, y, false)
4232	80	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	y	double	0	DEF	verifyInterpolationArray(x, $, false)
4233	149	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
4234	175	8	PolynomialFunctionLagrangeForm.java	evaluate	THIS	PolynomialFunctionLagrangeForm	0	RET	$.verifyInterpolationArray(x, y, false)
4234	175	8	PolynomialFunctionLagrangeForm.java	evaluate	x	double	0	RET	verifyInterpolationArray($, y, false)
4234	175	8	PolynomialFunctionLagrangeForm.java	evaluate	y	double	0	RET	verifyInterpolationArray(x, $, false)
14725	213	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
14725	213	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
4235	219	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	dist	double	0	DEF	$ < min_dist
4235	219	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	min_dist	double	0	DEF	dist < $
14726	228	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
14726	228	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
14727	229	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	j	int	0	NIL-FOR	$ < n-i
14727	229	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	j < n-$
14727	229	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	j < $-i
4236	239	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	1	DEF	nearest < 0.5*(n-$+1)
4236	239	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	nearest	int	1	DEF	$ < 0.5*(n-i+1)
4236	239	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	1	DEF	nearest < 0.5*($-i+1)
14728	259	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
14728	259	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
14729	266	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
14729	266	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
14730	267	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
14731	275	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
14731	275	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
14732	278	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
14732	278	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
4237	279	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
4237	279	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
14733	289	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
4238	318	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DimensionMismatchException	x.$.length != y.$.length
4238	318	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DimensionMismatchException	$.length != y.length
4238	318	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	DimensionMismatchException	x.length != $.length
4239	321	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	NumberIsTooSmallException	x.$.length < 2
4239	321	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	NumberIsTooSmallException	$.length < 2
14753	109	8	PolynomialFunctionNewtonForm.java	value	i	int	0	NIL-FOR	$ >= 0
4260	160	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
14754	188	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
14755	203	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
14755	203	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
14756	208	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
14757	209	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
4261	237	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	c.$.length == 0
4261	237	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	a.$.length == 0
4261	237	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	NoDataException	$.length == 0
4261	237	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	NoDataException	$.length == 0
4262	240	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DimensionMismatchException	a.$.length != c.$.length + 1
4262	240	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DimensionMismatchException	$.length != c.length + 1
4262	240	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DimensionMismatchException	a.length != $.length + 1
4222	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NullArgumentException	$ == null
4222	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	NullArgumentException	$ == null
4223	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	NumberIsTooSmallException	knots.$.length < 2
4223	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NumberIsTooSmallException	$.length < 2
4224	113	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DimensionMismatchException	knots.$.length - 1 != polynomials.$.length
4224	113	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DimensionMismatchException	$.length - 1 != polynomials.length
4224	113	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	DimensionMismatchException	knots.length - 1 != $.length
4225	137	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v > $.knots[$.n]
4225	137	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v < $.knots[0]
4225	137	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ > knots[n]
4225	137	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ < knots[0]
4226	141	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
4227	147	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
4227	147	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
14724	169	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
14724	169	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
4228	181	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	t0 > $.knots[$.n]
4228	181	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	t0 < $.knots[0]
4228	181	8	PolynomialSplineFunction.java	value	t0	double	0	OutOfRangeException	$ > knots[n]
4228	181	8	PolynomialSplineFunction.java	value	t0	double	0	OutOfRangeException	$ < knots[0]
4229	185	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
4230	191	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
4230	191	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
4231	240	8	PolynomialSplineFunction.java	isValidPoint	THIS	PolynomialSplineFunction	1	RET	x < $.knots[0]
4231	240	8	PolynomialSplineFunction.java	isValidPoint	THIS	PolynomialSplineFunction	1	RET	x > $.knots[$.n]
4231	240	8	PolynomialSplineFunction.java	isValidPoint	x	double	1	RET	$ < knots[0]
4231	240	8	PolynomialSplineFunction.java	isValidPoint	x	double	1	RET	$ > knots[n]
4258	219	8	PolynomialsUtils.java	createJacobiPolynomial	key	JacobiKey	0	DEF	JACOBI_COEFFICIENTS.containsKey($)
14745	329	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
14745	329	8	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
14746	330	12	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ <= i
14746	330	12	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	j <= $
14747	336	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
14747	336	8	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
14748	342	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < d
14748	342	8	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	i < $
14749	343	12	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ < d
14749	343	12	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	j < $
4259	365	12	PolynomialsUtils.java	buildPolynomial	maxDegree	int	0	DEF	degree > $
4259	365	12	PolynomialsUtils.java	buildPolynomial	degree	int	0	DEF	$ > maxDegree
14750	381	8	PolynomialsUtils.java	buildPolynomial	i	int	0	NIL-FOR	$ <= degree
14750	381	8	PolynomialsUtils.java	buildPolynomial	degree	int	0	NIL-FOR	i <= $
14751	401	8	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	$ < degree
14751	401	8	PolynomialsUtils.java	computeUpToDegree	degree	int	0	NIL-FOR	k < $
14752	417	12	PolynomialsUtils.java	computeUpToDegree	i	int	0	NIL-FOR	$ < k
14752	417	12	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	i < $
3021	124	8	PowellOptimizer.java	PowellOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
3022	127	8	PowellOptimizer.java	PowellOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
14063	181	8	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
14063	181	8	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
14064	200	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
14064	200	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3023	211	16	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	($ - fVal) > delta
3023	211	16	PowellOptimizer.java	doOptimize	delta	double	0	DEF	(fX2 - fVal) > $
3023	211	16	PowellOptimizer.java	doOptimize	fVal	double	0	DEF	(fX2 - $) > delta
3024	224	12	PowellOptimizer.java	doOptimize	stop	boolean	0	DEF	$
3024	224	12	PowellOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	DEF	$ != null
3025	227	12	PowellOptimizer.java	doOptimize	stop	boolean	0	RET	$
3026	228	16	PowellOptimizer.java	doOptimize	THIS	PowellOptimizer	1	RET	goal == $.GoalType.MINIMIZE
3026	228	16	PowellOptimizer.java	doOptimize	goal	GoalType	1	RET	$ == GoalType.MINIMIZE
14065	237	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
14065	237	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
3027	245	12	PowellOptimizer.java	doOptimize	fX	double	0	DEF	$ > fX2
3027	245	12	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	fX > $
3028	252	16	PowellOptimizer.java	doOptimize	t	double	0	DEF	$ < 0.0
14066	283	8	PowellOptimizer.java	newPointAndDirection	i	int	0	NIL-FOR	$ < n
14066	283	8	PowellOptimizer.java	newPointAndDirection	n	int	0	NIL-FOR	i < $
3029	373	8	PowellOptimizer.java	checkParameters	THIS	PowellOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
3029	373	8	PowellOptimizer.java	checkParameters	THIS	PowellOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
2193	114	8	PowellOptimizer.java	PowellOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
2194	117	8	PowellOptimizer.java	PowellOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
13633	170	8	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
13633	170	8	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
13634	190	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
13634	190	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
2195	201	16	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	($ - fVal) > delta
2195	201	16	PowellOptimizer.java	doOptimize	delta	double	0	DEF	(fX2 - fVal) > $
2195	201	16	PowellOptimizer.java	doOptimize	fVal	double	0	DEF	(fX2 - $) > delta
2196	214	12	PowellOptimizer.java	doOptimize	stop	boolean	0	DEF	$
2196	214	12	PowellOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	DEF	$ != null
2197	217	12	PowellOptimizer.java	doOptimize	stop	boolean	0	RET	$
2198	218	16	PowellOptimizer.java	doOptimize	THIS	PowellOptimizer	1	RET	goal == $.GoalType.MINIMIZE
2198	218	16	PowellOptimizer.java	doOptimize	goal	GoalType	1	RET	$ == GoalType.MINIMIZE
13635	227	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
13635	227	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
2199	235	12	PowellOptimizer.java	doOptimize	fX	double	0	DEF	$ > fX2
2199	235	12	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	fX > $
2200	242	16	PowellOptimizer.java	doOptimize	t	double	0	DEF	$ < 0.0
13636	273	8	PowellOptimizer.java	newPointAndDirection	i	int	0	NIL-FOR	$ < n
13636	273	8	PowellOptimizer.java	newPointAndDirection	n	int	0	NIL-FOR	i < $
221	96	8	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x, y, eps)
221	96	8	Precision.java	compareTo	x	double	1	RET	equals($, y, eps)
221	96	8	Precision.java	compareTo	y	double	1	RET	equals(x, $, eps)
221	96	8	Precision.java	compareTo	eps	double	1	RET	equals(x, y, $)
222	98	15	Precision.java	compareTo	x	double	0	RET	$ < y
222	98	15	Precision.java	compareTo	y	double	0	RET	x < $
223	122	8	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x, y, maxUlps)
223	122	8	Precision.java	compareTo	x	double	1	RET	equals($, y, maxUlps)
223	122	8	Precision.java	compareTo	y	double	1	RET	equals(x, $, maxUlps)
223	122	8	Precision.java	compareTo	maxUlps	int	1	RET	equals(x, y, $)
224	124	15	Precision.java	compareTo	x	double	0	RET	$ < y
224	124	15	Precision.java	compareTo	y	double	0	RET	x < $
225	207	8	Precision.java	equals	xInt	int	0	DEF	$ < 0
226	210	8	Precision.java	equals	yInt	int	0	DEF	$ < 0
227	288	8	Precision.java	equalsWithRelativeTolerance	THIS	Precision	0	RET	$.equals(x, y, 1)
227	288	8	Precision.java	equalsWithRelativeTolerance	x	double	0	RET	equals($, y, 1)
227	288	8	Precision.java	equalsWithRelativeTolerance	y	double	0	RET	equals(x, $, 1)
228	335	8	Precision.java	equals	xInt	long	0	DEF	$ < 0
229	338	8	Precision.java	equals	yInt	long	0	DEF	$ < 0
230	400	12	Precision.java	round	x	double	1	RET	Double.isInfinite($)
231	460	12	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
232	470	12	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
233	479	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
234	488	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
235	490	19	Precision.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
236	494	16	Precision.java	roundUnscaled	unscaled	double	1	DEF	FastMath.floor($) / 2.0 == FastMath.floor(Math .floor($) / 2.0)
237	506	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
238	514	12	Precision.java	roundUnscaled	unscaled	double	0	MathArithmeticException	$ != FastMath.floor($)
1482	144	8	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$ != null
1483	145	12	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	NonSquareOperatorException	$.getColumnDimension() != $.getRowDimension()
1484	149	12	PreconditionedIterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	m.getRowDimension() != $.getRowDimension()
1484	149	12	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$.getRowDimension() != a.getRowDimension()
1058	55	8	Primes.java	isPrime	n	int	0	RET	$ < 2
1059	60	12	Primes.java	isPrime	THIS	Primes	0	RET	0 == (n % $.p)
1059	60	12	Primes.java	isPrime	n	int	0	RET	0 == ($ % p)
1060	75	8	Primes.java	nextPrime	n	int	0	MathIllegalArgumentException	$ < 0
1061	78	8	Primes.java	nextPrime	n	int	0	RET	$ == 2
1062	82	8	Primes.java	nextPrime	n	int	0	RET	$ == 1
1063	86	8	Primes.java	nextPrime	THIS	Primes	0	RET	$.isPrime(n)
1063	86	8	Primes.java	nextPrime	n	int	0	RET	isPrime($)
1064	93	8	Primes.java	nextPrime	rem	int	1	DEF	0 == $
1065	95	15	Primes.java	nextPrime	rem	int	0	DEF	1 == $
1066	100	12	Primes.java	nextPrime	THIS	Primes	0	RET	$.isPrime(n)
1066	100	12	Primes.java	nextPrime	n	int	0	RET	isPrime($)
1067	104	12	Primes.java	nextPrime	THIS	Primes	0	RET	$.isPrime(n)
1067	104	12	Primes.java	nextPrime	n	int	0	RET	isPrime($)
1068	120	8	Primes.java	primeFactors	n	int	0	MathIllegalArgumentException	$ < 2
2251	125	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length, true)
2251	125	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2251	125	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2251	125	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
13669	127	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
13669	127	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
13669	127	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2252	165	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, weights, begin, length, true)
2252	165	8	Product.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
2252	165	8	Product.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
2252	165	8	Product.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
2252	165	8	Product.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
13670	167	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
13670	167	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
13670	167	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1016	100	8	ProperBigFractionFormat.java	format	whole	BigInteger	0	DEF	BigInteger.ZERO.equals($)
1017	103	12	ProperBigFractionFormat.java	format	num	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
1018	138	8	ProperBigFractionFormat.java	parse	ret	BigFraction	0	RET	$ != null
1019	149	8	ProperBigFractionFormat.java	parse	whole	BigInteger	0	RET	$ == null
1020	162	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
1021	170	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
1022	201	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
1023	209	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
1024	216	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
1025	220	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
1026	234	8	ProperBigFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
999	101	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
1000	138	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
1001	149	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
1002	162	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
1003	170	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
1004	201	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
1005	209	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
1006	227	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
12869	112	8	QRDecomposition.java	decompose	THIS	QRDecomposition	0	NIL-FOR	minor < FastMath.min($.qrt.$.length, $.qrt[0].length)
12869	112	8	QRDecomposition.java	decompose	minor	int	0	NIL-FOR	$ < FastMath.min(qrt.length, qrt[0].length)
12870	134	8	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	row < qrtMinor.$.length
12870	134	8	QRDecomposition.java	performHouseholderReflection	row	int	0	NIL-FOR	$ < qrtMinor.length
12870	134	8	QRDecomposition.java	performHouseholderReflection	qrtMinor	double[]	0	NIL-FOR	row < $.length
1504	141	8	QRDecomposition.java	performHouseholderReflection	a	double	0	DEF	$ != 0.0
12871	165	12	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	col < $.qrt.$.length
12871	165	12	QRDecomposition.java	performHouseholderReflection	col	int	0	NIL-FOR	$ < qrt.length
12872	168	16	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	row < qrtCol.$.length
12872	168	16	QRDecomposition.java	performHouseholderReflection	row	int	0	NIL-FOR	$ < qrtCol.length
12872	168	16	QRDecomposition.java	performHouseholderReflection	qrtCol	double[]	0	NIL-FOR	row < $.length
12873	174	16	QRDecomposition.java	performHouseholderReflection	THIS	QRDecomposition	0	NIL-FOR	row < qrtCol.$.length
12873	174	16	QRDecomposition.java	performHouseholderReflection	row	int	0	NIL-FOR	$ < qrtCol.length
12873	174	16	QRDecomposition.java	performHouseholderReflection	qrtCol	double[]	0	NIL-FOR	row < $.length
1505	189	8	QRDecomposition.java	getR	THIS	QRDecomposition	0	DEF	$.cachedR == null
12874	196	12	QRDecomposition.java	getR	row	int	0	NIL-FOR	$ >= 0
12875	198	16	QRDecomposition.java	getR	col	int	0	NIL-FOR	$ < n
12875	198	16	QRDecomposition.java	getR	n	int	0	NIL-FOR	col < $
1506	215	8	QRDecomposition.java	getQ	THIS	QRDecomposition	0	DEF	$.cachedQ == null
1507	227	8	QRDecomposition.java	getQT	THIS	QRDecomposition	0	DEF	$.cachedQT == null
12876	239	12	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= FastMath.min(m, n)
12876	239	12	QRDecomposition.java	getQT	n	int	0	NIL-FOR	minor >= FastMath.min(m, $)
12876	239	12	QRDecomposition.java	getQT	m	int	0	NIL-FOR	minor >= FastMath.min($, n)
12877	243	12	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= 0
1508	246	16	QRDecomposition.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
1508	246	16	QRDecomposition.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
12878	247	20	QRDecomposition.java	getQT	col	int	0	NIL-FOR	$ < m
12878	247	20	QRDecomposition.java	getQT	m	int	0	NIL-FOR	col < $
12879	249	24	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
12879	249	24	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
12880	254	24	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
12880	254	24	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
1509	275	8	QRDecomposition.java	getH	THIS	QRDecomposition	0	DEF	$.cachedH == null
12881	280	12	QRDecomposition.java	getH	i	int	0	NIL-FOR	$ < m
12881	280	12	QRDecomposition.java	getH	m	int	0	NIL-FOR	i < $
12882	281	16	QRDecomposition.java	getH	j	int	0	NIL-FOR	$ < FastMath.min(i + 1, n)
12882	281	16	QRDecomposition.java	getH	i	int	0	NIL-FOR	j < FastMath.min($ + 1, n)
12882	281	16	QRDecomposition.java	getH	n	int	0	NIL-FOR	j < FastMath.min(i + 1, $)
948	90	8	Quaternion.java	Quaternion	THIS	Quaternion	0	DimensionMismatchException	v.$.length != 3
948	90	8	Quaternion.java	Quaternion	v	double[]	0	DimensionMismatchException	$.length != 3
949	254	8	Quaternion.java	normalize	norm	double	0	ZeroException	$ < Precision.SAFE_MIN
950	269	8	Quaternion.java	equals	THIS	Quaternion	0	RET	$ == other
950	269	8	Quaternion.java	equals	other	Object	0	RET	this == $
951	272	8	Quaternion.java	equals	other	Object	0	RET	$ instanceof Quaternion
952	343	8	Quaternion.java	getPositivePolarForm	THIS	Quaternion	1	RET	$.getQ0() < 0
953	365	8	Quaternion.java	getInverse	squareNorm	double	0	ZeroException	$ < Precision.SAFE_MIN
12657	88	8	RRQRDecomposition.java	decompose	THIS	RRQRDecomposition	0	NIL-FOR	i < $.p.$.length
12657	88	8	RRQRDecomposition.java	decompose	i	int	0	NIL-FOR	$ < p.length
12658	103	8	RRQRDecomposition.java	performHouseholderReflection	THIS	RRQRDecomposition	0	NIL-FOR	i < qrt.$.length
12658	103	8	RRQRDecomposition.java	performHouseholderReflection	i	int	0	NIL-FOR	$ < qrt.length
12658	103	8	RRQRDecomposition.java	performHouseholderReflection	qrt	double[][]	0	NIL-FOR	i < $.length
12659	105	12	RRQRDecomposition.java	performHouseholderReflection	THIS	RRQRDecomposition	0	NIL-FOR	j < qrt[i].length
12659	105	12	RRQRDecomposition.java	performHouseholderReflection	j	int	0	NIL-FOR	$ < qrt[i].length
12659	105	12	RRQRDecomposition.java	performHouseholderReflection	i	int	0	NIL-FOR	j < qrt[$].length
12659	105	12	RRQRDecomposition.java	performHouseholderReflection	qrt	double[][]	0	NIL-FOR	j < $[i].length
1333	108	12	RRQRDecomposition.java	performHouseholderReflection	l2NormSquared	double	0	DEF	$ > l2NormSquaredMax
1333	108	12	RRQRDecomposition.java	performHouseholderReflection	l2NormSquaredMax	double	0	DEF	l2NormSquared > $
1334	114	8	RRQRDecomposition.java	performHouseholderReflection	l2NormSquaredMaxIndex	int	0	DEF	$ != minor
1334	114	8	RRQRDecomposition.java	performHouseholderReflection	minor	int	0	DEF	l2NormSquaredMaxIndex != $
1335	136	8	RRQRDecomposition.java	getP	THIS	RRQRDecomposition	0	DEF	$.cachedP == null
12660	139	12	RRQRDecomposition.java	getP	i	int	0	NIL-FOR	$ < n
12660	139	12	RRQRDecomposition.java	getP	n	int	0	NIL-FOR	i < $
12661	172	8	RRQRDecomposition.java	getRank	rows	int	0	NIL-WHILE	rank < FastMath.min($, columns)
12661	172	8	RRQRDecomposition.java	getRank	columns	int	0	NIL-WHILE	rank < FastMath.min(rows, $)
12661	172	8	RRQRDecomposition.java	getRank	rank	int	0	NIL-WHILE	$ < FastMath.min(rows, columns)
1336	174	12	RRQRDecomposition.java	getRank	thisNorm	double	0	DEF	$ == 0
1336	174	12	RRQRDecomposition.java	getRank	thisNorm	double	0	DEF	($ / lastNorm) * rNorm < dropThreshold
1336	174	12	RRQRDecomposition.java	getRank	lastNorm	double	0	DEF	(thisNorm / $) * rNorm < dropThreshold
1336	174	12	RRQRDecomposition.java	getRank	rNorm	double	0	DEF	(thisNorm / lastNorm) * $ < dropThreshold
1336	174	12	RRQRDecomposition.java	getRank	dropThreshold	double	0	DEF	(thisNorm / lastNorm) * rNorm < $
3144	178	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
3145	185	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
3146	193	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
3156	161	8	RandomDataGenerator.java	nextHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
14187	176	8	RandomDataGenerator.java	nextHexString	THIS	RandomDataGenerator	0	NIL-FOR	i < randomBytes.$.length
14187	176	8	RandomDataGenerator.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
14187	176	8	RandomDataGenerator.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
3157	187	12	RandomDataGenerator.java	nextHexString	hex	String	0	DEF	$.length() == 1
3158	197	8	RandomDataGenerator.java	nextInt	lower	int	0	NumberIsTooLargeException	$ >= upper
3158	197	8	RandomDataGenerator.java	nextInt	upper	int	0	NumberIsTooLargeException	lower >= $
3159	202	8	RandomDataGenerator.java	nextInt	max	int	1	RET	$ <= 0
3160	208	16	RandomDataGenerator.java	nextInt	r	int	0	RET	$ >= lower
3160	208	16	RandomDataGenerator.java	nextInt	r	int	0	RET	$ <= upper
3160	208	16	RandomDataGenerator.java	nextInt	lower	int	0	RET	r >= $
3160	208	16	RandomDataGenerator.java	nextInt	upper	int	0	RET	r <= $
3161	220	8	RandomDataGenerator.java	nextLong	lower	long	0	NumberIsTooLargeException	$ >= upper
3161	220	8	RandomDataGenerator.java	nextLong	upper	long	0	NumberIsTooLargeException	lower >= $
3162	225	8	RandomDataGenerator.java	nextLong	max	long	1	RET	$ <= 0
3163	231	16	RandomDataGenerator.java	nextLong	r	long	0	RET	$ >= lower
3163	231	16	RandomDataGenerator.java	nextLong	r	long	0	RET	$ <= upper
3163	231	16	RandomDataGenerator.java	nextLong	lower	long	0	RET	r >= $
3163	231	16	RandomDataGenerator.java	nextLong	upper	long	0	RET	r <= $
3164	235	15	RandomDataGenerator.java	nextLong	max	long	1	RET	$ < Integer.MAX_VALUE
3165	257	8	RandomDataGenerator.java	nextLong	n	long	0	RET	$ > 0
14188	261	12	RandomDataGenerator.java	nextLong	bits	long	0	NIL-DOWHILE	$ - val + (n - 1) < 0
14188	261	12	RandomDataGenerator.java	nextLong	val	long	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
14188	261	12	RandomDataGenerator.java	nextLong	n	long	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
3166	293	8	RandomDataGenerator.java	nextSecureHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
14189	312	8	RandomDataGenerator.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
14189	312	8	RandomDataGenerator.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
14190	321	12	RandomDataGenerator.java	nextSecureHexString	THIS	RandomDataGenerator	0	NIL-FOR	i < hash.$.length
14190	321	12	RandomDataGenerator.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
14190	321	12	RandomDataGenerator.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
3167	332	16	RandomDataGenerator.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
3168	343	8	RandomDataGenerator.java	nextSecureInt	lower	int	0	NumberIsTooLargeException	$ >= upper
3168	343	8	RandomDataGenerator.java	nextSecureInt	upper	int	0	NumberIsTooLargeException	lower >= $
3169	348	8	RandomDataGenerator.java	nextSecureInt	max	int	1	RET	$ <= 0
3170	354	16	RandomDataGenerator.java	nextSecureInt	r	int	0	RET	$ >= lower
3170	354	16	RandomDataGenerator.java	nextSecureInt	r	int	0	RET	$ <= upper
3170	354	16	RandomDataGenerator.java	nextSecureInt	lower	int	0	RET	r >= $
3170	354	16	RandomDataGenerator.java	nextSecureInt	upper	int	0	RET	r <= $
3171	366	8	RandomDataGenerator.java	nextSecureLong	lower	long	0	NumberIsTooLargeException	$ >= upper
3171	366	8	RandomDataGenerator.java	nextSecureLong	upper	long	0	NumberIsTooLargeException	lower >= $
3172	371	8	RandomDataGenerator.java	nextSecureLong	max	long	1	RET	$ <= 0
3173	377	16	RandomDataGenerator.java	nextSecureLong	r	long	0	RET	$ <= upper
3173	377	16	RandomDataGenerator.java	nextSecureLong	r	long	0	RET	$ >= lower
3173	377	16	RandomDataGenerator.java	nextSecureLong	lower	long	0	RET	r >= $
3173	377	16	RandomDataGenerator.java	nextSecureLong	upper	long	0	RET	r <= $
3174	381	15	RandomDataGenerator.java	nextSecureLong	max	long	1	RET	$ < Integer.MAX_VALUE
3175	403	8	RandomDataGenerator.java	nextLong	n	long	0	RET	$ > 0
14191	407	12	RandomDataGenerator.java	nextLong	bits	long	0	NIL-DOWHILE	$ - val + (n - 1) < 0
14191	407	12	RandomDataGenerator.java	nextLong	val	long	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
14191	407	12	RandomDataGenerator.java	nextLong	n	long	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
3176	443	8	RandomDataGenerator.java	nextGaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
3177	658	8	RandomDataGenerator.java	nextUniform	lower	double	0	NumberIsTooLargeException	$ >= upper
3177	658	8	RandomDataGenerator.java	nextUniform	upper	double	0	NumberIsTooLargeException	lower >= $
3178	663	8	RandomDataGenerator.java	nextUniform	lower	double	0	NotFiniteNumberException	Double.isInfinite($)
3179	666	8	RandomDataGenerator.java	nextUniform	upper	double	0	NotFiniteNumberException	Double.isInfinite($)
3180	670	8	RandomDataGenerator.java	nextUniform	lower	double	0	NotANumberException	Double.isNaN($)
3180	670	8	RandomDataGenerator.java	nextUniform	upper	double	0	NotANumberException	Double.isNaN($)
14192	678	8	RandomDataGenerator.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
14192	678	8	RandomDataGenerator.java	nextUniform	lowerInclusive	boolean	0	NIL-WHILE	$
3181	698	8	RandomDataGenerator.java	nextPermutation	n	int	0	NumberIsTooLargeException	k > $
3181	698	8	RandomDataGenerator.java	nextPermutation	k	int	0	NumberIsTooLargeException	$ > n
3182	702	8	RandomDataGenerator.java	nextPermutation	k	int	0	NotStrictlyPositiveException	$ <= 0
14193	710	8	RandomDataGenerator.java	nextPermutation	i	int	0	NIL-FOR	$ < k
14193	710	8	RandomDataGenerator.java	nextPermutation	k	int	0	NIL-FOR	i < $
3183	733	8	RandomDataGenerator.java	nextSample	len	int	0	NumberIsTooLargeException	k > $
3183	733	8	RandomDataGenerator.java	nextSample	k	int	0	NumberIsTooLargeException	$ > len
3184	737	8	RandomDataGenerator.java	nextSample	k	int	0	NotStrictlyPositiveException	$ <= 0
14194	744	8	RandomDataGenerator.java	nextSample	i	int	0	NIL-FOR	$ < k
14194	744	8	RandomDataGenerator.java	nextSample	k	int	0	NIL-FOR	i < $
3185	828	8	RandomDataGenerator.java	getRandomGenerator	THIS	RandomDataGenerator	0	DEF	$.rand == null
3186	852	8	RandomDataGenerator.java	getSecRan	THIS	RandomDataGenerator	0	DEF	$.secRand == null
14195	868	8	RandomDataGenerator.java	shuffle	i	int	0	NIL-FOR	$ >= end
14195	868	8	RandomDataGenerator.java	shuffle	end	int	0	NIL-FOR	i >= $
3187	869	12	RandomDataGenerator.java	shuffle	i	int	1	DEF	$ == 0
14196	889	8	RandomDataGenerator.java	getNatural	i	int	0	NIL-FOR	$ < n
14196	889	8	RandomDataGenerator.java	getNatural	n	int	0	NIL-FOR	i < $
3243	121	8	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	representation.size() != $
3243	121	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	DimensionMismatchException	$.size() != l
3244	124	8	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	sortedRepr.size() != $
3244	124	8	RandomKey.java	decodeGeneric	sortedRepr	List<Double>	0	DimensionMismatchException	$.size() != l
14223	133	8	RandomKey.java	decodeGeneric	i	int	0	NIL-FOR	$<l
14223	133	8	RandomKey.java	decodeGeneric	l	int	0	NIL-FOR	i<$
3245	151	8	RandomKey.java	isSame	another	Chromosome	0	RET	$ instanceof RandomKey<?>
3246	156	8	RandomKey.java	isSame	THIS	RandomKey	0	RET	$.getLength() != anotherRk.getLength()
3246	156	8	RandomKey.java	isSame	anotherRk	RandomKey<?>	0	RET	getLength() != $.getLength()
14224	165	8	RandomKey.java	isSame	THIS	RandomKey	0	NIL-FOR	i<$.getLength()
14224	165	8	RandomKey.java	isSame	i	int	0	NIL-FOR	$<getLength()
3247	166	12	RandomKey.java	isSame	i	int	0	RET	thisPerm.get($) != anotherPerm.get($)
3247	166	12	RandomKey.java	isSame	thisPerm	List<Integer>	0	RET	$.get(i) != anotherPerm.get(i)
3247	166	12	RandomKey.java	isSame	anotherPerm	List<Integer>	0	RET	thisPerm.get(i) != $.get(i)
3248	182	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val > 1
3248	182	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val < 0
14225	199	8	RandomKey.java	randomPermutation	i	int	0	NIL-FOR	$<l
14225	199	8	RandomKey.java	randomPermutation	l	int	0	NIL-FOR	i<$
14226	214	8	RandomKey.java	identityPermutation	i	int	0	NIL-FOR	$<l
14226	214	8	RandomKey.java	identityPermutation	l	int	0	NIL-FOR	i<$
3249	262	8	RandomKey.java	inducedPermutation	originalData	List<S>	0	DimensionMismatchException	$.size() != permutedData.size()
3249	262	8	RandomKey.java	inducedPermutation	permutedData	List<S>	0	DimensionMismatchException	originalData.size() != $.size()
14227	270	8	RandomKey.java	inducedPermutation	i	int	0	NIL-FOR	$<l
14227	270	8	RandomKey.java	inducedPermutation	l	int	0	NIL-FOR	i<$
3250	272	12	RandomKey.java	inducedPermutation	index	int	0	MathIllegalArgumentException	$ == -1
14228	294	8	RandomKey.java	baseSequence	i	int	0	NIL-FOR	$<l
14228	294	8	RandomKey.java	baseSequence	l	int	0	NIL-FOR	i<$
3218	40	8	RandomKeyMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof RandomKey<?>
12662	256	8	RealMatrixFormat.java	format	i	int	0	NIL-FOR	$ < rows
12662	256	8	RealMatrixFormat.java	format	rows	int	0	NIL-FOR	i < $
12663	258	12	RealMatrixFormat.java	format	j	int	0	NIL-FOR	$ < matrix.getColumnDimension()
12663	258	12	RealMatrixFormat.java	format	matrix	RealMatrix	0	NIL-FOR	j < $.getColumnDimension()
1337	259	16	RealMatrixFormat.java	format	j	int	0	DEF	$ > 0
1338	265	12	RealMatrixFormat.java	format	i	int	0	DEF	$ < rows - 1
1338	265	12	RealMatrixFormat.java	format	rows	int	0	DEF	i < $ - 1
1339	287	8	RealMatrixFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1340	314	8	RealMatrixFormat.java	parse	trimmedPrefix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1340	314	8	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
1340	314	8	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
12664	321	8	RealMatrixFormat.java	parse	loop	boolean	0	NIL-FOR	$
1341	323	12	RealMatrixFormat.java	parse	rowComponents	List<Number>	1	RET	$.isEmpty()
1342	325	16	RealMatrixFormat.java	parse	trimmedColumnSeparator	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1342	325	16	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedColumnSeparator, pos)
1342	325	16	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedColumnSeparator, $)
1343	326	20	RealMatrixFormat.java	parse	trimmedRowSuffix	String	1	RET	CompositeFormat.parseFixedstring(source, $, pos)
1343	326	20	RealMatrixFormat.java	parse	trimmedRowSuffix	String	1	RET	$.length() != 0
1343	326	20	RealMatrixFormat.java	parse	source	String	1	RET	CompositeFormat.parseFixedstring($, trimmedRowSuffix, pos)
1343	326	20	RealMatrixFormat.java	parse	pos	ParsePosition	1	RET	CompositeFormat.parseFixedstring(source, trimmedRowSuffix, $)
1344	331	24	RealMatrixFormat.java	parse	trimmedRowSeparator	String	1	DEF	CompositeFormat.parseFixedstring(source, $, pos)
1344	331	24	RealMatrixFormat.java	parse	source	String	1	DEF	CompositeFormat.parseFixedstring($, trimmedRowSeparator, pos)
1344	331	24	RealMatrixFormat.java	parse	pos	ParsePosition	1	DEF	CompositeFormat.parseFixedstring(source, trimmedRowSeparator, $)
1345	342	16	RealMatrixFormat.java	parse	trimmedRowPrefix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1345	342	16	RealMatrixFormat.java	parse	trimmedRowPrefix	String	0	RET	$.length() != 0
1345	342	16	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedRowPrefix, pos)
1345	342	16	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedRowPrefix, $)
1346	348	12	RealMatrixFormat.java	parse	loop	boolean	0	RET	$
1347	351	16	RealMatrixFormat.java	parse	component	Number	1	DEF	$ != null
1348	354	20	RealMatrixFormat.java	parse	rowComponents	List<Number>	1	DEF	$.isEmpty()
1349	367	8	RealMatrixFormat.java	parse	rowComponents	List<Number>	0	DEF	$.isEmpty()
1350	373	8	RealMatrixFormat.java	parse	trimmedSuffix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1350	373	8	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
1350	373	8	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
1351	378	8	RealMatrixFormat.java	parse	matrix	List<List<Number>>	0	RET	$.isEmpty()
12665	388	12	RealMatrixFormat.java	parse	THIS	RealMatrixFormat	0	NIL-FOR	i < $.rowList.size()
12665	388	12	RealMatrixFormat.java	parse	i	int	0	NIL-FOR	$ < rowList.size()
1781	178	8	RealVector.java	checkVectorDimensions	d	int	0	DimensionMismatchException	$ != n
1781	178	8	RealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	d != $
1782	190	8	RealVector.java	checkIndex	THIS	RealVector	0	OutOfRangeException	index >= $.getDimension()
1782	190	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1782	190	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1783	209	8	RealVector.java	checkIndices	dim	int	0	OutOfRangeException	start >= $
1783	209	8	RealVector.java	checkIndices	start	int	0	OutOfRangeException	$ >= dim
1783	209	8	RealVector.java	checkIndices	start	int	0	OutOfRangeException	$ < 0
1784	213	8	RealVector.java	checkIndices	dim	int	0	OutOfRangeException	end >= $
1784	213	8	RealVector.java	checkIndices	end	int	0	OutOfRangeException	$ >= dim
1784	213	8	RealVector.java	checkIndices	end	int	0	OutOfRangeException	$ < 0
1785	217	8	RealVector.java	checkIndices	start	int	0	NumberIsTooSmallException	end < $
1785	217	8	RealVector.java	checkIndices	end	int	0	NumberIsTooSmallException	$ < start
13290	237	8	RealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
13291	258	8	RealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1786	285	8	RealVector.java	mapAddToSelf	d	double	0	RET	$ != 0
13292	310	8	RealVector.java	dotProduct	i	int	0	NIL-FOR	$ < n
13292	310	8	RealVector.java	dotProduct	n	int	0	NIL-FOR	i < $
1787	332	8	RealVector.java	cosine	norm	double	0	MathArithmeticException	$ == 0
1787	332	8	RealVector.java	cosine	vNorm	double	0	MathArithmeticException	$ == 0
13293	399	8	RealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
13294	420	8	RealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
13295	441	8	RealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
13296	461	8	RealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
13297	484	8	RealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
13298	510	8	RealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
13299	527	8	RealVector.java	getMinIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1788	529	12	RealVector.java	getMinIndex	entry	Entry	0	DEF	$.getValue() <= minValue
1788	529	12	RealVector.java	getMinIndex	minValue	double	0	DEF	entry.getValue() <= $
13300	558	8	RealVector.java	getMaxIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1789	560	12	RealVector.java	getMaxIndex	entry	Entry	0	DEF	$.getValue() >= maxValue
1789	560	12	RealVector.java	getMaxIndex	maxValue	double	0	DEF	entry.getValue() >= $
1790	656	8	RealVector.java	outerProduct	v	RealVector	1	DEF	$ instanceof SparseRealVector
13301	661	8	RealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
13301	661	8	RealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
13302	662	12	RealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
13302	662	12	RealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1791	682	8	RealVector.java	projection	norm2	double	0	MathArithmeticException	$ == 0.0
13303	695	8	RealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
13304	711	8	RealVector.java	toArray	i	int	0	NIL-FOR	$ < dim
13304	711	8	RealVector.java	toArray	dim	int	0	NIL-FOR	i < $
1792	726	8	RealVector.java	unitVector	norm	double	0	MathArithmeticException	$ == 0
1793	740	8	RealVector.java	unitize	norm	double	0	MathArithmeticException	$ == 0
13305	845	8	RealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
13306	885	8	RealVector.java	combineToSelf	THIS	RealVector	0	NIL-FOR	i < $.getDimension()
13306	885	8	RealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < getDimension()
13307	906	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < dim
13307	906	8	RealVector.java	walkInDefaultOrder	dim	int	0	NIL-FOR	i < $
13308	930	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
13308	930	8	RealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
13309	986	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < dim
13309	986	8	RealVector.java	walkInDefaultOrder	dim	int	0	NIL-FOR	i < $
13310	1010	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
13310	1010	8	RealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
13032	202	8	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
13032	202	8	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
1624	203	12	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
1625	226	8	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1626	246	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
1626	246	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
1626	246	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
13033	252	8	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
1627	254	12	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
1628	256	16	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
1628	256	16	RealVectorFormat.java	parse	source	String	0	DEF	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
1628	256	16	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
1629	261	12	RealVectorFormat.java	parse	loop	boolean	0	RET	$
1630	264	16	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
1631	278	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
1631	278	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
1631	278	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
13034	284	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
13034	284	8	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
13034	284	8	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
13178	90	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
13178	90	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
13179	95	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	loop	boolean	0	NIL-FOR	$
13180	99	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
13180	99	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1688	102	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ii	int	0	DEF	c[$][$] > c[isr][isr]
1688	102	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	isr	int	0	DEF	c[ii][ii] > c[$][$]
1688	102	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	DEF	$[ii][ii] > $[isr][isr]
1689	109	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	swapR	int	0	DEF	$ != r
1689	109	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	DEF	swapR != $
1690	120	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ir	int	1	NonPositiveDefiniteMatrixException	c[$][$] <= small
1690	120	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	1	NonPositiveDefiniteMatrixException	$[ir][ir] <= small
1690	120	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	1	NonPositiveDefiniteMatrixException	c[ir][ir] <= $
1691	122	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NonPositiveDefiniteMatrixException	$ == 0
13181	127	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
13181	127	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1692	128	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
1692	128	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	NonPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
1692	128	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	index	int[]	0	NonPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
1692	128	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	0	NonPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
13182	146	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
13182	146	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
13183	151	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < i
13183	151	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	j < $
13184	167	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
13184	167	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
13185	168	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < r
13185	168	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NIL-FOR	j < $
650	44	8	RegionFactory.java	buildConvex	THIS	RegionFactory	0	RET	hyperplanes.$.length == 0
650	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$.length == 0
650	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$ == null
651	55	12	RegionFactory.java	buildConvex	THIS	RegionFactory	0	DEF	node.insertCut($.hyperplane)
651	55	12	RegionFactory.java	buildConvex	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
652	137	8	RegionFactory.java	recurseComplement	node	BSPTree<S>	0	RET	$.getCut() == null
653	143	8	RegionFactory.java	recurseComplement	attribute	BoundaryAttribute<S>	0	DEF	$ != null
2616	100	8	RegressionResults.java	RegressionResults	copyData	boolean	1	DEF	$
13837	103	12	RegressionResults.java	RegressionResults	THIS	RegressionResults	0	NIL-FOR	i < varcov.$.length
13837	103	12	RegressionResults.java	RegressionResults	i	int	0	NIL-FOR	$ < varcov.length
13837	103	12	RegressionResults.java	RegressionResults	varcov	double[][]	0	NIL-FOR	i < $.length
2617	117	8	RegressionResults.java	RegressionResults	rank	int	0	DEF	$ > 0
2618	129	8	RegressionResults.java	RegressionResults	containsConstant	boolean	1	DEF	$
2619	151	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2620	154	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
2620	154	8	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
2620	154	8	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ < 0
2621	171	8	RegressionResults.java	getParameterEstimates	THIS	RegressionResults	0	RET	$.parameters == null
2622	188	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2623	191	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
2623	191	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ < 0
2623	191	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
2624	195	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	Double.isNaN($)
2624	195	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	$ > Double.MIN_VALUE
2625	213	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	RET	$.parameters == null
13838	217	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	NIL-FOR	i < $.parameters.length
13838	217	8	RegressionResults.java	getStdErrorOfEstimates	i	int	0	NIL-FOR	$ < this.parameters.length
2626	219	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	$ > Double.MIN_VALUE
2626	219	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	Double.isNaN($)
2627	241	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2628	244	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	i >= $.parameters.length
2628	244	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ < 0
2628	244	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ >= this.parameters.length
2629	247	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	j >= $.parameters.length
2629	247	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ >= this.parameters.length
2629	247	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ < 0
2630	262	8	RegressionResults.java	getNumberOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2631	401	8	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.isSymmetricVCD
2632	402	12	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.varCovData.length > 1
2633	404	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ == j
2633	404	16	RegressionResults.java	getVcvElement	j	int	1	RET	i == $
2634	406	23	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	i >= $.varCovData[j].length
2634	406	23	RegressionResults.java	getVcvElement	i	int	1	RET	$ >= varCovData[j].length
2634	406	23	RegressionResults.java	getVcvElement	j	int	1	RET	i >= varCovData[$].length
2635	412	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ > j
2635	412	16	RegressionResults.java	getVcvElement	j	int	1	RET	i > $
191	402	8	ResizableDoubleArray.java	ResizableDoubleArray	initialCapacity	int	0	NotStrictlyPositiveException	$ <= 0
192	415	8	ResizableDoubleArray.java	ResizableDoubleArray	data	double	0	DEF	$ != null
193	442	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.internalArray.$.length <= $.startIndex + $.numElements
194	482	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
195	492	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
196	510	8	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	MathIllegalStateException	$.numElements < 1
197	557	8	ResizableDoubleArray.java	checkContractExpand	contraction	double	0	DEF	$ < expansion
197	557	8	ResizableDoubleArray.java	checkContractExpand	expansion	double	0	DEF	contraction < $
198	564	8	ResizableDoubleArray.java	checkContractExpand	contraction	double	0	DEF	$ <= 1
199	571	8	ResizableDoubleArray.java	checkContractExpand	expansion	double	0	DEF	$ <= 1
200	657	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	MathIllegalArgumentException	i > $.numElements
200	657	8	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ > numElements
201	661	14	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ < 0
202	668	12	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
203	672	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
204	693	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == $.ExpansionMode.MULTIPLICATIVE
205	762	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	ArrayIndexOutOfBoundsException	index >= $.numElements
205	762	8	ResizableDoubleArray.java	getElement	index	int	1	ArrayIndexOutOfBoundsException	$ >= numElements
206	764	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
207	963	8	ResizableDoubleArray.java	setElement	index	int	0	ArrayIndexOutOfBoundsException	$ < 0
208	966	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
208	966	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
209	969	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
209	969	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
210	1007	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != ADDITIVE_MODE
210	1007	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != MULTIPLICATIVE_MODE
211	1014	12	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	1	DEF	$ == MULTIPLICATIVE_MODE
212	1016	19	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ == ADDITIVE_MODE
213	1058	8	ResizableDoubleArray.java	setNumElements	i	int	0	MathIllegalArgumentException	$ < 0
214	1067	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	newSize > $.internalArray.$.length
214	1067	8	ResizableDoubleArray.java	setNumElements	newSize	int	0	DEF	$ > internalArray.length
215	1082	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == $.ExpansionMode.MULTIPLICATIVE
216	1165	8	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
216	1165	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
217	1168	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
218	1180	16	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
4092	82	8	RiddersSolver.java	doSolve	y1	double	0	RET	$ == 0
4093	85	8	RiddersSolver.java	doSolve	y2	double	0	RET	$ == 0
4094	99	12	RiddersSolver.java	doSolve	y3	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4094	99	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y3) <= $
4095	110	12	RiddersSolver.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
4095	110	12	RiddersSolver.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
4095	110	12	RiddersSolver.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
4096	113	12	RiddersSolver.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
4096	113	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
4097	119	12	RiddersSolver.java	doSolve	correction	double	1	DEF	$ > 0.0
4098	120	16	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y1) + FastMath.signum($) == 0.0
4098	120	16	RiddersSolver.java	doSolve	y1	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
4099	130	16	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y2) + FastMath.signum($) == 0.0
4099	130	16	RiddersSolver.java	doSolve	y2	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
4301	64	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
4302	86	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
14782	124	12	RombergIntegrator.java	doIntegrate	j	int	0	NIL-FOR	$ <= i
14782	124	12	RombergIntegrator.java	doIntegrate	i	int	0	NIL-FOR	j <= $
4303	131	12	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	i >= $.getMinimalIterationCount()
4303	131	12	RombergIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
4304	134	16	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
4304	134	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
4304	134	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
4304	134	16	RombergIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
870	91	8	RootsOfUnity.java	isCounterClockWise	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
871	119	8	RootsOfUnity.java	computeRoots	n	int	0	ZeroException	$ == 0
872	129	8	RootsOfUnity.java	computeRoots	THIS	RootsOfUnity	0	RET	absN == $.omegaCount
872	129	8	RootsOfUnity.java	computeRoots	absN	int	0	RET	$ == omegaCount
12452	143	8	RootsOfUnity.java	computeRoots	i	int	0	NIL-FOR	$ < absN
12452	143	8	RootsOfUnity.java	computeRoots	absN	int	0	NIL-FOR	i < $
873	165	8	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
874	169	8	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
874	169	8	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ < 0
874	169	8	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ >= omegaCount
875	192	8	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
876	196	8	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
876	196	8	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ >= omegaCount
876	196	8	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ < 0
709	138	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
710	178	4	Rotation.java	Rotation	norm	double	0	MathIllegalArgumentException	$ == 0
711	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
711	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
711	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
711	226	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
711	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
711	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
711	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
711	226	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
712	240	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
713	331	4	Rotation.java	Rotation	normProduct	double	0	MathArithmeticException	$ == 0
714	337	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
714	337	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
715	409	6	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
716	418	10	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
717	427	14	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
718	495	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
719	497	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
720	510	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
720	510	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
721	512	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
722	556	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
723	565	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
723	565	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
724	574	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
725	583	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
725	583	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
726	592	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
727	601	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
727	601	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
728	610	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
729	619	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
729	619	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
730	628	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
731	637	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
731	637	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
732	646	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
733	655	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
733	655	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
734	664	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
735	673	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
735	673	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
736	682	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
737	691	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
737	691	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
738	700	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
739	709	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
739	709	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
740	718	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
741	727	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
741	727	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
742	736	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
743	745	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
743	745	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
744	763	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
744	763	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
12436	961	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
745	1002	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	FastMath.abs(fn1 - $) <= threshold
745	1002	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	FastMath.abs($ - fn) <= threshold
745	1002	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	FastMath.abs(fn1 - fn) <= $
14417	108	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
14417	108	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
14418	127	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
14419	135	6	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
14419	135	6	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
14420	137	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
14420	137	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
14420	137	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
14421	139	14	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
14421	139	14	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
14422	150	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
14422	150	6	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
14422	150	6	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
14423	152	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
14423	152	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
3522	164	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	$.isLastStep
3523	172	10	RungeKuttaIntegrator.java	integrate	nextIsLast	boolean	0	DEF	$
3412	87	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
3412	87	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
14317	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
14317	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
14317	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
14318	157	4	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
14318	157	4	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
14319	163	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < kMax
14319	163	4	RungeKuttaStepInterpolator.java	writeExternal	kMax	int	0	NIL-FOR	k < $
14320	164	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
14320	164	6	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
3413	183	4	RungeKuttaStepInterpolator.java	readExternal	n	int	1	DEF	$ < 0
14321	187	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
14321	187	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
14322	194	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
14322	194	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
14323	196	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
14323	196	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
3414	203	4	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
1250	109	8	SaddlePointExpansion.java	getStirlingError	z	double	1	DEF	$ < 15.0
1251	111	12	SaddlePointExpansion.java	getStirlingError	z2	double	1	DEF	FastMath.floor($) == $
1252	147	8	SaddlePointExpansion.java	getDeviancePart	x	double	1	DEF	FastMath.abs($ - mu) < 0.1 * ($ + mu)
1252	147	8	SaddlePointExpansion.java	getDeviancePart	mu	double	1	DEF	FastMath.abs(x - $) < 0.1 * (x + $)
12515	155	12	SaddlePointExpansion.java	getDeviancePart	s1	double	0	NIL-WHILE	$ != s
12515	155	12	SaddlePointExpansion.java	getDeviancePart	s	double	0	NIL-WHILE	s1 != $
1253	180	8	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == 0
1254	181	12	SaddlePointExpansion.java	logBinomialProbability	p	double	1	DEF	$ < 0.1
1255	186	15	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == n
1255	186	15	SaddlePointExpansion.java	logBinomialProbability	n	int	1	DEF	x == $
1256	187	12	SaddlePointExpansion.java	logBinomialProbability	q	double	1	DEF	$ < 0.1
1640	70	8	SchurTransformer.java	SchurTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1641	93	8	SchurTransformer.java	getP	THIS	SchurTransformer	0	DEF	$.cachedP == null
1642	106	8	SchurTransformer.java	getPT	THIS	SchurTransformer	0	DEF	$.cachedPt == null
1643	120	8	SchurTransformer.java	getT	THIS	SchurTransformer	0	DEF	$.cachedT == null
13049	144	8	SchurTransformer.java	transform	iu	int	0	NIL-WHILE	$ >= 0
1644	150	12	SchurTransformer.java	transform	il	int	1	DEF	$ == iu
1644	150	12	SchurTransformer.java	transform	iu	int	1	DEF	il == $
1645	155	19	SchurTransformer.java	transform	il	int	1	DEF	$ == iu - 1
1645	155	19	SchurTransformer.java	transform	iu	int	1	DEF	il == $ - 1
1646	162	16	SchurTransformer.java	transform	q	double	0	DEF	$ >= 0
1647	164	20	SchurTransformer.java	transform	p	double	1	DEF	$ >= 0
13050	178	20	SchurTransformer.java	transform	j	int	0	NIL-FOR	$ < n
13050	178	20	SchurTransformer.java	transform	n	int	0	NIL-FOR	j < $
13051	185	20	SchurTransformer.java	transform	i	int	0	NIL-FOR	$ <= iu
13051	185	20	SchurTransformer.java	transform	iu	int	0	NIL-FOR	i <= $
13052	192	20	SchurTransformer.java	transform	i	int	0	NIL-FOR	$ <= n - 1
13052	192	20	SchurTransformer.java	transform	n	int	0	NIL-FOR	i <= $ - 1
1648	205	16	SchurTransformer.java	transform	iteration	int	0	MaxCountExceededException	++$ > MAX_ITERATIONS
13053	226	8	SchurTransformer.java	getNorm	THIS	SchurTransformer	0	NIL-FOR	i < $.matrixT.$.length
13053	226	8	SchurTransformer.java	getNorm	i	int	0	NIL-FOR	$ < matrixT.length
13054	228	12	SchurTransformer.java	getNorm	THIS	SchurTransformer	0	NIL-FOR	j < $.matrixT.$.length
13054	228	12	SchurTransformer.java	getNorm	j	int	0	NIL-FOR	$ < matrixT.length
13055	244	8	SchurTransformer.java	findSmallSubDiagonalElement	l	int	0	NIL-WHILE	$ > 0
1649	246	12	SchurTransformer.java	findSmallSubDiagonalElement	s	double	0	DEF	$ == 0.0
1650	249	12	SchurTransformer.java	findSmallSubDiagonalElement	THIS	SchurTransformer	0	DEF	FastMath.abs($.matrixT[l][l - 1]) < $.epsilon * s
1650	249	12	SchurTransformer.java	findSmallSubDiagonalElement	s	double	0	DEF	FastMath.abs(matrixT[l][l - 1]) < epsilon * $
1650	249	12	SchurTransformer.java	findSmallSubDiagonalElement	l	int	0	DEF	FastMath.abs(matrixT[$][$ - 1]) < epsilon * s
1651	269	8	SchurTransformer.java	computeShift	l	int	0	DEF	$ < idx
1651	269	8	SchurTransformer.java	computeShift	idx	int	0	DEF	l < $
1652	275	8	SchurTransformer.java	computeShift	iteration	int	0	DEF	$ == 10
13056	277	12	SchurTransformer.java	computeShift	i	int	0	NIL-FOR	$ <= idx
13056	277	12	SchurTransformer.java	computeShift	idx	int	0	NIL-FOR	i <= $
1653	287	8	SchurTransformer.java	computeShift	iteration	int	0	DEF	$ == 30
1654	290	12	SchurTransformer.java	computeShift	s	double	0	DEF	$ > 0.0
1655	292	16	SchurTransformer.java	computeShift	THIS	SchurTransformer	0	DEF	shift.$.y < shift.$.x
1655	292	16	SchurTransformer.java	computeShift	shift	ShiftInfo	0	DEF	$.y < $.x
13057	296	16	SchurTransformer.java	computeShift	i	int	0	NIL-FOR	$ <= idx
13057	296	16	SchurTransformer.java	computeShift	idx	int	0	NIL-FOR	i <= $
13058	317	8	SchurTransformer.java	initQRStep	im	int	0	NIL-WHILE	$ >= il
13058	317	8	SchurTransformer.java	initQRStep	il	int	0	NIL-WHILE	im >= $
1656	325	12	SchurTransformer.java	initQRStep	im	int	0	DEF	$ == il
1656	325	12	SchurTransformer.java	initQRStep	il	int	0	DEF	im == $
1657	334	12	SchurTransformer.java	initQRStep	THIS	SchurTransformer	0	DEF	lhs < $.epsilon * rhs
1657	334	12	SchurTransformer.java	initQRStep	lhs	double	0	DEF	$ < epsilon * rhs
1657	334	12	SchurTransformer.java	initQRStep	rhs	double	0	DEF	lhs < epsilon * $
13059	360	8	SchurTransformer.java	performDoubleQRStep	k	int	0	NIL-FOR	$ <= iu - 1
13059	360	8	SchurTransformer.java	performDoubleQRStep	iu	int	0	NIL-FOR	k <= $ - 1
1658	362	12	SchurTransformer.java	performDoubleQRStep	k	int	0	DEF	$ != im
1658	362	12	SchurTransformer.java	performDoubleQRStep	im	int	0	DEF	k != $
1659	367	16	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	DEF	Precision.equals(shift.$.x, 0.0, $.epsilon)
1659	367	16	SchurTransformer.java	performDoubleQRStep	shift	ShiftInfo	0	DEF	Precision.equals($.x, 0.0, epsilon)
1660	373	12	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	DEF	shift.$.x == 0.0
1660	373	12	SchurTransformer.java	performDoubleQRStep	shift	ShiftInfo	0	DEF	$.x == 0.0
1661	377	12	SchurTransformer.java	performDoubleQRStep	p	double	0	DEF	$ < 0.0
1662	380	12	SchurTransformer.java	performDoubleQRStep	s	double	0	DEF	$ != 0.0
1663	381	16	SchurTransformer.java	performDoubleQRStep	k	int	1	DEF	$ != im
1663	381	16	SchurTransformer.java	performDoubleQRStep	im	int	1	DEF	k != $
1664	383	23	SchurTransformer.java	performDoubleQRStep	il	int	0	DEF	$ != im
1664	383	23	SchurTransformer.java	performDoubleQRStep	im	int	0	DEF	il != $
13060	394	16	SchurTransformer.java	performDoubleQRStep	j	int	0	NIL-FOR	$ < n
13060	394	16	SchurTransformer.java	performDoubleQRStep	n	int	0	NIL-FOR	j < $
1665	396	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
13061	405	16	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= FastMath.min(iu, k + 3)
13061	405	16	SchurTransformer.java	performDoubleQRStep	k	int	0	NIL-FOR	i <= FastMath.min(iu, $ + 3)
13061	405	16	SchurTransformer.java	performDoubleQRStep	iu	int	0	NIL-FOR	i <= FastMath.min($, k + 3)
1666	407	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
13062	417	16	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= high
13062	417	16	SchurTransformer.java	performDoubleQRStep	high	int	0	NIL-FOR	i <= $
1667	419	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
13063	430	8	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= iu
13063	430	8	SchurTransformer.java	performDoubleQRStep	iu	int	0	NIL-FOR	i <= $
1668	432	12	SchurTransformer.java	performDoubleQRStep	i	int	0	DEF	$ > im + 2
1668	432	12	SchurTransformer.java	performDoubleQRStep	im	int	0	DEF	i > $ + 2
2696	49	8	SearchInterval.java	SearchInterval	lo	double	0	NumberIsTooLargeException	$ >= hi
2696	49	8	SearchInterval.java	SearchInterval	hi	double	0	NumberIsTooLargeException	lo >= $
2697	52	8	SearchInterval.java	SearchInterval	lo	double	0	OutOfRangeException	init < $
2697	52	8	SearchInterval.java	SearchInterval	hi	double	0	OutOfRangeException	init > $
2697	52	8	SearchInterval.java	SearchInterval	init	double	0	OutOfRangeException	$ > hi
2697	52	8	SearchInterval.java	SearchInterval	init	double	0	OutOfRangeException	$ < lo
4113	87	8	SecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
4114	90	8	SecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
4115	111	12	SecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
4116	124	12	SecantSolver.java	doSolve	f1	double	0	RET	FastMath.abs($) <= ftol
4116	124	12	SecantSolver.java	doSolve	ftol	double	0	RET	FastMath.abs(f1) <= $
4117	130	12	SecantSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
4117	130	12	SecantSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
4117	130	12	SecantSolver.java	doSolve	atol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
4117	130	12	SecantSolver.java	doSolve	rtol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
2291	82	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
826	97	8	Segment.java	distance	r	double	1	RET	$ < 0
826	97	8	Segment.java	distance	r	double	1	RET	$ > 1
2301	268	8	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 0
2301	268	8	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 0
2302	271	12	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 1
2302	271	12	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 1
13683	278	16	SemiVariance.java	evaluate	i	int	0	NIL-FOR	$ < length
13683	278	16	SemiVariance.java	evaluate	length	int	0	NIL-FOR	i < $
2303	279	20	SemiVariance.java	evaluate	i	int	0	DEF	(values[$] > cutoff) == booleanDirection
2303	279	20	SemiVariance.java	evaluate	booleanDirection	boolean	0	DEF	(values[i] > cutoff) == $
2303	279	20	SemiVariance.java	evaluate	values	double[]	0	DEF	($[i] > cutoff) == booleanDirection
2303	279	20	SemiVariance.java	evaluate	cutoff	double	0	DEF	(values[i] > $) == booleanDirection
2304	285	16	SemiVariance.java	evaluate	corrected	boolean	1	RET	$
4036	172	8	Sigmoid.java	value	exp	double	1	DEF	Double.isInfinite($)
14630	190	12	Sigmoid.java	value	THIS	Sigmoid	0	NIL-FOR	n < f.$.length
14630	190	12	Sigmoid.java	value	n	int	0	NIL-FOR	$ < f.length
14630	190	12	Sigmoid.java	value	f	double[]	0	NIL-FOR	n < $.length
14631	195	16	Sigmoid.java	value	k	int	0	NIL-FOR	$ >= 0
4037	197	20	Sigmoid.java	value	k	int	1	DEF	$ > 1
2773	90	8	SimplePointChecker.java	SimplePointChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2774	116	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2774	116	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	iteration >= $.maxIterationCount
2774	116	8	SimplePointChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
13868	122	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	NIL-FOR	i < p.$.length
13868	122	8	SimplePointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
13868	122	8	SimplePointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
2775	127	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > size * $.getRelativeThreshold()
2775	127	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > $.getAbsoluteThreshold()
2775	127	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
2775	127	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
2775	127	12	SimplePointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
1908	102	8	SimplePointChecker.java	SimplePointChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1909	128	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1909	128	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	iteration >= $.maxIterationCount
1909	128	8	SimplePointChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
13370	134	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	NIL-FOR	i < p.$.length
13370	134	8	SimplePointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
13370	134	8	SimplePointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1910	139	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > size * $.getRelativeThreshold()
1910	139	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > $.getAbsoluteThreshold()
1910	139	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1910	139	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1910	139	12	SimplePointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
2636	133	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
2637	137	12	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
2638	149	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
2639	173	8	SimpleRegression.java	append	THIS	SimpleRegression	1	DEF	$.n == 0
2640	180	12	SimpleRegression.java	append	THIS	SimpleRegression	1	DEF	$.hasIntercept
2641	215	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
2642	216	12	SimpleRegression.java	removeData	THIS	SimpleRegression	1	DEF	$.hasIntercept
13839	259	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
13839	259	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
13839	259	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
2643	260	12	SimpleRegression.java	addData	THIS	SimpleRegression	0	ModelSpecificationException	data[i].length < 2
2643	260	12	SimpleRegression.java	addData	i	int	0	ModelSpecificationException	data[$].length < 2
2643	260	12	SimpleRegression.java	addData	data	double[][]	0	ModelSpecificationException	$[i].length < 2
2644	278	8	SimpleRegression.java	addObservation	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length == 0
2644	278	8	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$ == null
2644	278	8	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length == 0
2645	295	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length != y.$.length
2645	295	8	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
2645	295	8	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
2645	295	8	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
2645	295	8	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
13840	302	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
13840	302	8	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
13840	302	8	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
2646	303	12	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	DEF	x[i].length == 0
2646	303	12	SimpleRegression.java	addObservations	i	int	0	DEF	x[$].length == 0
2646	303	12	SimpleRegression.java	addObservations	i	int	0	DEF	x[$] == null
2646	303	12	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i].length == 0
2646	303	12	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i] == null
2647	307	8	SimpleRegression.java	addObservations	obsOk	boolean	0	ModelSpecificationException	$
13841	312	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
13841	312	8	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
13841	312	8	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
13842	331	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
13842	331	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
13842	331	8	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
13842	331	8	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
2648	376	8	SimpleRegression.java	predict	THIS	SimpleRegression	0	RET	$.hasIntercept
2649	432	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
2650	435	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	FastMath.abs($.sumXX) < 10 * Double.MIN_VALUE
2651	485	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2652	499	8	SimpleRegression.java	getXSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2653	545	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
2654	568	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
2655	606	8	SimpleRegression.java	getInterceptStdErr	THIS	SimpleRegression	0	RET	$.hasIntercept
2656	687	8	SimpleRegression.java	getSlopeConfidenceInterval	THIS	SimpleRegression	0	RET	$.n < 3
2657	690	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ <= 0
2657	690	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ >= 1
2658	723	8	SimpleRegression.java	getSignificance	THIS	SimpleRegression	0	RET	$.n < 3
2659	743	6	SimpleRegression.java	getIntercept	THIS	SimpleRegression	0	RET	$.hasIntercept
2660	772	8	SimpleRegression.java	regress	THIS	SimpleRegression	1	NoDataException:RET	$.hasIntercept
2661	773	10	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 3
2662	776	10	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	FastMath.abs( $.sumXX ) > Precision.SAFE_MIN
2663	799	10	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 2
2664	802	10	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	Double.isNaN($.sumXX)
2665	827	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	MathIllegalArgumentException	variablesToInclude.$.length == 0
2665	827	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$.length == 0
2665	827	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$ == null
2666	830	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 1
2666	830	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	$.hasIntercept
2666	830	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 2
2666	830	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 1
2666	830	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 2
2667	836	8	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	$.hasIntercept
2668	837	12	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	variablesToInclude.$.length == 2
2668	837	12	SimpleRegression.java	regress	variablesToInclude	int[]	1	OutOfRangeException:RET	$.length == 2
2669	838	16	SimpleRegression.java	regress	variablesToInclude	int[]	1	ModelSpecificationException	$[0] == 1
2670	840	22	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2671	843	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[1] != 1
2672	848	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2672	848	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 1
2673	853	16	SimpleRegression.java	regress	variablesToInclude	int[]	1	RET	$[0] == 0
2674	861	22	SimpleRegression.java	regress	variablesToInclude	int[]	0	RET	$[0] == 1
2675	867	20	SimpleRegression.java	regress	_sxx	double	1	RET	Double.isNaN($)
2676	883	12	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2694	91	8	SimpleUnivariateValueChecker.java	SimpleUnivariateValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2695	117	8	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	iteration >= $.maxIterationCount
2695	117	8	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2695	117	8	SimpleUnivariateValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
1835	103	8	SimpleUnivariateValueChecker.java	SimpleUnivariateValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1836	129	8	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1836	129	8	SimpleUnivariateValueChecker.java	converged	THIS	SimpleUnivariateValueChecker	0	RET	iteration >= $.maxIterationCount
1836	129	8	SimpleUnivariateValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
2679	89	8	SimpleValueChecker.java	SimpleValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2680	115	8	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2680	115	8	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	iteration >= $.maxIterationCount
2680	115	8	SimpleValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
1817	100	8	SimpleValueChecker.java	SimpleValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1818	126	8	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1818	126	8	SimpleValueChecker.java	converged	THIS	SimpleValueChecker	0	RET	iteration >= $.maxIterationCount
1818	126	8	SimpleValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
2776	91	8	SimpleVectorValueChecker.java	SimpleVectorValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
2777	117	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
2777	117	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	iteration >= $.maxIterationCount
2777	117	8	SimpleVectorValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
13869	123	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	NIL-FOR	i < p.$.length
13869	123	8	SimpleVectorValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
13869	123	8	SimpleVectorValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
2778	128	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > $.getAbsoluteThreshold()
2778	128	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > size * $.getRelativeThreshold()
2778	128	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
2778	128	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
2778	128	12	SimpleVectorValueChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
1911	102	8	SimpleVectorValueChecker.java	SimpleVectorValueChecker	maxIter	int	0	NotStrictlyPositiveException	$ <= 0
1912	128	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	iteration >= $.maxIterationCount
1912	128	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	$.maxIterationCount != ITERATION_CHECK_DISABLED
1912	128	8	SimpleVectorValueChecker.java	converged	iteration	int	0	RET	$ >= maxIterationCount
13371	134	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	NIL-FOR	i < p.$.length
13371	134	8	SimpleVectorValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
13371	134	8	SimpleVectorValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1913	139	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > size * $.getRelativeThreshold()
1913	139	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > $.getAbsoluteThreshold()
1913	139	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1913	139	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1913	139	12	SimpleVectorValueChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
3036	158	12	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	RET	$.getIterations() > 0
14076	160	16	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NIL-FOR	i < $.simplex.getSize()
14076	160	16	SimplexOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < simplex.getSize()
3037	165	16	SimplexOptimizer.java	doOptimize	converged	boolean	0	RET	$
3038	197	12	SimplexOptimizer.java	parseOptimizationData	THIS	SimplexOptimizer	0	DEF	$.data instanceof AbstractSimplex
3039	213	8	SimplexOptimizer.java	checkParameters	THIS	SimplexOptimizer	0	NullArgumentException	$.simplex == null
3040	216	8	SimplexOptimizer.java	checkParameters	THIS	SimplexOptimizer	0	MathUnsupportedOperationException	$.getUpperBound() != null
3040	216	8	SimplexOptimizer.java	checkParameters	THIS	SimplexOptimizer	0	MathUnsupportedOperationException	$.getLowerBound() != null
2218	172	12	SimplexOptimizer.java	parseOptimizationData	THIS	SimplexOptimizer	0	DEF	$.data instanceof AbstractSimplex
2219	182	8	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NullArgumentException	$.simplex == null
2220	214	12	SimplexOptimizer.java	doOptimize	iteration	int	0	RET	$ > 0
13650	216	16	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NIL-FOR	i < $.simplex.getSize()
13650	216	16	SimplexOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < simplex.getSize()
2221	221	16	SimplexOptimizer.java	doOptimize	converged	boolean	0	RET	$
13847	126	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
13847	126	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
2731	130	12	SimplexSolver.java	getPivotColumn	entry	double	0	DEF	$ < minValue
2731	130	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	entry < $
13848	149	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
13848	149	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
2732	153	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	Precision.compareTo(entry, 0d, $.maxUlps) > 0
2732	153	12	SimplexSolver.java	getPivotRow	entry	double	0	DEF	Precision.compareTo($, 0d, maxUlps) > 0
2733	158	16	SimplexSolver.java	getPivotRow	cmp	int	1	DEF	$ == 0
2734	160	23	SimplexSolver.java	getPivotRow	cmp	int	0	DEF	$ < 0
2735	168	8	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
2736	170	15	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
2737	174	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() > 0
13849	176	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
13849	176	20	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
2738	179	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	Precision.equals(entry, 1d, $.maxUlps)
2738	179	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
2738	179	24	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
2738	179	24	SimplexSolver.java	getPivotRow	entry	double	0	RET	Precision.equals($, 1d, maxUlps)
2738	179	24	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
2739	195	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.getEvaluations() < $.getMaxEvaluations() / 2
13850	201	20	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	NIL-FOR	$.row.equals(minRow)
13850	201	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < varEnd
13850	201	20	SimplexSolver.java	getPivotRow	minRow	Integer	0	NIL-FOR	row.equals($)
13850	201	20	SimplexSolver.java	getPivotRow	varEnd	int	0	NIL-FOR	i < $
2740	203	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	basicRow.equals($.row)
2740	203	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$ != null
2740	203	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$.equals(row)
2740	203	24	SimplexSolver.java	getPivotRow	i	int	0	DEF	$ < minIndex
2740	203	24	SimplexSolver.java	getPivotRow	minIndex	int	0	DEF	i < $
2741	230	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
13851	239	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
13851	239	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
2742	240	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
2742	240	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
2743	261	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
13852	265	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
2744	270	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, $.epsilon)
2744	270	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	Precision.equals($.getEntry(0, $.getRhsOffset()), 0d, epsilon)
13853	293	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
13349	75	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
13349	75	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
1868	79	12	SimplexSolver.java	getPivotColumn	entry	double	0	DEF	$ < minValue
1868	79	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	entry < $
13350	97	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
13350	97	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1869	101	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	Precision.compareTo(entry, 0d, $.maxUlps) > 0
1869	101	12	SimplexSolver.java	getPivotRow	entry	double	0	DEF	Precision.compareTo($, 0d, maxUlps) > 0
1870	106	16	SimplexSolver.java	getPivotRow	cmp	int	1	DEF	$ == 0
1871	108	23	SimplexSolver.java	getPivotRow	cmp	int	0	DEF	$ < 0
1872	116	8	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
1873	118	15	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
1874	122	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() > 0
13351	124	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
13351	124	20	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
1875	127	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	Precision.equals(entry, 1d, $.maxUlps)
1875	127	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
1875	127	24	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
1875	127	24	SimplexSolver.java	getPivotRow	entry	double	0	RET	Precision.equals($, 1d, maxUlps)
1875	127	24	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
1876	143	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.getIterations() < $.getMaxIterations() / 2
13352	149	20	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	NIL-FOR	$.row.equals(minRow)
13352	149	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < varEnd
13352	149	20	SimplexSolver.java	getPivotRow	minRow	Integer	0	NIL-FOR	row.equals($)
13352	149	20	SimplexSolver.java	getPivotRow	varEnd	int	0	NIL-FOR	i < $
1877	151	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	basicRow.equals($.row)
1877	151	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$ != null
1877	151	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$.equals(row)
1877	151	24	SimplexSolver.java	getPivotRow	i	int	0	DEF	$ < minIndex
1877	151	24	SimplexSolver.java	getPivotRow	minIndex	int	0	DEF	i < $
1878	176	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
13353	185	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
13353	185	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1879	186	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
1879	186	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
1880	204	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
13354	208	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1881	213	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, $.epsilon)
1881	213	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	Precision.equals($.getEntry(0, $.getRhsOffset()), 0d, epsilon)
13355	233	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
2750	179	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
13854	183	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
13854	183	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
2751	186	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
13855	189	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
13855	189	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
13856	192	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
13856	192	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
2752	212	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
2753	223	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
13857	231	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
13857	231	8	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
2754	239	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
2755	248	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
2755	248	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
2756	250	19	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
2756	250	19	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
2757	255	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
2757	255	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
2757	255	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
2757	255	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
2758	285	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
2759	310	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
2759	310	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
13858	337	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
13858	337	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
2760	339	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	Precision.equals(entry, 1d, $.maxUlps)
2760	339	12	SimplexTableau.java	getBasicRow	entry	double	1	DEF	Precision.equals($, 1d, maxUlps)
2760	339	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
2761	341	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	Precision.equals(entry, 0d, $.maxUlps)
2761	341	19	SimplexTableau.java	getBasicRow	entry	double	0	RET	Precision.equals($, 0d, maxUlps)
2762	353	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
13859	361	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
13859	361	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
2763	363	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	Precision.compareTo(entry, 0d, $.epsilon) > 0
2763	363	12	SimplexTableau.java	dropPhase1Objective	entry	double	0	DEF	Precision.compareTo($, 0d, epsilon) > 0
13860	369	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
13860	369	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
2764	371	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
2764	371	12	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
13861	377	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
13861	377	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
13862	379	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
13862	379	12	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
2765	380	16	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
2765	380	16	SimplexTableau.java	dropPhase1Objective	columnsToDrop	Set<Integer>	0	DEF	$.contains(j)
13863	388	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
13864	409	8	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
13864	409	8	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
2766	411	12	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	Precision.compareTo(entry, 0d, $.epsilon) < 0
2766	411	12	SimplexTableau.java	isOptimal	entry	double	0	RET	Precision.compareTo($, 0d, epsilon) < 0
13865	429	8	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
13865	429	8	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
13865	429	8	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
2767	431	12	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
2768	436	12	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ == 0
2768	436	12	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ != null
2769	441	19	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
2769	441	19	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
13866	465	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
13866	465	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
13867	482	8	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth()
13867	482	8	SimplexTableau.java	subtractRow	i	int	0	NIL-FOR	$ < getWidth()
2770	485	12	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	DEF	FastMath.abs(result) < $.cutOff
2770	485	12	SimplexTableau.java	subtractRow	result	double	0	DEF	FastMath.abs($) < cutOff
2771	602	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
2771	602	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
2772	606	6	SimplexTableau.java	equals	other	Object	0	RET	$ instanceof SimplexTableau
1885	159	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
13356	163	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
13356	163	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
1886	166	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
13357	169	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
13357	169	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
13358	172	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
13358	172	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1887	192	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
1888	203	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
13359	211	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
13359	211	8	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
1889	219	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
1890	228	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
1890	228	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
1891	230	19	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1891	230	19	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1892	235	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1892	235	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
1892	235	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1892	235	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
1893	265	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
1894	290	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
1894	290	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
13360	317	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
13360	317	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
1895	319	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	Precision.equals(entry, 1d, $.maxUlps)
1895	319	12	SimplexTableau.java	getBasicRow	entry	double	1	DEF	Precision.equals($, 1d, maxUlps)
1895	319	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
1896	321	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	Precision.equals(entry, 0d, $.maxUlps)
1896	321	19	SimplexTableau.java	getBasicRow	entry	double	0	RET	Precision.equals($, 0d, maxUlps)
1897	333	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
13361	341	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
13361	341	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
1898	343	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	Precision.compareTo(entry, 0d, $.epsilon) > 0
1898	343	12	SimplexTableau.java	dropPhase1Objective	entry	double	0	DEF	Precision.compareTo($, 0d, epsilon) > 0
13362	349	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
13362	349	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1899	351	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
1899	351	12	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
13363	357	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
13363	357	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
13364	359	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
13364	359	12	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
1900	360	16	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
1900	360	16	SimplexTableau.java	dropPhase1Objective	columnsToDrop	Set<Integer>	0	DEF	$.contains(j)
13365	368	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
13366	389	8	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
13366	389	8	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
1901	391	12	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	Precision.compareTo(entry, 0d, $.epsilon) < 0
1901	391	12	SimplexTableau.java	isOptimal	entry	double	0	RET	Precision.compareTo($, 0d, epsilon) < 0
13367	409	6	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
13367	409	6	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
13367	409	6	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
1902	411	10	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
1903	416	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ == 0
1903	416	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ != null
1904	421	17	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
1904	421	17	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
13368	445	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
13368	445	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
13369	462	8	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth()
13369	462	8	SimplexTableau.java	subtractRow	i	int	0	NIL-FOR	$ < getWidth()
1905	465	12	SimplexTableau.java	subtractRow	result	double	0	DEF	FastMath.abs($) < CUTOFF_THRESHOLD
1906	582	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
1906	582	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
1907	586	6	SimplexTableau.java	equals	other	Object	0	RET	$ instanceof SimplexTableau
4267	63	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
4268	85	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
4269	105	8	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.getMinimalIterationCount() == 1
4270	116	12	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.iterations.getCount() >= $.getMinimalIterationCount()
4271	120	16	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
4271	120	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
4271	120	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
4271	120	16	SimpsonIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
4030	88	8	Sinc.java	value	scaledX	double	1	RET	FastMath.abs($) <= SHORTCUT
4031	117	8	Sinc.java	value	scaledX	double	1	DEF	FastMath.abs($) <= SHORTCUT
14626	119	12	Sinc.java	value	THIS	Sinc	0	NIL-FOR	i < f.$.length
14626	119	12	Sinc.java	value	i	int	0	NIL-FOR	$ < f.length
14626	119	12	Sinc.java	value	f	double[]	0	NIL-FOR	i < $.length
4032	121	16	Sinc.java	value	i	int	1	DEF	($ & 0x1) == 0
14627	154	12	Sinc.java	value	THIS	Sinc	0	NIL-FOR	n < f.$.length
14627	154	12	Sinc.java	value	n	int	0	NIL-FOR	$ < f.length
14627	154	12	Sinc.java	value	f	double[]	0	NIL-FOR	n < $.length
4033	161	16	Sinc.java	value	n	int	1	DEF	($ & 0x1) == 0
14628	173	16	Sinc.java	value	k	int	0	NIL-FOR	$ > 1
4034	194	8	Sinc.java	value	THIS	Sinc	0	DEF	$.normalized
14629	196	12	Sinc.java	value	THIS	Sinc	0	NIL-FOR	i < f.$.length
14629	196	12	Sinc.java	value	i	int	0	NIL-FOR	$ < f.length
14629	196	12	Sinc.java	value	f	double[]	0	NIL-FOR	i < $.length
1706	92	8	SingularValueDecomposition.java	SingularValueDecomposition	matrix	RealMatrix	1	DEF	$.getRowDimension() < $.getColumnDimension()
13218	113	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ < FastMath.max(nct, nrt)
13218	113	8	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	NIL-FOR	k < FastMath.max($, nrt)
13218	113	8	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	NIL-FOR	k < FastMath.max(nct, $)
1707	114	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1707	114	12	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
13219	119	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
13219	119	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1708	122	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1708	122	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1709	123	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	A[$][$] < 0
13220	126	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
13220	126	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
13221	133	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
13221	133	12	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
1710	134	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1710	134	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1710	134	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1710	134	16	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
13222	138	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
13222	138	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
13223	142	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
13223	142	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1711	150	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1711	150	12	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
13224	153	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
13224	153	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1712	157	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1712	157	12	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
13225	162	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
13225	162	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1713	165	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1713	165	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1714	166	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$ + 1] < 0
1714	166	20	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k + 1] < 0
13226	169	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
13226	169	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1715	175	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k + 1 < $.m
1715	175	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1715	175	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ + 1 < m
1715	175	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
13227	178	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
13227	178	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
13228	181	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
13228	181	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
13229	182	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
13229	182	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
13230	186	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
13230	186	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
13231	188	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
13231	188	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
13232	196	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
13232	196	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1716	203	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	nct < $.n
1716	203	8	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	$ < n
1717	206	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.m < p
1717	206	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	m < $
1718	209	8	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	$ + 1 < p
1718	209	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	nrt + 1 < $
13233	215	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
13233	215	8	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
13234	216	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
13234	216	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
13235	221	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1719	222	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.singularValues[k] != 0
1719	222	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	singularValues[$] != 0
13236	223	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
13236	223	16	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
13237	225	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
13237	225	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
13238	229	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
13238	229	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
13239	233	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
13239	233	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
13240	237	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < k - 1
13240	237	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	i < $ - 1
13241	241	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
13241	241	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
13242	249	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1720	250	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1720	250	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1720	250	12	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1720	250	12	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
13243	252	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
13243	252	16	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
13244	254	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
13244	254	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
13245	258	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
13245	258	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
13246	263	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
13246	263	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
13247	272	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-WHILE	$ > 0
13248	284	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1721	295	16	SingularValueDecomposition.java	SingularValueDecomposition	threshold	double	0	DEF	FastMath.abs(e[k]) > $
1721	295	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	FastMath.abs(e[$]) > threshold
1721	295	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	FastMath.abs($[k]) > threshold
1722	302	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	$ == p - 2
1722	302	12	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	k == $ - 2
13249	306	16	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	NIL-FOR	$ >= k
13249	306	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	ks >= $
1723	307	20	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	$ == k
1723	307	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	ks == $
1724	312	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	FastMath.abs($.singularValues[ks]) <= TINY + EPS * t
1724	312	20	SingularValueDecomposition.java	SingularValueDecomposition	t	double	0	DEF	FastMath.abs(singularValues[ks]) <= TINY + EPS * $
1724	312	20	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	FastMath.abs(singularValues[$]) <= TINY + EPS * t
1725	317	16	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == k
1725	317	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	ks == $
1726	319	23	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == p - 1
1726	319	23	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	ks == $ - 1
13250	333	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ >= k
13250	333	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	j >= $
1727	338	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1727	338	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
13251	343	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
13251	343	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
13252	355	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p
13252	355	20	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $
13253	363	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
13253	363	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1728	388	20	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ != 0
1728	388	20	SingularValueDecomposition.java	SingularValueDecomposition	c	double	0	DEF	$ != 0
1729	391	24	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ < 0
13254	399	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p - 1
13254	399	20	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $ - 1
1730	403	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1730	403	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
13255	411	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
13255	411	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1731	424	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	j < $.m - 1
1731	424	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ < m - 1
13256	425	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
13256	425	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1732	439	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] <= 0
1732	439	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] <= 0
13257	442	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ <= pp
13257	442	24	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-FOR	i <= $
13258	447	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-WHILE	$ < pp
13258	447	20	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-WHILE	k < $
1733	448	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] >= $.singularValues[k + 1]
1733	448	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] >= singularValues[$ + 1]
1734	454	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.n - 1
1734	454	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < n - 1
13259	455	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
13259	455	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1735	461	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.m - 1
1735	461	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < m - 1
13260	462	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
13260	462	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1736	481	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.transposed
1737	509	8	SingularValueDecomposition.java	getUT	THIS	SingularValueDecomposition	0	DEF	$.cachedUt == null
1738	523	8	SingularValueDecomposition.java	getS	THIS	SingularValueDecomposition	0	DEF	$.cachedS == null
1739	558	8	SingularValueDecomposition.java	getVT	THIS	SingularValueDecomposition	0	DEF	$.cachedVt == null
13261	580	8	SingularValueDecomposition.java	getCovariance	THIS	SingularValueDecomposition	0	NIL-WHILE	$.singularValues[dimension] >= minSingularValue
13261	580	8	SingularValueDecomposition.java	getCovariance	p	int	0	NIL-WHILE	dimension < $
13261	580	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	singularValues[$] >= minSingularValue
13261	580	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	$ < p
13261	580	8	SingularValueDecomposition.java	getCovariance	minSingularValue	double	0	NIL-WHILE	singularValues[dimension] >= $
1740	585	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NumberIsTooLargeException	$ == 0
13262	644	8	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.singularValues.$.length
13262	644	8	SingularValueDecomposition.java	getRank	i	int	0	NIL-FOR	$ < singularValues.length
1741	645	12	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	DEF	$.singularValues[i] > $.tol
1741	645	12	SingularValueDecomposition.java	getRank	i	int	0	DEF	singularValues[$] > tol
2278	96	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
2279	111	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
2280	115	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
2281	136	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
2282	164	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
2282	164	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2282	164	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
2282	164	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
2282	164	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
13676	174	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
13676	174	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
13676	174	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
13677	182	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
13677	182	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
13677	182	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
12459	85	12	SmallPrimes.java	smallTrialDivision	THIS	SmallPrimes	0	NIL-WHILE	0 == n % $.p
12459	85	12	SmallPrimes.java	smallTrialDivision	n	int	0	NIL-WHILE	0 == $ % p
12460	103	8	SmallPrimes.java	boundedTrialDivision	f	int	0	NIL-WHILE	$ <= maxFactor
12460	103	8	SmallPrimes.java	boundedTrialDivision	maxFactor	int	0	NIL-WHILE	f <= $
1069	104	12	SmallPrimes.java	boundedTrialDivision	f	int	0	DEF	0 == n % $
1069	104	12	SmallPrimes.java	boundedTrialDivision	n	int	0	DEF	0 == $ % f
1070	110	12	SmallPrimes.java	boundedTrialDivision	f	int	0	DEF	0 == n % $
1070	110	12	SmallPrimes.java	boundedTrialDivision	n	int	0	DEF	0 == $ % f
1071	117	8	SmallPrimes.java	boundedTrialDivision	n	int	0	DEF	$ != 1
1072	131	8	SmallPrimes.java	trialDivision	n	int	0	RET	1 == $
1073	155	8	SmallPrimes.java	millerRabinPrimeTest	n	int	0	DEF	$ >= 2047
1074	158	8	SmallPrimes.java	millerRabinPrimeTest	n	int	0	DEF	$ >= 1373653
1075	161	8	SmallPrimes.java	millerRabinPrimeTest	n	int	0	DEF	$ >= 25326001
12461	167	8	SmallPrimes.java	millerRabinPrimeTest	i	int	0	NIL-FOR	$ < t
12461	167	8	SmallPrimes.java	millerRabinPrimeTest	t	int	0	NIL-FOR	i < $
1076	171	12	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	1 != $
1076	171	12	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	$ != nMinus1
1076	171	12	SmallPrimes.java	millerRabinPrimeTest	nMinus1	int	0	RET	y != $
12462	173	16	SmallPrimes.java	millerRabinPrimeTest	j	int	0	NIL-WHILE	$ <= s - 1
12462	173	16	SmallPrimes.java	millerRabinPrimeTest	y	int	0	NIL-WHILE	nMinus1 != $
12462	173	16	SmallPrimes.java	millerRabinPrimeTest	nMinus1	int	0	NIL-WHILE	$ != y
12462	173	16	SmallPrimes.java	millerRabinPrimeTest	s	int	0	NIL-WHILE	j <= $ - 1
1077	176	20	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	1 == $
1078	181	16	SmallPrimes.java	millerRabinPrimeTest	y	int	0	RET	nMinus1 != $
1078	181	16	SmallPrimes.java	millerRabinPrimeTest	nMinus1	int	0	RET	$ != y
4015	75	8	SmoothingPolynomialBicubicSplineInterpolator.java	SmoothingPolynomialBicubicSplineInterpolator	xDegree	int	0	NotPositiveException	$ < 0
4016	78	8	SmoothingPolynomialBicubicSplineInterpolator.java	SmoothingPolynomialBicubicSplineInterpolator	yDegree	int	0	NotPositiveException	$ < 0
4017	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
4017	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
4017	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
4017	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
4017	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
4017	101	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
4018	104	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
4018	104	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
4018	104	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
14612	111	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
14612	111	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
4019	112	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
4019	112	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
4019	112	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
4019	112	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
14613	123	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
14613	123	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
14614	125	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
14614	125	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
14615	137	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
14615	137	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
14616	139	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
14616	139	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
14617	147	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
14617	147	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
14618	149	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
14618	149	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
14619	161	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
14619	161	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
14620	163	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
14620	163	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
3189	93	8	SobolSequenceGenerator.java	SobolSequenceGenerator	dimension	int	0	OutOfRangeException	$ > MAX_DIMENSION
3189	93	8	SobolSequenceGenerator.java	SobolSequenceGenerator	dimension	int	0	OutOfRangeException	$ < 1
3190	99	8	SobolSequenceGenerator.java	SobolSequenceGenerator	is	InputStream	0	MathInternalError	$ == null
3191	160	8	SobolSequenceGenerator.java	SobolSequenceGenerator	dimension	int	0	NotStrictlyPositiveException	$ < 1
3192	172	8	SobolSequenceGenerator.java	SobolSequenceGenerator	lastDimension	int	0	OutOfRangeException	$ < dimension
3192	172	8	SobolSequenceGenerator.java	SobolSequenceGenerator	dimension	int	0	OutOfRangeException	lastDimension < $
14198	191	8	SobolSequenceGenerator.java	initFromStream	i	int	0	NIL-FOR	$ <= BITS
14199	206	12	SobolSequenceGenerator.java	initFromStream	line	String	0	NIL-WHILE	($ = reader.readLine()) != null
14199	206	12	SobolSequenceGenerator.java	initFromStream	reader	BufferedReader	0	NIL-WHILE	(line = $.readLine()) != null
3193	210	20	SobolSequenceGenerator.java	initFromStream	THIS	SobolSequenceGenerator	0	DEF	dim <= $.dimension
3193	210	20	SobolSequenceGenerator.java	initFromStream	dim	int	0	DEF	$ <= dimension
3193	210	20	SobolSequenceGenerator.java	initFromStream	dim	int	0	DEF	$ >= 2
14200	214	24	SobolSequenceGenerator.java	initFromStream	i	int	0	NIL-FOR	$ <= s
14200	214	24	SobolSequenceGenerator.java	initFromStream	s	int	0	NIL-FOR	i <= $
3194	220	20	SobolSequenceGenerator.java	initFromStream	THIS	SobolSequenceGenerator	0	RET	dim > $.dimension
3194	220	20	SobolSequenceGenerator.java	initFromStream	dim	int	0	RET	$ > dimension
14201	246	8	SobolSequenceGenerator.java	initDirectionVector	i	int	0	NIL-FOR	$ <= s
14201	246	8	SobolSequenceGenerator.java	initDirectionVector	s	int	0	NIL-FOR	i <= $
14202	249	8	SobolSequenceGenerator.java	initDirectionVector	i	int	0	NIL-FOR	$ <= BITS
14203	251	12	SobolSequenceGenerator.java	initDirectionVector	k	int	0	NIL-FOR	$ <= s - 1
14203	251	12	SobolSequenceGenerator.java	initDirectionVector	s	int	0	NIL-FOR	k <= $ - 1
3195	260	8	SobolSequenceGenerator.java	nextVector	THIS	SobolSequenceGenerator	0	RET	$.count == 0
14204	268	8	SobolSequenceGenerator.java	nextVector	value	int	0	NIL-WHILE	($ & 1) == 1
14205	273	8	SobolSequenceGenerator.java	nextVector	THIS	SobolSequenceGenerator	0	NIL-FOR	i < $.dimension
14205	273	8	SobolSequenceGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
3196	291	8	SobolSequenceGenerator.java	skipTo	index	int	1	DEF	$ == 0
14206	297	12	SobolSequenceGenerator.java	skipTo	THIS	SobolSequenceGenerator	0	NIL-FOR	j < $.dimension
14206	297	12	SobolSequenceGenerator.java	skipTo	j	int	0	NIL-FOR	$ < dimension
14207	299	16	SobolSequenceGenerator.java	skipTo	k	int	0	NIL-FOR	$ <= BITS
3197	301	20	SobolSequenceGenerator.java	skipTo	shift	long	0	DEF	$ == 0
12742	97	8	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	i < $.rows
12742	97	8	SparseFieldMatrix.java	SparseFieldMatrix	i	int	0	NIL-FOR	$ < rows
12743	98	12	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	j < $.columns
12743	98	12	SparseFieldMatrix.java	SparseFieldMatrix	j	int	0	NIL-FOR	$ < columns
1406	111	8	SparseFieldMatrix.java	addToEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1406	111	8	SparseFieldMatrix.java	addToEntry	value	T	1	DEF	getField().getZero().equals($)
1407	157	8	SparseFieldMatrix.java	multiplyEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1407	157	8	SparseFieldMatrix.java	multiplyEntry	value	T	1	DEF	getField().getZero().equals($)
1408	170	8	SparseFieldMatrix.java	setEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1408	170	8	SparseFieldMatrix.java	setEntry	value	T	1	DEF	getField().getZero().equals($)
12844	120	8	SparseFieldVector.java	SparseFieldVector	THIS	SparseFieldVector	0	NIL-FOR	key < values.$.length
12844	120	8	SparseFieldVector.java	SparseFieldVector	key	int	0	NIL-FOR	$ < values.length
12844	120	8	SparseFieldVector.java	SparseFieldVector	values	T[]	0	NIL-FOR	key < $.length
12845	159	8	SparseFieldVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1485	163	12	SparseFieldVector.java	add	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1485	163	12	SparseFieldVector.java	add	key	int	1	DEF	entries.containsKey($)
12846	182	8	SparseFieldVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1486	191	8	SparseFieldVector.java	append	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
12847	196	12	SparseFieldVector.java	append	i	int	0	NIL-FOR	$ < n
12847	196	12	SparseFieldVector.java	append	n	int	0	NIL-FOR	i < $
12848	223	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
12849	236	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
12850	249	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
1487	285	8	SparseFieldVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
12851	293	8	SparseFieldVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1488	296	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ < end
1488	296	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ >= index
1488	296	12	SparseFieldVector.java	getSubVector	end	int	0	DEF	key < $
1488	296	12	SparseFieldVector.java	getSubVector	index	int	0	DEF	key >= $
12852	310	8	SparseFieldVector.java	mapAddToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
12852	310	8	SparseFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
12853	326	8	SparseFieldVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
12854	340	8	SparseFieldVector.java	mapInvToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
12854	340	8	SparseFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
12855	354	8	SparseFieldVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
12856	380	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
12857	383	12	SparseFieldVector.java	outerProduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
1489	393	8	SparseFieldVector.java	outerProduct	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
12858	399	12	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
12859	403	16	SparseFieldVector.java	outerProduct	col	int	0	NIL-FOR	$ < n
12859	403	16	SparseFieldVector.java	outerProduct	n	int	0	NIL-FOR	col < $
12860	423	8	SparseFieldVector.java	set	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
12860	423	8	SparseFieldVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
12861	443	8	SparseFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < n
12861	443	8	SparseFieldVector.java	setSubVector	n	int	0	NIL-FOR	i < $
12862	460	8	SparseFieldVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1490	463	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1490	463	12	SparseFieldVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1491	475	8	SparseFieldVector.java	subtract	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
12863	481	12	SparseFieldVector.java	subtract	i	int	0	NIL-FOR	$ < n
12863	481	12	SparseFieldVector.java	subtract	n	int	0	NIL-FOR	i < $
1492	482	16	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(i)
1492	482	16	SparseFieldVector.java	subtract	i	int	1	DEF	entries.containsKey($)
12864	496	8	SparseFieldVector.java	toArray	iter	Iterator	0	NIL-WHILE	$.hasNext()
1493	510	8	SparseFieldVector.java	checkIndex	THIS	SparseFieldVector	0	OutOfRangeException	index >= $.getDimension()
1493	510	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1493	510	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1494	523	8	SparseFieldVector.java	checkVectorDimensions	THIS	SparseFieldVector	0	DimensionMismatchException	$.getDimension() != n
1494	523	8	SparseFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	getDimension() != $
1495	530	8	SparseFieldVector.java	add	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
12865	537	12	SparseFieldVector.java	add	i	int	0	NIL-FOR	$ < n
12865	537	12	SparseFieldVector.java	add	n	int	0	NIL-FOR	i < $
12866	552	8	SparseFieldVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1496	565	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$ == obj
1496	565	8	SparseFieldVector.java	equals	obj	Object	0	RET	this == $
1497	569	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ instanceof SparseFieldVector<?>
1498	576	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	1	RET	$.field == null
1499	577	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	other.$.field != null
1499	577	12	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	$.field != null
1500	580	15	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.field.equals(other.$.field)
1500	580	15	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	field.equals($.field)
1501	583	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.virtualSize != other.$.virtualSize
1501	583	8	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	virtualSize != $.virtualSize
12867	588	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1502	591	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(iter.value())
1502	591	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals($.value())
12868	596	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1503	599	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	test.equals($.getEntry(iter.key()))
1503	599	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(getEntry(iter.key()))
1503	599	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals(getEntry($.key()))
2483	165	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
2483	165	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
2483	165	8	SpearmansCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
2484	167	15	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
2484	167	15	SpearmansCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
2485	173	12	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	0	DEF	$.rankingAlgorithm instanceof NaturalRanking
2485	173	12	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	0	DEF	$.NaNStrategy.REMOVED == ((NaturalRanking) $.rankingAlgorithm).getNanStrategy()
2486	197	8	SpearmansCorrelation.java	rankTransform	THIS	SpearmansCorrelation	0	DEF	$.rankingAlgorithm instanceof NaturalRanking
2486	197	8	SpearmansCorrelation.java	rankTransform	THIS	SpearmansCorrelation	0	DEF	((NaturalRanking) $.rankingAlgorithm).getNanStrategy() == $.NaNStrategy.REMOVED
13754	200	12	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < matrix.getColumnDimension()
13754	200	12	SpearmansCorrelation.java	rankTransform	matrix	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
2487	205	12	SpearmansCorrelation.java	rankTransform	nanPositions	Set<Integer>	0	DEF	$.isEmpty()
13755	208	16	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < transformed.getColumnDimension()
13755	208	16	SpearmansCorrelation.java	rankTransform	transformed	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
2488	214	8	SpearmansCorrelation.java	rankTransform	transformed	RealMatrix	0	DEF	$ == null
13756	218	8	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < transformed.getColumnDimension()
13756	218	8	SpearmansCorrelation.java	rankTransform	transformed	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
13757	233	8	SpearmansCorrelation.java	getNaNPositions	THIS	SpearmansCorrelation	0	NIL-FOR	i < input.$.length
13757	233	8	SpearmansCorrelation.java	getNaNPositions	i	int	0	NIL-FOR	$ < input.length
13757	233	8	SpearmansCorrelation.java	getNaNPositions	input	double[]	0	NIL-FOR	i < $.length
2489	234	12	SpearmansCorrelation.java	getNaNPositions	i	int	0	DEF	Double.isNaN(input[$])
2489	234	12	SpearmansCorrelation.java	getNaNPositions	input	double[]	0	DEF	Double.isNaN($[i])
2490	249	8	SpearmansCorrelation.java	removeValues	indices	Set<Integer>	0	RET	$.isEmpty()
13758	253	8	SpearmansCorrelation.java	removeValues	THIS	SpearmansCorrelation	0	NIL-FOR	i < input.$.length
13758	253	8	SpearmansCorrelation.java	removeValues	i	int	0	NIL-FOR	$ < input.length
13758	253	8	SpearmansCorrelation.java	removeValues	input	double[]	0	NIL-FOR	i < $.length
2491	254	12	SpearmansCorrelation.java	removeValues	i	int	0	DEF	indices.contains($)
2491	254	12	SpearmansCorrelation.java	removeValues	indices	Set<Integer>	0	DEF	$.contains(i)
746	246	8	SphericalCoordinates.java	computeJacobian	THIS	SphericalCoordinates	0	DEF	$.jacobian == null
747	280	8	SphericalCoordinates.java	computeHessians	THIS	SphericalCoordinates	0	DEF	$.rHessian == null
3915	70	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
3915	70	8	SplineInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
3915	70	8	SplineInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
3916	74	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	NumberIsTooSmallException	x.$.length < 3
3916	74	8	SplineInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 3
14521	86	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
14521	86	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
14522	95	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
14522	95	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
14523	110	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
14524	118	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
14524	118	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
3135	61	8	StableRandomGenerator.java	StableRandomGenerator	generator	RandomGenerator	0	NullArgumentException	$ == null
3136	65	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ <= 2d
3136	65	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ > 0d
3137	70	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ >= -1d
3137	70	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ <= 1d
3138	78	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	1	DEF	$ < 2d
3138	78	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	1	DEF	$ != 0d
3139	96	8	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	RET	$.alpha == 2d
3140	103	8	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.beta == 0d
3141	105	12	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.alpha == 1d
3142	117	12	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	FastMath.abs($.alpha - 1d) > 1e-8
3143	128	16	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	DEF	$.alpha != 1d
2521	703	8	StatUtils.java	sumDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2521	703	8	StatUtils.java	sumDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2521	703	8	StatUtils.java	sumDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2522	706	8	StatUtils.java	sumDifference	n	int	0	NoDataException	$ <= 0
13774	710	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
13774	710	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
2523	752	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2523	752	8	StatUtils.java	varianceDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2523	752	8	StatUtils.java	varianceDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2524	755	8	StatUtils.java	varianceDifference	n	int	0	NumberIsTooSmallException	$ < 2
13775	758	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
13775	758	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
13776	777	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
13776	777	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
13776	777	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
13777	788	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
13777	788	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
13777	788	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
2380	134	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
2380	134	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
2381	137	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
4038	65	8	StepFunction.java	StepFunction	x	double[]	0	NullArgumentException	$ == null
4038	65	8	StepFunction.java	StepFunction	y	double[]	0	NullArgumentException	$ == null
4039	69	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	x.$.length == 0
4039	69	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	y.$.length == 0
4039	69	8	StepFunction.java	StepFunction	x	double[]	0	NoDataException	$.length == 0
4039	69	8	StepFunction.java	StepFunction	y	double[]	0	NoDataException	$.length == 0
4040	73	8	StepFunction.java	StepFunction	THIS	StepFunction	0	DimensionMismatchException	y.$.length != x.$.length
4040	73	8	StepFunction.java	StepFunction	x	double[]	0	DimensionMismatchException	y.length != $.length
4040	73	8	StepFunction.java	StepFunction	y	double[]	0	DimensionMismatchException	$.length != x.length
4041	87	8	StepFunction.java	value	index	int	1	DEF	$ < -1
4042	90	15	StepFunction.java	value	index	int	1	DEF	$ >= 0
3398	206	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
3399	215	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
3400	224	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.mode == $.StepNormalizerMode.MULTIPLES
3400	224	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	Precision.equals(nextTime, $.lastTime, 1)
3400	224	8	StepNormalizer.java	handleStep	nextTime	double	0	DEF	Precision.equals($, lastTime, 1)
14308	231	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
3401	243	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
3402	250	12	StepNormalizer.java	handleStep	addLast	boolean	0	DEF	$
3403	278	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.firstTime == $.lastTime
3403	278	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.bounds.firstIncluded()
2473	128	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	0	NumberIsTooSmallException	$.n < 2
2474	132	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	1	RET	$.biasCorrected
13734	82	8	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
13734	82	8	StorelessCovariance.java	initializeMatrix	i	int	0	NIL-FOR	$ < dimension
13735	83	12	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
13735	83	12	StorelessCovariance.java	initializeMatrix	j	int	0	NIL-FOR	$ < dimension
2471	151	8	StorelessCovariance.java	increment	THIS	StorelessCovariance	0	DimensionMismatchException	length != $.dimension
2471	151	8	StorelessCovariance.java	increment	length	int	0	DimensionMismatchException	$ != dimension
13736	157	8	StorelessCovariance.java	increment	i	int	0	NIL-FOR	$ < length
13736	157	8	StorelessCovariance.java	increment	length	int	0	NIL-FOR	i < $
13737	158	12	StorelessCovariance.java	increment	j	int	0	NIL-FOR	$ < length
13737	158	12	StorelessCovariance.java	increment	length	int	0	NIL-FOR	j < $
2472	175	8	StorelessCovariance.java	append	THIS	StorelessCovariance	0	DimensionMismatchException	sc.$.dimension != $.dimension
2472	175	8	StorelessCovariance.java	append	sc	StorelessCovariance	0	DimensionMismatchException	$.dimension != dimension
13738	181	8	StorelessCovariance.java	append	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
13738	181	8	StorelessCovariance.java	append	i	int	0	NIL-FOR	$ < dimension
13739	182	12	StorelessCovariance.java	append	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
13739	182	12	StorelessCovariance.java	append	j	int	0	NIL-FOR	$ < dimension
13740	207	8	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
13740	207	8	StorelessCovariance.java	getData	i	int	0	NIL-FOR	$ < dimension
13741	208	12	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
13741	208	12	StorelessCovariance.java	getData	j	int	0	NIL-FOR	$ < dimension
748	114	8	SubLine.java	intersection	v1D	Vector3D	0	RET	$ == null
749	124	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
822	118	8	SubLine.java	intersection	v2D	Vector2D	0	RET	$ == null
823	128	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
824	162	8	SubLine.java	side	crossing	Vector2D	0	RET	$ == null
825	183	8	SubLine.java	split	crossing	Vector2D	0	RET	$ == null
659	60	8	SubPlane.java	side	inter	Line	0	RET	$ == null
660	77	8	SubPlane.java	side	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
660	77	8	SubPlane.java	side	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
661	103	8	SubPlane.java	split	inter	Line	0	RET	$ == null
662	115	8	SubPlane.java	split	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
662	115	8	SubPlane.java	split	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
2248	124	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length, true)
2248	124	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2248	124	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2248	124	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
13666	126	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
13666	126	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
13666	126	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2249	163	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, weights, begin, length, true)
2249	163	8	Sum.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
2249	163	8	Sum.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
2249	163	8	Sum.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
2249	163	8	Sum.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
13667	165	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
13667	165	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
13667	165	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2250	135	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length, true)
2250	135	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2250	135	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2250	135	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
13668	137	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
13668	137	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
13668	137	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2247	123	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length, true)
2247	123	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2247	123	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2247	123	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
13665	125	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
13665	125	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
13665	125	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2318	159	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
2319	162	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
2320	165	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl != $.geoMean
2321	218	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
2322	219	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
2323	354	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
2324	357	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
2325	371	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
2325	371	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
2326	374	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
2327	645	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	MathIllegalStateException	$.n > 0
2328	684	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getVarianceImpl() instanceof Variance
2329	689	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.meanImpl instanceof Mean
2329	689	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.meanImpl instanceof Mean
2330	694	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
2331	702	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
2331	702	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
2332	707	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
2332	707	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
2333	712	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
2333	712	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
2334	717	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
2334	717	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
2335	722	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
2335	722	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
2336	727	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
2336	727	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
2337	732	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
2337	732	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
2338	737	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
2338	737	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
1360	1168	8	SymmLQ.java	solveInPlace	state	State	0	RET	$.bEqualsNullVector()
1361	1177	8	SymmLQ.java	solveInPlace	earlyStop	boolean	0	DEF	$
12680	1178	12	SymmLQ.java	solveInPlace	state	State	0	NIL-DOWHILE	$.hasConverged()
4276	72	8	SymmetricGaussIntegrator.java	integrate	ruleLength	int	0	RET	$ == 1
14764	79	8	SymmetricGaussIntegrator.java	integrate	i	int	0	NIL-FOR	$ < iMax
14764	79	8	SymmetricGaussIntegrator.java	integrate	iMax	int	0	NIL-FOR	i < $
4277	93	8	SymmetricGaussIntegrator.java	integrate	ruleLength	int	0	DEF	$ % 2 == 1
1155	91	8	TDistribution.java	TDistribution	degreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1156	122	8	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ == 0
1157	130	12	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
1158	158	8	TDistribution.java	getNumericalMean	df	double	0	RET	$ > 1
1159	179	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 2
1160	183	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ <= 2
1160	183	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 1
2404	1133	8	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ > 0.5
2404	1133	8	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ <= 0
2405	1150	8	TTest.java	checkSampleData	data	double[]	0	NullArgumentException	$ == null
2406	1153	8	TTest.java	checkSampleData	THIS	TTest	0	NumberIsTooSmallException	data.$.length < 2
2406	1153	8	TTest.java	checkSampleData	data	double[]	0	NumberIsTooSmallException	$.length < 2
2407	1171	8	TTest.java	checkSampleData	stat	StatisticalSummary	0	NullArgumentException	$ == null
2408	1174	8	TTest.java	checkSampleData	stat	StatisticalSummary	0	NumberIsTooSmallException	$.getN() < 2
2300	90	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
3507	104	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	1	DEF	$.previousState != null
3507	104	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
14408	111	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
14408	111	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
14409	129	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
14409	129	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
3213	72	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	MathIllegalArgumentException	population.getPopulationSize() < $.arity
3213	72	8	TournamentSelection.java	tournament	population	ListPopulation	0	MathIllegalArgumentException	$.getPopulationSize() < this.arity
14217	86	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	NIL-FOR	i<$.arity
14217	86	8	TournamentSelection.java	tournament	i	int	0	NIL-FOR	$<this.arity
14277	62	8	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
14277	62	8	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
14277	62	8	TransformUtils.java	scaleArray	f	double[]	0	NIL-FOR	i < $.length
14278	78	8	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
14278	78	8	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
14278	78	8	TransformUtils.java	scaleArray	f	Complex[]	0	NIL-FOR	i < $.length
14279	102	8	TransformUtils.java	createRealImaginaryArray	THIS	TransformUtils	0	NIL-FOR	i < dataC.$.length
14279	102	8	TransformUtils.java	createRealImaginaryArray	i	int	0	NIL-FOR	$ < dataC.length
14279	102	8	TransformUtils.java	createRealImaginaryArray	dataC	Complex[]	0	NIL-FOR	i < $.length
3366	127	8	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataRI.$.length != 2
3366	127	8	TransformUtils.java	createComplexArray	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
3367	132	8	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataR.$.length != dataI.$.length
3367	132	8	TransformUtils.java	createComplexArray	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
3367	132	8	TransformUtils.java	createComplexArray	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
14280	138	8	TransformUtils.java	createComplexArray	i	int	0	NIL-FOR	$ < n
14280	138	8	TransformUtils.java	createComplexArray	n	int	0	NIL-FOR	i < $
3368	157	8	TransformUtils.java	exactLog2	index	int	0	MathIllegalArgumentException	$ < 0
102	144	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
102	144	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
103	148	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
104	159	8	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$ == other
104	159	8	TransformerMap.java	equals	other	Object	0	RET	this == $
105	162	8	TransformerMap.java	equals	other	Object	0	RET	$ instanceof TransformerMap
106	164	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.defaultTransformer.equals(rhs.$.defaultTransformer)
106	164	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	defaultTransformer.equals($.defaultTransformer)
107	167	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.map.size() != rhs.$.map.size()
107	167	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	map.size() != $.map.size()
108	171	16	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.entry.getValue().equals(rhs.$.map.get($.entry.getKey()))
108	171	16	TransformerMap.java	equals	rhs	TransformerMap	0	RET	entry.getValue().equals($.map.get(entry.getKey()))
4293	66	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
4294	88	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
4295	120	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
14779	135	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
14779	135	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
4296	155	12	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	i >= $.getMinimalIterationCount()
4296	155	12	TrapezoidIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
4297	159	16	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
4297	159	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
4297	159	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
4297	159	16	TrapezoidIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
1352	63	8	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1353	86	8	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
1354	98	8	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
12666	103	12	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
1355	106	16	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
1355	106	16	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
12667	110	20	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
12667	110	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
12668	113	20	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
12668	113	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
12669	115	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
12669	115	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
12670	120	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
12670	120	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
1356	139	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
12671	142	12	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
12671	142	12	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
1357	144	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
1358	147	16	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1358	147	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
12672	195	8	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
12672	195	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
12673	201	12	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
12673	201	12	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1359	207	12	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
12674	218	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
12674	218	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
12675	222	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
12675	222	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
12676	232	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
12676	232	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
12677	238	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
12677	238	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
12678	244	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
12678	244	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
12679	246	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
12679	246	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1165	82	8	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooLargeException	$ >= b
1165	82	8	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	a >= $
1166	87	8	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooSmallException	c < $
1166	87	8	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooSmallException	$ < a
1167	91	8	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooLargeException	$ > b
1167	91	8	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	c > $
1168	142	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.a
1168	142	8	TriangularDistribution.java	density	x	double	0	RET	$ < a
1169	145	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.a <= x
1169	145	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.c
1169	145	8	TriangularDistribution.java	density	x	double	0	RET	a <= $
1169	145	8	TriangularDistribution.java	density	x	double	0	RET	$ < c
1170	150	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x == $.c
1170	150	8	TriangularDistribution.java	density	x	double	0	RET	$ == c
1171	153	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x <= $.b
1171	153	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.c < x
1171	153	8	TriangularDistribution.java	density	x	double	0	RET	$ <= b
1171	153	8	TriangularDistribution.java	density	x	double	0	RET	c < $
1172	175	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.a
1172	175	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < a
1173	178	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.a <= x
1173	178	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.c
1173	178	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	a <= $
1173	178	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < c
1174	183	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x == $.c
1174	183	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ == c
1175	186	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.c < x
1175	186	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x <= $.b
1175	186	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	c < $
1175	186	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ <= b
1176	262	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1
1176	262	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0
1177	265	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
1178	268	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
1179	271	8	TriangularDistribution.java	inverseCumulativeProbability	THIS	TriangularDistribution	0	RET	p < ($.c - $.a) / ($.b - $.a)
1179	271	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ < (c - a) / (b - a)
3919	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
3919	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	z.$.length == 0
3919	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
3919	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
3919	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
3919	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	z	double[]	0	NoDataException	$.length == 0
3919	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$[0].length == 0
3919	155	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$.length == 0
3920	158	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
3920	158	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
3920	158	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	xLen != $.length
3921	161	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
3921	161	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
3921	161	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	xLen != $.length
3922	164	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
3922	164	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
3922	164	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3923	167	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdZ.$.length
3923	167	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdZ.length
3923	167	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3924	170	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
3924	170	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
3924	170	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3925	173	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdZ.$.length
3925	173	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdZ.length
3925	173	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3926	176	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdYdZ.$.length
3926	176	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdYdZ.length
3926	176	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3927	179	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d3FdXdYdZ.$.length
3927	179	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d3FdXdYdZ.length
3927	179	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
14527	196	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
14527	196	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
3928	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
3928	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
3928	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
3928	197	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3929	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
3929	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
3929	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
3929	200	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3930	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
3930	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
3930	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
3930	203	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3931	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i].length != yLen
3931	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$].length != yLen
3931	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdZ[i].length != $
3931	206	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3932	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
3932	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
3932	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
3932	209	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3933	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i].length != yLen
3933	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$].length != yLen
3933	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdZ[i].length != $
3933	212	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3934	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i].length != yLen
3934	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$].length != yLen
3934	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdYdZ[i].length != $
3934	215	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3935	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i].length != yLen
3935	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$].length != yLen
3935	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d3FdXdYdZ[i].length != $
3935	218	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
14528	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
14528	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
3936	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i][j].length != zLen
3936	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	f[i][$].length != zLen
3936	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$][j].length != zLen
3936	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	f[i][j].length != $
3936	224	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3937	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i][j].length != zLen
3937	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdX[i][$].length != zLen
3937	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$][j].length != zLen
3937	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdX[i][j].length != $
3937	227	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3938	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i][j].length != zLen
3938	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdY[i][$].length != zLen
3938	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$][j].length != zLen
3938	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdY[i][j].length != $
3938	230	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3939	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i][j].length != zLen
3939	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdZ[i][$].length != zLen
3939	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$][j].length != zLen
3939	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdZ[i][j].length != $
3939	233	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3940	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i][j].length != zLen
3940	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdY[i][$].length != zLen
3940	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$][j].length != zLen
3940	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdY[i][j].length != $
3940	236	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3941	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i][j].length != zLen
3941	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdZ[i][$].length != zLen
3941	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$][j].length != zLen
3941	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdZ[i][j].length != $
3941	239	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3942	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i][j].length != zLen
3942	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdYdZ[i][$].length != zLen
3942	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$][j].length != zLen
3942	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdYdZ[i][j].length != $
3942	242	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3943	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != zLen
3943	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d3FdXdYdZ[i][$].length != zLen
3943	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$][j].length != zLen
3943	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != $
3943	245	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
14529	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	k	int	0	NIL-FOR	$ < lastK
14529	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastK	int	0	NIL-FOR	k < $
3944	309	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
3945	313	8	TricubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
3946	317	8	TricubicSplineInterpolatingFunction.java	value	k	int	0	OutOfRangeException	$ == -1
3947	335	8	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
3947	335	8	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
14530	340	8	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
14530	340	8	TricubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
3948	341	12	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
3948	341	12	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
3948	341	12	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
14531	401	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < sz
14531	401	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	i < $
14532	404	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < sz
14532	404	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	j < $
14533	430	8	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	i	int	0	NIL-FOR	$ < N
14534	431	12	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	j	int	0	NIL-FOR	$ < N
14535	432	16	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	k	int	0	NIL-FOR	$ < N
3949	449	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
3949	449	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
3950	452	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
3950	452	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
3951	455	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ > 1
3951	455	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ < 0
14536	472	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	NIL-FOR	$ < N
14537	473	12	TricubicSplineInterpolatingFunction.java	value	j	int	0	NIL-FOR	$ < N
14538	474	16	TricubicSplineInterpolatingFunction.java	value	k	int	0	NIL-FOR	$ < N
3995	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	zval.$.length == 0
3995	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3995	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3995	42	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3995	42	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3995	42	8	TricubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3995	42	8	TricubicSplineInterpolator.java	interpolate	zval	double[]	0	NoDataException	$.length == 0
3995	42	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	NoDataException	$.length == 0
3996	45	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3996	45	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3996	45	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	xval.length != $.length
14588	62	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
14588	62	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3997	63	12	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3997	63	12	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3997	63	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3997	63	12	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i].length != yLen
14589	67	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
14589	67	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
3998	68	16	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i][j].length != zLen
3998	68	16	TricubicSplineInterpolator.java	interpolate	j	int	0	DimensionMismatchException	fval[i][$].length != zLen
3998	68	16	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$][j].length != zLen
3998	68	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	DimensionMismatchException	fval[i][j].length != $
3998	68	16	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
14590	72	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
14590	72	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
14591	85	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
14591	85	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
14592	92	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
14592	92	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
14593	99	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
14593	99	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
14594	107	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
14594	107	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
14595	109	12	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
14595	109	12	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
14596	111	16	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
14596	111	16	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
14597	123	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
14597	123	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
14598	125	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
14598	125	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
14599	127	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
14599	127	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
14600	137	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
14600	137	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
14601	139	12	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
14601	139	12	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
14602	141	16	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
14602	141	16	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
14603	150	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
14603	150	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
14604	153	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
14604	153	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
14605	156	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
14605	156	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
3188	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != standardDeviation.$.length
3188	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != standardDeviation.length
3188	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	DimensionMismatchException	mean.length != $.length
14197	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
14197	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
14197	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
3214	64	8	UniformCrossover.java	UniformCrossover	ratio	double	0	OutOfRangeException	$ < 0.0d
3214	64	8	UniformCrossover.java	UniformCrossover	ratio	double	0	OutOfRangeException	$ > 1.0d
3215	90	8	UniformCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3215	90	8	UniformCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
3216	107	8	UniformCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
3216	107	8	UniformCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
14218	120	8	UniformCrossover.java	mate	index	int	0	NIL-FOR	$ < length
14218	120	8	UniformCrossover.java	mate	length	int	0	NIL-FOR	index < $
3217	122	12	UniformCrossover.java	mate	THIS	UniformCrossover	1	DEF	random.nextDouble() < $.ratio
3217	122	12	UniformCrossover.java	mate	random	RandomGenerator	1	DEF	$.nextDouble() < ratio
1190	72	8	UniformIntegerDistribution.java	UniformIntegerDistribution	lower	int	0	NumberIsTooLargeException	$ >= upper
1190	72	8	UniformIntegerDistribution.java	UniformIntegerDistribution	upper	int	0	NumberIsTooLargeException	lower >= $
1191	83	8	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1191	83	8	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1191	83	8	UniformIntegerDistribution.java	probability	x	int	0	RET	$ > upper
1191	83	8	UniformIntegerDistribution.java	probability	x	int	0	RET	$ < lower
1192	91	8	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1192	91	8	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ < lower
1193	94	8	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1193	94	8	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ > upper
1194	120	8	UniformRealDistribution.java	UniformRealDistribution	lower	double	0	NumberIsTooLargeException	$ >= upper
1194	120	8	UniformRealDistribution.java	UniformRealDistribution	upper	double	0	NumberIsTooLargeException	lower >= $
1195	132	8	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x < $.lower
1195	132	8	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x > $.upper
1195	132	8	UniformRealDistribution.java	density	x	double	0	RET	$ < lower
1195	132	8	UniformRealDistribution.java	density	x	double	0	RET	$ > upper
1196	140	8	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x <= $.lower
1196	140	8	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ <= lower
1197	143	8	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x >= $.upper
1197	143	8	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ >= upper
1198	152	8	UniformRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1198	152	8	UniformRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
14173	68	8	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
14173	68	8	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
14174	75	8	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
14174	75	8	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
1861	77	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	optimizer	BaseUnivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
1861	77	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	generator	RandomGenerator	0	NullArgumentException	$ == null
1862	81	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1863	135	8	UnivariateMultiStartOptimizer.java	getOptima	THIS	UnivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
13347	158	8	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
13347	158	8	UnivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1864	174	8	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
2681	100	12	UnivariateOptimizer.java	parseOptimizationData	THIS	UnivariateOptimizer	0	DEF	$.data instanceof SearchInterval
2682	107	12	UnivariateOptimizer.java	parseOptimizationData	THIS	UnivariateOptimizer	0	DEF	$.data instanceof UnivariateObjectiveFunction
2683	111	12	UnivariateOptimizer.java	parseOptimizationData	THIS	UnivariateOptimizer	0	DEF	$.data instanceof GoalType
3989	88	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NumberIsTooSmallException	xval.$.length < $.extend
3989	88	8	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NumberIsTooSmallException	$.length < extend
14576	98	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < xval.$.length
14576	98	8	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xval.length
14576	98	8	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NIL-FOR	i < $.length
14577	105	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < $.extend
14577	105	8	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < extend
4054	53	8	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
4055	78	8	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
4056	107	8	UnivariateSolverUtils.java	forceSide	THIS	UnivariateSolverUtils	0	RET	allowedSolution == $.AllowedSolution.ANY_SIDE
4056	107	8	UnivariateSolverUtils.java	forceSide	allowedSolution	AllowedSolution	0	RET	$ == AllowedSolution.ANY_SIDE
14632	120	8	UnivariateSolverUtils.java	forceSide	remainingEval	int	0	NIL-WHILE	$ > 0
4057	122	12	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ <= 0
4057	122	12	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ >= 0
4057	122	12	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ <= 0
4057	122	12	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ >= 0
4058	130	12	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ < fHi
4058	130	12	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo < $
4059	132	16	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ >= 0
4060	137	19	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ > fHi
4060	137	19	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo > $
4061	139	16	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ <= 0
4062	151	12	UnivariateSolverUtils.java	forceSide	changeLo	boolean	0	DEF	$
4063	158	12	UnivariateSolverUtils.java	forceSide	changeHi	boolean	0	DEF	$
4064	260	8	UnivariateSolverUtils.java	bracket	function	UnivariateFunction	0	NullArgumentException	$ == null
4065	263	8	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NotStrictlyPositiveException	$ <= 0
14633	274	8	UnivariateSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
14633	274	8	UnivariateSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
14633	274	8	UnivariateSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
14633	274	8	UnivariateSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
14633	274	8	UnivariateSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
14633	274	8	UnivariateSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
14633	274	8	UnivariateSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
14633	274	8	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
4066	284	8	UnivariateSolverUtils.java	bracket	fa	double	0	NoBracketingException	$ * fb > 0.0
4066	284	8	UnivariateSolverUtils.java	bracket	fb	double	0	NoBracketingException	fa * $ > 0.0
4067	321	8	UnivariateSolverUtils.java	isBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
4068	353	8	UnivariateSolverUtils.java	verifyInterval	lower	double	0	NumberIsTooLargeException	$ >= upper
4068	353	8	UnivariateSolverUtils.java	verifyInterval	upper	double	0	NumberIsTooLargeException	lower >= $
4069	392	8	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
4070	396	8	UnivariateSolverUtils.java	verifyBracketing	THIS	UnivariateSolverUtils	0	NoBracketingException	$.isBracketing(function, lower, upper)
4070	396	8	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NoBracketingException	isBracketing($, lower, upper)
4070	396	8	UnivariateSolverUtils.java	verifyBracketing	lower	double	0	NoBracketingException	isBracketing(function, $, upper)
4070	396	8	UnivariateSolverUtils.java	verifyBracketing	upper	double	0	NoBracketingException	isBracketing(function, lower, $)
14208	160	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
14208	160	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
14208	160	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
14209	178	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
14209	178	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
3198	292	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
3199	309	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
3200	384	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution == null
3200	384	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution.getBinStats().size() == 0
3201	412	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
3202	415	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str = $.filePointer.readLine()) == null
3202	415	8	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($ = filePointer.readLine()) == null
3203	419	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str = $.filePointer.readLine()) == null
3203	419	12	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($ = filePointer.readLine()) == null
2253	171	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
2254	181	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
2255	183	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
2256	186	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
2257	206	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
2258	229	8	Variance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
2259	261	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
2259	261	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2259	261	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
2259	261	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
2260	263	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2261	265	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
2262	321	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights,begin, length)
2262	321	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights,begin, length)
2262	321	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $,begin, length)
2262	321	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights,$, length)
2262	321	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights,begin, $)
2263	323	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2264	325	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
2265	408	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
2265	408	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2265	408	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
2265	408	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
2266	409	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2267	411	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
13671	415	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
13671	415	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
13671	415	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2268	421	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
2269	511	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights, begin, length)
2269	511	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length)
2269	511	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length)
2269	511	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights, $, length)
2269	511	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights, begin, $)
2270	512	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2271	514	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
13672	518	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
13672	518	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
13672	518	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
13673	525	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
13673	525	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
13673	525	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2272	529	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
803	188	8	Vector1D.java	normalize	s	double	0	MathArithmeticException	$ == 0
804	305	8	Vector1D.java	equals	THIS	Vector1D	0	RET	$ == other
804	305	8	Vector1D.java	equals	other	Object	0	RET	this == $
805	309	8	Vector1D.java	equals	other	Object	0	RET	$ instanceof Vector1D
806	311	12	Vector1D.java	equals	rhs	Vector1D	0	RET	$.isNaN()
807	329	8	Vector1D.java	hashCode	THIS	Vector1D	0	RET	$.isNaN()
799	118	8	Vector1DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
800	130	8	Vector1DFormat.java	parse	coordinates	double[]	0	RET	$ == null
863	80	8	Vector2D.java	Vector2D	THIS	Vector2D	0	DimensionMismatchException	v.$.length != 2
863	80	8	Vector2D.java	Vector2D	v	double[]	0	DimensionMismatchException	$.length != 2
864	226	8	Vector2D.java	normalize	s	double	0	MathArithmeticException	$ == 0
865	347	8	Vector2D.java	equals	THIS	Vector2D	0	RET	$ == other
865	347	8	Vector2D.java	equals	other	Object	0	RET	this == $
866	351	8	Vector2D.java	equals	other	Object	0	RET	$ instanceof Vector2D
867	353	12	Vector2D.java	equals	rhs	Vector2D	0	RET	$.isNaN()
868	371	8	Vector2D.java	hashCode	THIS	Vector2D	0	RET	$.isNaN()
817	121	8	Vector2DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
818	133	8	Vector2DFormat.java	parse	coordinates	double[]	0	RET	$ == null
750	108	8	Vector3D.java	Vector3D	THIS	Vector3D	0	DimensionMismatchException	v.$.length != 3
750	108	8	Vector3D.java	Vector3D	v	double[]	0	DimensionMismatchException	$.length != 3
751	298	8	Vector3D.java	normalize	s	double	0	MathArithmeticException	$ == 0
752	322	8	Vector3D.java	orthogonal	threshold	double	0	MathArithmeticException	$ == 0
753	326	8	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	FastMath.abs($.x) <= threshold
753	326	8	Vector3D.java	orthogonal	threshold	double	1	RET	FastMath.abs(x) <= $
754	329	15	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	FastMath.abs($.y) <= threshold
754	329	15	Vector3D.java	orthogonal	threshold	double	0	RET	FastMath.abs(y) <= $
755	352	8	Vector3D.java	angle	normProduct	double	0	MathArithmeticException	$ == 0
756	358	8	Vector3D.java	angle	dot	double	0	RET	$ > threshold
756	358	8	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
756	358	8	Vector3D.java	angle	threshold	double	0	RET	dot > $
756	358	8	Vector3D.java	angle	threshold	double	0	RET	dot < -$
757	361	12	Vector3D.java	angle	dot	double	0	RET	$ >= 0
758	414	8	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
758	414	8	Vector3D.java	equals	other	Object	0	RET	this == $
759	418	8	Vector3D.java	equals	other	Object	0	RET	$ instanceof Vector3D
760	420	12	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
761	438	8	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
663	133	8	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
664	150	8	Vector3DFormat.java	parse	coordinates	double[]	0	RET	$ == null
12433	205	8	VectorFormat.java	format	THIS	VectorFormat	0	NIL-FOR	i < coordinates.$.length
12433	205	8	VectorFormat.java	format	i	int	0	NIL-FOR	$ < coordinates.length
12433	205	8	VectorFormat.java	format	coordinates	double	0	NIL-FOR	i < $.length
654	206	12	VectorFormat.java	format	i	int	0	DEF	$ > 0
655	250	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
655	250	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
655	250	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
12434	254	8	VectorFormat.java	parseCoordinates	i	int	0	NIL-FOR	$ < dimension
12434	254	8	VectorFormat.java	parseCoordinates	dimension	int	0	NIL-FOR	i < $
656	260	12	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
656	260	12	VectorFormat.java	parseCoordinates	i	int	0	RET	$ > 0
656	260	12	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
656	260	12	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
657	269	12	VectorFormat.java	parseCoordinates	c	Number	0	RET	$ == null
658	283	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
658	283	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
658	283	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
2283	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
2283	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
13678	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
13678	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
13678	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
13679	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
13679	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
2284	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
13680	91	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
13680	91	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
13681	92	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
13681	92	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
2285	136	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$ == obj
2285	136	8	VectorialCovariance.java	equals	obj	Object	0	RET	this == $
2286	139	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ instanceof VectorialCovariance
2287	143	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.isBiasCorrected != other.$.isBiasCorrected
2287	143	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	isBiasCorrected != $.isBiasCorrected
2288	146	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.n != other.$.n
2288	146	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	n != $.n
2289	149	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.productsSums, other.$.productsSums)
2289	149	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(productsSums, $.productsSums)
2290	152	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.sums, other.$.sums)
2290	152	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(sums, $.sums)
13684	42	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
13684	42	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
2305	53	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
2305	53	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
13685	56	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
13685	56	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
13685	56	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
13686	67	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
13686	67	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
13686	67	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
2306	93	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	$ == obj
2306	93	8	VectorialMean.java	equals	obj	Object	0	RET	this == $
2307	96	8	VectorialMean.java	equals	obj	Object	0	RET	$ instanceof VectorialMean
2308	100	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	Arrays.equals($.means, other.$.means)
2308	100	8	VectorialMean.java	equals	other	VectorialMean	0	RET	Arrays.equals(means, $.means)
1120	114	8	WeibullDistribution.java	WeibullDistribution	alpha	double	0	NotStrictlyPositiveException	$ <= 0
1121	118	8	WeibullDistribution.java	WeibullDistribution	beta	double	0	NotStrictlyPositiveException	$ <= 0
1122	147	8	WeibullDistribution.java	density	x	double	0	RET	$ < 0
1123	167	8	WeibullDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
1124	184	8	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
1124	184	8	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
1125	186	15	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
1126	188	16	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
1127	215	8	WeibullDistribution.java	getNumericalMean	THIS	WeibullDistribution	0	DEF	$.numericalMeanIsCalculated
1128	241	8	WeibullDistribution.java	getNumericalVariance	THIS	WeibullDistribution	0	DEF	$.numericalVarianceIsCalculated
3108	51	8	Weight.java	Weight	weight	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
2233	53	8	Weight.java	Weight	weight	RealMatrix	0	NonSquareMatrixException	$.getColumnDimension() != $.getRowDimension()
2388	78	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
2388	78	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
2389	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	x.$.length == 0
2389	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	y.$.length == 0
2389	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
2389	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
2390	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	DimensionMismatchException	y.$.length != x.$.length
2390	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	DimensionMismatchException	y.length != $.length
2390	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	DimensionMismatchException	$.length != x.length
13697	102	8	WilcoxonSignedRankTest.java	calculateDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < x.$.length
13697	102	8	WilcoxonSignedRankTest.java	calculateDifferences	i	int	0	NIL-FOR	$ < x.length
13697	102	8	WilcoxonSignedRankTest.java	calculateDifferences	x	double[]	0	NIL-FOR	i < $.length
2391	120	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NullArgumentException	$ == null
2392	124	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NoDataException	z.$.length == 0
2392	124	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NoDataException	$.length == 0
13698	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
13698	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	i	int	0	NIL-FOR	$ < z.length
13698	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NIL-FOR	i < $.length
13699	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
13699	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	NIL-FOR	$ < z.length
13699	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	NIL-FOR	i < $.length
2393	187	12	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	DEF	z[$] > 0
2393	187	12	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	DEF	$[i] > 0
13700	215	8	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	NIL-FOR	$ < m
13700	215	8	WilcoxonSignedRankTest.java	calculateExactPValue	m	int	0	NIL-FOR	i < $
13701	219	12	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	NIL-FOR	$ < N
2394	222	16	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	DEF	((i >> $) & 1) == 1
2394	222	16	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	DEF	(($ >> j) & 1) == 1
2395	227	12	WilcoxonSignedRankTest.java	calculateExactPValue	rankSum	int	0	DEF	$ >= Wmax
2395	227	12	WilcoxonSignedRankTest.java	calculateExactPValue	Wmax	double	0	DEF	rankSum >= $
2396	314	8	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	0	NumberIsTooLargeException	$
2397	318	8	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	1	RET	$
1297	77	8	ZipfDistribution.java	ZipfDistribution	numberOfElements	int	0	NotStrictlyPositiveException	$ <= 0
1298	81	8	ZipfDistribution.java	ZipfDistribution	exponent	double	0	NotStrictlyPositiveException	$ <= 0
1299	110	8	ZipfDistribution.java	probability	THIS	ZipfDistribution	0	RET	x > $.numberOfElements
1299	110	8	ZipfDistribution.java	probability	x	int	0	RET	$ > numberOfElements
1299	110	8	ZipfDistribution.java	probability	x	int	0	RET	$ <= 0
1300	119	8	ZipfDistribution.java	cumulativeProbability	x	int	1	RET	$ <= 0
1301	121	15	ZipfDistribution.java	cumulativeProbability	THIS	ZipfDistribution	0	RET	x >= $.numberOfElements
1301	121	15	ZipfDistribution.java	cumulativeProbability	x	int	0	RET	$ >= numberOfElements
1302	139	8	ZipfDistribution.java	getNumericalMean	THIS	ZipfDistribution	0	DEF	$.numericalMeanIsCalculated
1303	173	8	ZipfDistribution.java	getNumericalVariance	THIS	ZipfDistribution	0	DEF	$.numericalVarianceIsCalculated
12532	207	8	ZipfDistribution.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
