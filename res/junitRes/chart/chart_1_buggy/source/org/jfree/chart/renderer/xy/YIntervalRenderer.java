package org.jfree.chart.renderer.xy;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.Serializable;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.XYItemLabelGenerator;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.text.TextUtilities;
import org.jfree.chart.util.ObjectUtilities;
import org.jfree.chart.util.PublicCloneable;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.ShapeUtilities;
import org.jfree.data.Range;
import org.jfree.data.xy.IntervalXYDataset;
import org.jfree.data.xy.XYDataset;
/** 
 * A renderer that draws a line connecting the start and end Y values for an                              {@link XYPlot}.  The example shown here is generated by the <code>YIntervalRendererDemo1.java</code> program included in the JFreeChart demo collection: <br><br> <img src="../../../../../images/YIntervalRendererSample.png" alt="YIntervalRendererSample.png" />
 */
public class YIntervalRenderer extends AbstractXYItemRenderer implements XYItemRenderer, Cloneable, PublicCloneable, Serializable {
  /** 
 * For serialization. 
 */
  private static final long serialVersionUID=-2951586537224143260L;
  /** 
 * An additional item label generator.  If this is non-null, the item label generated will be displayed near the lower y-value at the position given by getNegativeItemLabelPosition().
 * @since 1.0.10
 */
  private XYItemLabelGenerator additionalItemLabelGenerator;
  /** 
 * The default constructor.
 */
  public YIntervalRenderer(){
    super();
    this.additionalItemLabelGenerator=null;
  }
  /** 
 * Returns the generator for the item labels that appear near the lower y-value.
 * @return The generator (possibly <code>null</code>).
 * @see #setAdditionalItemLabelGenerator(XYItemLabelGenerator)
 * @since 1.0.10
 */
  public XYItemLabelGenerator getAdditionalItemLabelGenerator(){
    return this.additionalItemLabelGenerator;
  }
  /** 
 * Sets the generator for the item labels that appear near the lower y-value and sends a                               {@link RendererChangeEvent} to all registeredlisteners.  If this is set to <code>null</code>, no item labels will be drawn.
 * @param generator  the generator (<code>null</code> permitted).
 * @see #getAdditionalItemLabelGenerator()
 * @since 1.0.10
 */
  public void setAdditionalItemLabelGenerator(  XYItemLabelGenerator generator){
    this.additionalItemLabelGenerator=generator;
    fireChangeEvent();
  }
  /** 
 * Returns the range of values the renderer requires to display all the items from the specified dataset.
 * @param dataset  the dataset (<code>null</code> permitted).
 * @return The range (<code>null</code> if the dataset is <code>null</code>or empty).
 */
  public Range findRangeBounds(  XYDataset dataset){
    return findRangeBounds(dataset,true);
  }
  /** 
 * Draws the visual representation of a single data item.
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param dataArea  the area within which the plot is being drawn.
 * @param plot  the plot (can be used to obtain standard colorinformation etc).
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param dataset  the dataset.
 * @param series  the series index (zero-based).
 * @param item  the item index (zero-based).
 * @param selected  is the item selected?
 * @param pass  the pass index (ignored here).
 * @since 1.2.0
 */
  public void drawItem(  Graphics2D g2,  XYItemRendererState state,  Rectangle2D dataArea,  XYPlot plot,  ValueAxis domainAxis,  ValueAxis rangeAxis,  XYDataset dataset,  int series,  int item,  boolean selected,  int pass){
    EntityCollection entities=null;
    if (state.getInfo() != null) {
      entities=state.getInfo().getOwner().getEntityCollection();
    }
    IntervalXYDataset intervalDataset=(IntervalXYDataset)dataset;
    double x=intervalDataset.getXValue(series,item);
    double yLow=intervalDataset.getStartYValue(series,item);
    double yHigh=intervalDataset.getEndYValue(series,item);
    RectangleEdge xAxisLocation=plot.getDomainAxisEdge();
    RectangleEdge yAxisLocation=plot.getRangeAxisEdge();
    double xx=domainAxis.valueToJava2D(x,dataArea,xAxisLocation);
    double yyLow=rangeAxis.valueToJava2D(yLow,dataArea,yAxisLocation);
    double yyHigh=rangeAxis.valueToJava2D(yHigh,dataArea,yAxisLocation);
    Paint p=getItemPaint(series,item,selected);
    Stroke s=getItemStroke(series,item,selected);
    Line2D line=null;
    Shape shape=getItemShape(series,item,selected);
    Shape top=null;
    Shape bottom=null;
    PlotOrientation orientation=plot.getOrientation();
    if (orientation == PlotOrientation.HORIZONTAL) {
      line=new Line2D.Double(yyLow,xx,yyHigh,xx);
      top=ShapeUtilities.createTranslatedShape(shape,yyHigh,xx);
      bottom=ShapeUtilities.createTranslatedShape(shape,yyLow,xx);
    }
 else {
      if (orientation == PlotOrientation.VERTICAL) {
        line=new Line2D.Double(xx,yyLow,xx,yyHigh);
        top=ShapeUtilities.createTranslatedShape(shape,xx,yyHigh);
        bottom=ShapeUtilities.createTranslatedShape(shape,xx,yyLow);
      }
    }
    g2.setPaint(p);
    g2.setStroke(s);
    g2.draw(line);
    g2.fill(top);
    g2.fill(bottom);
    if (isItemLabelVisible(series,item,selected)) {
      drawItemLabel(g2,orientation,dataset,series,item,selected,xx,yyHigh,false);
      drawAdditionalItemLabel(g2,orientation,dataset,series,item,xx,yyLow);
    }
    if (entities != null) {
      addEntity(entities,line.getBounds(),dataset,series,item,selected,0.0,0.0);
    }
  }
  /** 
 * Draws an item label.
 * @param g2  the graphics device.
 * @param orientation  the orientation.
 * @param dataset  the dataset.
 * @param series  the series index (zero-based).
 * @param item  the item index (zero-based).
 * @param x  the x coordinate (in Java2D space).
 * @param y  the y coordinate (in Java2D space).
 * @param negative  indicates a negative value (which affects the itemlabel position).
 */
  private void drawAdditionalItemLabel(  Graphics2D g2,  PlotOrientation orientation,  XYDataset dataset,  int series,  int item,  double x,  double y){
    if (this.additionalItemLabelGenerator == null) {
      return;
    }
    Font labelFont=getItemLabelFont(series,item,false);
    Paint paint=getItemLabelPaint(series,item,false);
    g2.setFont(labelFont);
    g2.setPaint(paint);
    String label=this.additionalItemLabelGenerator.generateLabel(dataset,series,item);
    ItemLabelPosition position=getNegativeItemLabelPosition(series,item,false);
    Point2D anchorPoint=calculateLabelAnchorPoint(position.getItemLabelAnchor(),x,y,orientation);
    TextUtilities.drawRotatedString(label,g2,(float)anchorPoint.getX(),(float)anchorPoint.getY(),position.getTextAnchor(),position.getAngle(),position.getRotationAnchor());
  }
  /** 
 * Tests this renderer for equality with an arbitrary object.
 * @param obj  the object (<code>null</code> permitted).
 * @return A boolean.
 */
  public boolean equals(  Object obj){
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof YIntervalRenderer)) {
      return false;
    }
    YIntervalRenderer that=(YIntervalRenderer)obj;
    if (!ObjectUtilities.equal(this.additionalItemLabelGenerator,that.additionalItemLabelGenerator)) {
      return false;
    }
    return super.equals(obj);
  }
  /** 
 * Returns a clone of the renderer.
 * @return A clone.
 * @throws CloneNotSupportedException  if the renderer cannot be cloned.
 */
  public Object clone() throws CloneNotSupportedException {
    return super.clone();
  }
}
