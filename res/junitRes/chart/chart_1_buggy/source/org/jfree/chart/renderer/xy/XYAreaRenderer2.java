package org.jfree.chart.renderer.xy;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.GeneralPath;
import java.awt.geom.Rectangle2D;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import org.jfree.chart.LegendItem;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.XYSeriesLabelGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYCrosshairState;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.PublicCloneable;
import org.jfree.chart.util.SerialUtilities;
import org.jfree.chart.util.ShapeUtilities;
import org.jfree.data.xy.XYDataset;
/** 
 * Area item renderer for an                               {@link XYPlot}. The example shown here is generated by the <code>XYAreaRenderer2Demo1.java</code> program included in the JFreeChart demo collection: <br><br> <img src="../../../../../images/XYAreaRenderer2Sample.png" alt="XYAreaRenderer2Sample.png" />
 */
public class XYAreaRenderer2 extends AbstractXYItemRenderer implements XYItemRenderer, PublicCloneable {
  /** 
 * For serialization. 
 */
  private static final long serialVersionUID=-7378069681579984133L;
  /** 
 * A flag that controls whether or not the outline is shown. 
 */
  private boolean showOutline;
  /** 
 * The shape used to represent an area in each legend item (this should never be <code>null</code>).
 */
  private transient Shape legendArea;
  /** 
 * Constructs a new renderer.
 */
  public XYAreaRenderer2(){
    this(null,null);
  }
  /** 
 * Constructs a new renderer.
 * @param labelGenerator  the tool tip generator to use.  <code>null</code>is none.
 * @param urlGenerator  the URL generator (null permitted).
 */
  public XYAreaRenderer2(  XYToolTipGenerator labelGenerator,  XYURLGenerator urlGenerator){
    super();
    this.showOutline=false;
    setBaseToolTipGenerator(labelGenerator);
    setBaseURLGenerator(urlGenerator);
    GeneralPath area=new GeneralPath();
    area.moveTo(0.0f,-4.0f);
    area.lineTo(3.0f,-2.0f);
    area.lineTo(4.0f,4.0f);
    area.lineTo(-4.0f,4.0f);
    area.lineTo(-3.0f,-2.0f);
    area.closePath();
    this.legendArea=area;
  }
  /** 
 * Returns a flag that controls whether or not outlines of the areas are drawn.
 * @return The flag.
 * @see #setOutline(boolean)
 */
  public boolean isOutline(){
    return this.showOutline;
  }
  /** 
 * Sets a flag that controls whether or not outlines of the areas are drawn, and sends a                               {@link RendererChangeEvent} to all registeredlisteners.
 * @param show  the flag.
 * @see #isOutline()
 */
  public void setOutline(  boolean show){
    this.showOutline=show;
    fireChangeEvent();
  }
  /** 
 * Returns the shape used to represent an area in the legend.
 * @return The legend area (never <code>null</code>).
 * @see #setLegendArea(Shape)
 */
  public Shape getLegendArea(){
    return this.legendArea;
  }
  /** 
 * Sets the shape used as an area in each legend item and sends a                              {@link RendererChangeEvent} to all registered listeners.
 * @param area  the area (<code>null</code> not permitted).
 * @see #getLegendArea()
 */
  public void setLegendArea(  Shape area){
    if (area == null) {
      throw new IllegalArgumentException("Null 'area' argument.");
    }
    this.legendArea=area;
    fireChangeEvent();
  }
  /** 
 * Returns a default legend item for the specified series.  Subclasses should override this method to generate customised items.
 * @param datasetIndex  the dataset index (zero-based).
 * @param series  the series index (zero-based).
 * @return A legend item for the series.
 */
  public LegendItem getLegendItem(  int datasetIndex,  int series){
    LegendItem result=null;
    XYPlot xyplot=getPlot();
    if (xyplot != null) {
      XYDataset dataset=xyplot.getDataset(datasetIndex);
      if (dataset != null) {
        XYSeriesLabelGenerator lg=getLegendItemLabelGenerator();
        String label=lg.generateLabel(dataset,series);
        String description=label;
        String toolTipText=null;
        if (getLegendItemToolTipGenerator() != null) {
          toolTipText=getLegendItemToolTipGenerator().generateLabel(dataset,series);
        }
        String urlText=null;
        if (getLegendItemURLGenerator() != null) {
          urlText=getLegendItemURLGenerator().generateLabel(dataset,series);
        }
        Paint paint=lookupSeriesPaint(series);
        result=new LegendItem(label,description,toolTipText,urlText,this.legendArea,paint);
        result.setLabelFont(lookupLegendTextFont(series));
        Paint labelPaint=lookupLegendTextPaint(series);
        if (labelPaint != null) {
          result.setLabelPaint(labelPaint);
        }
        result.setDataset(dataset);
        result.setDatasetIndex(datasetIndex);
        result.setSeriesKey(dataset.getSeriesKey(series));
        result.setSeriesIndex(series);
      }
    }
    return result;
  }
  /** 
 * Draws the visual representation of a single data item.
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param dataArea  the area within which the data is being drawn.
 * @param plot  the plot (can be used to obtain standard colorinformation etc).
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param dataset  the dataset.
 * @param series  the series index (zero-based).
 * @param item  the item index (zero-based).
 * @param pass  the pass index.
 */
  public void drawItem(  Graphics2D g2,  XYItemRendererState state,  Rectangle2D dataArea,  XYPlot plot,  ValueAxis domainAxis,  ValueAxis rangeAxis,  XYDataset dataset,  int series,  int item,  boolean selected,  int pass){
    if (!getItemVisible(series,item)) {
      return;
    }
    double x1=dataset.getXValue(series,item);
    double y1=dataset.getYValue(series,item);
    if (Double.isNaN(y1)) {
      y1=0.0;
    }
    double transX1=domainAxis.valueToJava2D(x1,dataArea,plot.getDomainAxisEdge());
    double transY1=rangeAxis.valueToJava2D(y1,dataArea,plot.getRangeAxisEdge());
    double x0=dataset.getXValue(series,Math.max(item - 1,0));
    double y0=dataset.getYValue(series,Math.max(item - 1,0));
    if (Double.isNaN(y0)) {
      y0=0.0;
    }
    double transX0=domainAxis.valueToJava2D(x0,dataArea,plot.getDomainAxisEdge());
    double transY0=rangeAxis.valueToJava2D(y0,dataArea,plot.getRangeAxisEdge());
    int itemCount=dataset.getItemCount(series);
    double x2=dataset.getXValue(series,Math.min(item + 1,itemCount - 1));
    double y2=dataset.getYValue(series,Math.min(item + 1,itemCount - 1));
    if (Double.isNaN(y2)) {
      y2=0.0;
    }
    double transX2=domainAxis.valueToJava2D(x2,dataArea,plot.getDomainAxisEdge());
    double transY2=rangeAxis.valueToJava2D(y2,dataArea,plot.getRangeAxisEdge());
    double transZero=rangeAxis.valueToJava2D(0.0,dataArea,plot.getRangeAxisEdge());
    Polygon hotspot=null;
    if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {
      hotspot=new Polygon();
      hotspot.addPoint((int)transZero,(int)((transX0 + transX1) / 2.0));
      hotspot.addPoint((int)((transY0 + transY1) / 2.0),(int)((transX0 + transX1) / 2.0));
      hotspot.addPoint((int)transY1,(int)transX1);
      hotspot.addPoint((int)((transY1 + transY2) / 2.0),(int)((transX1 + transX2) / 2.0));
      hotspot.addPoint((int)transZero,(int)((transX1 + transX2) / 2.0));
    }
 else {
      hotspot=new Polygon();
      hotspot.addPoint((int)((transX0 + transX1) / 2.0),(int)transZero);
      hotspot.addPoint((int)((transX0 + transX1) / 2.0),(int)((transY0 + transY1) / 2.0));
      hotspot.addPoint((int)transX1,(int)transY1);
      hotspot.addPoint((int)((transX1 + transX2) / 2.0),(int)((transY1 + transY2) / 2.0));
      hotspot.addPoint((int)((transX1 + transX2) / 2.0),(int)transZero);
    }
    PlotOrientation orientation=plot.getOrientation();
    Paint paint=getItemPaint(series,item,selected);
    Stroke stroke=getItemStroke(series,item,selected);
    g2.setPaint(paint);
    g2.setStroke(stroke);
    g2.fill(hotspot);
    if (isOutline()) {
      g2.setStroke(lookupSeriesOutlineStroke(series));
      g2.setPaint(lookupSeriesOutlinePaint(series));
      g2.draw(hotspot);
    }
    int domainAxisIndex=plot.getDomainAxisIndex(domainAxis);
    int rangeAxisIndex=plot.getRangeAxisIndex(rangeAxis);
    XYCrosshairState crosshairState=state.getCrosshairState();
    updateCrosshairValues(crosshairState,x1,y1,domainAxisIndex,rangeAxisIndex,transX1,transY1,orientation);
    EntityCollection entities=state.getEntityCollection();
    if (entities != null) {
      addEntity(entities,hotspot,dataset,series,item,selected,0.0,0.0);
    }
  }
  /** 
 * Tests this renderer for equality with an arbitrary object.
 * @param obj  the object (<code>null</code> not permitted).
 * @return A boolean.
 */
  public boolean equals(  Object obj){
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof XYAreaRenderer2)) {
      return false;
    }
    XYAreaRenderer2 that=(XYAreaRenderer2)obj;
    if (this.showOutline != that.showOutline) {
      return false;
    }
    if (!ShapeUtilities.equal(this.legendArea,that.legendArea)) {
      return false;
    }
    return super.equals(obj);
  }
  /** 
 * Returns a clone of the renderer.
 * @return A clone.
 * @throws CloneNotSupportedException  if the renderer cannot be cloned.
 */
  public Object clone() throws CloneNotSupportedException {
    XYAreaRenderer2 clone=(XYAreaRenderer2)super.clone();
    clone.legendArea=ShapeUtilities.clone(this.legendArea);
    return clone;
  }
  /** 
 * Provides serialization support.
 * @param stream  the input stream.
 * @throws IOException  if there is an I/O error.
 * @throws ClassNotFoundException  if there is a classpath problem.
 */
  private void readObject(  ObjectInputStream stream) throws IOException, ClassNotFoundException {
    stream.defaultReadObject();
    this.legendArea=SerialUtilities.readShape(stream);
  }
  /** 
 * Provides serialization support.
 * @param stream  the output stream.
 * @throws IOException  if there is an I/O error.
 */
  private void writeObject(  ObjectOutputStream stream) throws IOException {
    stream.defaultWriteObject();
    SerialUtilities.writeShape(this.legendArea,stream);
  }
}
