line	predicate	lable
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#hashOf#?,int#479	(h ^ (h >>> 7) ^ (h >>> 4))== 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int#259	(findInsertionIndex(keys,states,key,mask))== 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#126	mask < expectedSize	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#get#?,int#187	(missingEntries)<= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#423	!(shouldGrowTable())	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#394	keys[index] > index	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#420	values[index] > previous	0
org.apache.commons.math.linear.OpenMapRealVector#double#getEntry#?,int#480	(entries.get(index))< 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int[],byte[],int,int#275	(index)> 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#418	keys[index] >= index	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#computeCapacity#?,int#159	(capacity)<= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#remove#?,int#357	(doRemove(index))> 0	0
org.apache.commons.math.linear.AbstractRealVector#void#checkIndex#?,int#76	index < 0 || index >= getDimension()	0
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,int,double#77	this.epsilon < epsilon	0
org.apache.commons.math.util.FastMath#double#abs#?,double#3410	((x < 0.0) ? -x : (x == 0.0) ? 0.0 : x)!= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#get#?,int#182	containsKey(key,index)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#428	(previous)<= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#computeCapacity#?,int#159	(capacity)== 0	0
org.apache.commons.math.linear.OpenMapRealVector#double#getEntry#?,int#480	(entries.get(index))<= 0	0
org.apache.commons.math.util.FastMath#double#ceil#?,double#3755	y == x	0
org.apache.commons.math.linear.AbstractRealVector#void#checkVectorDimensions#?,int#64	!(d != n)	0
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,int,double#75	virtualSize > dimension	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#418	keys[index] == index	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#400	(previous)== 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#int#key#?#535	(keys[current])!= 0	1
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#413	index < 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#143	mask != length	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#418	keys[index] < index	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#double#value#?#549	current < 0	0
org.apache.commons.math.util.FastMath#double#floor#?,double#3724	x != x	0
org.apache.commons.math.util.FastMath#double#floor#?,double#3741	(y)<= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#int#key#?#532	!(current < 0)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#get#?,int#186	!(states[index] == FREE)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#126	mask == expectedSize	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#142	size > length	0
org.apache.commons.math.util.FastMath#double#ceil#?,double#3757	(y)!= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#143	mask == length	0
org.apache.commons.math.util.FastMath#double#abs#?,double#3410	((x < 0.0) ? -x : (x == 0.0) ? 0.0 : x)< 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#remove#?,int#357	(doRemove(index))>= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#420	values[index] <= previous	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#423	shouldGrowTable()	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#126	mask <= capacity	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#hashOf#?,int#479	(h ^ (h >>> 7) ^ (h >>> 4))<= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#remove#?,int#356	containsKey(key,index)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#get#?,int#187	(missingEntries)< 0	0
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,int,double#77	this.epsilon == epsilon	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#125	this.missingEntries >= missingEntries	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#126	mask >= expectedSize	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#394	keys[index] <= index	0
org.apache.commons.math.util.FastMath#double#floor#?,double#3728	!(x >= TWO_POWER_52 || x <= -TWO_POWER_52)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#remove#?,int#357	(doRemove(index))<= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#428	(previous)>= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#400	(previous)!= 0	0
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,int,double#77	this.epsilon != epsilon	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#125	this.missingEntries <= missingEntries	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#125	this.missingEntries != missingEntries	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#421	newMapping	0
org.apache.commons.math.util.FastMath#double#floor#?,double#3741	(y)< 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#double#value#?#552	(values[current])> 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#int#key#?#529	referenceCount != count	0
org.apache.commons.math.util.FastMath#double#abs#?,double#3410	((x < 0.0) ? -x : (x == 0.0) ? 0.0 : x)> 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#hashOf#?,int#479	(h ^ (h >>> 7) ^ (h >>> 4))>= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#int#key#?#529	!(referenceCount != count)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int[],byte[],int,int#275	(index)< 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#int#key#?#535	(keys[current])> 0	1
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#142	size != length	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#void#advance#?#563	referenceCount != count	0
org.apache.commons.math.linear.OpenMapRealVector#double#getEntry#?,int#480	(entries.get(index))> 0	1
org.apache.commons.math.util.FastMath#double#floor#?,double#3737	y == 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#428	(previous)!= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#400	(previous)>= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#get#?,int#187	(missingEntries)== 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int#259	(findInsertionIndex(keys,states,key,mask))> 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#418	keys[index] <= key	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#126	mask != capacity	0
org.apache.commons.math.linear.OpenMapRealVector#int#getDimension#?#422	(virtualSize)!= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int#259	(findInsertionIndex(keys,states,key,mask))<= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#get#?,int#187	(missingEntries)>= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#144	count < length	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#394	keys[index] < index	1
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#400	(previous)<= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#double#value#?#552	(values[current])< 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int[],byte[],int,int#274	!(states[index] == FREE)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int[],byte[],int,int#274	states[index] == FREE	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#computeCapacity#?,int#159	(capacity)< 0	0
org.apache.commons.math.linear.OpenMapRealVector#int#getDimension#?#422	(virtualSize)< 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#397	values[index] >= previous	0
org.apache.commons.math.linear.OpenMapRealVector#void#setEntry#?,int,double#664	!(!isDefaultValue(value))	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#126	mask != expectedSize	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#remove#?,int#357	(doRemove(index))< 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#125	this.missingEntries > missingEntries	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#394	keys[index] != index	1
org.apache.commons.math.linear.OpenMapRealVector#int#getDimension#?#422	(virtualSize)== 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#126	mask < capacity	0
org.apache.commons.math.util.FastMath#double#ceil#?,double#3757	(y)>= 0	0
org.apache.commons.math.linear.OpenMapRealVector#double#getEntry#?,int#480	(entries.get(index))!= 0	1
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#126	mask <= expectedSize	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#394	keys[index] >= index	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#double#value#?#552	(values[current])== 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#397	values[index] == previous	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#boolean#containsKey#?,int#212	containsKey(key,index)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int[],byte[],int,int#275	(index)!= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#void#advance#?#563	!(referenceCount != count)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int[],byte[],int,int#275	(index)== 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#144	count != length	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#143	mask <= length	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#142	size <= length	0
org.apache.commons.math.util.FastMath#double#ceil#?,double#3755	y > x	0
org.apache.commons.math.util.FastMath#double#abs#?,double#3410	((x < 0.0) ? -x : (x == 0.0) ? 0.0 : x)== 0	0
org.apache.commons.math.linear.OpenMapRealVector#void#setEntry#?,int,double#666	!(entries.containsKey(index))	0
org.apache.commons.math.util.FastMath#double#ceil#?,double#3755	y >= x	0
org.apache.commons.math.util.FastMath#double#ceil#?,double#3756	!(y == x)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#computeCapacity#?,int#153	expectedSize == 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#126	mask > expectedSize	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int#259	(findInsertionIndex(keys,states,key,mask))>= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#125	this.missingEntries == missingEntries	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#int#key#?#532	current < 0	0
org.apache.commons.math.util.FastMath#double#ceil#?,double#3756	y == x	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#remove#?,int#356	!(containsKey(key,index))	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#428	(previous)> 0	0
org.apache.commons.math.util.FastMath#double#ceil#?,double#3751	!(x != x)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#int#key#?#535	(keys[current])>= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#computeCapacity#?,int#158	!(powerOfTwo == capacity)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#remove#?,int#357	(doRemove(index))!= 0	0
org.apache.commons.math.linear.OpenMapRealVector#void#setEntry#?,int,double#666	entries.containsKey(index)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#397	values[index] != previous	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#420	values[index] == previous	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#421	!(newMapping)	0
org.apache.commons.math.util.FastMath#double#ceil#?,double#3755	y < x	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#void#advance#?#572	!(states[++next] != FULL)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#428	(previous)< 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#double#value#?#552	(values[current])<= 0	0
org.apache.commons.math.util.FastMath#double#floor#?,double#3728	x >= TWO_POWER_52 || x <= -TWO_POWER_52	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#143	mask < length	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#420	values[index] < value	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#142	size < length	0
org.apache.commons.math.linear.OpenMapRealVector#double#getEntry#?,int#480	(entries.get(index))== 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#418	keys[index] < key	0
org.apache.commons.math.linear.AbstractRealVector#void#checkVectorDimensions#?,int#64	d != n	1
org.apache.commons.math.linear.OpenMapRealVector#int#getDimension#?#422	(virtualSize)<= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#420	values[index] < previous	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#126	mask >= capacity	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int#259	(findInsertionIndex(keys,states,key,mask))< 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#413	!(index < 0)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#double#value#?#552	(values[current])>= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#144	count > length	0
org.apache.commons.math.linear.OpenMapRealVector#void#setEntry#?,int,double#664	!isDefaultValue(value)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#418	keys[index] <= index	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#144	count == length	0
org.apache.commons.math.linear.OpenMapRealVector#OpenMapRealVector#ebeMultiply#?,RealVector#371	iter.hasNext()	1
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int#259	(findInsertionIndex(keys,states,key,mask))!= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#boolean#containsKey#?,int#216	states[index] == FREE	0
org.apache.commons.math.util.FastMath#double#floor#?,double#3741	(y)> 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#420	values[index] != previous	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#void#advance#?#572	states[++next] != FULL	0
org.apache.commons.math.linear.OpenMapRealVector#double#getEntry#?,int#480	(entries.get(index))>= 0	0
org.apache.commons.math.util.FastMath#double#floor#?,double#3741	(y)== 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#computeCapacity#?,int#159	(capacity)> 0	0
org.apache.commons.math.util.FastMath#double#floor#?,double#3741	(y)!= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#int#key#?#535	(keys[current])< 0	0
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,int,double#75	virtualSize == dimension	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#computeCapacity#?,int#159	(capacity)!= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#hashOf#?,int#479	(h ^ (h >>> 7) ^ (h >>> 4))< 0	0
org.apache.commons.math.linear.OpenMapRealVector#int#getDimension#?#422	(virtualSize)>= 0	0
org.apache.commons.math.util.FastMath#double#ceil#?,double#3751	x != x	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#computeCapacity#?,int#158	powerOfTwo == capacity	0
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,int,double#75	virtualSize < dimension	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#142	size >= length	0
org.apache.commons.math.util.FastMath#double#abs#?,double#3410	((x < 0.0) ? -x : (x == 0.0) ? 0.0 : x)<= 0	0
org.apache.commons.math.util.FastMath#double#ceil#?,double#3757	(y)> 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#get#?,int#182	!(containsKey(key,index))	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#double#value#?#546	!(referenceCount != count)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#144	count <= length	0
org.apache.commons.math.util.FastMath#double#floor#?,double#3741	(y)>= 0	0
org.apache.commons.math.linear.AbstractRealVector#void#checkIndex#?,int#76	!(index < 0 || index >= getDimension())	0
org.apache.commons.math.util.FastMath#double#floor#?,double#3733	x < 0 && y != x	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#400	(previous)< 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#boolean#containsKey#?,int#212	!(containsKey(key,index))	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#computeCapacity#?,int#153	!(expectedSize == 0)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#418	keys[index] > index	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#remove#?,int#357	(doRemove(index))== 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#420	values[index] >= value	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#boolean#containsKey#?,int#216	!(states[index] == FREE)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#computeCapacity#?,int#159	(capacity)>= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#hashOf#?,int#479	(h ^ (h >>> 7) ^ (h >>> 4))!= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#420	values[index] <= value	0
org.apache.commons.math.util.FastMath#double#floor#?,double#3724	!(x != x)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#126	mask == capacity	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#397	values[index] > previous	0
org.apache.commons.math.util.FastMath#double#ceil#?,double#3757	(y)< 0	0
org.apache.commons.math.util.FastMath#double#abs#?,double#3410	((x < 0.0) ? -x : (x == 0.0) ? 0.0 : x)>= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#394	keys[index] == index	0
org.apache.commons.math.linear.OpenMapRealVector#OpenMapRealVector#ebeMultiply#?,RealVector#371	!(iter.hasNext())	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#428	(previous)== 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#int#key#?#535	(keys[current])<= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#420	values[index] != value	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#double#value#?#546	referenceCount != count	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#144	count >= length	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#get#?,int#186	states[index] == FREE	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#418	keys[index] != index	0
org.apache.commons.math.util.FastMath#double#floor#?,double#3733	!(x < 0 && y != x)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int[],byte[],int,int#275	(index)>= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#397	values[index] < previous	0
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,int,double#77	this.epsilon > epsilon	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#get#?,int#187	(missingEntries)> 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#double#value#?#549	!(current < 0)	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#143	mask > length	0
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,int,double#77	this.epsilon <= epsilon	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#418	keys[index] == key	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#142	size == length	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int[],byte[],int,int#275	(index)<= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#418	keys[index] != key	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#400	(previous)> 0	0
org.apache.commons.math.linear.OpenMapRealVector#int#getDimension#?#422	(virtualSize)> 0	0
org.apache.commons.math.util.FastMath#double#ceil#?,double#3757	(y)== 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#125	this.missingEntries < missingEntries	0
org.apache.commons.math.util.FastMath#double#ceil#?,double#3755	y != x	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#hashOf#?,int#479	(h ^ (h >>> 7) ^ (h >>> 4))> 0	0
org.apache.commons.math.util.FastMath#double#ceil#?,double#3755	y <= x	0
org.apache.commons.math.util.FastMath#double#floor#?,double#3737	!(y == 0)	0
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,int,double#75	virtualSize != dimension	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#420	values[index] == value	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#397	values[index] <= previous	0
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,int,double#75	virtualSize <= dimension	0
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,int,double#75	virtualSize >= dimension	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#418	keys[index] >= key	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#143	mask >= length	0
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,int,double#77	this.epsilon >= epsilon	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#420	values[index] > value	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#double#value#?#552	(values[current])!= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#418	keys[index] > key	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#126	mask > capacity	0
org.apache.commons.math.util.FastMath#double#ceil#?,double#3757	(y)<= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#420	values[index] >= previous	0
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#get#?,int#187	(missingEntries)!= 0	0
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#int#key#?#535	(keys[current])== 0	0