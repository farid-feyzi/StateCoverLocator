line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math.linear.OpenMapRealVector#OpenMapRealVector#ebeMultiply#?,RealVector#371	0.5	0.5	0.5	iter.hasNext()	GT
org.apache.commons.math.linear.OpenMapRealVector#void#setEntry#?,int,double#666	0.33333333333333337	1.0	0.46666666666666673	!(entries.containsKey(index))	_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#void#advance#?#564	0.5	0.5	0.4		_
org.apache.commons.math.linear.AbstractRealVector#void#checkVectorDimensions#?,int#64	0.33333333333333337	0.5	0.3666666666666667	!(d != n)	_
org.apache.commons.math.MathRuntimeException#ConcurrentModificationException#createConcurrentModificationException#?,Localizable,Object#373	0.33333333333333337	0.0	0.2666666666666667		_
org.apache.commons.math.util.OpenIntToDoubleHashMap#boolean#containsKey#?,int#216	0.25	0.25	0.20999999999999996	states[index] == FREE	_
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,int,double#77	0.19999999999999996	0.19999999999999996	0.19999999999999996	this.epsilon == epsilon	_
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,OpenMapRealVector#182	0.19999999999999996	0.0	0.15999999999999998		_
org.apache.commons.math.linear.OpenMapRealVector#double#getEntry#?,int#480	0.11111111111111116	0.33333333333333337	0.1555555555555556	(entries.get(index))== 0	_
org.apache.commons.math.linear.OpenMapRealVector#OpenIntToDoubleHashMap#getEntries#?#208	0.1428571428571429	0.0	0.11428571428571432		_
org.apache.commons.math.linear.AbstractRealVector#void#checkIndex#?,int#76	0.09999999999999998	0.09999999999999998	0.09999999999999998	!(index < 0 || index >= getDimension())	_
org.apache.commons.math.linear.OpenMapRealVector#int#getDimension#?#422	0.07692307692307687	0.07692307692307687	0.07692307692307687	(virtualSize)!= 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#397	0.06666666666666665	0.09999999999999998	0.07333333333333332	values[index] < previous	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#144	0.06666666666666665	0.06666666666666665	0.06666666666666665	count < length	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#remove#?,int#357	0.06666666666666665	0.06666666666666665	0.06666666666666665	(doRemove(index))> 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#int#key#?#535	0.0625	0.0714285714285714	0.06428571428571428	(keys[current])<= 0	_
org.apache.commons.math.linear.OpenMapRealVector#boolean#isDefaultValue#?,double#220	0.07692307692307687	0.0	0.0615384615384615		_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#double#value#?#546	0.05882352941176472	0.05882352941176472	0.05882352941176472	!(referenceCount != count)	_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#boolean#hasNext#?#518	0.05882352941176472	0.0	0.04705882352941178		_
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#get#?,int#187	0.045454545454545414	0.052631578947368474	0.04688995215311003	(missingEntries)<= 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#?#Iterator#?#504	0.05555555555555558	0.0	0.04444444444444447		_
org.apache.commons.math.util.OpenIntToDoubleHashMap#Iterator#iterator#?#241	0.05555555555555558	0.0	0.04444444444444447		_
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,double#103	0.025000000000000022	0.0	0.020000000000000018		_
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#428	0.018181818181818188	0.024390243902439046	0.019423503325942358	(previous)== 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#125	0.01754385964912286	0.025000000000000022	0.019035087719298294	this.missingEntries >= missingEntries	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int[],byte[],int,int#275	0.018181818181818188	0.019230769230769273	0.018391608391608406	(index)== 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int#259	0.018181818181818188	0.019230769230769273	0.018391608391608406	(findInsertionIndex(keys,states,key,mask))== 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#computeCapacity#?,int#159	0.018181818181818188	0.018181818181818188	0.018181818181818188	(capacity)> 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#hashOf#?,int#479	0.01754385964912286	0.018867924528301883	0.017808672624958666	(h ^ (h >>> 7) ^ (h >>> 4))== 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#boolean#containsKey#?,int,int#385	0.018867924528301883	0.0	0.015094339622641506		_
org.apache.commons.math.util.OpenIntToDoubleHashMap#boolean#shouldGrowTable#?#469	0.018181818181818188	0.0	0.01454545454545455		_
org.apache.commons.math.util.FastMath#double#ceil#?,double#3757	0.005988023952095856	0.00649350649350644	0.006089120460377973	(y)!= 0	_
org.apache.commons.math.util.FastMath#double#floor#?,double#3741	0.0033222591362126463	0.0033670033670033517	0.0033312079823707877	(y)> 0	_
org.apache.commons.math.util.FastMath#double#abs#?,double#3410	0.0012150668286755595	0.0017636684303351524	0.0013247871490074782	((x < 0.0) ? -x : (x == 0.0) ? 0.0 : x)== 0	_
org.apache.commons.math.util.FastMath#void#splitReciprocal#?,double,double#1143	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#quadMult#?,double,double,double#1179	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowCos#?,double,double#1860	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double[]#slowLog#?,double#1781	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#expint#?,int,double#1245	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#splitMult#?,double,double,double#1086	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#split#?,double,double#1049	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#resplit#?,double#1067	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowSin#?,double,double#1804	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowexp#?,double,double#1022	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#buildSinCosTables#?#1929	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#splitAdd#?,double,double,double#1095	0.0	0.0	0.0		_
