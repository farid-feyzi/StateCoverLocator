line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math.linear.OpenMapRealVector#void#setEntry#?,int,double#666	0.9991967871485944	1.0	0.9995983935742971	!(entries.containsKey(index))	_
org.apache.commons.math.linear.OpenMapRealVector#OpenMapRealVector#ebeMultiply#?,RealVector#371	0.9995982322217757	0.9995982322217757	0.9995982322217757	iter.hasNext()	GT
org.apache.commons.math.linear.AbstractRealVector#void#checkVectorDimensions#?,int#64	0.9991967871485944	0.9995982322217757	0.999397509685185	!(d != n)	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#boolean#containsKey#?,int#216	0.9987956643918106	0.9987956643918106	0.9985952639776067	states[index] == FREE	_
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,int,double#77	0.9983948635634028	0.9983948635634028	0.9983948635634028	this.epsilon == epsilon	_
org.apache.commons.math.linear.OpenMapRealVector#double#getEntry#?,int#480	0.9967948717948718	0.9991967871485944	0.997995829471733	(entries.get(index))== 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#void#advance#?#563	0.9995982322217757	0.9995982322217757	0.9964059025380335	referenceCount != count	_
org.apache.commons.math.linear.AbstractRealVector#void#checkIndex#?,int#76	0.9963956748097716	0.9963956748097716	0.9963956748097716	!(index < 0 || index >= getDimension())	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#397	0.9944044764188649	0.9963956748097716	0.9954000756143182	values[index] < previous	_
org.apache.commons.math.linear.OpenMapRealVector#int#getDimension#?#422	0.9952	0.9952	0.9952	(virtualSize)!= 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#int#key#?#535	0.9940071913703555	0.9948020791683327	0.9944046352693441	(keys[current])<= 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#144	0.9944044764188649	0.9944044764188649	0.9944044764188649	count < length	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#remove#?,int#357	0.9944044764188649	0.9944044764188649	0.9944044764188649	(doRemove(index))> 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#double#value#?#546	0.9936102236421726	0.9936102236421726	0.9936102236421726	!(referenceCount != count)	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#get#?,int#187	0.9916301315265045	0.9928172386272944	0.9922236850768995	(missingEntries)<= 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#428	0.9787568843430369	0.9841772151898733	0.981467049766455	(previous)== 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#125	0.9779874213836478	0.9845666798575387	0.9812770506205932	this.missingEntries >= missingEntries	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int[],byte[],int,int#275	0.9787568843430369	0.9799133517132729	0.9793351180281549	(index)== 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int#259	0.9787568843430369	0.9799133517132729	0.9793351180281549	(findInsertionIndex(keys,states,key,mask))== 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#hashOf#?,int#479	0.9779874213836478	0.9795275590551182	0.978757490219383	(h ^ (h >>> 7) ^ (h >>> 4))== 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#computeCapacity#?,int#159	0.9787568843430369	0.9787568843430369	0.9787568843430369	(capacity)> 0	_
org.apache.commons.math.util.FastMath#double#ceil#?,double#3757	0.9374529012810852	0.9420673987126089	0.9397601499968471	(y)!= 0	_
org.apache.commons.math.util.FastMath#double#floor#?,double#3741	0.8923959827833572	0.8936781609195403	0.8930370718514488	(y)> 0	_
org.apache.commons.math.util.FastMath#double#abs#?,double#3410	0.7516616314199397	0.8146692861820564	0.783165458800998	((x < 0.0) ? -x : (x == 0.0) ? 0.0 : x)== 0	_
org.apache.commons.math.MathRuntimeException#ConcurrentModificationException#createConcurrentModificationException#?,Localizable,Object#373	0.9991967871485944	0.0	0.4995983935742972		_
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,OpenMapRealVector#182	0.9983948635634028	0.0	0.4991974317817014		_
org.apache.commons.math.linear.OpenMapRealVector#OpenIntToDoubleHashMap#getEntries#?#208	0.9975942261427425	0.0	0.49879711307137126		_
org.apache.commons.math.linear.OpenMapRealVector#boolean#isDefaultValue#?,double#220	0.9952	0.0	0.4976		_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#boolean#hasNext#?#518	0.9936102236421726	0.0	0.4968051118210863		_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#?#Iterator#?#504	0.9932135728542913	0.0	0.4966067864271457		_
org.apache.commons.math.util.OpenIntToDoubleHashMap#Iterator#iterator#?#241	0.9932135728542913	0.0	0.4966067864271457		_
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,double#103	0.9845666798575387	0.0	0.4922833399287693		_
org.apache.commons.math.util.OpenIntToDoubleHashMap#boolean#containsKey#?,int,int#385	0.9795275590551182	0.0	0.4897637795275591		_
org.apache.commons.math.util.OpenIntToDoubleHashMap#boolean#shouldGrowTable#?#469	0.9787568843430369	0.0	0.48937844217151844		_
org.apache.commons.math.util.FastMath#void#splitReciprocal#?,double,double#1143	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#quadMult#?,double,double,double#1179	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowCos#?,double,double#1860	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double[]#slowLog#?,double#1781	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#expint#?,int,double#1245	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#splitMult#?,double,double,double#1086	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#split#?,double,double#1049	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#resplit#?,double#1067	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowSin#?,double,double#1804	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowexp#?,double,double#1022	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#buildSinCosTables#?#1929	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#splitAdd#?,double,double,double#1095	0.0	0.0	0.0		_
