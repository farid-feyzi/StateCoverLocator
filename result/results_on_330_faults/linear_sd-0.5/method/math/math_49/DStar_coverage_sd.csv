line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math.linear.OpenMapRealVector#void#setEntry#?,int,double#666	0.5	Infinity	Infinity	!(entries.containsKey(index))	_
org.apache.commons.math.linear.OpenMapRealVector#OpenMapRealVector#ebeMultiply#?,RealVector#371	1.0	1.0	1.0	iter.hasNext()	GT
org.apache.commons.math.linear.AbstractRealVector#void#checkVectorDimensions#?,int#64	0.5	1.0	0.75	!(d != n)	_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#void#advance#?#563	1.0	1.0	0.5294117647058824	referenceCount != count	_
org.apache.commons.math.linear.OpenMapRealVector#double#getEntry#?,int#480	0.125	0.5	0.3125	(entries.get(index))== 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#boolean#containsKey#?,int#216	0.3333333333333333	0.3333333333333333	0.29166666666666663	states[index] == FREE	_
org.apache.commons.math.MathRuntimeException#ConcurrentModificationException#createConcurrentModificationException#?,Localizable,Object#373	0.5	0.0	0.25		_
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,int,double#77	0.25	0.25	0.25	this.epsilon == epsilon	_
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,OpenMapRealVector#182	0.25	0.0	0.125		_
org.apache.commons.math.linear.AbstractRealVector#void#checkIndex#?,int#76	0.1111111111111111	0.1111111111111111	0.1111111111111111	!(index < 0 || index >= getDimension())	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#397	0.07142857142857142	0.1111111111111111	0.09126984126984126	values[index] < previous	_
org.apache.commons.math.linear.OpenMapRealVector#OpenIntToDoubleHashMap#getEntries#?#208	0.16666666666666666	0.0	0.08333333333333333		_
org.apache.commons.math.linear.OpenMapRealVector#int#getDimension#?#422	0.08333333333333333	0.08333333333333333	0.08333333333333333	(virtualSize)!= 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#int#key#?#535	0.06666666666666667	0.07692307692307693	0.07179487179487179	(keys[current])<= 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#144	0.07142857142857142	0.07142857142857142	0.07142857142857142	count < length	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#remove#?,int#357	0.07142857142857142	0.07142857142857142	0.07142857142857142	(doRemove(index))> 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#double#value#?#546	0.0625	0.0625	0.0625	!(referenceCount != count)	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#get#?,int#187	0.047619047619047616	0.05555555555555555	0.051587301587301584	(missingEntries)<= 0	_
org.apache.commons.math.linear.OpenMapRealVector#boolean#isDefaultValue#?,double#220	0.08333333333333333	0.0	0.041666666666666664		_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#boolean#hasNext#?#518	0.0625	0.0	0.03125		_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#?#Iterator#?#504	0.058823529411764705	0.0	0.029411764705882353		_
org.apache.commons.math.util.OpenIntToDoubleHashMap#Iterator#iterator#?#241	0.058823529411764705	0.0	0.029411764705882353		_
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#428	0.018518518518518517	0.025	0.02175925925925926	(previous)== 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#125	0.017857142857142856	0.02564102564102564	0.021749084249084248	this.missingEntries >= missingEntries	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int[],byte[],int,int#275	0.018518518518518517	0.0196078431372549	0.01906318082788671	(index)== 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int#259	0.018518518518518517	0.0196078431372549	0.01906318082788671	(findInsertionIndex(keys,states,key,mask))== 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#hashOf#?,int#479	0.017857142857142856	0.019230769230769232	0.018543956043956044	(h ^ (h >>> 7) ^ (h >>> 4))== 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#computeCapacity#?,int#159	0.018518518518518517	0.018518518518518517	0.018518518518518517	(capacity)> 0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,double#103	0.02564102564102564	0.0	0.01282051282051282		_
org.apache.commons.math.util.OpenIntToDoubleHashMap#boolean#containsKey#?,int,int#385	0.019230769230769232	0.0	0.009615384615384616		_
org.apache.commons.math.util.OpenIntToDoubleHashMap#boolean#shouldGrowTable#?#469	0.018518518518518517	0.0	0.009259259259259259		_
org.apache.commons.math.util.FastMath#double#ceil#?,double#3757	0.006024096385542169	0.006535947712418301	0.0062800220489802345	(y)!= 0	_
org.apache.commons.math.util.FastMath#double#floor#?,double#3741	0.0033333333333333335	0.0033783783783783786	0.0033558558558558563	(y)> 0	_
org.apache.commons.math.util.FastMath#double#abs#?,double#3410	0.0012165450121654502	0.0017667844522968198	0.0014916647322311349	((x < 0.0) ? -x : (x == 0.0) ? 0.0 : x)== 0	_
org.apache.commons.math.util.FastMath#void#splitReciprocal#?,double,double#1143	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#quadMult#?,double,double,double#1179	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowCos#?,double,double#1860	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double[]#slowLog#?,double#1781	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#expint#?,int,double#1245	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#splitMult#?,double,double,double#1086	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#split#?,double,double#1049	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#resplit#?,double#1067	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowSin#?,double,double#1804	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowexp#?,double,double#1022	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#buildSinCosTables#?#1929	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#splitAdd#?,double,double,double#1095	0.0	0.0	0.0		_
