line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#VectorialPointValuePair#doOptimize#?#390	0.045454545454545414	1.0	0.808695652173913	lmPar >= xNorm	_
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#void#determineLMParameter#?,double[],double,double[],double[],double[],double[]#533	0.0625	0.5	0.41000000000000003	parl > dxNorm	_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#WeightedObservedPoint[]#getInterpolationPointsForY#?,WeightedObservedPoint[],int,int,double#274	0.33333333333333337	0.33333333333333337	0.33333333333333337	minY > maxY	_
org.apache.commons.math.analysis.function.Gaussian$Parametric#void#validateParameters#?,double[]#182	0.33333333333333337	0.33333333333333337	0.28666666666666674	param[2] <= 0	_
org.apache.commons.math.optimization.fitting.WeightedObservedPoint#?#WeightedObservedPoint#?,double,double,double#48	0.04761904761904767	0.33333333333333337	0.27619047619047626	this.weight == x	_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#double[]#basicGuess#?,WeightedObservedPoint[]#185	0.33333333333333337	0.16666666666666663	0.16666666666666663	params[2] <= fwhmApprox	_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#int#findMaxY#?,WeightedObservedPoint[]#199	0.16666666666666663	0.16666666666666663	0.16666666666666663	points[i].getY() > points[maxYIdx].getY()	_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#double#interpolateXAtY#?,WeightedObservedPoint[],int,int,double#223	0.16666666666666663	0.16666666666666663	0.16666666666666663	!(idxStep == 0)	_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#double[]#guess#?#156	0.16666666666666663	0.16666666666666663	0.16666666666666663	parameters == null	_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#?#ParameterGuesser#?,WeightedObservedPoint[]#144	0.16666666666666663	0.16666666666666663	0.1583333333333333	!(observations.length < 3)	_
org.apache.commons.math.analysis.function.Gaussian$Parametric#double#value#?,double,double[]#132	0.1428571428571429	0.1428571428571429	0.1428571428571429	(Gaussian.value(diff,param[0],i2s2))> 0	_
org.apache.commons.math.optimization.fitting.WeightedObservedPoint#double#getX#?#64	0.050000000000000044	0.125	0.11000000000000001	(x)== 0	_
org.apache.commons.math.analysis.function.Gaussian#double#value#?,double,double,double#197	0.07692307692307687	0.09999999999999998	0.09538461538461536	(norm * FastMath.exp(-xMinusMean * xMinusMean * i2s2))> 0	_
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#void#determineLMDirection#?,double[],double[],double[],double[]#688	0.04761904761904767	0.07692307692307687	0.07106227106227103	cos > dpj	_
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#void#qrDecomposition#?#828	0.022222222222222254	0.06666666666666665	0.057499999999999996	weightedResidualJacobian[j][permutation[k + dk]] >= ak2	_
org.apache.commons.math.optimization.fitting.WeightedObservedPoint#double#getY#?#71	0.050000000000000044	0.052631578947368474	0.05210526315789479	(y)!= 0	_
org.apache.commons.math.optimization.fitting.WeightedObservedPoint#double#getWeight#?#57	0.050000000000000044	0.050000000000000044	0.050000000000000044	(weight)> 0	_
org.apache.commons.math.optimization.fitting.GaussianFitter#double[]#fit#?#121	0.16666666666666663	0.0	0.03333333333333332		GT
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#boolean#isBetween#?,double,double,double#291	0.16666666666666663	0.0	0.03333333333333332		_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#Comparator<WeightedObservedPoint>#createWeightedObservedPointComparator#?#302	0.16666666666666663	0.0	0.03333333333333332		_
org.apache.commons.math.analysis.function.Gaussian$Parametric#double[]#gradient#?,double,double[]#161	0.1428571428571429	0.0	0.028571428571428574		_
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#?#LevenbergMarquardtOptimizer#?,double,double,double,double,double#212	0.019230769230769273	0.030303030303030276	0.028088578088578075	this.orthoTolerance == parRelativeTolerance	_
org.apache.commons.math.optimization.fitting.GaussianFitter#?#GaussianFitter#?,DifferentiableMultivariateVectorialOptimizer#68	0.125	0.0	0.024999999999999994		_
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer#void#updateResidualsAndCost#?#142	0.014285714285714235	0.02631578947368418	0.023909774436090193	index < i	_
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#void#qTy#?,double[]#849	0.020408163265306145	0.022727272727272707	0.022263450834879395	y[i] < gamma	_
org.apache.commons.math.optimization.fitting.CurveFitter#void#addObservedPoint#?,double,double#67	0.09999999999999998	0.0	0.01999999999999999		_
org.apache.commons.math.optimization.fitting.CurveFitter#WeightedObservedPoint[]#getObservations#?#100	0.09090909090909094	0.0	0.018181818181818184		_
org.apache.commons.math.optimization.SimpleVectorialValueChecker#boolean#converged#?,int,VectorialPointValuePair,VectorialPointValuePair#83	0.015625	0.015625	0.015576923076923066	difference > size * getRelativeThreshold() && difference > getAbsoluteThreshold()	_
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer#void#updateJacobian#?#115	0.014285714285714235	0.01449275362318836	0.014451345755693535	weightedResidualJacobian[i][j] < wi	_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#VectorialPointValuePair#optimize#?,int,FUNC,double[],double[],double[]#114	0.014084507042253502	0.014084507042253502	0.014084507042253502	!(f == null)	_
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer#VectorialPointValuePair#optimize#?,int,DifferentiableMultivariateVectorialFunction,double[],double[],double[]#246	0.014084507042253502	0.014084507042253502	0.014084507042253502	cols <= maxEval	_
org.apache.commons.math.exception.NotStrictlyPositiveException#?#NotStrictlyPositiveException#?,Number#38	0.06666666666666665	0.0	0.013333333333333327		_
org.apache.commons.math.util.FastMath#double#exp#?,double,double,double[]#812	0.004524886877828038	0.014925373134328401	0.012632340029954081	result < epsilon	_
org.apache.commons.math.util.FastMath#double#min#?,double,double#3831	0.010752688172043001	0.010869565217391353	0.010846189808321681	(a)>= 0	_
org.apache.commons.math.optimization.AbstractConvergenceChecker#double#getRelativeThreshold#?#73	0.009345794392523366	0.010204081632653073	0.010032424184627131	(relativeThreshold)> 0	_
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction#?#TheoreticalValuesFunction#?,ParametricUnivariateRealFunction#178	0.050000000000000044	0.0	0.010000000000000007		_
org.apache.commons.math.optimization.fitting.CurveFitter#double[]#fit#?,ParametricUnivariateRealFunction,double[]#126	0.050000000000000044	0.0	0.010000000000000007		_
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction#double[]#value#?,double[]#203	0.050000000000000044	0.0	0.010000000000000007		_
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction#MultivariateMatrixFunction#jacobian#?#183	0.050000000000000044	0.0	0.010000000000000007		_
org.apache.commons.math.optimization.fitting.CurveFitter#double[]#fit#?,int,ParametricUnivariateRealFunction,double[]#153	0.050000000000000044	0.0	0.010000000000000007		_
org.apache.commons.math.exception.OutOfRangeException#?#OutOfRangeException#?,Number,Number,Number#46	0.04761904761904767	0.0	0.009523809523809532		_
org.apache.commons.math.optimization.fitting.CurveFitter#void#addObservedPoint#?,double,double,double#80	0.04761904761904767	0.0	0.009523809523809532		_
org.apache.commons.math.optimization.AbstractConvergenceChecker#double#getAbsoluteThreshold#?#80	0.009433962264150941	0.009433962264150941	0.009433962264150941	(absoluteThreshold)> 0	_
org.apache.commons.math.optimization.fitting.CurveFitter#?#CurveFitter#?,DifferentiableMultivariateVectorialOptimizer#52	0.045454545454545414	0.0	0.00909090909090908		_
org.apache.commons.math.exception.NumberIsTooSmallException#?#NumberIsTooSmallException#?,Number,Number,boolean#52	0.04166666666666663	0.0	0.008333333333333325		_
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#?#LevenbergMarquardtOptimizer#?#152	0.03125	0.0	0.006249999999999999		_
org.apache.commons.math.util.FastMath#double#max#?,double,double#3911	0.004065040650406471	0.005617977528089901	0.005307390152553215	(a)> 0	_
org.apache.commons.math.util.Incrementor#void#incrementCount#?#84	0.00497512437810943	0.00497512437810943	0.00497512437810943	!(++count > maximalCount)	_
org.apache.commons.math.util.Incrementor#void#setMaximalCount#?,int#44	0.004784688995215336	0.004784688995215336	0.004784688995215336	maximalCount >= max	_
org.apache.commons.math.util.FastMath#double#exp#?,double#697	0.0036496350364964014	0.003816793893129722	0.003783362121803058	(exp(x,0.0,null))> 0	_
org.apache.commons.math.exception.util.ArgUtils#Object[]#flatten#?,Object[]#45	0.0035714285714285587	0.00347222222222221	0.0034147204529370034	o instanceof Object[]	_
org.apache.commons.math.util.FastMath#int#min#?,int,int#3784	0.0031948881789137795	0.0032051282051281937	0.0032030801998853106	((a <= b) ? a : b)!= 0	_
org.apache.commons.math.optimization.VectorialPointValuePair#double[]#getValueRef#?#97	0.01538461538461533	0.0	0.003076923076923065		_
org.apache.commons.math.exception.NumberIsTooSmallException#?#NumberIsTooSmallException#?,Localizable,Number,Number,boolean#67	0.015151515151515138	0.0	0.003030303030303027		_
org.apache.commons.math.optimization.VectorialPointValuePair#?#VectorialPointValuePair#?,double[],double[]#47	0.014285714285714235	0.0	0.0028571428571428463		_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#double[]#getTargetRef#?#165	0.014285714285714235	0.0	0.0028571428571428463		_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#double[]#getWeightRef#?#171	0.014285714285714235	0.0	0.0028571428571428463		_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#ConvergenceChecker<VectorialPointValuePair>#getConvergenceChecker#?#88	0.014084507042253502	0.0	0.0028169014084507		_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#double[]#computeObjectiveValue#?,double[]#107	0.014084507042253502	0.0	0.0028169014084507		_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#?#BaseAbstractVectorialOptimizer#?#62	0.013698630136986356	0.0	0.0027397260273972707		_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#?#BaseAbstractVectorialOptimizer#?,ConvergenceChecker<VectorialPointValuePair>#68	0.013698630136986356	0.0	0.0027397260273972707		_
org.apache.commons.math.util.FastMath#double#sqrt#?,double#277	0.0020790020790020236	0.0021413276231263545	0.002128862514301488	(Math.sqrt(a))> 0	_
org.apache.commons.math.exception.OutOfRangeException#?#OutOfRangeException#?,Localizable,Number,Number,Number#65	0.008264462809917328	0.0	0.0016528925619834652		_
org.apache.commons.math.optimization.AbstractConvergenceChecker#?#AbstractConvergenceChecker#?#53	0.008264462809917328	0.0	0.0016528925619834652		_
org.apache.commons.math.util.FastMath#double#abs#?,double#3380	0.0015082956259426794	0.001607717041800627	0.0015878327586290376	((x < 0.0) ? -x : (x == 0.0) ? 0.0 : x)> 0	_
org.apache.commons.math.util.Incrementor#void#resetCount#?#93	0.004878048780487809	0.0	9.756097560975616E-4		_
org.apache.commons.math.exception.MathIllegalNumberException#?#MathIllegalNumberException#?,Localizable,Localizable,Number,Object#50	0.004016064257028162	0.0	8.032128514056323E-4		_
org.apache.commons.math.exception.MathIllegalArgumentException#?#MathIllegalArgumentException#?,Localizable,Localizable,Object#44	0.0031055900621117516	0.0	6.211180124223502E-4		_
org.apache.commons.math.exception.MathRuntimeException#?#MathRuntimeException#?,Throwable,Localizable,Localizable,Object#67	0.0027100271002710175	0.0	5.420054200542034E-4		_
org.apache.commons.math.util.FastMath#double#slowCos#?,double,double#1809	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double[]#slowLog#?,double#1730	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#resplit#?,double#1038	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#splitAdd#?,double,double,double#1070	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#splitReciprocal#?,double,double#1107	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#quadMult#?,double,double,double#1174	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#expint#?,int,double#1185	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#splitMult#?,double,double,double#1061	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#split#?,double,double#1022	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowSin#?,double,double#1790	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowexp#?,double,double#1000	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#buildSinCosTables#?#1870	0.0	0.0	0.0		_
